{"metadata": {"dbt_schema_version": "https://schemas.getdbt.com/dbt/manifest/v12.json", "dbt_version": "1.8.4", "generated_at": "2024-08-05T20:29:53.653602Z", "invocation_id": "4c437b48-74bf-4ea2-95ea-46d227d4d619", "env": {}, "project_name": "recurly_integration_tests", "project_id": "91b1b20dde62cb63639c6fe13a5579a2", "user_id": "8929baf0-9bc1-477e-9a57-eb8b0db4da62", "send_anonymous_usage_stats": true, "adapter_type": "postgres"}, "nodes": {"seed.recurly_integration_tests.account_balance_history_data": {"database": "postgres", "schema": "recurly_integrations_tests", "name": "account_balance_history_data", "resource_type": "seed", "package_name": "recurly_integration_tests", "path": "account_balance_history_data.csv", "original_file_path": "seeds/account_balance_history_data.csv", "unique_id": "seed.recurly_integration_tests.account_balance_history_data", "fqn": ["recurly_integration_tests", "account_balance_history_data"], "alias": "account_balance_history_data", "checksum": {"name": "sha256", "checksum": "906fe028ea28fe03898ffb09dd434fb918ff8ce3131fee5f8225024dd7934f47"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "seed", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {"amount": "float"}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "delimiter": ",", "quote_columns": null}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"column_types": {"amount": "{{ 'FLOAT64' if target.type == 'bigquery' else 'float' }}"}}, "created_at": 1722889775.0324879, "relation_name": "\"postgres\".\"recurly_integrations_tests\".\"account_balance_history_data\"", "raw_code": "", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/standardized_models/billing/dbt_recurly/integration_tests", "depends_on": {"macros": []}}, "seed.recurly_integration_tests.subscription_change_history_data": {"database": "postgres", "schema": "recurly_integrations_tests", "name": "subscription_change_history_data", "resource_type": "seed", "package_name": "recurly_integration_tests", "path": "subscription_change_history_data.csv", "original_file_path": "seeds/subscription_change_history_data.csv", "unique_id": "seed.recurly_integration_tests.subscription_change_history_data", "fqn": ["recurly_integration_tests", "subscription_change_history_data"], "alias": "subscription_change_history_data", "checksum": {"name": "sha256", "checksum": "cb988b405b43fd8953831bd9761db4cae911e08586b230896b2dba78a919c701"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "seed", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {"id": "varchar", "plan_id": "varchar", "subscription_id": "varchar", "object": "varchar", "unit_amount": "float", "quantity": "bigint"}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "delimiter": ",", "quote_columns": null}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"column_types": {"id": "{{ 'string' if target.name in ('bigquery', 'spark', 'databricks') else 'varchar' }}", "plan_id": "{{ 'string' if target.name in ('bigquery', 'spark', 'databricks') else 'varchar' }}", "subscription_id": "{{ 'string' if target.name in ('bigquery', 'spark', 'databricks') else 'varchar' }}", "object": "{{ 'string' if target.name in ('bigquery', 'spark', 'databricks') else 'varchar' }}", "unit_amount": "{{ 'FLOAT64' if target.type == 'bigquery' else 'float' }}", "quantity": "{{ 'INT64' if target.type == 'bigquery' else 'bigint' }}"}}, "created_at": 1722889775.036528, "relation_name": "\"postgres\".\"recurly_integrations_tests\".\"subscription_change_history_data\"", "raw_code": "", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/standardized_models/billing/dbt_recurly/integration_tests", "depends_on": {"macros": []}}, "seed.recurly_integration_tests.credit_payment_history_data": {"database": "postgres", "schema": "recurly_integrations_tests", "name": "credit_payment_history_data", "resource_type": "seed", "package_name": "recurly_integration_tests", "path": "credit_payment_history_data.csv", "original_file_path": "seeds/credit_payment_history_data.csv", "unique_id": "seed.recurly_integration_tests.credit_payment_history_data", "fqn": ["recurly_integration_tests", "credit_payment_history_data"], "alias": "credit_payment_history_data", "checksum": {"name": "sha256", "checksum": "56f23b890ca4cdf8f9fbae1a9b76e6b220fbfc231fe1dae187a4fe1b9bc64a3c"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "seed", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {"id": "varchar", "account_id": "varchar", "applied_to_invoice_id": "varchar", "original_invoice_id": "varchar", "refund_transaction_id": "varchar", "original_credit_payment_id": "varchar", "uuid": "varchar", "amount": "float"}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "delimiter": ",", "quote_columns": null}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"column_types": {"id": "{{ 'string' if target.name in ('bigquery', 'spark', 'databricks') else 'varchar' }}", "account_id": "{{ 'string' if target.name in ('bigquery', 'spark', 'databricks') else 'varchar' }}", "applied_to_invoice_id": "{{ 'string' if target.name in ('bigquery', 'spark', 'databricks') else 'varchar' }}", "original_invoice_id": "{{ 'string' if target.name in ('bigquery', 'spark', 'databricks') else 'varchar' }}", "refund_transaction_id": "{{ 'string' if target.name in ('bigquery', 'spark', 'databricks') else 'varchar' }}", "original_credit_payment_id": "{{ 'string' if target.name in ('bigquery', 'spark', 'databricks') else 'varchar' }}", "uuid": "{{ 'string' if target.name in ('bigquery', 'spark', 'databricks') else 'varchar' }}", "amount": "{{ 'FLOAT64' if target.type == 'bigquery' else 'float' }}"}}, "created_at": 1722889775.037784, "relation_name": "\"postgres\".\"recurly_integrations_tests\".\"credit_payment_history_data\"", "raw_code": "", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/standardized_models/billing/dbt_recurly/integration_tests", "depends_on": {"macros": []}}, "seed.recurly_integration_tests.subscription_history_data": {"database": "postgres", "schema": "recurly_integrations_tests", "name": "subscription_history_data", "resource_type": "seed", "package_name": "recurly_integration_tests", "path": "subscription_history_data.csv", "original_file_path": "seeds/subscription_history_data.csv", "unique_id": "seed.recurly_integration_tests.subscription_history_data", "fqn": ["recurly_integration_tests", "subscription_history_data"], "alias": "subscription_history_data", "checksum": {"name": "sha256", "checksum": "87645b35db33f9eae9fd89708deb255039f0c30a1a6465f4b42d48c54123984f"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "seed", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {"id": "varchar", "paused_at": "timestamp", "unit_amount": "float", "add_ons_total": "float", "subtotal": "float"}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "delimiter": ",", "quote_columns": null}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"column_types": {"id": "{{ 'string' if target.name in ('bigquery', 'spark', 'databricks') else 'varchar' }}", "paused_at": "timestamp", "unit_amount": "{{ 'FLOAT64' if target.type == 'bigquery' else 'float' }}", "add_ons_total": "{{ 'FLOAT64' if target.type == 'bigquery' else 'float' }}", "subtotal": "{{ 'FLOAT64' if target.type == 'bigquery' else 'float' }}"}}, "created_at": 1722889775.039187, "relation_name": "\"postgres\".\"recurly_integrations_tests\".\"subscription_history_data\"", "raw_code": "", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/standardized_models/billing/dbt_recurly/integration_tests", "depends_on": {"macros": []}}, "seed.recurly_integration_tests.coupon_discount_data": {"database": "postgres", "schema": "recurly_integrations_tests", "name": "coupon_discount_data", "resource_type": "seed", "package_name": "recurly_integration_tests", "path": "coupon_discount_data.csv", "original_file_path": "seeds/coupon_discount_data.csv", "unique_id": "seed.recurly_integration_tests.coupon_discount_data", "fqn": ["recurly_integration_tests", "coupon_discount_data"], "alias": "coupon_discount_data", "checksum": {"name": "sha256", "checksum": "85883400ea4d6486caa27b4eabd58f65540a0641f513fd0f3299c2e9abaa9451"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "seed", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {"amount": "float"}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "delimiter": ",", "quote_columns": null}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"column_types": {"amount": "{{ 'FLOAT64' if target.type == 'bigquery' else 'float' }}"}}, "created_at": 1722889775.0403771, "relation_name": "\"postgres\".\"recurly_integrations_tests\".\"coupon_discount_data\"", "raw_code": "", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/standardized_models/billing/dbt_recurly/integration_tests", "depends_on": {"macros": []}}, "seed.recurly_integration_tests.invoice_subscription_history_data": {"database": "postgres", "schema": "recurly_integrations_tests", "name": "invoice_subscription_history_data", "resource_type": "seed", "package_name": "recurly_integration_tests", "path": "invoice_subscription_history_data.csv", "original_file_path": "seeds/invoice_subscription_history_data.csv", "unique_id": "seed.recurly_integration_tests.invoice_subscription_history_data", "fqn": ["recurly_integration_tests", "invoice_subscription_history_data"], "alias": "invoice_subscription_history_data", "checksum": {"name": "sha256", "checksum": "4528af83bfeb2d2dea0efd569b6928322007b0b2df37bd3ea85b4ae897333e83"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "seed", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "delimiter": ",", "quote_columns": null}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1722889775.041512, "relation_name": "\"postgres\".\"recurly_integrations_tests\".\"invoice_subscription_history_data\"", "raw_code": "", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/standardized_models/billing/dbt_recurly/integration_tests", "depends_on": {"macros": []}}, "seed.recurly_integration_tests.coupon_redemption_history_data": {"database": "postgres", "schema": "recurly_integrations_tests", "name": "coupon_redemption_history_data", "resource_type": "seed", "package_name": "recurly_integration_tests", "path": "coupon_redemption_history_data.csv", "original_file_path": "seeds/coupon_redemption_history_data.csv", "unique_id": "seed.recurly_integration_tests.coupon_redemption_history_data", "fqn": ["recurly_integration_tests", "coupon_redemption_history_data"], "alias": "coupon_redemption_history_data", "checksum": {"name": "sha256", "checksum": "41999ad78a986d6cc1ac961ac5190c9c5e057a1425275d3025ce5db3b54af4bf"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "seed", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "delimiter": ",", "quote_columns": null}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1722889775.0429828, "relation_name": "\"postgres\".\"recurly_integrations_tests\".\"coupon_redemption_history_data\"", "raw_code": "", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/standardized_models/billing/dbt_recurly/integration_tests", "depends_on": {"macros": []}}, "seed.recurly_integration_tests.billing_info_history_data": {"database": "postgres", "schema": "recurly_integrations_tests", "name": "billing_info_history_data", "resource_type": "seed", "package_name": "recurly_integration_tests", "path": "billing_info_history_data.csv", "original_file_path": "seeds/billing_info_history_data.csv", "unique_id": "seed.recurly_integration_tests.billing_info_history_data", "fqn": ["recurly_integration_tests", "billing_info_history_data"], "alias": "billing_info_history_data", "checksum": {"name": "sha256", "checksum": "574f6568cf20f933e8e22ca82aca142bd41edf80c672c46973ec4c98e696abf8"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "seed", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "delimiter": ",", "quote_columns": null}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1722889775.044281, "relation_name": "\"postgres\".\"recurly_integrations_tests\".\"billing_info_history_data\"", "raw_code": "", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/standardized_models/billing/dbt_recurly/integration_tests", "depends_on": {"macros": []}}, "seed.recurly_integration_tests.plan_currency_history_data": {"database": "postgres", "schema": "recurly_integrations_tests", "name": "plan_currency_history_data", "resource_type": "seed", "package_name": "recurly_integration_tests", "path": "plan_currency_history_data.csv", "original_file_path": "seeds/plan_currency_history_data.csv", "unique_id": "seed.recurly_integration_tests.plan_currency_history_data", "fqn": ["recurly_integration_tests", "plan_currency_history_data"], "alias": "plan_currency_history_data", "checksum": {"name": "sha256", "checksum": "f10521ff8b1ea1f6f4671a821642755d6af23c6a75f9d1715214201043ba6563"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "seed", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {"setup_fees": "float", "unit_amount": "float"}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "delimiter": ",", "quote_columns": null}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"column_types": {"setup_fees": "{{ 'FLOAT64' if target.type == 'bigquery' else 'float' }}", "unit_amount": "{{ 'FLOAT64' if target.type == 'bigquery' else 'float' }}"}}, "created_at": 1722889775.0455081, "relation_name": "\"postgres\".\"recurly_integrations_tests\".\"plan_currency_history_data\"", "raw_code": "", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/standardized_models/billing/dbt_recurly/integration_tests", "depends_on": {"macros": []}}, "seed.recurly_integration_tests.invoice_history_data": {"database": "postgres", "schema": "recurly_integrations_tests", "name": "invoice_history_data", "resource_type": "seed", "package_name": "recurly_integration_tests", "path": "invoice_history_data.csv", "original_file_path": "seeds/invoice_history_data.csv", "unique_id": "seed.recurly_integration_tests.invoice_history_data", "fqn": ["recurly_integration_tests", "invoice_history_data"], "alias": "invoice_history_data", "checksum": {"name": "sha256", "checksum": "a98ae803c10457527e9528f772dc5c2fb5a0cb3127074c192aa313f63bd34352"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "seed", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {"balance": "float", "paid": "float", "total": "float", "subtotal": "float", "refundable_amount": "float", "discount": "float", "tax": "float"}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "delimiter": ",", "quote_columns": null}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"column_types": {"balance": "{{ 'FLOAT64' if target.type == 'bigquery' else 'float' }}", "paid": "{{ 'FLOAT64' if target.type == 'bigquery' else 'float' }}", "total": "{{ 'FLOAT64' if target.type == 'bigquery' else 'float' }}", "subtotal": "{{ 'FLOAT64' if target.type == 'bigquery' else 'float' }}", "refundable_amount": "{{ 'FLOAT64' if target.type == 'bigquery' else 'float' }}", "discount": "{{ 'FLOAT64' if target.type == 'bigquery' else 'float' }}", "tax": "{{ 'FLOAT64' if target.type == 'bigquery' else 'float' }}"}}, "created_at": 1722889775.0467122, "relation_name": "\"postgres\".\"recurly_integrations_tests\".\"invoice_history_data\"", "raw_code": "", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/standardized_models/billing/dbt_recurly/integration_tests", "depends_on": {"macros": []}}, "seed.recurly_integration_tests.transaction_subscription_data": {"database": "postgres", "schema": "recurly_integrations_tests", "name": "transaction_subscription_data", "resource_type": "seed", "package_name": "recurly_integration_tests", "path": "transaction_subscription_data.csv", "original_file_path": "seeds/transaction_subscription_data.csv", "unique_id": "seed.recurly_integration_tests.transaction_subscription_data", "fqn": ["recurly_integration_tests", "transaction_subscription_data"], "alias": "transaction_subscription_data", "checksum": {"name": "sha256", "checksum": "04867bf827a7eebdb18ff8fbae12ca0762355297c75323830af488a16cb1f9de"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "seed", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "delimiter": ",", "quote_columns": null}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1722889775.047893, "relation_name": "\"postgres\".\"recurly_integrations_tests\".\"transaction_subscription_data\"", "raw_code": "", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/standardized_models/billing/dbt_recurly/integration_tests", "depends_on": {"macros": []}}, "seed.recurly_integration_tests.plan_history_data": {"database": "postgres", "schema": "recurly_integrations_tests", "name": "plan_history_data", "resource_type": "seed", "package_name": "recurly_integration_tests", "path": "plan_history_data.csv", "original_file_path": "seeds/plan_history_data.csv", "unique_id": "seed.recurly_integration_tests.plan_history_data", "fqn": ["recurly_integration_tests", "plan_history_data"], "alias": "plan_history_data", "checksum": {"name": "sha256", "checksum": "f1e88ba8ada050e1c0fc577dfe75bdfd7cadd9fd8840e519d1c608dc715b69a4"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "seed", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {"deleted_at": "timestamp"}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "delimiter": ",", "quote_columns": null}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"column_types": {"deleted_at": "timestamp"}}, "created_at": 1722889775.0490398, "relation_name": "\"postgres\".\"recurly_integrations_tests\".\"plan_history_data\"", "raw_code": "", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/standardized_models/billing/dbt_recurly/integration_tests", "depends_on": {"macros": []}}, "seed.recurly_integration_tests.account_history_data": {"database": "postgres", "schema": "recurly_integrations_tests", "name": "account_history_data", "resource_type": "seed", "package_name": "recurly_integration_tests", "path": "account_history_data.csv", "original_file_path": "seeds/account_history_data.csv", "unique_id": "seed.recurly_integration_tests.account_history_data", "fqn": ["recurly_integration_tests", "account_history_data"], "alias": "account_history_data", "checksum": {"name": "sha256", "checksum": "d5fe6853d30d3b2055abebde81b2ee0b586e6481bfa211e2963dd245804a4887"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "seed", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {"deleted_at": "timestamp"}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "delimiter": ",", "quote_columns": null}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"column_types": {"deleted_at": "timestamp"}}, "created_at": 1722889775.051183, "relation_name": "\"postgres\".\"recurly_integrations_tests\".\"account_history_data\"", "raw_code": "", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/standardized_models/billing/dbt_recurly/integration_tests", "depends_on": {"macros": []}}, "seed.recurly_integration_tests.account_note_history_data": {"database": "postgres", "schema": "recurly_integrations_tests", "name": "account_note_history_data", "resource_type": "seed", "package_name": "recurly_integration_tests", "path": "account_note_history_data.csv", "original_file_path": "seeds/account_note_history_data.csv", "unique_id": "seed.recurly_integration_tests.account_note_history_data", "fqn": ["recurly_integration_tests", "account_note_history_data"], "alias": "account_note_history_data", "checksum": {"name": "sha256", "checksum": "37e470c953bbaf1407e10b28ad6b67f070c5797f720901e074a440eac55a04d2"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "seed", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "delimiter": ",", "quote_columns": null}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1722889775.052594, "relation_name": "\"postgres\".\"recurly_integrations_tests\".\"account_note_history_data\"", "raw_code": "", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/standardized_models/billing/dbt_recurly/integration_tests", "depends_on": {"macros": []}}, "seed.recurly_integration_tests.invoice_coupon_redemption_history_data": {"database": "postgres", "schema": "recurly_integrations_tests", "name": "invoice_coupon_redemption_history_data", "resource_type": "seed", "package_name": "recurly_integration_tests", "path": "invoice_coupon_redemption_history_data.csv", "original_file_path": "seeds/invoice_coupon_redemption_history_data.csv", "unique_id": "seed.recurly_integration_tests.invoice_coupon_redemption_history_data", "fqn": ["recurly_integration_tests", "invoice_coupon_redemption_history_data"], "alias": "invoice_coupon_redemption_history_data", "checksum": {"name": "sha256", "checksum": "217635562f4d314870c3b01ac5037279a3ed5eca539edd9c2182a190740e5c5f"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "seed", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "delimiter": ",", "quote_columns": null}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1722889775.053782, "relation_name": "\"postgres\".\"recurly_integrations_tests\".\"invoice_coupon_redemption_history_data\"", "raw_code": "", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/standardized_models/billing/dbt_recurly/integration_tests", "depends_on": {"macros": []}}, "seed.recurly_integration_tests.line_item_history_data": {"database": "postgres", "schema": "recurly_integrations_tests", "name": "line_item_history_data", "resource_type": "seed", "package_name": "recurly_integration_tests", "path": "line_item_history_data.csv", "original_file_path": "seeds/line_item_history_data.csv", "unique_id": "seed.recurly_integration_tests.line_item_history_data", "fqn": ["recurly_integration_tests", "line_item_history_data"], "alias": "line_item_history_data", "checksum": {"name": "sha256", "checksum": "4385676270d21d16aec73da9e91e717978577a7620d72d828a4bcfd8273a36c4"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "seed", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {"subscription_id": "varchar", "discount": "float", "unit_amount": "float", "subtotal": "float", "tax": "float", "credit_applied": "float", "end_date": "timestamp"}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "delimiter": ",", "quote_columns": null}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"column_types": {"subscription_id": "{{ 'string' if target.name in ('bigquery', 'spark', 'databricks') else 'varchar' }}", "discount": "{{ 'FLOAT64' if target.type == 'bigquery' else 'float' }}", "unit_amount": "{{ 'FLOAT64' if target.type == 'bigquery' else 'float' }}", "subtotal": "{{ 'FLOAT64' if target.type == 'bigquery' else 'float' }}", "tax": "{{ 'FLOAT64' if target.type == 'bigquery' else 'float' }}", "credit_applied": "{{ 'FLOAT64' if target.type == 'bigquery' else 'float' }}", "end_date": "timestamp"}}, "created_at": 1722889775.054999, "relation_name": "\"postgres\".\"recurly_integrations_tests\".\"line_item_history_data\"", "raw_code": "", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/standardized_models/billing/dbt_recurly/integration_tests", "depends_on": {"macros": []}}, "seed.recurly_integration_tests.transaction_data": {"database": "postgres", "schema": "recurly_integrations_tests", "name": "transaction_data", "resource_type": "seed", "package_name": "recurly_integration_tests", "path": "transaction_data.csv", "original_file_path": "seeds/transaction_data.csv", "unique_id": "seed.recurly_integration_tests.transaction_data", "fqn": ["recurly_integration_tests", "transaction_data"], "alias": "transaction_data", "checksum": {"name": "sha256", "checksum": "cf5cf18657aee732b67a5c784a517d3185280475b9a6ebc1d1a9aa6fe9ce1727"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "seed", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {"amount": "float"}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "delimiter": ",", "quote_columns": null}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"column_types": {"amount": "{{ 'FLOAT64' if target.type == 'bigquery' else 'float' }}"}}, "created_at": 1722889775.056281, "relation_name": "\"postgres\".\"recurly_integrations_tests\".\"transaction_data\"", "raw_code": "", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/standardized_models/billing/dbt_recurly/integration_tests", "depends_on": {"macros": []}}, "seed.recurly_integration_tests.subscription_add_on_history_data": {"database": "postgres", "schema": "recurly_integrations_tests", "name": "subscription_add_on_history_data", "resource_type": "seed", "package_name": "recurly_integration_tests", "path": "subscription_add_on_history_data.csv", "original_file_path": "seeds/subscription_add_on_history_data.csv", "unique_id": "seed.recurly_integration_tests.subscription_add_on_history_data", "fqn": ["recurly_integration_tests", "subscription_add_on_history_data"], "alias": "subscription_add_on_history_data", "checksum": {"name": "sha256", "checksum": "e5f71383cb6fdc2b28c328e11ddd76ecebab1dfc1e25ae4d5f27aa315feda282"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "seed", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {"unit_amount": "float", "expired_at": "timestamp"}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "delimiter": ",", "quote_columns": null}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"column_types": {"unit_amount": "{{ 'FLOAT64' if target.type == 'bigquery' else 'float' }}", "expired_at": "timestamp"}}, "created_at": 1722889775.057488, "relation_name": "\"postgres\".\"recurly_integrations_tests\".\"subscription_add_on_history_data\"", "raw_code": "", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/standardized_models/billing/dbt_recurly/integration_tests", "depends_on": {"macros": []}}, "model.recurly_source.stg_recurly__invoice_coupon_redemption_history": {"database": "postgres", "schema": "recurly_integrations_tests_recurly_source", "name": "stg_recurly__invoice_coupon_redemption_history", "resource_type": "model", "package_name": "recurly_source", "path": "stg_recurly__invoice_coupon_redemption_history.sql", "original_file_path": "models/stg_recurly__invoice_coupon_redemption_history.sql", "unique_id": "model.recurly_source.stg_recurly__invoice_coupon_redemption_history", "fqn": ["recurly_source", "stg_recurly__invoice_coupon_redemption_history"], "alias": "stg_recurly__invoice_coupon_redemption_history", "checksum": {"name": "sha256", "checksum": "1dc0f820b16d6b86bd7559d0649e59df0360d93a11b37278febcb682a17fa569"}, "config": {"enabled": true, "alias": null, "schema": "recurly_source", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected"}, "tags": [], "description": "History of coupons redeemed and applied to specific invoices.", "columns": {"coupon_redemption_id": {"name": "coupon_redemption_id", "description": "Unique identifier for the credit payment.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "invoice_id": {"name": "invoice_id", "description": "Invoice the coupon redemption is associated with.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "invoice_updated_at": {"name": "invoice_updated_at", "description": "Last time the invoice was updated.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "recurly_source://models/stg_recurly.yml", "build_path": null, "unrendered_config": {"schema": "recurly_source", "materialized": "table"}, "created_at": 1722889775.628216, "relation_name": "\"postgres\".\"recurly_integrations_tests_recurly_source\".\"stg_recurly__invoice_coupon_redemption_history\"", "raw_code": "with base as (\n\n    select * \n    from {{ ref('stg_recurly__invoice_coupon_redemption_history_tmp') }}\n),\n\nfields as (\n\n    select\n        {{\n            fivetran_utils.fill_staging_columns(\n                source_columns=adapter.get_columns_in_relation(ref('stg_recurly__invoice_coupon_redemption_history_tmp')),\n                staging_columns=get_invoice_coupon_redemption_history_columns()\n            )\n        }}\n    from base\n),\n\nfinal as (\n    \n    select \n        coupon_redemption_id,\n        invoice_id,\n        cast(invoice_updated_at as {{ dbt.type_timestamp() }}) as invoice_updated_at,\n        row_number() over (partition by coupon_redemption_id order by invoice_updated_at desc) = 1 as is_most_recent_record\n    from fields\n)\n\nselect *\nfrom final", "language": "sql", "refs": [{"name": "stg_recurly__invoice_coupon_redemption_history_tmp", "package": null, "version": null}, {"name": "stg_recurly__invoice_coupon_redemption_history_tmp", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.recurly_source.get_invoice_coupon_redemption_history_columns", "macro.fivetran_utils.fill_staging_columns", "macro.dbt.type_timestamp"], "nodes": ["model.recurly_source.stg_recurly__invoice_coupon_redemption_history_tmp"]}, "compiled_path": "target/compiled/recurly_source/models/stg_recurly__invoice_coupon_redemption_history.sql", "compiled": true, "compiled_code": "with base as (\n\n    select * \n    from \"postgres\".\"recurly_integrations_tests_recurly_source\".\"stg_recurly__invoice_coupon_redemption_history_tmp\"\n),\n\nfields as (\n\n    select\n        \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    \n    \n    coupon_redemption_id\n    \n as \n    \n    coupon_redemption_id\n    \n, \n    \n    \n    invoice_id\n    \n as \n    \n    invoice_id\n    \n, \n    \n    \n    invoice_updated_at\n    \n as \n    \n    invoice_updated_at\n    \n\n\n\n    from base\n),\n\nfinal as (\n    \n    select \n        coupon_redemption_id,\n        invoice_id,\n        cast(invoice_updated_at as timestamp) as invoice_updated_at,\n        row_number() over (partition by coupon_redemption_id order by invoice_updated_at desc) = 1 as is_most_recent_record\n    from fields\n)\n\nselect *\nfrom final", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.recurly_source.stg_recurly__subscription_history": {"database": "postgres", "schema": "recurly_integrations_tests_recurly_source", "name": "stg_recurly__subscription_history", "resource_type": "model", "package_name": "recurly_source", "path": "stg_recurly__subscription_history.sql", "original_file_path": "models/stg_recurly__subscription_history.sql", "unique_id": "model.recurly_source.stg_recurly__subscription_history", "fqn": ["recurly_source", "stg_recurly__subscription_history"], "alias": "stg_recurly__subscription_history", "checksum": {"name": "sha256", "checksum": "6a34d445670620b521b63d120743eda31c20930129854b86880a9b35ca278c15"}, "config": {"enabled": true, "alias": null, "schema": "recurly_source", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected"}, "tags": [], "description": "Subscriptions are created when your customers subscribe to one of your plans.  The customer's subscription tells Recurly when and how much to bill the customer. The table holds the lineage of the subscription.\n", "columns": {"subscription_id": {"name": "subscription_id", "description": "Unique identifier for the subscription.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "updated_at": {"name": "updated_at", "description": "When the subscription was updated.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "account_id": {"name": "account_id", "description": "The account this subscription belongs to.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "activated_at": {"name": "activated_at", "description": "When the subscription was activated.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "add_ons_total": {"name": "add_ons_total", "description": "Total price of add-ons. Greater or equal to 0.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "canceled_at": {"name": "canceled_at", "description": "When the subscription was canceled. Can take future dates.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "collection_method": {"name": "collection_method", "description": "Default: \"automatic\" Enum: \"automatic\", \"manual\"\n", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "converted_at": {"name": "converted_at", "description": "When the subscription has converted from trial.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "created_at": {"name": "created_at", "description": "When the subscription was created.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "currency": {"name": "currency", "description": "3-letter ISO 4217 currency code.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "current_period_ended_at": {"name": "current_period_ended_at", "description": "Current billing period ends at.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "current_period_started_at": {"name": "current_period_started_at", "description": "Current billing period started at.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "current_term_ended_at": {"name": "current_term_ended_at", "description": "When the term ends. This is calculated by a plan's interval and total_billing_cycles in a term.  Subscription changes with a timeframe=renewal will be applied on this date.      \n", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "current_term_started_at": {"name": "current_term_started_at", "description": "The start date of the term when the first billing period starts.  The subscription term is the length of time that a customer will be committed to a subscription.  A term can span multiple billing periods.\n", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "expiration_reason": {"name": "expiration_reason", "description": "Reason for subscription expiration.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "expires_at": {"name": "expires_at", "description": "When the subscription has expired. Can take future dates.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "has_auto_renew": {"name": "has_auto_renew", "description": "Whether the subscription renews at the end of its term. Default: true\n", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "has_started_with_gift": {"name": "has_started_with_gift", "description": "Did the subscription start with a gift? Was it paid with at least one gift card credit?", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "is_most_recent_record": {"name": "is_most_recent_record", "description": "Is this the most recent record of this subscription?", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "object": {"name": "object", "description": "The object type, in this case only \"subscription\"", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "paused_at": {"name": "paused_at", "description": "Null unless subscription is paused or will pause at the end of the current billing period.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "plan_id": {"name": "plan_id", "description": "The plan this subscription belongs to.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "quantity": {"name": "quantity", "description": "Subscription quantity. Greater or equal to 0.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "remaining_billing_cycles": {"name": "remaining_billing_cycles", "description": "The remaining billing cycles in the current term.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "remaining_pause_cycles": {"name": "remaining_pause_cycles", "description": "Null unless subscription is paused or will pause at the end of the current billing period.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "renewal_billing_cycles": {"name": "renewal_billing_cycles", "description": "If auto_renew=true, when a term completes, total_billing_cycles takes this value as the length of subsequent terms.  Defaults to the plan's total_billing_cycles.\n", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "state": {"name": "state", "description": "The current state of the subscription. Enum: \"active\", \"canceled\", \"expired\", \"failed\", \"future\", \"paused\"\n", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "subtotal": {"name": "subtotal", "description": "Estimated total, before tax.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "total_billing_cycles": {"name": "total_billing_cycles", "description": "The number of cycles/billing periods in a term.  When remaining_billing_cycles=0, if auto_renew=true the subscription will renew and a new term will begin,  otherwise the subscription will expire.\n", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "trial_ends_at": {"name": "trial_ends_at", "description": "Trial period ends at.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "trial_started_at": {"name": "trial_started_at", "description": "Trial period started at.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "unit_amount": {"name": "unit_amount", "description": "Subscription unit price.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "uuid": {"name": "uuid", "description": "The UUID is useful for matching data with the CSV exports and building URLs into Recurly's UI.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "recurly_source://models/stg_recurly.yml", "build_path": null, "unrendered_config": {"schema": "recurly_source", "materialized": "table"}, "created_at": 1722889775.642359, "relation_name": "\"postgres\".\"recurly_integrations_tests_recurly_source\".\"stg_recurly__subscription_history\"", "raw_code": "with base as (\n\n    select *\n    from {{ ref('stg_recurly__subscription_history_tmp') }}\n),\n\nfields as (\n\n    select \n        {{ \n            fivetran_utils.fill_staging_columns(\n                source_columns = adapter.get_columns_in_relation(ref('stg_recurly__subscription_history_tmp')),\n                staging_columns = get_subscription_history_columns()\n            ) \n        }}\n    from base\n),\n\nfinal as (\n\n    select  \n        id as subscription_id,\n        cast(updated_at as {{ dbt.type_timestamp() }}) as updated_at,\n        account_id,\n        cast(activated_at as {{ dbt.type_timestamp() }}) as activated_at,\n        add_ons_total,\n        cast(canceled_at as {{ dbt.type_timestamp() }}) as canceled_at,\n        collection_method,\n        cast(converted_at as {{ dbt.type_timestamp() }}) as converted_at,\n        cast(created_at as {{ dbt.type_timestamp() }}) as created_at,\n        currency,\n        cast(current_period_ends_at as {{ dbt.type_timestamp() }}) as current_period_ended_at,\n        cast(current_period_started_at as {{ dbt.type_timestamp() }}) as current_period_started_at,\n        cast(current_term_ends_at as {{ dbt.type_timestamp() }}) as current_term_ended_at,\n        cast(current_term_started_at as {{ dbt.type_timestamp() }}) as current_term_started_at,\n        expiration_reason,\n        cast(expires_at as {{ dbt.type_timestamp() }}) as expires_at,\n        auto_renew as has_auto_renew,\n        started_with_gift as has_started_with_gift,\n        row_number() over (partition by id order by current_period_started_at desc) = 1 as is_most_recent_record,\n        object,\n        cast(paused_at as {{ dbt.type_timestamp() }}) as paused_at, \n        plan_id,\n        quantity,\n        remaining_billing_cycles,\n        remaining_pause_cycles,\n        renewal_billing_cycles,\n        state,\n        subtotal,\n        total_billing_cycles,\n        cast(trial_ends_at as {{ dbt.type_timestamp() }}) as trial_ends_at,\n        cast(trial_started_at as {{ dbt.type_timestamp() }}) as trial_started_at,\n        cast(unit_amount as {{ dbt.type_float() }}) as unit_amount,\n        uuid\n\n        --The below macro adds the fields defined within your accounts_pass_through_columns variable into the staging model\n        {{ fivetran_utils.fill_pass_through_columns('recurly_subscription_pass_through_columns') }}\n\n    from fields\n)\n\nselect *\nfrom final", "language": "sql", "refs": [{"name": "stg_recurly__subscription_history_tmp", "package": null, "version": null}, {"name": "stg_recurly__subscription_history_tmp", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.recurly_source.get_subscription_history_columns", "macro.fivetran_utils.fill_staging_columns", "macro.dbt.type_timestamp", "macro.dbt.type_float", "macro.fivetran_utils.fill_pass_through_columns"], "nodes": ["model.recurly_source.stg_recurly__subscription_history_tmp"]}, "compiled_path": "target/compiled/recurly_source/models/stg_recurly__subscription_history.sql", "compiled": true, "compiled_code": "with base as (\n\n    select *\n    from \"postgres\".\"recurly_integrations_tests_recurly_source\".\"stg_recurly__subscription_history_tmp\"\n),\n\nfields as (\n\n    select \n        \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    \n    \n    id\n    \n as \n    \n    id\n    \n, \n    \n    \n    created_at\n    \n as \n    \n    created_at\n    \n, \n    \n    \n    updated_at\n    \n as \n    \n    updated_at\n    \n, \n    \n    \n    activated_at\n    \n as \n    \n    activated_at\n    \n, \n    \n    \n    canceled_at\n    \n as \n    \n    canceled_at\n    \n, \n    cast(null as timestamp) as \n    \n    converted_at\n    \n , \n    \n    \n    expires_at\n    \n as \n    \n    expires_at\n    \n, \n    \n    \n    account_id\n    \n as \n    \n    account_id\n    \n, \n    \n    \n    plan_id\n    \n as \n    \n    plan_id\n    \n, \n    \n    \n    object\n    \n as \n    \n    object\n    \n, \n    \n    \n    uuid\n    \n as \n    \n    uuid\n    \n, \n    \n    \n    state\n    \n as \n    \n    state\n    \n, \n    \n    \n    current_period_started_at\n    \n as \n    \n    current_period_started_at\n    \n, \n    \n    \n    current_period_ends_at\n    \n as \n    \n    current_period_ends_at\n    \n, \n    \n    \n    current_term_started_at\n    \n as \n    \n    current_term_started_at\n    \n, \n    \n    \n    current_term_ends_at\n    \n as \n    \n    current_term_ends_at\n    \n, \n    \n    \n    trial_started_at\n    \n as \n    \n    trial_started_at\n    \n, \n    \n    \n    trial_ends_at\n    \n as \n    \n    trial_ends_at\n    \n, \n    \n    \n    remaining_billing_cycles\n    \n as \n    \n    remaining_billing_cycles\n    \n, \n    \n    \n    total_billing_cycles\n    \n as \n    \n    total_billing_cycles\n    \n, \n    \n    \n    renewal_billing_cycles\n    \n as \n    \n    renewal_billing_cycles\n    \n, \n    \n    \n    auto_renew\n    \n as \n    \n    auto_renew\n    \n, \n    \n    \n    paused_at\n    \n as \n    \n    paused_at\n    \n, \n    \n    \n    remaining_pause_cycles\n    \n as \n    \n    remaining_pause_cycles\n    \n, \n    \n    \n    currency\n    \n as \n    \n    currency\n    \n, \n    \n    \n    unit_amount\n    \n as \n    \n    unit_amount\n    \n, \n    \n    \n    quantity\n    \n as \n    \n    quantity\n    \n, \n    \n    \n    add_ons_total\n    \n as \n    \n    add_ons_total\n    \n, \n    \n    \n    subtotal\n    \n as \n    \n    subtotal\n    \n, \n    \n    \n    collection_method\n    \n as \n    \n    collection_method\n    \n, \n    \n    \n    expiration_reason\n    \n as \n    \n    expiration_reason\n    \n, \n    \n    \n    started_with_gift\n    \n as \n    \n    started_with_gift\n    \n\n\n\n    from base\n),\n\nfinal as (\n\n    select  \n        id as subscription_id,\n        cast(updated_at as timestamp) as updated_at,\n        account_id,\n        cast(activated_at as timestamp) as activated_at,\n        add_ons_total,\n        cast(canceled_at as timestamp) as canceled_at,\n        collection_method,\n        cast(converted_at as timestamp) as converted_at,\n        cast(created_at as timestamp) as created_at,\n        currency,\n        cast(current_period_ends_at as timestamp) as current_period_ended_at,\n        cast(current_period_started_at as timestamp) as current_period_started_at,\n        cast(current_term_ends_at as timestamp) as current_term_ended_at,\n        cast(current_term_started_at as timestamp) as current_term_started_at,\n        expiration_reason,\n        cast(expires_at as timestamp) as expires_at,\n        auto_renew as has_auto_renew,\n        started_with_gift as has_started_with_gift,\n        row_number() over (partition by id order by current_period_started_at desc) = 1 as is_most_recent_record,\n        object,\n        cast(paused_at as timestamp) as paused_at, \n        plan_id,\n        quantity,\n        remaining_billing_cycles,\n        remaining_pause_cycles,\n        renewal_billing_cycles,\n        state,\n        subtotal,\n        total_billing_cycles,\n        cast(trial_ends_at as timestamp) as trial_ends_at,\n        cast(trial_started_at as timestamp) as trial_started_at,\n        cast(unit_amount as float) as unit_amount,\n        uuid\n\n        --The below macro adds the fields defined within your accounts_pass_through_columns variable into the staging model\n        \n\n\n\n\n\n    from fields\n)\n\nselect *\nfrom final", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.recurly_source.stg_recurly__billing_info_history": {"database": "postgres", "schema": "recurly_integrations_tests_recurly_source", "name": "stg_recurly__billing_info_history", "resource_type": "model", "package_name": "recurly_source", "path": "stg_recurly__billing_info_history.sql", "original_file_path": "models/stg_recurly__billing_info_history.sql", "unique_id": "model.recurly_source.stg_recurly__billing_info_history", "fqn": ["recurly_source", "stg_recurly__billing_info_history"], "alias": "stg_recurly__billing_info_history", "checksum": {"name": "sha256", "checksum": "7ed75404a8e2fe8aee57d2a05ab9461362a67d1b95bf3d6f582203ba5896761b"}, "config": {"enabled": true, "alias": null, "schema": "recurly_source", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected"}, "tags": [], "description": "Stored payment information for an account. Filled out by the customer upon purchase or when they update information.", "columns": {"billing_id": {"name": "billing_id", "description": "Unique identifier for the billing info object.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "updated_at": {"name": "updated_at", "description": "Date customer's billing information was last updated on the account.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "account_id": {"name": "account_id", "description": "Account identifier for the billing info.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "billing_city": {"name": "billing_city", "description": "Billing city of the card on file for the account.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "billing_country": {"name": "billing_country", "description": "Billing country of the card on file for the account.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "billing_phone": {"name": "billing_phone", "description": "Phone number of the account.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "billing_postal_code": {"name": "billing_postal_code", "description": "Billing postal code of the card on file for the account.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "billing_region": {"name": "billing_region", "description": "Billing region of the card on file for the account, like state in the US or province in Canada.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "billing_street_1": {"name": "billing_street_1", "description": "First address line of the card on file for the account.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "billing_street_2": {"name": "billing_street_2", "description": "Second address line of the card on file for the account.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "company": {"name": "company", "description": "Company name of the account.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "created_at": {"name": "created_at", "description": "Date customer's billing information was added to the account.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "first_name": {"name": "first_name", "description": "First name of the cardholder for the account.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "is_valid": {"name": "is_valid", "description": "Is the card valid? Boolean object.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "last_name": {"name": "last_name", "description": "Last name of the cardholder for the account.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "payment_method_card_type": {"name": "payment_method_card_type", "description": "Card type of payment method, like Visa or Mastercard.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "payment_method_object": {"name": "payment_method_object", "description": "Object type of payment method, like credit card or debit card.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "updated_by_country": {"name": "updated_by_country", "description": "Country from which latest billing info update came from.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "updated_by_ip": {"name": "updated_by_ip", "description": "IP address from which latest billing info update came from.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "vat_number": {"name": "vat_number", "description": "(for EU companies), VAT number provider by customer.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "recurly_source://models/stg_recurly.yml", "build_path": null, "unrendered_config": {"schema": "recurly_source", "materialized": "table"}, "created_at": 1722889775.6233542, "relation_name": "\"postgres\".\"recurly_integrations_tests_recurly_source\".\"stg_recurly__billing_info_history\"", "raw_code": "with base as (\n\n    select *\n    from {{ ref('stg_recurly__billing_info_history_tmp') }}\n),\n\nfields as (\n    select\n        {{ \n            fivetran_utils.fill_staging_columns(\n                source_columns = adapter.get_columns_in_relation(ref('stg_recurly__billing_info_history_tmp')),\n                staging_columns = get_billing_info_history_columns()\n            ) \n        }}\n    from base\n),\n\nfinal as (\n\n    select\n        id as billing_id, \n        cast(updated_at as {{ dbt.type_timestamp() }}) as updated_at,\n        account_id,\n        billing_city,\n        billing_country,\n        billing_phone,\n        billing_postal_code,\n        billing_region,\n        billing_street_1,\n        billing_street_2,\n        company,\n        cast(created_at as {{ dbt.type_timestamp() }}) as created_at, \n        first_name,\n        valid as is_valid,\n        last_name,\n        payment_method_card_type,\n        payment_method_object,\n        updated_by_country,\n        updated_by_ip,\n        vat_number,\n        row_number() over (partition by id order by updated_at desc) = 1 as is_most_recent_record\n    from fields\n)\n\nselect *\nfrom final", "language": "sql", "refs": [{"name": "stg_recurly__billing_info_history_tmp", "package": null, "version": null}, {"name": "stg_recurly__billing_info_history_tmp", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.recurly_source.get_billing_info_history_columns", "macro.fivetran_utils.fill_staging_columns", "macro.dbt.type_timestamp"], "nodes": ["model.recurly_source.stg_recurly__billing_info_history_tmp"]}, "compiled_path": "target/compiled/recurly_source/models/stg_recurly__billing_info_history.sql", "compiled": true, "compiled_code": "with base as (\n\n    select *\n    from \"postgres\".\"recurly_integrations_tests_recurly_source\".\"stg_recurly__billing_info_history_tmp\"\n),\n\nfields as (\n    select\n        \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    \n    \n    id\n    \n as \n    \n    id\n    \n, \n    \n    \n    updated_at\n    \n as \n    \n    updated_at\n    \n, \n    \n    \n    account_id\n    \n as \n    \n    account_id\n    \n, \n    \n    \n    first_name\n    \n as \n    \n    first_name\n    \n, \n    \n    \n    last_name\n    \n as \n    \n    last_name\n    \n, \n    cast(null as TEXT) as \n    \n    company\n    \n , \n    \n    \n    billing_phone\n    \n as \n    \n    billing_phone\n    \n, \n    \n    \n    billing_street_1\n    \n as \n    \n    billing_street_1\n    \n, \n    \n    \n    billing_street_2\n    \n as \n    \n    billing_street_2\n    \n, \n    \n    \n    billing_city\n    \n as \n    \n    billing_city\n    \n, \n    \n    \n    billing_region\n    \n as \n    \n    billing_region\n    \n, \n    \n    \n    billing_postal_code\n    \n as \n    \n    billing_postal_code\n    \n, \n    \n    \n    billing_country\n    \n as \n    \n    billing_country\n    \n, \n    \n    \n    vat_number\n    \n as \n    \n    vat_number\n    \n, \n    \n    \n    valid\n    \n as \n    \n    valid\n    \n, \n    \n    \n    payment_method_object\n    \n as \n    \n    payment_method_object\n    \n, \n    cast(null as TEXT) as \n    \n    payment_method_card_type\n    \n , \n    \n    \n    payment_method_first_six\n    \n as \n    \n    payment_method_first_six\n    \n, \n    \n    \n    payment_method_last_four\n    \n as \n    \n    payment_method_last_four\n    \n, \n    \n    \n    payment_method_exp_month\n    \n as \n    \n    payment_method_exp_month\n    \n, \n    \n    \n    payment_method_exp_year\n    \n as \n    \n    payment_method_exp_year\n    \n, \n    \n    \n    fraud_score\n    \n as \n    \n    fraud_score\n    \n, \n    \n    \n    fraud_decision\n    \n as \n    \n    fraud_decision\n    \n, \n    \n    \n    fraud_risk_rules_triggered\n    \n as \n    \n    fraud_risk_rules_triggered\n    \n, \n    \n    \n    created_at\n    \n as \n    \n    created_at\n    \n, \n    \n    \n    updated_by_ip\n    \n as \n    \n    updated_by_ip\n    \n, \n    \n    \n    updated_by_country\n    \n as \n    \n    updated_by_country\n    \n\n\n\n    from base\n),\n\nfinal as (\n\n    select\n        id as billing_id, \n        cast(updated_at as timestamp) as updated_at,\n        account_id,\n        billing_city,\n        billing_country,\n        billing_phone,\n        billing_postal_code,\n        billing_region,\n        billing_street_1,\n        billing_street_2,\n        company,\n        cast(created_at as timestamp) as created_at, \n        first_name,\n        valid as is_valid,\n        last_name,\n        payment_method_card_type,\n        payment_method_object,\n        updated_by_country,\n        updated_by_ip,\n        vat_number,\n        row_number() over (partition by id order by updated_at desc) = 1 as is_most_recent_record\n    from fields\n)\n\nselect *\nfrom final", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.recurly_source.stg_recurly__plan_history": {"database": "postgres", "schema": "recurly_integrations_tests_recurly_source", "name": "stg_recurly__plan_history", "resource_type": "model", "package_name": "recurly_source", "path": "stg_recurly__plan_history.sql", "original_file_path": "models/stg_recurly__plan_history.sql", "unique_id": "model.recurly_source.stg_recurly__plan_history", "fqn": ["recurly_source", "stg_recurly__plan_history"], "alias": "stg_recurly__plan_history", "checksum": {"name": "sha256", "checksum": "c570d40a5b4e18d7c09b819205d73a4c468f86fe6556cdc1ba6d7e8ffcee2bdf"}, "config": {"enabled": true, "alias": null, "schema": "recurly_source", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected"}, "tags": [], "description": "Plans define the base price, currency, and billing cycle for recurring purchases of products. The table holds the lineage of the plan.\n", "columns": {"plan_id": {"name": "plan_id", "description": "Unique identifier for the object.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "updated_at": {"name": "updated_at", "description": "When the plan was last updated.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "accounting_code": {"name": "accounting_code", "description": "Accounting code for invoice line items for the plan. If no value is provided, it defaults to plan's code.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "code": {"name": "code", "description": "Unique code to identify the plan. This is used in Hosted Payment Page URLs and in the invoice exports.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "created_at": {"name": "created_at", "description": "When the plan was created.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "deleted_at": {"name": "deleted_at", "description": "When the plan was deleted.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "description": {"name": "description", "description": "Optional description, not displayed.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "has_auto_renew": {"name": "has_auto_renew", "description": "Subscriptions will automatically inherit this value once they are active.  If auto_renew is true, then a subscription will automatically renew its term at renewal.  If auto_renew is false, then a subscription will expire at the end of its term.  auto_renew can be overridden on the subscription record itself. Default: true\n", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "interval_length": {"name": "interval_length", "description": "Length of the plan's billing interval in interval_unit. Default: 1\n", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "interval_unit": {"name": "interval_unit", "description": "Unit for the plan's billing interval. Default: \"months\" Enum: \"days\", \"months\"\n", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "is_most_recent_record": {"name": "is_most_recent_record", "description": "Is this the most recent record of this plan?", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "is_tax_exempt": {"name": "is_tax_exempt", "description": "true exempts tax on the plan, false applies tax on the plan.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "name": {"name": "name", "description": "This name describes your plan and will appear on the Hosted Payment Page and the subscriber's invoice.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "setup_fee_accounting_code": {"name": "setup_fee_accounting_code", "description": "Accounting code for invoice line items for the plan's setup fee. If no value is provided, it defaults to plan's accounting code.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "state": {"name": "state", "description": "The current state of the plan. Enum: \"active\", \"inactive\"\n", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "tax_code": {"name": "tax_code", "description": "Used by Avalara, Vertex, and Recurly\u2019s EU VAT tax feature. The tax code values are specific to each tax system.  If you are using Recurly\u2019s EU VAT feature you can use unknown, physical, or digital.\n", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "total_billing_cycles": {"name": "total_billing_cycles", "description": "Automatically terminate subscriptions after a defined number of billing cycles.  Number of billing cycles before the plan automatically stops renewing, defaults to null for continuous, automatic renewal.\n", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "trial_length": {"name": "trial_length", "description": "Length of plan's trial period in trial_units. 0 means no trial. Default: 0\n", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "trial_unit": {"name": "trial_unit", "description": "Units for the plan's trial period. Default: \"months\" Enum: \"days\", \"months\"\n", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "recurly_source://models/stg_recurly.yml", "build_path": null, "unrendered_config": {"schema": "recurly_source", "materialized": "table"}, "created_at": 1722889775.637671, "relation_name": "\"postgres\".\"recurly_integrations_tests_recurly_source\".\"stg_recurly__plan_history\"", "raw_code": "with base as (\n\n    select *\n    from {{ ref('stg_recurly__plan_history_tmp') }}\n),\n\nfields as (\n\n    select \n        {{ \n            fivetran_utils.fill_staging_columns(\n                source_columns = adapter.get_columns_in_relation(ref('stg_recurly__plan_history_tmp')),\n                staging_columns = get_plan_history_columns()\n            ) \n        }}\n    from base\n),\n\nfinal as (\n\n    select\n        id as plan_id, \n        cast(updated_at as {{ dbt.type_timestamp() }}) as updated_at,\n        accounting_code,\n        code,\n        cast(created_at as {{ dbt.type_timestamp() }}) as created_at,\n        cast(deleted_at as {{ dbt.type_timestamp() }}) as deleted_at,\n        description,\n        auto_renew as has_auto_renew,\n        interval_length,\n        interval_unit,\n        row_number() over (partition by id order by updated_at desc) = 1 as is_most_recent_record,\n        tax_exempt as is_tax_exempt,\n        name,\n        setup_fee_accounting_code,\n        state,\n        tax_code,\n        total_billing_cycles,\n        trial_length,\n        trial_unit\n    from fields\n)\n\nselect *\nfrom final", "language": "sql", "refs": [{"name": "stg_recurly__plan_history_tmp", "package": null, "version": null}, {"name": "stg_recurly__plan_history_tmp", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.recurly_source.get_plan_history_columns", "macro.fivetran_utils.fill_staging_columns", "macro.dbt.type_timestamp"], "nodes": ["model.recurly_source.stg_recurly__plan_history_tmp"]}, "compiled_path": "target/compiled/recurly_source/models/stg_recurly__plan_history.sql", "compiled": true, "compiled_code": "with base as (\n\n    select *\n    from \"postgres\".\"recurly_integrations_tests_recurly_source\".\"stg_recurly__plan_history_tmp\"\n),\n\nfields as (\n\n    select \n        \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    \n    \n    id\n    \n as \n    \n    id\n    \n, \n    \n    \n    created_at\n    \n as \n    \n    created_at\n    \n, \n    \n    \n    updated_at\n    \n as \n    \n    updated_at\n    \n, \n    \n    \n    deleted_at\n    \n as \n    \n    deleted_at\n    \n, \n    \n    \n    code\n    \n as \n    \n    code\n    \n, \n    \n    \n    state\n    \n as \n    \n    state\n    \n, \n    \n    \n    name\n    \n as \n    \n    name\n    \n, \n    \n    \n    description\n    \n as \n    \n    description\n    \n, \n    \n    \n    interval_unit\n    \n as \n    \n    interval_unit\n    \n, \n    \n    \n    interval_length\n    \n as \n    \n    interval_length\n    \n, \n    \n    \n    trial_unit\n    \n as \n    \n    trial_unit\n    \n, \n    \n    \n    trial_length\n    \n as \n    \n    trial_length\n    \n, \n    \n    \n    total_billing_cycles\n    \n as \n    \n    total_billing_cycles\n    \n, \n    \n    \n    auto_renew\n    \n as \n    \n    auto_renew\n    \n, \n    \n    \n    accounting_code\n    \n as \n    \n    accounting_code\n    \n, \n    \n    \n    setup_fee_accounting_code\n    \n as \n    \n    setup_fee_accounting_code\n    \n, \n    \n    \n    tax_code\n    \n as \n    \n    tax_code\n    \n, \n    \n    \n    tax_exempt\n    \n as \n    \n    tax_exempt\n    \n\n\n\n    from base\n),\n\nfinal as (\n\n    select\n        id as plan_id, \n        cast(updated_at as timestamp) as updated_at,\n        accounting_code,\n        code,\n        cast(created_at as timestamp) as created_at,\n        cast(deleted_at as timestamp) as deleted_at,\n        description,\n        auto_renew as has_auto_renew,\n        interval_length,\n        interval_unit,\n        row_number() over (partition by id order by updated_at desc) = 1 as is_most_recent_record,\n        tax_exempt as is_tax_exempt,\n        name,\n        setup_fee_accounting_code,\n        state,\n        tax_code,\n        total_billing_cycles,\n        trial_length,\n        trial_unit\n    from fields\n)\n\nselect *\nfrom final", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.recurly_source.stg_recurly__invoice_history": {"database": "postgres", "schema": "recurly_integrations_tests_recurly_source", "name": "stg_recurly__invoice_history", "resource_type": "model", "package_name": "recurly_source", "path": "stg_recurly__invoice_history.sql", "original_file_path": "models/stg_recurly__invoice_history.sql", "unique_id": "model.recurly_source.stg_recurly__invoice_history", "fqn": ["recurly_source", "stg_recurly__invoice_history"], "alias": "stg_recurly__invoice_history", "checksum": {"name": "sha256", "checksum": "3ff0877f8ab978d98302470c946a0d5f8919024f02fb73d77c24bc0f3cc583cf"}, "config": {"enabled": true, "alias": null, "schema": "recurly_source", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected"}, "tags": [], "description": "An invoice relates charges, credits, and payments together.  When a subscription is created or renewed or a charge is created on the account,  Recurly will sum the charges, discount or tax as appropriate, and send the invoice out for collection.  The table holds the lineage of the invoice.\n", "columns": {"invoice_id": {"name": "invoice_id", "description": "Unique identifier for the object.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "updated_at": {"name": "updated_at", "description": "When the invoice was last updated.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "account_id": {"name": "account_id", "description": "The account this invoice belongs to.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "balance": {"name": "balance", "description": "The outstanding balance remaining on this invoice.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "closed_at": {"name": "closed_at", "description": "Date invoice was marked paid or failed.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "collection_method": {"name": "collection_method", "description": "An automatic invoice means a corresponding transaction is run using the account's billing information  at the same time the invoice is created. Manual invoices are created without a corresponding transaction.  The merchant must enter a manual payment transaction or have the customer pay the invoice with an automatic method,  like credit card, PayPal, Amazon, or ACH bank payment. Default: \"automatic\" Enum: \"automatic\", \"manual\"\n", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "created_at": {"name": "created_at", "description": "When the invoice was created.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "currency": {"name": "currency", "description": "3-letter ISO 4217 currency code.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "discount": {"name": "discount", "description": "Total discounts applied to this invoice.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "due_at": {"name": "due_at", "description": "Date invoice is due. This is the date the net terms are reached.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "is_most_recent_record": {"name": "is_most_recent_record", "description": "Is this the most recent record of this invoice?", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "net_terms": {"name": "net_terms", "description": "Integer representing the number of days after an invoice's creation that the invoice will become past due.  If an invoice's net terms are set to '0', it is due 'On Receipt' and will become past due 24 hours after it\u2019s created.  If an invoice is due net 30, it will become past due at 31 days exactly. Default: 0\n", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "number": {"name": "number", "description": "If VAT taxation and the Country Invoice Sequencing feature are enabled,  invoices will have country-specific invoice numbers for invoices billed to EU countries (e.g. FR1001).  Non-EU invoices will continue to use the site-level invoice number sequence.\n", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "origin": {"name": "origin", "description": "The event that created the invoice. Enum: \"credit\", \"gift_card\", \"immediate_change\", \"line_item_refund\", \"open_amount_refund\",  \"purchase\", \"renewal\", \"termination\", \"write_off\", \"prepayment\". \n", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "paid": {"name": "paid", "description": "The total amount of successful payments transaction on this invoice.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "po_number": {"name": "po_number", "description": "For manual invoicing, this identifies the PO number associated with the subscription.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "previous_invoice_id": {"name": "previous_invoice_id", "description": "On refund invoices, this value will exist and show the invoice ID of the purchase invoice the refund was created from.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "refundable_amount": {"name": "refundable_amount", "description": "The refundable amount on a charge invoice. It will be null for all other invoices.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "state": {"name": "state", "description": "The invoice state.  Enum: \"open\", \"pending\", \"processing\", \"past_due\", \"paid\", \"closed\", \"failed\", \"voided\"\n", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "subtotal": {"name": "subtotal", "description": "The summation of charges, discounts, and credits, before tax.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "tax": {"name": "tax", "description": "The total tax on this invoice.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "tax_rate": {"name": "tax_rate", "description": "The rate of the tax.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "tax_region": {"name": "tax_region", "description": "Provides the tax region applied on an invoice. For U.S. Sales Tax,  this will be the 2 letter state code.  For EU VAT this will be the 2 letter country code.  For all country level tax types, this will display the regional tax, like VAT, GST, or PST.\n", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "tax_type": {"name": "tax_type", "description": "Provides the tax type as \"vat\" for EU VAT, \"usst\" for U.S. Sales Tax,  or the 2 letter country code for country level tax types like Canada, Australia, New Zealand, Israel, and all non-EU European countries.\n", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "total": {"name": "total", "description": "The final total on this invoice. The summation of invoice charges, discounts, credits, and tax. Alternative the summation of subtotal and tax.\n", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "type": {"name": "type", "description": "Invoices are either \"charge\", \"credit\", or \"legacy\" invoices.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "recurly_source://models/stg_recurly.yml", "build_path": null, "unrendered_config": {"schema": "recurly_source", "materialized": "table"}, "created_at": 1722889775.631284, "relation_name": "\"postgres\".\"recurly_integrations_tests_recurly_source\".\"stg_recurly__invoice_history\"", "raw_code": "with base as (\n\n    select *\n    from {{ ref('stg_recurly__invoice_history_tmp') }}\n),\n\nfields as (\n\n    select\n        {{ \n            fivetran_utils.fill_staging_columns(\n                source_columns = adapter.get_columns_in_relation(ref('stg_recurly__invoice_history_tmp')),\n                staging_columns = get_invoice_history_columns()\n            ) \n        }}\n    from base\n),\n\nfinal as (\n\n    select\n        id as invoice_id, \n        cast(updated_at as {{ dbt.type_timestamp() }}) as updated_at,\n        account_id,\n        cast(balance as {{ dbt.type_float() }}) as balance,\n        cast(closed_at as {{ dbt.type_timestamp() }}) as closed_at,\n        collection_method,\n        cast(created_at as {{ dbt.type_timestamp() }}) as created_at,\n        currency,\n        discount,\n        cast(due_at as {{ dbt.type_timestamp() }}) as due_at,\n        row_number() over (partition by id order by updated_at desc) = 1 as is_most_recent_record,\n        net_terms,\n        number,\n        origin,\n        paid,\n        po_number,        \n        previous_invoice_id,\n        refundable_amount,\n        state,\n        subtotal,\n        tax,\n        tax_rate,\n        tax_region,\n        tax_type,\n        total,\n        type\n    from fields\n)\n\nselect *\nfrom final", "language": "sql", "refs": [{"name": "stg_recurly__invoice_history_tmp", "package": null, "version": null}, {"name": "stg_recurly__invoice_history_tmp", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.recurly_source.get_invoice_history_columns", "macro.fivetran_utils.fill_staging_columns", "macro.dbt.type_timestamp", "macro.dbt.type_float"], "nodes": ["model.recurly_source.stg_recurly__invoice_history_tmp"]}, "compiled_path": "target/compiled/recurly_source/models/stg_recurly__invoice_history.sql", "compiled": true, "compiled_code": "with base as (\n\n    select *\n    from \"postgres\".\"recurly_integrations_tests_recurly_source\".\"stg_recurly__invoice_history_tmp\"\n),\n\nfields as (\n\n    select\n        \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    \n    \n    id\n    \n as \n    \n    id\n    \n, \n    \n    \n    created_at\n    \n as \n    \n    created_at\n    \n, \n    \n    \n    updated_at\n    \n as \n    \n    updated_at\n    \n, \n    \n    \n    due_at\n    \n as \n    \n    due_at\n    \n, \n    \n    \n    closed_at\n    \n as \n    \n    closed_at\n    \n, \n    \n    \n    account_id\n    \n as \n    \n    account_id\n    \n, \n    \n    \n    previous_invoice_id\n    \n as \n    \n    previous_invoice_id\n    \n, \n    \n    \n    type\n    \n as \n    \n    type\n    \n, \n    \n    \n    origin\n    \n as \n    \n    origin\n    \n, \n    \n    \n    state\n    \n as \n    \n    state\n    \n, \n    \n    \n    number\n    \n as \n    \n    number\n    \n, \n    \n    \n    collection_method\n    \n as \n    \n    collection_method\n    \n, \n    \n    \n    po_number\n    \n as \n    \n    po_number\n    \n, \n    \n    \n    net_terms\n    \n as \n    \n    net_terms\n    \n, \n    \n    \n    currency\n    \n as \n    \n    currency\n    \n, \n    \n    \n    balance\n    \n as \n    \n    balance\n    \n, \n    \n    \n    paid\n    \n as \n    \n    paid\n    \n, \n    \n    \n    total\n    \n as \n    \n    total\n    \n, \n    \n    \n    subtotal\n    \n as \n    \n    subtotal\n    \n, \n    \n    \n    refundable_amount\n    \n as \n    \n    refundable_amount\n    \n, \n    \n    \n    discount\n    \n as \n    \n    discount\n    \n, \n    \n    \n    tax\n    \n as \n    \n    tax\n    \n, \n    \n    \n    tax_type\n    \n as \n    \n    tax_type\n    \n, \n    \n    \n    tax_region\n    \n as \n    \n    tax_region\n    \n, \n    \n    \n    tax_rate\n    \n as \n    \n    tax_rate\n    \n\n\n\n    from base\n),\n\nfinal as (\n\n    select\n        id as invoice_id, \n        cast(updated_at as timestamp) as updated_at,\n        account_id,\n        cast(balance as float) as balance,\n        cast(closed_at as timestamp) as closed_at,\n        collection_method,\n        cast(created_at as timestamp) as created_at,\n        currency,\n        discount,\n        cast(due_at as timestamp) as due_at,\n        row_number() over (partition by id order by updated_at desc) = 1 as is_most_recent_record,\n        net_terms,\n        number,\n        origin,\n        paid,\n        po_number,        \n        previous_invoice_id,\n        refundable_amount,\n        state,\n        subtotal,\n        tax,\n        tax_rate,\n        tax_region,\n        tax_type,\n        total,\n        type\n    from fields\n)\n\nselect *\nfrom final", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.recurly_source.stg_recurly__account_balance_history": {"database": "postgres", "schema": "recurly_integrations_tests_recurly_source", "name": "stg_recurly__account_balance_history", "resource_type": "model", "package_name": "recurly_source", "path": "stg_recurly__account_balance_history.sql", "original_file_path": "models/stg_recurly__account_balance_history.sql", "unique_id": "model.recurly_source.stg_recurly__account_balance_history", "fqn": ["recurly_source", "stg_recurly__account_balance_history"], "alias": "stg_recurly__account_balance_history", "checksum": {"name": "sha256", "checksum": "80970ca832675bcb9e7cffe33b181f3d7a452227b130a024e7fab1e207ea64a2"}, "config": {"enabled": true, "alias": null, "schema": "recurly_source", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected"}, "tags": [], "description": "The customer account balance is made up of any open or past due invoices on the account alongside any charge or credit adjustments that are left uninvoiced and open on the account respectively.", "columns": {"account_id": {"name": "account_id", "description": "The account the balance update is associated with.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "account_updated_at": {"name": "account_updated_at", "description": "When the account balance was last changed.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "amount": {"name": "amount", "description": "The combined amount of charge or credit adjustments that are left uninvoiced and open on the account.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "currency": {"name": "currency", "description": "3-letter ISO 4217 currency code (USD for US Dollar)", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "past_due": {"name": "past_due", "description": "Is the existing amount of this balance due?", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "recurly_source://models/stg_recurly.yml", "build_path": null, "unrendered_config": {"schema": "recurly_source", "materialized": "table"}, "created_at": 1722889775.616648, "relation_name": "\"postgres\".\"recurly_integrations_tests_recurly_source\".\"stg_recurly__account_balance_history\"", "raw_code": "with base as (\n\n    select * \n    from {{ ref('stg_recurly__account_balance_history_tmp') }}\n),\n\nfields as (\n\n    select\n        {{\n            fivetran_utils.fill_staging_columns(\n                source_columns=adapter.get_columns_in_relation(ref('stg_recurly__account_balance_history_tmp')),\n                staging_columns=get_account_balance_history_columns()\n            )\n        }}\n    from base\n),\n\nfinal as (\n    \n    select \n        account_id, \n        cast(account_updated_at as {{ dbt.type_timestamp() }}) as account_updated_at,\n        cast(amount as {{ dbt.type_float() }}) as amount,\n        currency,\n        past_due,\n        row_number() over (partition by account_id order by account_updated_at desc) = 1 as is_most_recent_record\n    from fields\n)\n\nselect *\nfrom final", "language": "sql", "refs": [{"name": "stg_recurly__account_balance_history_tmp", "package": null, "version": null}, {"name": "stg_recurly__account_balance_history_tmp", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.recurly_source.get_account_balance_history_columns", "macro.fivetran_utils.fill_staging_columns", "macro.dbt.type_timestamp", "macro.dbt.type_float"], "nodes": ["model.recurly_source.stg_recurly__account_balance_history_tmp"]}, "compiled_path": "target/compiled/recurly_source/models/stg_recurly__account_balance_history.sql", "compiled": true, "compiled_code": "with base as (\n\n    select * \n    from \"postgres\".\"recurly_integrations_tests_recurly_source\".\"stg_recurly__account_balance_history_tmp\"\n),\n\nfields as (\n\n    select\n        \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    \n    \n    account_id\n    \n as \n    \n    account_id\n    \n, \n    \n    \n    account_updated_at\n    \n as \n    \n    account_updated_at\n    \n, \n    \n    \n    amount\n    \n as \n    \n    amount\n    \n, \n    \n    \n    currency\n    \n as \n    \n    currency\n    \n, \n    \n    \n    past_due\n    \n as \n    \n    past_due\n    \n\n\n\n    from base\n),\n\nfinal as (\n    \n    select \n        account_id, \n        cast(account_updated_at as timestamp) as account_updated_at,\n        cast(amount as float) as amount,\n        currency,\n        past_due,\n        row_number() over (partition by account_id order by account_updated_at desc) = 1 as is_most_recent_record\n    from fields\n)\n\nselect *\nfrom final", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.recurly_source.stg_recurly__plan_currency_history": {"database": "postgres", "schema": "recurly_integrations_tests_recurly_source", "name": "stg_recurly__plan_currency_history", "resource_type": "model", "package_name": "recurly_source", "path": "stg_recurly__plan_currency_history.sql", "original_file_path": "models/stg_recurly__plan_currency_history.sql", "unique_id": "model.recurly_source.stg_recurly__plan_currency_history", "fqn": ["recurly_source", "stg_recurly__plan_currency_history"], "alias": "stg_recurly__plan_currency_history", "checksum": {"name": "sha256", "checksum": "ec32b714a9f43a34e809b900bc80a05e292f175a702fff29e7b861816bd6c6b4"}, "config": {"enabled": true, "alias": null, "schema": "recurly_source", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected"}, "tags": [], "description": "Plan prices", "columns": {"plan_id": {"name": "plan_id", "description": "The id of the plan.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "plan_updated_at": {"name": "plan_updated_at", "description": "Last time plan updated.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "currency": {"name": "currency", "description": "3-letter ISO 4217 currency code.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "setup_fees": {"name": "setup_fees", "description": "Fee automatically charged at the beginning of a subscription billing cycle.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "unit_amount": {"name": "unit_amount", "description": "Amount for one plan.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "recurly_source://models/stg_recurly.yml", "build_path": null, "unrendered_config": {"schema": "recurly_source", "materialized": "table"}, "created_at": 1722889775.6361659, "relation_name": "\"postgres\".\"recurly_integrations_tests_recurly_source\".\"stg_recurly__plan_currency_history\"", "raw_code": "with base as (\n\n    select *\n    from {{ ref('stg_recurly__plan_currency_history_tmp') }}\n),\n\nfields as (\n\n    select \n        {{ \n            fivetran_utils.fill_staging_columns(\n                source_columns = adapter.get_columns_in_relation(ref('stg_recurly__plan_currency_history_tmp')),\n                staging_columns = get_plan_currency_history_columns()\n            ) \n        }}\n    from base\n),\n\nfinal as (\n\n    select\n        plan_id,\n        cast(plan_updated_at as {{ dbt.type_timestamp() }}) as plan_updated_at,\n        currency,\n        setup_fees,\n        cast(unit_amount as {{ dbt.type_float() }}) as unit_amount,\n        row_number() over (partition by plan_id order by plan_updated_at desc) = 1 as is_most_recent_record\n    from fields\n)\n\nselect *\nfrom final", "language": "sql", "refs": [{"name": "stg_recurly__plan_currency_history_tmp", "package": null, "version": null}, {"name": "stg_recurly__plan_currency_history_tmp", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.recurly_source.get_plan_currency_history_columns", "macro.fivetran_utils.fill_staging_columns", "macro.dbt.type_timestamp", "macro.dbt.type_float"], "nodes": ["model.recurly_source.stg_recurly__plan_currency_history_tmp"]}, "compiled_path": "target/compiled/recurly_source/models/stg_recurly__plan_currency_history.sql", "compiled": true, "compiled_code": "with base as (\n\n    select *\n    from \"postgres\".\"recurly_integrations_tests_recurly_source\".\"stg_recurly__plan_currency_history_tmp\"\n),\n\nfields as (\n\n    select \n        \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    \n    \n    plan_id\n    \n as \n    \n    plan_id\n    \n, \n    \n    \n    plan_updated_at\n    \n as \n    \n    plan_updated_at\n    \n, \n    \n    \n    currency\n    \n as \n    \n    currency\n    \n, \n    \n    \n    setup_fees\n    \n as \n    \n    setup_fees\n    \n, \n    \n    \n    unit_amount\n    \n as \n    \n    unit_amount\n    \n\n\n\n    from base\n),\n\nfinal as (\n\n    select\n        plan_id,\n        cast(plan_updated_at as timestamp) as plan_updated_at,\n        currency,\n        setup_fees,\n        cast(unit_amount as float) as unit_amount,\n        row_number() over (partition by plan_id order by plan_updated_at desc) = 1 as is_most_recent_record\n    from fields\n)\n\nselect *\nfrom final", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.recurly_source.stg_recurly__coupon_discount": {"database": "postgres", "schema": "recurly_integrations_tests_recurly_source", "name": "stg_recurly__coupon_discount", "resource_type": "model", "package_name": "recurly_source", "path": "stg_recurly__coupon_discount.sql", "original_file_path": "models/stg_recurly__coupon_discount.sql", "unique_id": "model.recurly_source.stg_recurly__coupon_discount", "fqn": ["recurly_source", "stg_recurly__coupon_discount"], "alias": "stg_recurly__coupon_discount", "checksum": {"name": "sha256", "checksum": "653368c04970968208959d8e860d81c5ff297814de802098377dbd58efeca85c"}, "config": {"enabled": true, "alias": null, "schema": "recurly_source", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected"}, "tags": [], "description": "Coupon details and the discounts set for customer purchases.", "columns": {"fivetran_id": {"name": "fivetran_id", "description": "Combined unique surrogate key for the model.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "coupon_id": {"name": "coupon_id", "description": "Coupon details and the discounts set for customer purchases.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "amount": {"name": "amount", "description": "Fixed amount discount being applied, if applicable. Percentage would be null if amount exists.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "currency": {"name": "currency", "description": "3-letter ISO 4217 currency code (USD for US Dollar).", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "percentage": {"name": "percentage", "description": "Percentage discount being applied, if applicable. Amount would be null if percentage exists.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "trial_length": {"name": "trial_length", "description": "Period of time that coupon will discount eligible purchases by customer.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "trial_unit": {"name": "trial_unit", "description": "Unit of time associated with trial time ('day', 'week', 'month')", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "type": {"name": "type", "description": "Delineates between which type of discount is being applied ('fixed' for amount discount, 'percent' for percentage discount)", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "recurly_source://models/stg_recurly.yml", "build_path": null, "unrendered_config": {"schema": "recurly_source", "materialized": "table"}, "created_at": 1722889775.624539, "relation_name": "\"postgres\".\"recurly_integrations_tests_recurly_source\".\"stg_recurly__coupon_discount\"", "raw_code": "with base as (\n\n    select * \n    from {{ ref('stg_recurly__coupon_discount_tmp') }}\n),\n\nfields as (\n\n    select\n        {{\n            fivetran_utils.fill_staging_columns(\n                source_columns=adapter.get_columns_in_relation(ref('stg_recurly__coupon_discount_tmp')),\n                staging_columns=get_coupon_discount_columns()\n            )\n        }}\n    from base\n),\n\nfinal as (\n    \n    select \n        coupon_id,\n        cast(amount as {{ dbt.type_float() }}) as amount,\n        currency,\n        fivetran_id,\n        percentage,\n        trial_length,\n        trial_unit,\n        type\n    from fields\n)\n\nselect *\nfrom final", "language": "sql", "refs": [{"name": "stg_recurly__coupon_discount_tmp", "package": null, "version": null}, {"name": "stg_recurly__coupon_discount_tmp", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.recurly_source.get_coupon_discount_columns", "macro.fivetran_utils.fill_staging_columns", "macro.dbt.type_float"], "nodes": ["model.recurly_source.stg_recurly__coupon_discount_tmp"]}, "compiled_path": "target/compiled/recurly_source/models/stg_recurly__coupon_discount.sql", "compiled": true, "compiled_code": "with base as (\n\n    select * \n    from \"postgres\".\"recurly_integrations_tests_recurly_source\".\"stg_recurly__coupon_discount_tmp\"\n),\n\nfields as (\n\n    select\n        \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    \n    \n    amount\n    \n as \n    \n    amount\n    \n, \n    \n    \n    coupon_id\n    \n as \n    \n    coupon_id\n    \n, \n    \n    \n    currency\n    \n as \n    \n    currency\n    \n, \n    \n    \n    fivetran_id\n    \n as \n    \n    fivetran_id\n    \n, \n    \n    \n    percentage\n    \n as \n    \n    percentage\n    \n, \n    \n    \n    trial_length\n    \n as \n    \n    trial_length\n    \n, \n    \n    \n    trial_unit\n    \n as \n    \n    trial_unit\n    \n, \n    \n    \n    type\n    \n as \n    \n    type\n    \n\n\n\n    from base\n),\n\nfinal as (\n    \n    select \n        coupon_id,\n        cast(amount as float) as amount,\n        currency,\n        fivetran_id,\n        percentage,\n        trial_length,\n        trial_unit,\n        type\n    from fields\n)\n\nselect *\nfrom final", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.recurly_source.stg_recurly__subscription_change_history": {"database": "postgres", "schema": "recurly_integrations_tests_recurly_source", "name": "stg_recurly__subscription_change_history", "resource_type": "model", "package_name": "recurly_source", "path": "stg_recurly__subscription_change_history.sql", "original_file_path": "models/stg_recurly__subscription_change_history.sql", "unique_id": "model.recurly_source.stg_recurly__subscription_change_history", "fqn": ["recurly_source", "stg_recurly__subscription_change_history"], "alias": "stg_recurly__subscription_change_history", "checksum": {"name": "sha256", "checksum": "2ce3dddb4e7165d0294df628cfc26c62be62baacd70bd2955805c9162b7c3cf1"}, "config": {"enabled": true, "alias": null, "schema": "recurly_source", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected"}, "tags": [], "description": "History of subscription changes, particularly upgrades and downgrades, but also changes to how subscription is invoiced.", "columns": {"subscription_change_id": {"name": "subscription_change_id", "description": "Unique identifier for subscription change.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "updated_at": {"name": "updated_at", "description": "Last modification of subscription change.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "activate_at": {"name": "activate_at", "description": "Date at which subscription changes.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "activated": {"name": "activated", "description": "Is the subscription change currently active?", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "created_at": {"name": "created_at", "description": "When the subscription was last created.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "deleted_at": {"name": "deleted_at", "description": "When subscription was rendered to be inactive.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "object": {"name": "object", "description": "Object type of subscription change.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "plan_id": {"name": "plan_id", "description": "Plan id associated with subscription change.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "quantity": {"name": "quantity", "description": "Quantity of subscriptions changed.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "subscription_id": {"name": "subscription_id", "description": "Subscription ID associated with subscription change.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "unit_amount": {"name": "unit_amount", "description": "Amount of one unit subscription.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "recurly_source://models/stg_recurly.yml", "build_path": null, "unrendered_config": {"schema": "recurly_source", "materialized": "table", "enabled": true}, "created_at": 1722889775.639294, "relation_name": "\"postgres\".\"recurly_integrations_tests_recurly_source\".\"stg_recurly__subscription_change_history\"", "raw_code": "{{ config(enabled=var('recurly__using_subscription_change_history', true)) }}\n\nwith base as (\n\n    select * \n    from {{ ref('stg_recurly__subscription_change_history_tmp') }}\n),\n\nfields as (\n\n    select\n        {{\n            fivetran_utils.fill_staging_columns(\n                source_columns=adapter.get_columns_in_relation(ref('stg_recurly__subscription_change_history_tmp')),\n                staging_columns=get_subscription_change_history_columns()\n            )\n        }}\n    from base\n),\n\nfinal as (\n    \n    select \n        id as subscription_change_id, \n        cast(updated_at as {{ dbt.type_timestamp() }}) as updated_at, \n        cast(activate_at as {{ dbt.type_timestamp() }}) as activate_at,\n        activated, \n        cast(created_at as {{ dbt.type_timestamp() }}) as created_at,\n        cast(deleted_at as {{ dbt.type_timestamp() }}) as deleted_at,\n        object,\n        plan_id,\n        quantity,\n        subscription_id,\n        unit_amount,\n        row_number() over (partition by id order by updated_at desc) = 1 as is_most_recent_record\n    from fields\n) \n\nselect *\nfrom final", "language": "sql", "refs": [{"name": "stg_recurly__subscription_change_history_tmp", "package": null, "version": null}, {"name": "stg_recurly__subscription_change_history_tmp", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.recurly_source.get_subscription_change_history_columns", "macro.fivetran_utils.fill_staging_columns", "macro.dbt.type_timestamp"], "nodes": ["model.recurly_source.stg_recurly__subscription_change_history_tmp"]}, "compiled_path": "target/compiled/recurly_source/models/stg_recurly__subscription_change_history.sql", "compiled": true, "compiled_code": "\n\nwith base as (\n\n    select * \n    from \"postgres\".\"recurly_integrations_tests_recurly_source\".\"stg_recurly__subscription_change_history_tmp\"\n),\n\nfields as (\n\n    select\n        \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    \n    \n    id\n    \n as \n    \n    id\n    \n, \n    \n    \n    updated_at\n    \n as \n    \n    updated_at\n    \n, \n    \n    \n    plan_id\n    \n as \n    \n    plan_id\n    \n, \n    \n    \n    subscription_id\n    \n as \n    \n    subscription_id\n    \n, \n    \n    \n    object\n    \n as \n    \n    object\n    \n, \n    \n    \n    unit_amount\n    \n as \n    \n    unit_amount\n    \n, \n    \n    \n    quantity\n    \n as \n    \n    quantity\n    \n, \n    \n    \n    activate_at\n    \n as \n    \n    activate_at\n    \n, \n    \n    \n    activated\n    \n as \n    \n    activated\n    \n, \n    \n    \n    created_at\n    \n as \n    \n    created_at\n    \n, \n    \n    \n    deleted_at\n    \n as \n    \n    deleted_at\n    \n\n\n\n    from base\n),\n\nfinal as (\n    \n    select \n        id as subscription_change_id, \n        cast(updated_at as timestamp) as updated_at, \n        cast(activate_at as timestamp) as activate_at,\n        activated, \n        cast(created_at as timestamp) as created_at,\n        cast(deleted_at as timestamp) as deleted_at,\n        object,\n        plan_id,\n        quantity,\n        subscription_id,\n        unit_amount,\n        row_number() over (partition by id order by updated_at desc) = 1 as is_most_recent_record\n    from fields\n) \n\nselect *\nfrom final", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.recurly_source.stg_recurly__account_note_history": {"database": "postgres", "schema": "recurly_integrations_tests_recurly_source", "name": "stg_recurly__account_note_history", "resource_type": "model", "package_name": "recurly_source", "path": "stg_recurly__account_note_history.sql", "original_file_path": "models/stg_recurly__account_note_history.sql", "unique_id": "model.recurly_source.stg_recurly__account_note_history", "fqn": ["recurly_source", "stg_recurly__account_note_history"], "alias": "stg_recurly__account_note_history", "checksum": {"name": "sha256", "checksum": "4d0be3bd7df93f3da312e6cf5c32b2da2259de2f0ac13f34fef8e5a59ebc2df1"}, "config": {"enabled": true, "alias": null, "schema": "recurly_source", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected"}, "tags": [], "description": "A history of notes your team can leave on an account to add context. Notes are internal and not exposed to customers.", "columns": {"account_note_id": {"name": "account_note_id", "description": "Uniquely identifies the account note created.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "account_id": {"name": "account_id", "description": "Account associated with the note created.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "account_updated_at": {"name": "account_updated_at", "description": "Last time the account note was updated.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "created_at": {"name": "created_at", "description": "Date/time When the note was created.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "message": {"name": "message", "description": "Contents of the note created.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "object": {"name": "object", "description": "Object type of account note.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "user_email": {"name": "user_email", "description": "Email associated with who created the note.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "user_id": {"name": "user_id", "description": "Id associated with who created the note.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "recurly_source://models/stg_recurly.yml", "build_path": null, "unrendered_config": {"schema": "recurly_source", "materialized": "table"}, "created_at": 1722889775.621112, "relation_name": "\"postgres\".\"recurly_integrations_tests_recurly_source\".\"stg_recurly__account_note_history\"", "raw_code": "with base as (\n\n    select * \n    from {{ ref('stg_recurly__account_note_history_tmp') }}\n),\n\nfields as (\n\n    select\n        {{\n            fivetran_utils.fill_staging_columns(\n                source_columns=adapter.get_columns_in_relation(ref('stg_recurly__account_note_history_tmp')),\n                staging_columns=get_account_note_history_columns()\n            )\n        }}\n    from base\n),\n\nfinal as (\n    \n    select \n        id as account_note_id, \n        account_id,\n        cast(account_updated_at as {{ dbt.type_timestamp() }}) as account_updated_at,\n        cast(created_at as {{ dbt.type_timestamp() }}) as created_at,\n        message,\n        object,\n        user_email,\n        user_id,\n        row_number() over (partition by id order by account_updated_at desc) = 1 as is_most_recent_record\n    from fields\n)\n\nselect *\nfrom final", "language": "sql", "refs": [{"name": "stg_recurly__account_note_history_tmp", "package": null, "version": null}, {"name": "stg_recurly__account_note_history_tmp", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.recurly_source.get_account_note_history_columns", "macro.fivetran_utils.fill_staging_columns", "macro.dbt.type_timestamp"], "nodes": ["model.recurly_source.stg_recurly__account_note_history_tmp"]}, "compiled_path": "target/compiled/recurly_source/models/stg_recurly__account_note_history.sql", "compiled": true, "compiled_code": "with base as (\n\n    select * \n    from \"postgres\".\"recurly_integrations_tests_recurly_source\".\"stg_recurly__account_note_history_tmp\"\n),\n\nfields as (\n\n    select\n        \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    \n    \n    account_id\n    \n as \n    \n    account_id\n    \n, \n    \n    \n    account_updated_at\n    \n as \n    \n    account_updated_at\n    \n, \n    \n    \n    created_at\n    \n as \n    \n    created_at\n    \n, \n    \n    \n    id\n    \n as \n    \n    id\n    \n, \n    \n    \n    message\n    \n as \n    \n    message\n    \n, \n    \n    \n    object\n    \n as \n    \n    object\n    \n, \n    \n    \n    user_email\n    \n as \n    \n    user_email\n    \n, \n    \n    \n    user_id\n    \n as \n    \n    user_id\n    \n\n\n\n    from base\n),\n\nfinal as (\n    \n    select \n        id as account_note_id, \n        account_id,\n        cast(account_updated_at as timestamp) as account_updated_at,\n        cast(created_at as timestamp) as created_at,\n        message,\n        object,\n        user_email,\n        user_id,\n        row_number() over (partition by id order by account_updated_at desc) = 1 as is_most_recent_record\n    from fields\n)\n\nselect *\nfrom final", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.recurly_source.stg_recurly__transaction_subscription": {"database": "postgres", "schema": "recurly_integrations_tests_recurly_source", "name": "stg_recurly__transaction_subscription", "resource_type": "model", "package_name": "recurly_source", "path": "stg_recurly__transaction_subscription.sql", "original_file_path": "models/stg_recurly__transaction_subscription.sql", "unique_id": "model.recurly_source.stg_recurly__transaction_subscription", "fqn": ["recurly_source", "stg_recurly__transaction_subscription"], "alias": "stg_recurly__transaction_subscription", "checksum": {"name": "sha256", "checksum": "9a2f98fde478387b854af9ab61e87d752f335a9aa8bcc00296854a0fa6fdeeb0"}, "config": {"enabled": true, "alias": null, "schema": "recurly_source", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected"}, "tags": [], "description": "The connection between transaction and subscription.  FK on transaction is transaction_id, and on subscription is subscription_id.\n", "columns": {"transaction_id": {"name": "transaction_id", "description": "The id of the transaction associated with the subscription.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "subscription_id": {"name": "subscription_id", "description": "The id of the subscription associated with the transaction.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "recurly_source://models/stg_recurly.yml", "build_path": null, "unrendered_config": {"schema": "recurly_source", "materialized": "table"}, "created_at": 1722889775.642901, "relation_name": "\"postgres\".\"recurly_integrations_tests_recurly_source\".\"stg_recurly__transaction_subscription\"", "raw_code": "with base as (\n\n    select *\n    from {{ ref('stg_recurly__transaction_subscription_tmp') }}\n),\n\nfields as (\n\n    select \n        {{ \n            fivetran_utils.fill_staging_columns(\n                source_columns = adapter.get_columns_in_relation(ref('stg_recurly__transaction_subscription_tmp')),\n                staging_columns = get_transaction_subscription_columns()\n            ) \n        }}\n    from base\n\n),\n\nfinal as (\n\n    select\n        transaction_id, \n        subscription_id\n    from fields\n)\n\nselect *\nfrom final", "language": "sql", "refs": [{"name": "stg_recurly__transaction_subscription_tmp", "package": null, "version": null}, {"name": "stg_recurly__transaction_subscription_tmp", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.recurly_source.get_transaction_subscription_columns", "macro.fivetran_utils.fill_staging_columns"], "nodes": ["model.recurly_source.stg_recurly__transaction_subscription_tmp"]}, "compiled_path": "target/compiled/recurly_source/models/stg_recurly__transaction_subscription.sql", "compiled": true, "compiled_code": "with base as (\n\n    select *\n    from \"postgres\".\"recurly_integrations_tests_recurly_source\".\"stg_recurly__transaction_subscription_tmp\"\n),\n\nfields as (\n\n    select \n        \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    \n    \n    transaction_id\n    \n as \n    \n    transaction_id\n    \n, \n    \n    \n    subscription_id\n    \n as \n    \n    subscription_id\n    \n\n\n\n    from base\n\n),\n\nfinal as (\n\n    select\n        transaction_id, \n        subscription_id\n    from fields\n)\n\nselect *\nfrom final", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.recurly_source.stg_recurly__transaction": {"database": "postgres", "schema": "recurly_integrations_tests_recurly_source", "name": "stg_recurly__transaction", "resource_type": "model", "package_name": "recurly_source", "path": "stg_recurly__transaction.sql", "original_file_path": "models/stg_recurly__transaction.sql", "unique_id": "model.recurly_source.stg_recurly__transaction", "fqn": ["recurly_source", "stg_recurly__transaction"], "alias": "stg_recurly__transaction", "checksum": {"name": "sha256", "checksum": "22d77569daf38f752569b9f6fbbdbef58106eb2156397e41c350e029c853c0d8"}, "config": {"enabled": true, "alias": null, "schema": "recurly_source", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected"}, "tags": [], "description": "Purchasing information is sent to your payment gateway in an action called a transaction.  This includes the customer's billing information and the amount of money to be charged, voided, or refunded.\n", "columns": {"transaction_id": {"name": "transaction_id", "description": "Unique identifier for the object.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "created_at": {"name": "created_at", "description": "When the transaction was created.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "account_id": {"name": "account_id", "description": "The account_id this transaction belongs to.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "amount": {"name": "amount", "description": "Total transaction amount sent to the payment gateway.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "billing_city": {"name": "billing_city", "description": "Billing info - City", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "billing_country": {"name": "billing_country", "description": "Billing info - Country, 2-letter ISO code.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "billing_first_name": {"name": "billing_first_name", "description": "Billing info - First name", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "billing_last_name": {"name": "billing_last_name", "description": "Billing info - Last name", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "billing_phone": {"name": "billing_phone", "description": "Billing info - Phone", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "billing_postal_code": {"name": "billing_postal_code", "description": "Billing info - Zip or postal code.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "billing_region": {"name": "billing_region", "description": "Billing info - State or province.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "billing_street_1": {"name": "billing_street_1", "description": "Billing info - Address Street 1", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "billing_street_2": {"name": "billing_street_2", "description": "Billing info - Address Street 2", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "collected_at": {"name": "collected_at", "description": "When the transaction was collected.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "collection_method": {"name": "collection_method", "description": "The method by which the payment was collected. Enum: \"automatic\", \"manual\"\n", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "currency": {"name": "currency", "description": "3-letter ISO 4217 currency code.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "customer_message": {"name": "customer_message", "description": "For declined (success=false) transactions, the message displayed to the customer.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "customer_message_locale": {"name": "customer_message_locale", "description": "Language code for the message", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "gateway_approval_code": {"name": "gateway_approval_code", "description": "Transaction approval code from the payment gateway.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "gateway_message": {"name": "gateway_message", "description": "Transaction message from the payment gateway.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "gateway_reference": {"name": "gateway_reference", "description": "Transaction reference number from the payment gateway.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "gateway_response_code": {"name": "gateway_response_code", "description": "For declined transactions (`success=false`), this field lists the gateway error code.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "gateway_response_time": {"name": "gateway_response_time", "description": "Time, in seconds, for gateway to process the transaction.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "gateway_response_values": {"name": "gateway_response_values", "description": "The values in this field will vary from gateway to gateway.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "invoice_id": {"name": "invoice_id", "description": "The invoice_id this transaction belongs to.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "is_most_recent_record": {"name": "is_most_recent_record", "description": "Is this the most recent record of this transaction?", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "is_refunded": {"name": "is_refunded", "description": "Indicates if part or all of this transaction was refunded.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "is_successful": {"name": "is_successful", "description": "Did this transaction complete successfully? True or False", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "origin": {"name": "origin", "description": "Describes how the transaction was triggered. Enum: \"api\", \"chargeback\", \"force_collect\", \"hpp\", \"merchant\", \"recurly_admin\", \"recurlyjs\", \"recurring\", \"refunded_externally\", \"transparent\"\n", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "original_transaction_id": {"name": "original_transaction_id", "description": "If this transaction is a refund (type=refund), this will be the ID of the original transaction on the invoice being refunded.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "payment_gateway_id": {"name": "payment_gateway_id", "description": "Payment gateway id", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "payment_gateway_name": {"name": "payment_gateway_name", "description": "Payment gateway name", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "payment_gateway_type": {"name": "payment_gateway_type", "description": "Payment gateway type", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "payment_method_object": {"name": "payment_method_object", "description": "Enum: \"amazon\", \"amazon_billing_agreement\", \"apple_pay\", \"bank_account_info\", \"check\", \"credit_card\", \"eft\",  \"gateway_token\", \"iban_bank_account\", \"money_order\", \"other\", \"paypal\", \"paypal_billing_agreement\", \"roku\",  \"sepadirectdebit\", \"wire_transfer\"\n", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "status": {"name": "status", "description": "The current transaction status. Note that the status may change, e.g. a pending transaction may become declined or success may later become void. Enum: \"chargeback\", \"declined\", \"error\", \"pending\", \"processing\", \"scheduled\", \"success\", \"void\"\n", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "status_code": {"name": "status_code", "description": "Status code of the transaction", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "status_message": {"name": "status_message", "description": "For declined (success=false) transactions, the message displayed to the merchant.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "type": {"name": "type", "description": "Transaction types:\n  authorization \u2013 verifies billing information and places a hold on money in the customer's account.\n  capture \u2013 captures funds held by an authorization and completes a purchase.\n  purchase \u2013 combines the authorization and capture in one transaction.\n  refund \u2013 returns all or a portion of the money collected in a previous transaction to the customer.\n  verify \u2013 a $0 or $1 transaction used to verify billing information which is immediately voided.\nEnum: \"authorization\", \"capture\", \"purchase\", \"refund\", \"verify\"\n", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "uuid": {"name": "uuid", "description": "The UUID is useful for matching data with the CSV exports and building URLs into Recurly's UI.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "voided_at": {"name": "voided_at", "description": "When the transaction was voided.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "voided_by_invoice_id": {"name": "voided_by_invoice_id", "description": "The invoice_id this transaction was voided.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "recurly_source://models/stg_recurly.yml", "build_path": null, "unrendered_config": {"schema": "recurly_source", "materialized": "table"}, "created_at": 1722889775.646639, "relation_name": "\"postgres\".\"recurly_integrations_tests_recurly_source\".\"stg_recurly__transaction\"", "raw_code": "with base as (\n\n    select *\n    from {{ ref('stg_recurly__transaction_tmp') }}\n),\n\nfields as (\n\n    select\n        {{ \n            fivetran_utils.fill_staging_columns(\n                source_columns = adapter.get_columns_in_relation(ref('stg_recurly__transaction_tmp')),\n                staging_columns = get_transaction_columns()\n            ) \n        }}\n    from base\n),\n\nfinal as (\n\n    select  \n        id as transaction_id,\n        cast(created_at as {{ dbt.type_timestamp() }}) as created_at,\n        account_id,\n        cast(amount as {{ dbt.type_float() }}) as amount,\n        billing_city,\n        billing_country,\n        billing_first_name,\n        billing_last_name,\n        billing_phone,\n        billing_postal_code,\n        billing_region,\n        billing_street_1,\n        billing_street_2,\n        cast(collected_at as {{ dbt.type_timestamp() }}) as collected_at,\n        collection_method,\n        currency,\n        customer_message,\n        customer_message_locale,\n        gateway_approval_code,\n        gateway_message,\n        gateway_reference,\n        gateway_response_code,\n        gateway_response_time,\n        gateway_response_values,\n        invoice_id,\n        refunded as is_refunded,\n        success as is_successful,\n        row_number() over (partition by id order by created_at desc) = 1 as is_most_recent_record,\n        origin,\n        original_transaction_id, \n        payment_gateway_id,\n        payment_gateway_name,\n        payment_gateway_type,\n        payment_method_object,\n        status,\n        status_code,\n        status_message,\n        TYPE as type,\n        uuid,\n        cast(voided_at as {{ dbt.type_timestamp() }}) as voided_at,\n        voided_by_invoice_id\n    from fields\n)\n\nselect *\nfrom final", "language": "sql", "refs": [{"name": "stg_recurly__transaction_tmp", "package": null, "version": null}, {"name": "stg_recurly__transaction_tmp", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.recurly_source.get_transaction_columns", "macro.fivetran_utils.fill_staging_columns", "macro.dbt.type_timestamp", "macro.dbt.type_float"], "nodes": ["model.recurly_source.stg_recurly__transaction_tmp"]}, "compiled_path": "target/compiled/recurly_source/models/stg_recurly__transaction.sql", "compiled": true, "compiled_code": "with base as (\n\n    select *\n    from \"postgres\".\"recurly_integrations_tests_recurly_source\".\"stg_recurly__transaction_tmp\"\n),\n\nfields as (\n\n    select\n        \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    \n    \n    id\n    \n as \n    \n    id\n    \n, \n    \n    \n    created_at\n    \n as \n    \n    created_at\n    \n, \n    \n    \n    voided_at\n    \n as \n    \n    voided_at\n    \n, \n    \n    \n    collected_at\n    \n as \n    \n    collected_at\n    \n, \n    \n    \n    original_transaction_id\n    \n as \n    \n    original_transaction_id\n    \n, \n    \n    \n    account_id\n    \n as \n    \n    account_id\n    \n, \n    \n    \n    invoice_id\n    \n as \n    \n    invoice_id\n    \n, \n    \n    \n    voided_by_invoice_id\n    \n as \n    \n    voided_by_invoice_id\n    \n, \n    \n    \n    uuid\n    \n as \n    \n    uuid\n    \n, \n    \n    \n    type\n    \n as \n    \n    type\n    \n, \n    \n    \n    origin\n    \n as \n    \n    origin\n    \n, \n    \n    \n    currency\n    \n as \n    \n    currency\n    \n, \n    \n    \n    amount\n    \n as \n    \n    amount\n    \n, \n    \n    \n    status\n    \n as \n    \n    status\n    \n, \n    \n    \n    success\n    \n as \n    \n    success\n    \n, \n    \n    \n    refunded\n    \n as \n    \n    refunded\n    \n, \n    \n    \n    billing_first_name\n    \n as \n    \n    billing_first_name\n    \n, \n    \n    \n    billing_last_name\n    \n as \n    \n    billing_last_name\n    \n, \n    \n    \n    billing_phone\n    \n as \n    \n    billing_phone\n    \n, \n    \n    \n    billing_street_1\n    \n as \n    \n    billing_street_1\n    \n, \n    \n    \n    billing_street_2\n    \n as \n    \n    billing_street_2\n    \n, \n    \n    \n    billing_city\n    \n as \n    \n    billing_city\n    \n, \n    \n    \n    billing_region\n    \n as \n    \n    billing_region\n    \n, \n    \n    \n    billing_postal_code\n    \n as \n    \n    billing_postal_code\n    \n, \n    \n    \n    billing_country\n    \n as \n    \n    billing_country\n    \n, \n    \n    \n    collection_method\n    \n as \n    \n    collection_method\n    \n, \n    \n    \n    payment_method_object\n    \n as \n    \n    payment_method_object\n    \n, \n    \n    \n    status_code\n    \n as \n    \n    status_code\n    \n, \n    \n    \n    status_message\n    \n as \n    \n    status_message\n    \n, \n    \n    \n    customer_message\n    \n as \n    \n    customer_message\n    \n, \n    \n    \n    customer_message_locale\n    \n as \n    \n    customer_message_locale\n    \n, \n    \n    \n    gateway_message\n    \n as \n    \n    gateway_message\n    \n, \n    \n    \n    gateway_reference\n    \n as \n    \n    gateway_reference\n    \n, \n    \n    \n    gateway_approval_code\n    \n as \n    \n    gateway_approval_code\n    \n, \n    \n    \n    gateway_response_code\n    \n as \n    \n    gateway_response_code\n    \n, \n    \n    \n    gateway_response_time\n    \n as \n    \n    gateway_response_time\n    \n, \n    \n    \n    payment_gateway_id\n    \n as \n    \n    payment_gateway_id\n    \n, \n    cast(null as TEXT) as \n    \n    payment_gateway_type\n    \n , \n    \n    \n    payment_gateway_name\n    \n as \n    \n    payment_gateway_name\n    \n, \n    \n    \n    gateway_response_values\n    \n as \n    \n    gateway_response_values\n    \n\n\n\n    from base\n),\n\nfinal as (\n\n    select  \n        id as transaction_id,\n        cast(created_at as timestamp) as created_at,\n        account_id,\n        cast(amount as float) as amount,\n        billing_city,\n        billing_country,\n        billing_first_name,\n        billing_last_name,\n        billing_phone,\n        billing_postal_code,\n        billing_region,\n        billing_street_1,\n        billing_street_2,\n        cast(collected_at as timestamp) as collected_at,\n        collection_method,\n        currency,\n        customer_message,\n        customer_message_locale,\n        gateway_approval_code,\n        gateway_message,\n        gateway_reference,\n        gateway_response_code,\n        gateway_response_time,\n        gateway_response_values,\n        invoice_id,\n        refunded as is_refunded,\n        success as is_successful,\n        row_number() over (partition by id order by created_at desc) = 1 as is_most_recent_record,\n        origin,\n        original_transaction_id, \n        payment_gateway_id,\n        payment_gateway_name,\n        payment_gateway_type,\n        payment_method_object,\n        status,\n        status_code,\n        status_message,\n        TYPE as type,\n        uuid,\n        cast(voided_at as timestamp) as voided_at,\n        voided_by_invoice_id\n    from fields\n)\n\nselect *\nfrom final", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.recurly_source.stg_recurly__invoice_subscription_history": {"database": "postgres", "schema": "recurly_integrations_tests_recurly_source", "name": "stg_recurly__invoice_subscription_history", "resource_type": "model", "package_name": "recurly_source", "path": "stg_recurly__invoice_subscription_history.sql", "original_file_path": "models/stg_recurly__invoice_subscription_history.sql", "unique_id": "model.recurly_source.stg_recurly__invoice_subscription_history", "fqn": ["recurly_source", "stg_recurly__invoice_subscription_history"], "alias": "stg_recurly__invoice_subscription_history", "checksum": {"name": "sha256", "checksum": "c3bc784afd9a954bcbaf52012a51f1d465825d78ee9f557a4f8a0e3157504268"}, "config": {"enabled": true, "alias": null, "schema": "recurly_source", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected"}, "tags": [], "description": "The connection between invoices and subscription.  FK on invoice are both invoice_id and invoice_updated_at, and on subscription is subscription_id. The table holds the lineage of the invoice - subscription connection.\n", "columns": {"invoice_id": {"name": "invoice_id", "description": "The id of the invoice associated with the subscription.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "invoice_updated_at": {"name": "invoice_updated_at", "description": "When the invoice was updated.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "subscription_id": {"name": "subscription_id", "description": "The id of the subscription associated with the invoice.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "recurly_source://models/stg_recurly.yml", "build_path": null, "unrendered_config": {"schema": "recurly_source", "materialized": "table"}, "created_at": 1722889775.631862, "relation_name": "\"postgres\".\"recurly_integrations_tests_recurly_source\".\"stg_recurly__invoice_subscription_history\"", "raw_code": "with base as (\n\n    select *\n    from {{ ref('stg_recurly__invoice_subscription_history_tmp') }}\n),\n\nfields as (\n\n    select \n        {{ \n            fivetran_utils.fill_staging_columns(\n                source_columns = adapter.get_columns_in_relation(ref('stg_recurly__invoice_subscription_history_tmp')),\n                staging_columns = get_invoice_subscription_history_columns()\n            ) \n        }}\n    from base\n),\n\nfinal as (\n\n    select\n        invoice_id,\n        cast(invoice_updated_at as {{ dbt.type_timestamp() }}) as invoice_updated_at,\n        subscription_id,\n        row_number() over (partition by invoice_id order by invoice_updated_at desc) = 1 as is_most_recent_record\n    from fields\n)\nselect *\nfrom final", "language": "sql", "refs": [{"name": "stg_recurly__invoice_subscription_history_tmp", "package": null, "version": null}, {"name": "stg_recurly__invoice_subscription_history_tmp", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.recurly_source.get_invoice_subscription_history_columns", "macro.fivetran_utils.fill_staging_columns", "macro.dbt.type_timestamp"], "nodes": ["model.recurly_source.stg_recurly__invoice_subscription_history_tmp"]}, "compiled_path": "target/compiled/recurly_source/models/stg_recurly__invoice_subscription_history.sql", "compiled": true, "compiled_code": "with base as (\n\n    select *\n    from \"postgres\".\"recurly_integrations_tests_recurly_source\".\"stg_recurly__invoice_subscription_history_tmp\"\n),\n\nfields as (\n\n    select \n        \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    \n    \n    invoice_id\n    \n as \n    \n    invoice_id\n    \n, \n    \n    \n    invoice_updated_at\n    \n as \n    \n    invoice_updated_at\n    \n, \n    \n    \n    subscription_id\n    \n as \n    \n    subscription_id\n    \n\n\n\n    from base\n),\n\nfinal as (\n\n    select\n        invoice_id,\n        cast(invoice_updated_at as timestamp) as invoice_updated_at,\n        subscription_id,\n        row_number() over (partition by invoice_id order by invoice_updated_at desc) = 1 as is_most_recent_record\n    from fields\n)\nselect *\nfrom final", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.recurly_source.stg_recurly__account_history": {"database": "postgres", "schema": "recurly_integrations_tests_recurly_source", "name": "stg_recurly__account_history", "resource_type": "model", "package_name": "recurly_source", "path": "stg_recurly__account_history.sql", "original_file_path": "models/stg_recurly__account_history.sql", "unique_id": "model.recurly_source.stg_recurly__account_history", "fqn": ["recurly_source", "stg_recurly__account_history"], "alias": "stg_recurly__account_history", "checksum": {"name": "sha256", "checksum": "84d726b0da0bd8d11ea3126e05b964b02d9c34cc547b9bde35122e0f27343ef2"}, "config": {"enabled": true, "alias": null, "schema": "recurly_source", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected"}, "tags": [], "description": "The account object stores the entire Recurly history of your customer and  acts as the entry point for working with a customer's billing information, subscription data, transactions, invoices and more.  Once an account is created, all values (with the exception of the account code) may be updated.\n", "columns": {"account_id": {"name": "account_id", "description": "Uniquely identifies your customers in Recurly. No two customers can share the same account id. Part of the PK", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "updated_at": {"name": "updated_at", "description": "When the account was last changed. Part of the PK", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "account_city": {"name": "account_city", "description": "City in the world the account is associated with.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "account_country": {"name": "account_country", "description": "Country in the world the account is associated with.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "account_postal_code": {"name": "account_postal_code", "description": "Postal code in the world the account is associated with.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "account_region": {"name": "account_region", "description": "Region in the world the account is associated with (usually would be state if it was a U.S. account.)", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "bill_to": {"name": "bill_to", "description": "An enumerable describing the billing behavior of the account,  specifically whether the account is self-paying or will rely on the parent account to pay.\n", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "cc_emails": {"name": "cc_emails", "description": "Additional email address that should receive account correspondence.  These should be separated only by commas.  These CC emails will receive all emails that the email field also receives.\n", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "code": {"name": "code", "description": "The unique identifier of the account. This cannot be changed once the account is created.  Provided during account creation.\n", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "company": {"name": "company", "description": "The company related with the account.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "created_at": {"name": "created_at", "description": "When the account was created.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "deleted_at": {"name": "deleted_at", "description": "If present, when the account was last marked inactive.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "email": {"name": "email", "description": "The email address used for communicating with this customer.  The customer will also use this email address to log into your hosted account management pages.  This value does not need to be unique.\n", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "first_name": {"name": "first_name", "description": "The first name of the customer related to the account.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "is_most_recent_record": {"name": "is_most_recent_record", "description": "Is this the most recent record of this account?", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "is_tax_exempt": {"name": "is_tax_exempt", "description": "The tax status of the account. true exempts tax on the account, false applies tax on the account.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "last_name": {"name": "last_name", "description": "The last name of the customer related to the account.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "state": {"name": "state", "description": "Accounts can be either active or inactive.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "username": {"name": "username", "description": "A secondary value for the account.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "vat_number": {"name": "vat_number", "description": "The VAT number of the account (to avoid having the VAT applied). This is only used for manually collected invoices.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "recurly_source://models/stg_recurly.yml", "build_path": null, "unrendered_config": {"schema": "recurly_source", "materialized": "table"}, "created_at": 1722889775.620057, "relation_name": "\"postgres\".\"recurly_integrations_tests_recurly_source\".\"stg_recurly__account_history\"", "raw_code": "with base as (\n\n    select *\n    from {{ ref('stg_recurly__account_history_tmp') }}\n),\n\nfields as (\n\n    select \n        {{\n            fivetran_utils.fill_staging_columns(\n                source_columns = adapter.get_columns_in_relation(ref('stg_recurly__account_history_tmp')),\n                staging_columns = get_account_history_columns()\n            )\n        }}\n    from base\n),\n\nfinal as (\n\n    select\n        id as account_id, \n        cast(updated_at as {{ dbt.type_timestamp() }}) as updated_at, \n        account_city,\n        account_country, \n        account_postal_code,\n        account_region,\n        bill_to, \n        cc_emails, \n        code, \n        company, \n        cast(created_at as {{ dbt.type_timestamp() }}) as created_at,\n        cast(deleted_at as {{ dbt.type_timestamp() }}) as deleted_at,\n        email,  \n        first_name,\n        row_number() over (partition by id order by updated_at desc) = 1 as is_most_recent_record,\n        tax_exempt as is_tax_exempt, \n        last_name,\n        state, \n        username, \n        vat_number\n\n        --The below macro adds the fields defined within your accounts_pass_through_columns variable into the staging model\n        {{ fivetran_utils.fill_pass_through_columns('recurly_account_pass_through_columns') }}\n\n   from fields\n)\n\nselect *\nfrom final", "language": "sql", "refs": [{"name": "stg_recurly__account_history_tmp", "package": null, "version": null}, {"name": "stg_recurly__account_history_tmp", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.recurly_source.get_account_history_columns", "macro.fivetran_utils.fill_staging_columns", "macro.dbt.type_timestamp", "macro.fivetran_utils.fill_pass_through_columns"], "nodes": ["model.recurly_source.stg_recurly__account_history_tmp"]}, "compiled_path": "target/compiled/recurly_source/models/stg_recurly__account_history.sql", "compiled": true, "compiled_code": "with base as (\n\n    select *\n    from \"postgres\".\"recurly_integrations_tests_recurly_source\".\"stg_recurly__account_history_tmp\"\n),\n\nfields as (\n\n    select \n        \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    \n    \n    id\n    \n as \n    \n    id\n    \n, \n    \n    \n    created_at\n    \n as \n    \n    created_at\n    \n, \n    \n    \n    updated_at\n    \n as \n    \n    updated_at\n    \n, \n    \n    \n    deleted_at\n    \n as \n    \n    deleted_at\n    \n, \n    \n    \n    code\n    \n as \n    \n    code\n    \n, \n    \n    \n    bill_to\n    \n as \n    \n    bill_to\n    \n, \n    \n    \n    state\n    \n as \n    \n    state\n    \n, \n    \n    \n    username\n    \n as \n    \n    username\n    \n, \n    cast(null as TEXT) as \n    \n    first_name\n    \n , \n    cast(null as TEXT) as \n    \n    last_name\n    \n , \n    \n    \n    email\n    \n as \n    \n    email\n    \n, \n    \n    \n    cc_emails\n    \n as \n    \n    cc_emails\n    \n, \n    \n    \n    company\n    \n as \n    \n    company\n    \n, \n    \n    \n    vat_number\n    \n as \n    \n    vat_number\n    \n, \n    \n    \n    tax_exempt\n    \n as \n    \n    tax_exempt\n    \n, \n    cast(null as TEXT) as \n    \n    account_city\n    \n , \n    \n    \n    account_country\n    \n as \n    \n    account_country\n    \n, \n    cast(null as TEXT) as \n    \n    account_postal_code\n    \n , \n    cast(null as TEXT) as \n    \n    account_region\n    \n \n\n\n    from base\n),\n\nfinal as (\n\n    select\n        id as account_id, \n        cast(updated_at as timestamp) as updated_at, \n        account_city,\n        account_country, \n        account_postal_code,\n        account_region,\n        bill_to, \n        cc_emails, \n        code, \n        company, \n        cast(created_at as timestamp) as created_at,\n        cast(deleted_at as timestamp) as deleted_at,\n        email,  \n        first_name,\n        row_number() over (partition by id order by updated_at desc) = 1 as is_most_recent_record,\n        tax_exempt as is_tax_exempt, \n        last_name,\n        state, \n        username, \n        vat_number\n\n        --The below macro adds the fields defined within your accounts_pass_through_columns variable into the staging model\n        \n\n\n\n\n\n   from fields\n)\n\nselect *\nfrom final", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.recurly_source.stg_recurly__subscription_add_on_history": {"database": "postgres", "schema": "recurly_integrations_tests_recurly_source", "name": "stg_recurly__subscription_add_on_history", "resource_type": "model", "package_name": "recurly_source", "path": "stg_recurly__subscription_add_on_history.sql", "original_file_path": "models/stg_recurly__subscription_add_on_history.sql", "unique_id": "model.recurly_source.stg_recurly__subscription_add_on_history", "fqn": ["recurly_source", "stg_recurly__subscription_add_on_history"], "alias": "stg_recurly__subscription_add_on_history", "checksum": {"name": "sha256", "checksum": "66a700e01531fb1e90916071e604baaeb064eef235dc2dd2294045845b6ad54d"}, "config": {"enabled": true, "alias": null, "schema": "recurly_source", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected"}, "tags": [], "description": "History of subscription add-ons to a particular plan.", "columns": {"subscription_add_on_id": {"name": "subscription_add_on_id", "description": "Unique identifier for subscription add-on.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "updated_at": {"name": "updated_at", "description": "The date/time the add-on was last modified.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "created_at": {"name": "created_at", "description": "The date/time the add-on was last created.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "expired_at": {"name": "expired_at", "description": "Date and time the subscription was/ will churn.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "object": {"name": "object", "description": "Object type of subscription add-on.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "plan_add_on_id": {"name": "plan_add_on_id", "description": "Plan add-on ID associated with subscription add-on ID.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "quantity": {"name": "quantity", "description": "Number of add-ons added to the subscription.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "subscription_id": {"name": "subscription_id", "description": "Subscription ID associated with add-on.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "unit_amount": {"name": "unit_amount", "description": "Amount of one unit of the add-on.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "recurly_source://models/stg_recurly.yml", "build_path": null, "unrendered_config": {"schema": "recurly_source", "materialized": "table", "enabled": true}, "created_at": 1722889775.638471, "relation_name": "\"postgres\".\"recurly_integrations_tests_recurly_source\".\"stg_recurly__subscription_add_on_history\"", "raw_code": "{{ config(enabled=var('recurly__using_subscription_add_on_history', true)) }}\n\nwith base as (\n\n    select * \n    from {{ ref('stg_recurly__subscription_add_on_history_tmp') }}\n),\n\nfields as (\n\n    select\n        {{\n            fivetran_utils.fill_staging_columns(\n                source_columns=adapter.get_columns_in_relation(ref('stg_recurly__subscription_add_on_history_tmp')),\n                staging_columns=get_subscription_add_on_history_columns()\n            )\n        }}\n    from base\n),\n\nfinal as (\n    \n    select \n        id as subscription_add_on_id,\n        cast(updated_at as {{ dbt.type_timestamp() }}) as updated_at, \n        cast(created_at as {{ dbt.type_timestamp() }}) as created_at, \n        cast(expired_at as {{ dbt.type_timestamp() }}) as expired_at,\n        object,         \n        plan_add_on_id,\n        quantity, \n        subscription_id, \n        cast(unit_amount as {{ dbt.type_float() }}) as unit_amount,\n        row_number() over (partition by id order by updated_at desc) = 1 as is_most_recent_record\n    from fields\n)\n\nselect *\nfrom final", "language": "sql", "refs": [{"name": "stg_recurly__subscription_add_on_history_tmp", "package": null, "version": null}, {"name": "stg_recurly__subscription_add_on_history_tmp", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.recurly_source.get_subscription_add_on_history_columns", "macro.fivetran_utils.fill_staging_columns", "macro.dbt.type_timestamp", "macro.dbt.type_float"], "nodes": ["model.recurly_source.stg_recurly__subscription_add_on_history_tmp"]}, "compiled_path": "target/compiled/recurly_source/models/stg_recurly__subscription_add_on_history.sql", "compiled": true, "compiled_code": "\n\nwith base as (\n\n    select * \n    from \"postgres\".\"recurly_integrations_tests_recurly_source\".\"stg_recurly__subscription_add_on_history_tmp\"\n),\n\nfields as (\n\n    select\n        \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    \n    \n    created_at\n    \n as \n    \n    created_at\n    \n, \n    \n    \n    expired_at\n    \n as \n    \n    expired_at\n    \n, \n    \n    \n    id\n    \n as \n    \n    id\n    \n, \n    \n    \n    object\n    \n as \n    \n    object\n    \n, \n    \n    \n    plan_add_on_id\n    \n as \n    \n    plan_add_on_id\n    \n, \n    \n    \n    quantity\n    \n as \n    \n    quantity\n    \n, \n    \n    \n    subscription_id\n    \n as \n    \n    subscription_id\n    \n, \n    \n    \n    unit_amount\n    \n as \n    \n    unit_amount\n    \n, \n    \n    \n    updated_at\n    \n as \n    \n    updated_at\n    \n\n\n\n    from base\n),\n\nfinal as (\n    \n    select \n        id as subscription_add_on_id,\n        cast(updated_at as timestamp) as updated_at, \n        cast(created_at as timestamp) as created_at, \n        cast(expired_at as timestamp) as expired_at,\n        object,         \n        plan_add_on_id,\n        quantity, \n        subscription_id, \n        cast(unit_amount as float) as unit_amount,\n        row_number() over (partition by id order by updated_at desc) = 1 as is_most_recent_record\n    from fields\n)\n\nselect *\nfrom final", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.recurly_source.stg_recurly__line_item_history": {"database": "postgres", "schema": "recurly_integrations_tests_recurly_source", "name": "stg_recurly__line_item_history", "resource_type": "model", "package_name": "recurly_source", "path": "stg_recurly__line_item_history.sql", "original_file_path": "models/stg_recurly__line_item_history.sql", "unique_id": "model.recurly_source.stg_recurly__line_item_history", "fqn": ["recurly_source", "stg_recurly__line_item_history"], "alias": "stg_recurly__line_item_history", "checksum": {"name": "sha256", "checksum": "11ed4c3e7919e9b82d6160ca048cacc88ef77b0037bfafd96f566377bccde047"}, "config": {"enabled": true, "alias": null, "schema": "recurly_source", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected"}, "tags": [], "description": "Line items are the charges and credits on your customer's invoices. The table holds the lineage of the line item.\n", "columns": {"line_item_id": {"name": "line_item_id", "description": "Unique identifier for the object.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "updated_at": {"name": "updated_at", "description": "When the line item was last updated.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "account_id": {"name": "account_id", "description": "The account this line item belongs to.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "add_on_code": {"name": "add_on_code", "description": "If the line item is a charge or credit for an add-on, this is its code.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "add_on_id": {"name": "add_on_id", "description": "If the line item is a charge or credit for an add-on this is its ID.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "amount": {"name": "amount", "description": "Total after discounts and taxes (quantity * unit_amount) - (discount + tax).", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "created_at": {"name": "created_at", "description": "When the line item was created.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "credit_applied": {"name": "credit_applied", "description": "The amount of credit from this line item that was applied to the invoice.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "currency": {"name": "currency", "description": "3-letter ISO 4217 currency code.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "description": {"name": "description", "description": "Description that appears on the invoice. For subscription related items this will be filled in automatically.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "discount": {"name": "discount", "description": "The discount applied to the line item.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "ended_at": {"name": "ended_at", "description": "If this date is provided, it indicates the end of a time range", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "has_refund": {"name": "has_refund", "description": "Is the line item refunded? True if so, false if not.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "invoice_id": {"name": "invoice_id", "description": "The invoice this line item belongs to, once the line item has been invoiced this will be the invoice's ID.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "invoice_number": {"name": "invoice_number", "description": "The invoice this line item belongs to, once the line item has been invoiced this will be the invoice's number.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "is_most_recent_record": {"name": "is_most_recent_record", "description": "Is this the most recent record of this line item?", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "is_taxable": {"name": "is_taxable", "description": "Is the line item taxable? True if so, false if not.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "origin": {"name": "origin", "description": "A credit created from an original charge will have the value of the charge's origin.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "original_line_item_invoice_id": {"name": "original_line_item_invoice_id", "description": "The invoice where the credit originated.  Will only have a value if the line item is a credit created from a previous credit,  or if the credit was created from a charge refund.\n", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "plan_code": {"name": "plan_code", "description": "If the line item is a charge or credit for a plan or add-on, this is the plan's code.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "plan_id": {"name": "plan_id", "description": "If the line item is a charge or credit for a plan or add-on, this is the plan's ID.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "previous_line_item_id": {"name": "previous_line_item_id", "description": "Will only have a value if the line item is a credit created from a previous credit,  or if the credit was created from a charge refund.\n", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "product_code": {"name": "product_code", "description": "For plan-related line items this will be the plan's code, for add-on related line items it will be the add-on's code.  For item-related line items it will be the item's external_sku.\n", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "proration_rate": {"name": "proration_rate", "description": "When a line item has been prorated, this is the rate of the proration.  Proration rates were made available for line items created after March 30, 2017.  For line items created prior to that date, the proration rate will be null, even if the line item was prorated.\n", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "quantity": {"name": "quantity", "description": "This number will be multiplied by the unit amount to compute the subtotal before any discounts or taxes.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "refunded_quantity": {"name": "refunded_quantity", "description": "For refund charges, the quantity being refunded. For non-refund charges, the total quantity refunded (possibly over multiple refunds).", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "started_at": {"name": "started_at", "description": "If an end date is present, this is value indicates the beginning of a billing time range.  If no end date is present it indicates billing for a specific date.\n", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "state": {"name": "state", "description": "Pending line items are charges or credits on an account that have not been applied to an invoice yet.  Invoiced line items will always have an invoice_id value. Enum: \"invoiced\", \"pending\"\n", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "subscription_id": {"name": "subscription_id", "description": "If the line item is a charge or credit for a subscription, this is its ID.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "subtotal": {"name": "subtotal", "description": "Total before discounts and taxes (quantity * unit_amount).", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "tax": {"name": "tax", "description": "The tax amount for the line item.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "tax_code": {"name": "tax_code", "description": "Used by Avalara, Vertex, and Recurly\u2019s EU VAT tax feature. The tax code values are specific to each tax system.  If you are using Recurly\u2019s EU VAT feature you can use unknown, physical, or digital.:\n", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "tax_exempt": {"name": "tax_exempt", "description": "true exempts tax on charges, false applies tax on charges. If not defined, then defaults to the Plan and Site settings.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "tax_rate": {"name": "tax_rate", "description": "Tax rate", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "tax_region": {"name": "tax_region", "description": "Provides the tax region applied on an invoice.  For U.S. Sales Tax, this will be the 2 letter state code.  For EU VAT this will be the 2 letter country code.  For all country level tax types, this will display the regional tax, like VAT, GST, or PST.\n", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "tax_type": {"name": "tax_type", "description": "Provides the tax type as \"vat\" for EU VAT, \"usst\" for U.S. Sales Tax, or the 2 letter country code for country level tax types  like Canada, Australia, New Zealand, Israel, and all non-EU European countries.\n", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "type": {"name": "type", "description": "Charges are positive line items that debit the account.  Credits are negative line items that credit the account. Enum: \"charge\", \"credit\"\n", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "unit_amount": {"name": "unit_amount", "description": "Positive amount for a charge, negative amount for a credit.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "uuid": {"name": "uuid", "description": "The UUID is useful for matching data with the CSV exports and building URLs into Recurly's UI. Used in HTB database.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "recurly_source://models/stg_recurly.yml", "build_path": null, "unrendered_config": {"schema": "recurly_source", "materialized": "table"}, "created_at": 1722889775.635552, "relation_name": "\"postgres\".\"recurly_integrations_tests_recurly_source\".\"stg_recurly__line_item_history\"", "raw_code": "with base as (\n\n    select *\n    from {{ ref('stg_recurly__line_item_history_tmp') }}\n),\n\nfields as (\n\n    select \n        {{ \n            fivetran_utils.fill_staging_columns(\n                source_columns = adapter.get_columns_in_relation(ref('stg_recurly__line_item_history_tmp')),\n                staging_columns = get_line_item_history_columns()\n            ) \n        }}\n    from base\n),\n\nfinal as (\n\n    select\n        id as line_item_id, \n        cast(updated_at as {{ dbt.type_timestamp() }}) as updated_at,\n        account_id,\n        add_on_code,\n        add_on_id,\n        cast(amount as {{ dbt.type_float() }}) as amount,\n        cast(created_at as {{ dbt.type_timestamp() }}) as created_at,\n        credit_applied,\n        currency,\n        description,\n        discount,\n        cast(end_date as {{ dbt.type_timestamp() }}) as ended_at,\n        refund as has_refund,\n        invoice_id,\n        invoice_number,\n        row_number() over (partition by id order by updated_at desc) = 1 as is_most_recent_record,\n        taxable as is_taxable,\n        original_line_item_invoice_id,\n        origin,\n        plan_code,\n        plan_id,\n        previous_line_item_id,\n        product_code,\n        proration_rate,\n        quantity,\n        refunded_quantity,\n        cast(start_date as {{ dbt.type_timestamp() }}) as started_at,\n        state,\n        subscription_id,\n        subtotal,\n        tax,\n        tax_code,\n        tax_exempt,\n        tax_region,\n        tax_rate,\n        tax_type,\n        type,\n        cast(unit_amount as {{ dbt.type_float() }}) as unit_amount,\n        uuid\n    from fields\n)\n\nselect *\nfrom final", "language": "sql", "refs": [{"name": "stg_recurly__line_item_history_tmp", "package": null, "version": null}, {"name": "stg_recurly__line_item_history_tmp", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.recurly_source.get_line_item_history_columns", "macro.fivetran_utils.fill_staging_columns", "macro.dbt.type_timestamp", "macro.dbt.type_float"], "nodes": ["model.recurly_source.stg_recurly__line_item_history_tmp"]}, "compiled_path": "target/compiled/recurly_source/models/stg_recurly__line_item_history.sql", "compiled": true, "compiled_code": "with base as (\n\n    select *\n    from \"postgres\".\"recurly_integrations_tests_recurly_source\".\"stg_recurly__line_item_history_tmp\"\n),\n\nfields as (\n\n    select \n        \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    \n    \n    id\n    \n as \n    \n    id\n    \n, \n    \n    \n    created_at\n    \n as \n    \n    created_at\n    \n, \n    \n    \n    updated_at\n    \n as \n    \n    updated_at\n    \n, \n    \n    \n    account_id\n    \n as \n    \n    account_id\n    \n, \n    \n    \n    plan_id\n    \n as \n    \n    plan_id\n    \n, \n    \n    \n    add_on_id\n    \n as \n    \n    add_on_id\n    \n, \n    \n    \n    invoice_id\n    \n as \n    \n    invoice_id\n    \n, \n    \n    \n    previous_line_item_id\n    \n as \n    \n    previous_line_item_id\n    \n, \n    \n    \n    original_line_item_invoice_id\n    \n as \n    \n    original_line_item_invoice_id\n    \n, \n    \n    \n    subscription_id\n    \n as \n    \n    subscription_id\n    \n, \n    \n    \n    uuid\n    \n as \n    \n    uuid\n    \n, \n    \n    \n    type\n    \n as \n    \n    type\n    \n, \n    \n    \n    state\n    \n as \n    \n    state\n    \n, \n    \n    \n    plan_code\n    \n as \n    \n    plan_code\n    \n, \n    \n    \n    add_on_code\n    \n as \n    \n    add_on_code\n    \n, \n    \n    \n    invoice_number\n    \n as \n    \n    invoice_number\n    \n, \n    \n    \n    origin\n    \n as \n    \n    origin\n    \n, \n    \n    \n    product_code\n    \n as \n    \n    product_code\n    \n, \n    \n    \n    currency\n    \n as \n    \n    currency\n    \n, \n    \n    \n    amount\n    \n as \n    \n    amount\n    \n, \n    \n    \n    description\n    \n as \n    \n    description\n    \n, \n    \n    \n    quantity\n    \n as \n    \n    quantity\n    \n, \n    \n    \n    unit_amount\n    \n as \n    \n    unit_amount\n    \n, \n    \n    \n    subtotal\n    \n as \n    \n    subtotal\n    \n, \n    \n    \n    discount\n    \n as \n    \n    discount\n    \n, \n    \n    \n    tax\n    \n as \n    \n    tax\n    \n, \n    \n    \n    taxable\n    \n as \n    \n    taxable\n    \n, \n    \n    \n    tax_exempt\n    \n as \n    \n    tax_exempt\n    \n, \n    \n    \n    tax_code\n    \n as \n    \n    tax_code\n    \n, \n    \n    \n    tax_type\n    \n as \n    \n    tax_type\n    \n, \n    \n    \n    tax_region\n    \n as \n    \n    tax_region\n    \n, \n    \n    \n    tax_rate\n    \n as \n    \n    tax_rate\n    \n, \n    \n    \n    proration_rate\n    \n as \n    \n    proration_rate\n    \n, \n    \n    \n    refund\n    \n as \n    \n    refund\n    \n, \n    \n    \n    refunded_quantity\n    \n as \n    \n    refunded_quantity\n    \n, \n    \n    \n    credit_applied\n    \n as \n    \n    credit_applied\n    \n, \n    \n    \n    start_date\n    \n as \n    \n    start_date\n    \n, \n    \n    \n    end_date\n    \n as \n    \n    end_date\n    \n\n\n\n    from base\n),\n\nfinal as (\n\n    select\n        id as line_item_id, \n        cast(updated_at as timestamp) as updated_at,\n        account_id,\n        add_on_code,\n        add_on_id,\n        cast(amount as float) as amount,\n        cast(created_at as timestamp) as created_at,\n        credit_applied,\n        currency,\n        description,\n        discount,\n        cast(end_date as timestamp) as ended_at,\n        refund as has_refund,\n        invoice_id,\n        invoice_number,\n        row_number() over (partition by id order by updated_at desc) = 1 as is_most_recent_record,\n        taxable as is_taxable,\n        original_line_item_invoice_id,\n        origin,\n        plan_code,\n        plan_id,\n        previous_line_item_id,\n        product_code,\n        proration_rate,\n        quantity,\n        refunded_quantity,\n        cast(start_date as timestamp) as started_at,\n        state,\n        subscription_id,\n        subtotal,\n        tax,\n        tax_code,\n        tax_exempt,\n        tax_region,\n        tax_rate,\n        tax_type,\n        type,\n        cast(unit_amount as float) as unit_amount,\n        uuid\n    from fields\n)\n\nselect *\nfrom final", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.recurly_source.stg_recurly__coupon_redemption_history": {"database": "postgres", "schema": "recurly_integrations_tests_recurly_source", "name": "stg_recurly__coupon_redemption_history", "resource_type": "model", "package_name": "recurly_source", "path": "stg_recurly__coupon_redemption_history.sql", "original_file_path": "models/stg_recurly__coupon_redemption_history.sql", "unique_id": "model.recurly_source.stg_recurly__coupon_redemption_history", "fqn": ["recurly_source", "stg_recurly__coupon_redemption_history"], "alias": "stg_recurly__coupon_redemption_history", "checksum": {"name": "sha256", "checksum": "8e25586810247b007fd8d990704e7f3be4a031a5e6f0c93d6ce9e481fd829c7a"}, "config": {"enabled": true, "alias": null, "schema": "recurly_source", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected"}, "tags": [], "description": "History of coupons redeemed by accounts.", "columns": {"coupon_redemption_id": {"name": "coupon_redemption_id", "description": "Unique identifier for the coupon redemption created.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "updated_at": {"name": "updated_at", "description": "Time coupon redemption last updated.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "account_id": {"name": "account_id", "description": "Account associated with the coupon being redeemed.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "coupon_id": {"name": "coupon_id", "description": "Coupon being redeemed.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "created_at": {"name": "created_at", "description": "Time coupon was being redeemed.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "currency": {"name": "currency", "description": "3-letter ISO 4217 currency code (USD for US Dollar).", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "discounted": {"name": "discounted", "description": "Amount discounted from coupon redemption.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "removed_at": {"name": "removed_at", "description": "If a coupon is removed from a customer, time of removal.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "state": {"name": "state", "description": "Current state of coupon redemption (usually active or inactive)", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "recurly_source://models/stg_recurly.yml", "build_path": null, "unrendered_config": {"schema": "recurly_source", "materialized": "table"}, "created_at": 1722889775.6253288, "relation_name": "\"postgres\".\"recurly_integrations_tests_recurly_source\".\"stg_recurly__coupon_redemption_history\"", "raw_code": "with base as (\n\n    select * \n    from {{ ref('stg_recurly__coupon_redemption_history_tmp') }}\n),\n\nfields as (\n\n    select\n        {{\n            fivetran_utils.fill_staging_columns(\n                source_columns=adapter.get_columns_in_relation(ref('stg_recurly__coupon_redemption_history_tmp')),\n                staging_columns=get_coupon_redemption_history_columns()\n            )\n        }}\n    from base\n),\n\nfinal as (\n    \n    select \n        id as coupon_redemption_id,\n        cast(updated_at as {{ dbt.type_timestamp() }}) as updated_at,\n        account_id,\n        coupon_id,\n        cast(created_at as {{ dbt.type_timestamp() }}) as created_at,\n        currency, \n        discounted, \n        cast(removed_at as {{ dbt.type_timestamp() }}) as removed_at,\n        state\n    from fields\n)\n\nselect *\nfrom final", "language": "sql", "refs": [{"name": "stg_recurly__coupon_redemption_history_tmp", "package": null, "version": null}, {"name": "stg_recurly__coupon_redemption_history_tmp", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.recurly_source.get_coupon_redemption_history_columns", "macro.fivetran_utils.fill_staging_columns", "macro.dbt.type_timestamp"], "nodes": ["model.recurly_source.stg_recurly__coupon_redemption_history_tmp"]}, "compiled_path": "target/compiled/recurly_source/models/stg_recurly__coupon_redemption_history.sql", "compiled": true, "compiled_code": "with base as (\n\n    select * \n    from \"postgres\".\"recurly_integrations_tests_recurly_source\".\"stg_recurly__coupon_redemption_history_tmp\"\n),\n\nfields as (\n\n    select\n        \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    \n    \n    account_id\n    \n as \n    \n    account_id\n    \n, \n    \n    \n    coupon_id\n    \n as \n    \n    coupon_id\n    \n, \n    \n    \n    created_at\n    \n as \n    \n    created_at\n    \n, \n    \n    \n    currency\n    \n as \n    \n    currency\n    \n, \n    \n    \n    discounted\n    \n as \n    \n    discounted\n    \n, \n    \n    \n    id\n    \n as \n    \n    id\n    \n, \n    \n    \n    removed_at\n    \n as \n    \n    removed_at\n    \n, \n    \n    \n    state\n    \n as \n    \n    state\n    \n, \n    \n    \n    updated_at\n    \n as \n    \n    updated_at\n    \n\n\n\n    from base\n),\n\nfinal as (\n    \n    select \n        id as coupon_redemption_id,\n        cast(updated_at as timestamp) as updated_at,\n        account_id,\n        coupon_id,\n        cast(created_at as timestamp) as created_at,\n        currency, \n        discounted, \n        cast(removed_at as timestamp) as removed_at,\n        state\n    from fields\n)\n\nselect *\nfrom final", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.recurly_source.stg_recurly__credit_payment_history": {"database": "postgres", "schema": "recurly_integrations_tests_recurly_source", "name": "stg_recurly__credit_payment_history", "resource_type": "model", "package_name": "recurly_source", "path": "stg_recurly__credit_payment_history.sql", "original_file_path": "models/stg_recurly__credit_payment_history.sql", "unique_id": "model.recurly_source.stg_recurly__credit_payment_history", "fqn": ["recurly_source", "stg_recurly__credit_payment_history"], "alias": "stg_recurly__credit_payment_history", "checksum": {"name": "sha256", "checksum": "178542dc233161c25beaf3f8fc759195829e064efbb4cc34e7eb2e297ffaef1a"}, "config": {"enabled": true, "alias": null, "schema": "recurly_source", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected"}, "tags": [], "description": "A history of outstanding credit balance to pay an invoice,  but does include the record of write-offs, credit balance removals,  and credit payments later refunded as cash transaction.    \n", "columns": {"credit_payment_id": {"name": "credit_payment_id", "description": "Unique identifier for the credit payment.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "updated_at": {"name": "updated_at", "description": "Time credit payment last updated.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "account_id": {"name": "account_id", "description": "The id of the account the credit payment is associated with.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "action": {"name": "action", "description": "The action that resulted in the credit payment being created. Enum: \"payment\", \"gift_card\", \"write_off\", \"reduction\", \"refund\" \n", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "amount": {"name": "amount", "description": "The amount of the credit payment, which will always be positive.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "applied_to_invoice_id": {"name": "applied_to_invoice_id", "description": "The invoice the credit payment was applied to.  If action is payment, gift_card, or write_off, this is a charge invoice.  If action is reduction or refund, this is a credit invoice.\n", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "created_at": {"name": "created_at", "description": "The date and time the credit payment was created.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "currency": {"name": "currency", "description": "3-letter ISO 4217 currency code (USD for US Dollar).", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "original_credit_payment_id": {"name": "original_credit_payment_id", "description": "The unique id of the credit payment the refund action credit payment is refunding.  Will only populate if the action on the row is \"refund\".     \n", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "original_invoice_id": {"name": "original_invoice_id", "description": "The invoice of the credit invoice the credit payment came from.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "refund_transaction_id": {"name": "refund_transaction_id", "description": "The unique id of the new refund transaction the refund action credit payment is transferring value to.  Will only populate if the action on the row is \"refund\".\n", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "uuid": {"name": "uuid", "description": "Unique id of credit payment.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "voided_at": {"name": "voided_at", "description": "Time when a credit payment is voided.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "recurly_source://models/stg_recurly.yml", "build_path": null, "unrendered_config": {"schema": "recurly_source", "materialized": "table", "enabled": true}, "created_at": 1722889775.6276631, "relation_name": "\"postgres\".\"recurly_integrations_tests_recurly_source\".\"stg_recurly__credit_payment_history\"", "raw_code": "{{ config(enabled=var('recurly__using_credit_payment_history', true)) }}\n\nwith base as (\n\n    select * \n    from {{ ref('stg_recurly__credit_payment_history_tmp') }}\n),\n\nfields as (\n\n    select\n        {{\n            fivetran_utils.fill_staging_columns(\n                source_columns=adapter.get_columns_in_relation(ref('stg_recurly__credit_payment_history_tmp')),\n                staging_columns=get_credit_payment_history_columns()\n            )\n        }}\n    from base\n),\n\nfinal as (\n    \n    select \n        id as credit_payment_id,\n        cast(updated_at as {{ dbt.type_timestamp() }}) as updated_at,\n        account_id,\n        action,        \n        cast(amount as {{ dbt.type_float() }}) as amount,\n        applied_to_invoice_id,\n        cast(created_at as {{ dbt.type_timestamp() }}) as created_at,\n        currency,\n        refund_transaction_id,\n        original_credit_payment_id,\n        original_invoice_id,\n        uuid,\n        cast(voided_at as {{ dbt.type_timestamp() }}) as voided_at,\n        row_number() over (partition by id order by updated_at desc) = 1 as is_most_recent_record\n    from fields\n) \n\nselect *\nfrom final", "language": "sql", "refs": [{"name": "stg_recurly__credit_payment_history_tmp", "package": null, "version": null}, {"name": "stg_recurly__credit_payment_history_tmp", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.recurly_source.get_credit_payment_history_columns", "macro.fivetran_utils.fill_staging_columns", "macro.dbt.type_timestamp", "macro.dbt.type_float"], "nodes": ["model.recurly_source.stg_recurly__credit_payment_history_tmp"]}, "compiled_path": "target/compiled/recurly_source/models/stg_recurly__credit_payment_history.sql", "compiled": true, "compiled_code": "\n\nwith base as (\n\n    select * \n    from \"postgres\".\"recurly_integrations_tests_recurly_source\".\"stg_recurly__credit_payment_history_tmp\"\n),\n\nfields as (\n\n    select\n        \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    \n    \n    id\n    \n as \n    \n    id\n    \n, \n    \n    \n    updated_at\n    \n as \n    \n    updated_at\n    \n, \n    \n    \n    account_id\n    \n as \n    \n    account_id\n    \n, \n    \n    \n    applied_to_invoice_id\n    \n as \n    \n    applied_to_invoice_id\n    \n, \n    \n    \n    original_invoice_id\n    \n as \n    \n    original_invoice_id\n    \n, \n    \n    \n    refund_transaction_id\n    \n as \n    \n    refund_transaction_id\n    \n, \n    \n    \n    original_credit_payment_id\n    \n as \n    \n    original_credit_payment_id\n    \n, \n    \n    \n    uuid\n    \n as \n    \n    uuid\n    \n, \n    \n    \n    action\n    \n as \n    \n    action\n    \n, \n    \n    \n    currency\n    \n as \n    \n    currency\n    \n, \n    \n    \n    amount\n    \n as \n    \n    amount\n    \n, \n    \n    \n    created_at\n    \n as \n    \n    created_at\n    \n, \n    \n    \n    voided_at\n    \n as \n    \n    voided_at\n    \n\n\n\n    from base\n),\n\nfinal as (\n    \n    select \n        id as credit_payment_id,\n        cast(updated_at as timestamp) as updated_at,\n        account_id,\n        action,        \n        cast(amount as float) as amount,\n        applied_to_invoice_id,\n        cast(created_at as timestamp) as created_at,\n        currency,\n        refund_transaction_id,\n        original_credit_payment_id,\n        original_invoice_id,\n        uuid,\n        cast(voided_at as timestamp) as voided_at,\n        row_number() over (partition by id order by updated_at desc) = 1 as is_most_recent_record\n    from fields\n) \n\nselect *\nfrom final", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.recurly_source.stg_recurly__invoice_history_tmp": {"database": "postgres", "schema": "recurly_integrations_tests_recurly_source", "name": "stg_recurly__invoice_history_tmp", "resource_type": "model", "package_name": "recurly_source", "path": "tmp/stg_recurly__invoice_history_tmp.sql", "original_file_path": "models/tmp/stg_recurly__invoice_history_tmp.sql", "unique_id": "model.recurly_source.stg_recurly__invoice_history_tmp", "fqn": ["recurly_source", "tmp", "stg_recurly__invoice_history_tmp"], "alias": "stg_recurly__invoice_history_tmp", "checksum": {"name": "sha256", "checksum": "7486fe8cf8aeac454805be557101100b8debe1f77dc360ef1722065b929ff846"}, "config": {"enabled": true, "alias": null, "schema": "recurly_source", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"schema": "recurly_source", "materialized": "view"}, "created_at": 1722889775.371386, "relation_name": "\"postgres\".\"recurly_integrations_tests_recurly_source\".\"stg_recurly__invoice_history_tmp\"", "raw_code": "select * \nfrom {{ var('invoice_history') }}", "language": "sql", "refs": [], "sources": [["recurly", "invoice_history"]], "metrics": [], "depends_on": {"macros": [], "nodes": ["source.recurly_source.recurly.invoice_history"]}, "compiled_path": "target/compiled/recurly_source/models/tmp/stg_recurly__invoice_history_tmp.sql", "compiled": true, "compiled_code": "select * \nfrom \"postgres\".\"recurly_integrations_tests\".\"invoice_history_data\"", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.recurly_source.stg_recurly__plan_history_tmp": {"database": "postgres", "schema": "recurly_integrations_tests_recurly_source", "name": "stg_recurly__plan_history_tmp", "resource_type": "model", "package_name": "recurly_source", "path": "tmp/stg_recurly__plan_history_tmp.sql", "original_file_path": "models/tmp/stg_recurly__plan_history_tmp.sql", "unique_id": "model.recurly_source.stg_recurly__plan_history_tmp", "fqn": ["recurly_source", "tmp", "stg_recurly__plan_history_tmp"], "alias": "stg_recurly__plan_history_tmp", "checksum": {"name": "sha256", "checksum": "cc2b7f5682db83c4cb7481bcca7cb61c5e0554c13cf88e03dda86e6eedb36c84"}, "config": {"enabled": true, "alias": null, "schema": "recurly_source", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"schema": "recurly_source", "materialized": "view"}, "created_at": 1722889775.375007, "relation_name": "\"postgres\".\"recurly_integrations_tests_recurly_source\".\"stg_recurly__plan_history_tmp\"", "raw_code": "select *\nfrom {{ var('plan_history') }}", "language": "sql", "refs": [], "sources": [["recurly", "plan_history"]], "metrics": [], "depends_on": {"macros": [], "nodes": ["source.recurly_source.recurly.plan_history"]}, "compiled_path": "target/compiled/recurly_source/models/tmp/stg_recurly__plan_history_tmp.sql", "compiled": true, "compiled_code": "select *\nfrom \"postgres\".\"recurly_integrations_tests\".\"plan_history_data\"", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.recurly_source.stg_recurly__billing_info_history_tmp": {"database": "postgres", "schema": "recurly_integrations_tests_recurly_source", "name": "stg_recurly__billing_info_history_tmp", "resource_type": "model", "package_name": "recurly_source", "path": "tmp/stg_recurly__billing_info_history_tmp.sql", "original_file_path": "models/tmp/stg_recurly__billing_info_history_tmp.sql", "unique_id": "model.recurly_source.stg_recurly__billing_info_history_tmp", "fqn": ["recurly_source", "tmp", "stg_recurly__billing_info_history_tmp"], "alias": "stg_recurly__billing_info_history_tmp", "checksum": {"name": "sha256", "checksum": "4e749115abc29816187e684d2d637efac77b2cb9ea618a5468762ad069b16ba5"}, "config": {"enabled": true, "alias": null, "schema": "recurly_source", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"schema": "recurly_source", "materialized": "view"}, "created_at": 1722889775.378161, "relation_name": "\"postgres\".\"recurly_integrations_tests_recurly_source\".\"stg_recurly__billing_info_history_tmp\"", "raw_code": "select * \nfrom {{ var('billing_info_history') }}", "language": "sql", "refs": [], "sources": [["recurly", "billing_info_history"]], "metrics": [], "depends_on": {"macros": [], "nodes": ["source.recurly_source.recurly.billing_info_history"]}, "compiled_path": "target/compiled/recurly_source/models/tmp/stg_recurly__billing_info_history_tmp.sql", "compiled": true, "compiled_code": "select * \nfrom \"postgres\".\"recurly_integrations_tests\".\"billing_info_history_data\"", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.recurly_source.stg_recurly__invoice_subscription_history_tmp": {"database": "postgres", "schema": "recurly_integrations_tests_recurly_source", "name": "stg_recurly__invoice_subscription_history_tmp", "resource_type": "model", "package_name": "recurly_source", "path": "tmp/stg_recurly__invoice_subscription_history_tmp.sql", "original_file_path": "models/tmp/stg_recurly__invoice_subscription_history_tmp.sql", "unique_id": "model.recurly_source.stg_recurly__invoice_subscription_history_tmp", "fqn": ["recurly_source", "tmp", "stg_recurly__invoice_subscription_history_tmp"], "alias": "stg_recurly__invoice_subscription_history_tmp", "checksum": {"name": "sha256", "checksum": "5584e7da19deff6e2ddfa562311d775bb0e17bec3234007c8d194731f0077e71"}, "config": {"enabled": true, "alias": null, "schema": "recurly_source", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"schema": "recurly_source", "materialized": "view"}, "created_at": 1722889775.381602, "relation_name": "\"postgres\".\"recurly_integrations_tests_recurly_source\".\"stg_recurly__invoice_subscription_history_tmp\"", "raw_code": "select * \nfrom {{ var('invoice_subscription_history') }}", "language": "sql", "refs": [], "sources": [["recurly", "invoice_subscription_history"]], "metrics": [], "depends_on": {"macros": [], "nodes": ["source.recurly_source.recurly.invoice_subscription_history"]}, "compiled_path": "target/compiled/recurly_source/models/tmp/stg_recurly__invoice_subscription_history_tmp.sql", "compiled": true, "compiled_code": "select * \nfrom \"postgres\".\"recurly_integrations_tests\".\"invoice_subscription_history_data\"", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.recurly_source.stg_recurly__transaction_subscription_tmp": {"database": "postgres", "schema": "recurly_integrations_tests_recurly_source", "name": "stg_recurly__transaction_subscription_tmp", "resource_type": "model", "package_name": "recurly_source", "path": "tmp/stg_recurly__transaction_subscription_tmp.sql", "original_file_path": "models/tmp/stg_recurly__transaction_subscription_tmp.sql", "unique_id": "model.recurly_source.stg_recurly__transaction_subscription_tmp", "fqn": ["recurly_source", "tmp", "stg_recurly__transaction_subscription_tmp"], "alias": "stg_recurly__transaction_subscription_tmp", "checksum": {"name": "sha256", "checksum": "7c6cceacc334079e78d4dbd7948dc1a9af32966c104ef8344faeeab8978b50dc"}, "config": {"enabled": true, "alias": null, "schema": "recurly_source", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"schema": "recurly_source", "materialized": "view"}, "created_at": 1722889775.384931, "relation_name": "\"postgres\".\"recurly_integrations_tests_recurly_source\".\"stg_recurly__transaction_subscription_tmp\"", "raw_code": "select * \nfrom {{ var('transaction_subscription') }}", "language": "sql", "refs": [], "sources": [["recurly", "transaction_subscription"]], "metrics": [], "depends_on": {"macros": [], "nodes": ["source.recurly_source.recurly.transaction_subscription"]}, "compiled_path": "target/compiled/recurly_source/models/tmp/stg_recurly__transaction_subscription_tmp.sql", "compiled": true, "compiled_code": "select * \nfrom \"postgres\".\"recurly_integrations_tests\".\"transaction_subscription_data\"", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.recurly_source.stg_recurly__subscription_history_tmp": {"database": "postgres", "schema": "recurly_integrations_tests_recurly_source", "name": "stg_recurly__subscription_history_tmp", "resource_type": "model", "package_name": "recurly_source", "path": "tmp/stg_recurly__subscription_history_tmp.sql", "original_file_path": "models/tmp/stg_recurly__subscription_history_tmp.sql", "unique_id": "model.recurly_source.stg_recurly__subscription_history_tmp", "fqn": ["recurly_source", "tmp", "stg_recurly__subscription_history_tmp"], "alias": "stg_recurly__subscription_history_tmp", "checksum": {"name": "sha256", "checksum": "0cf339208822aaf75690d92764358fff050e91e1d097d30cb1ca4994068363ab"}, "config": {"enabled": true, "alias": null, "schema": "recurly_source", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"schema": "recurly_source", "materialized": "view"}, "created_at": 1722889775.3894331, "relation_name": "\"postgres\".\"recurly_integrations_tests_recurly_source\".\"stg_recurly__subscription_history_tmp\"", "raw_code": "select * \nfrom {{ var('subscription_history') }}", "language": "sql", "refs": [], "sources": [["recurly", "subscription_history"]], "metrics": [], "depends_on": {"macros": [], "nodes": ["source.recurly_source.recurly.subscription_history"]}, "compiled_path": "target/compiled/recurly_source/models/tmp/stg_recurly__subscription_history_tmp.sql", "compiled": true, "compiled_code": "select * \nfrom \"postgres\".\"recurly_integrations_tests\".\"subscription_history_data\"", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.recurly_source.stg_recurly__account_balance_history_tmp": {"database": "postgres", "schema": "recurly_integrations_tests_recurly_source", "name": "stg_recurly__account_balance_history_tmp", "resource_type": "model", "package_name": "recurly_source", "path": "tmp/stg_recurly__account_balance_history_tmp.sql", "original_file_path": "models/tmp/stg_recurly__account_balance_history_tmp.sql", "unique_id": "model.recurly_source.stg_recurly__account_balance_history_tmp", "fqn": ["recurly_source", "tmp", "stg_recurly__account_balance_history_tmp"], "alias": "stg_recurly__account_balance_history_tmp", "checksum": {"name": "sha256", "checksum": "fbd705e3e43e7a3269716c12f4acad3a3d0f8f8c4e9fc37dc82da087205c9fef"}, "config": {"enabled": true, "alias": null, "schema": "recurly_source", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"schema": "recurly_source", "materialized": "view"}, "created_at": 1722889775.3929799, "relation_name": "\"postgres\".\"recurly_integrations_tests_recurly_source\".\"stg_recurly__account_balance_history_tmp\"", "raw_code": "select * \nfrom {{ var('account_balance_history') }}", "language": "sql", "refs": [], "sources": [["recurly", "account_balance_history"]], "metrics": [], "depends_on": {"macros": [], "nodes": ["source.recurly_source.recurly.account_balance_history"]}, "compiled_path": "target/compiled/recurly_source/models/tmp/stg_recurly__account_balance_history_tmp.sql", "compiled": true, "compiled_code": "select * \nfrom \"postgres\".\"recurly_integrations_tests\".\"account_balance_history_data\"", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.recurly_source.stg_recurly__credit_payment_history_tmp": {"database": "postgres", "schema": "recurly_integrations_tests_recurly_source", "name": "stg_recurly__credit_payment_history_tmp", "resource_type": "model", "package_name": "recurly_source", "path": "tmp/stg_recurly__credit_payment_history_tmp.sql", "original_file_path": "models/tmp/stg_recurly__credit_payment_history_tmp.sql", "unique_id": "model.recurly_source.stg_recurly__credit_payment_history_tmp", "fqn": ["recurly_source", "tmp", "stg_recurly__credit_payment_history_tmp"], "alias": "stg_recurly__credit_payment_history_tmp", "checksum": {"name": "sha256", "checksum": "be0f0211ed172501cfb3b8b0e60dbe8b21601eac36f657ae1cd8b04125d81596"}, "config": {"enabled": true, "alias": null, "schema": "recurly_source", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"schema": "recurly_source", "materialized": "view", "enabled": true}, "created_at": 1722889775.39643, "relation_name": "\"postgres\".\"recurly_integrations_tests_recurly_source\".\"stg_recurly__credit_payment_history_tmp\"", "raw_code": "{{ config(enabled=var('recurly__using_credit_payment_history', true)) }}\n\nselect * \nfrom {{ var('credit_payment_history') }}", "language": "sql", "refs": [], "sources": [["recurly", "credit_payment_history"]], "metrics": [], "depends_on": {"macros": [], "nodes": ["source.recurly_source.recurly.credit_payment_history"]}, "compiled_path": "target/compiled/recurly_source/models/tmp/stg_recurly__credit_payment_history_tmp.sql", "compiled": true, "compiled_code": "\n\nselect * \nfrom \"postgres\".\"recurly_integrations_tests\".\"credit_payment_history_data\"", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.recurly_source.stg_recurly__subscription_change_history_tmp": {"database": "postgres", "schema": "recurly_integrations_tests_recurly_source", "name": "stg_recurly__subscription_change_history_tmp", "resource_type": "model", "package_name": "recurly_source", "path": "tmp/stg_recurly__subscription_change_history_tmp.sql", "original_file_path": "models/tmp/stg_recurly__subscription_change_history_tmp.sql", "unique_id": "model.recurly_source.stg_recurly__subscription_change_history_tmp", "fqn": ["recurly_source", "tmp", "stg_recurly__subscription_change_history_tmp"], "alias": "stg_recurly__subscription_change_history_tmp", "checksum": {"name": "sha256", "checksum": "f9777f46d8ab84bce7ad28c341cea8bf36f9632e6e8138a0630b714cb2227881"}, "config": {"enabled": true, "alias": null, "schema": "recurly_source", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"schema": "recurly_source", "materialized": "view", "enabled": true}, "created_at": 1722889775.40016, "relation_name": "\"postgres\".\"recurly_integrations_tests_recurly_source\".\"stg_recurly__subscription_change_history_tmp\"", "raw_code": "{{ config(enabled=var('recurly__using_subscription_change_history', true)) }}\n\nselect * \nfrom {{ var('subscription_change_history') }}", "language": "sql", "refs": [], "sources": [["recurly", "subscription_change_history"]], "metrics": [], "depends_on": {"macros": [], "nodes": ["source.recurly_source.recurly.subscription_change_history"]}, "compiled_path": "target/compiled/recurly_source/models/tmp/stg_recurly__subscription_change_history_tmp.sql", "compiled": true, "compiled_code": "\n\nselect * \nfrom \"postgres\".\"recurly_integrations_tests\".\"subscription_change_history_data\"", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.recurly_source.stg_recurly__account_note_history_tmp": {"database": "postgres", "schema": "recurly_integrations_tests_recurly_source", "name": "stg_recurly__account_note_history_tmp", "resource_type": "model", "package_name": "recurly_source", "path": "tmp/stg_recurly__account_note_history_tmp.sql", "original_file_path": "models/tmp/stg_recurly__account_note_history_tmp.sql", "unique_id": "model.recurly_source.stg_recurly__account_note_history_tmp", "fqn": ["recurly_source", "tmp", "stg_recurly__account_note_history_tmp"], "alias": "stg_recurly__account_note_history_tmp", "checksum": {"name": "sha256", "checksum": "75c81420f53d7c970a867d53756c464fca82e214aca75f1589d077644f9347ab"}, "config": {"enabled": true, "alias": null, "schema": "recurly_source", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"schema": "recurly_source", "materialized": "view"}, "created_at": 1722889775.403415, "relation_name": "\"postgres\".\"recurly_integrations_tests_recurly_source\".\"stg_recurly__account_note_history_tmp\"", "raw_code": "select * \nfrom {{ var('account_note_history') }}", "language": "sql", "refs": [], "sources": [["recurly", "account_note_history"]], "metrics": [], "depends_on": {"macros": [], "nodes": ["source.recurly_source.recurly.account_note_history"]}, "compiled_path": "target/compiled/recurly_source/models/tmp/stg_recurly__account_note_history_tmp.sql", "compiled": true, "compiled_code": "select * \nfrom \"postgres\".\"recurly_integrations_tests\".\"account_note_history_data\"", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.recurly_source.stg_recurly__plan_currency_history_tmp": {"database": "postgres", "schema": "recurly_integrations_tests_recurly_source", "name": "stg_recurly__plan_currency_history_tmp", "resource_type": "model", "package_name": "recurly_source", "path": "tmp/stg_recurly__plan_currency_history_tmp.sql", "original_file_path": "models/tmp/stg_recurly__plan_currency_history_tmp.sql", "unique_id": "model.recurly_source.stg_recurly__plan_currency_history_tmp", "fqn": ["recurly_source", "tmp", "stg_recurly__plan_currency_history_tmp"], "alias": "stg_recurly__plan_currency_history_tmp", "checksum": {"name": "sha256", "checksum": "61d445dadb8abe613e9d0c3bbbac04b86234b0eb5c93122c53998e84e5f6077f"}, "config": {"enabled": true, "alias": null, "schema": "recurly_source", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"schema": "recurly_source", "materialized": "view"}, "created_at": 1722889775.407948, "relation_name": "\"postgres\".\"recurly_integrations_tests_recurly_source\".\"stg_recurly__plan_currency_history_tmp\"", "raw_code": "select *\nfrom {{ var('plan_currency_history') }}", "language": "sql", "refs": [], "sources": [["recurly", "plan_currency_history"]], "metrics": [], "depends_on": {"macros": [], "nodes": ["source.recurly_source.recurly.plan_currency_history"]}, "compiled_path": "target/compiled/recurly_source/models/tmp/stg_recurly__plan_currency_history_tmp.sql", "compiled": true, "compiled_code": "select *\nfrom \"postgres\".\"recurly_integrations_tests\".\"plan_currency_history_data\"", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.recurly_source.stg_recurly__coupon_discount_tmp": {"database": "postgres", "schema": "recurly_integrations_tests_recurly_source", "name": "stg_recurly__coupon_discount_tmp", "resource_type": "model", "package_name": "recurly_source", "path": "tmp/stg_recurly__coupon_discount_tmp.sql", "original_file_path": "models/tmp/stg_recurly__coupon_discount_tmp.sql", "unique_id": "model.recurly_source.stg_recurly__coupon_discount_tmp", "fqn": ["recurly_source", "tmp", "stg_recurly__coupon_discount_tmp"], "alias": "stg_recurly__coupon_discount_tmp", "checksum": {"name": "sha256", "checksum": "cc5b167cd09a4567252832b83e7efa7ea154b4bb00b9cfa8065f9969ee27c711"}, "config": {"enabled": true, "alias": null, "schema": "recurly_source", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"schema": "recurly_source", "materialized": "view"}, "created_at": 1722889775.4112902, "relation_name": "\"postgres\".\"recurly_integrations_tests_recurly_source\".\"stg_recurly__coupon_discount_tmp\"", "raw_code": "select * \nfrom {{ var('coupon_discount') }}", "language": "sql", "refs": [], "sources": [["recurly", "coupon_discount"]], "metrics": [], "depends_on": {"macros": [], "nodes": ["source.recurly_source.recurly.coupon_discount"]}, "compiled_path": "target/compiled/recurly_source/models/tmp/stg_recurly__coupon_discount_tmp.sql", "compiled": true, "compiled_code": "select * \nfrom \"postgres\".\"recurly_integrations_tests\".\"coupon_discount_data\"", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.recurly_source.stg_recurly__subscription_add_on_history_tmp": {"database": "postgres", "schema": "recurly_integrations_tests_recurly_source", "name": "stg_recurly__subscription_add_on_history_tmp", "resource_type": "model", "package_name": "recurly_source", "path": "tmp/stg_recurly__subscription_add_on_history_tmp.sql", "original_file_path": "models/tmp/stg_recurly__subscription_add_on_history_tmp.sql", "unique_id": "model.recurly_source.stg_recurly__subscription_add_on_history_tmp", "fqn": ["recurly_source", "tmp", "stg_recurly__subscription_add_on_history_tmp"], "alias": "stg_recurly__subscription_add_on_history_tmp", "checksum": {"name": "sha256", "checksum": "79f10896e1936c74313b3e78716d3afbd56b58926dcbfde760593581a5be12ac"}, "config": {"enabled": true, "alias": null, "schema": "recurly_source", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"schema": "recurly_source", "materialized": "view", "enabled": true}, "created_at": 1722889775.415104, "relation_name": "\"postgres\".\"recurly_integrations_tests_recurly_source\".\"stg_recurly__subscription_add_on_history_tmp\"", "raw_code": "{{ config(enabled=var('recurly__using_subscription_add_on_history', true)) }}\n\nselect * \nfrom {{ var('subscription_add_on_history') }}", "language": "sql", "refs": [], "sources": [["recurly", "subscription_add_on_history"]], "metrics": [], "depends_on": {"macros": [], "nodes": ["source.recurly_source.recurly.subscription_add_on_history"]}, "compiled_path": "target/compiled/recurly_source/models/tmp/stg_recurly__subscription_add_on_history_tmp.sql", "compiled": true, "compiled_code": "\n\nselect * \nfrom \"postgres\".\"recurly_integrations_tests\".\"subscription_add_on_history_data\"", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.recurly_source.stg_recurly__coupon_redemption_history_tmp": {"database": "postgres", "schema": "recurly_integrations_tests_recurly_source", "name": "stg_recurly__coupon_redemption_history_tmp", "resource_type": "model", "package_name": "recurly_source", "path": "tmp/stg_recurly__coupon_redemption_history_tmp.sql", "original_file_path": "models/tmp/stg_recurly__coupon_redemption_history_tmp.sql", "unique_id": "model.recurly_source.stg_recurly__coupon_redemption_history_tmp", "fqn": ["recurly_source", "tmp", "stg_recurly__coupon_redemption_history_tmp"], "alias": "stg_recurly__coupon_redemption_history_tmp", "checksum": {"name": "sha256", "checksum": "4b76fc4d010e23af9dc9342afb9cca161571dfc591ca5c9d431d141a25ec63e4"}, "config": {"enabled": true, "alias": null, "schema": "recurly_source", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"schema": "recurly_source", "materialized": "view"}, "created_at": 1722889775.418558, "relation_name": "\"postgres\".\"recurly_integrations_tests_recurly_source\".\"stg_recurly__coupon_redemption_history_tmp\"", "raw_code": "select * \nfrom {{ var('coupon_redemption_history') }}", "language": "sql", "refs": [], "sources": [["recurly", "coupon_redemption_history"]], "metrics": [], "depends_on": {"macros": [], "nodes": ["source.recurly_source.recurly.coupon_redemption_history"]}, "compiled_path": "target/compiled/recurly_source/models/tmp/stg_recurly__coupon_redemption_history_tmp.sql", "compiled": true, "compiled_code": "select * \nfrom \"postgres\".\"recurly_integrations_tests\".\"coupon_redemption_history_data\"", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.recurly_source.stg_recurly__line_item_history_tmp": {"database": "postgres", "schema": "recurly_integrations_tests_recurly_source", "name": "stg_recurly__line_item_history_tmp", "resource_type": "model", "package_name": "recurly_source", "path": "tmp/stg_recurly__line_item_history_tmp.sql", "original_file_path": "models/tmp/stg_recurly__line_item_history_tmp.sql", "unique_id": "model.recurly_source.stg_recurly__line_item_history_tmp", "fqn": ["recurly_source", "tmp", "stg_recurly__line_item_history_tmp"], "alias": "stg_recurly__line_item_history_tmp", "checksum": {"name": "sha256", "checksum": "50568a1b16de7a4a21448a595d2dac8a5ef6cc53134150ba5ccca4a9ce8ac3f7"}, "config": {"enabled": true, "alias": null, "schema": "recurly_source", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"schema": "recurly_source", "materialized": "view"}, "created_at": 1722889775.4214258, "relation_name": "\"postgres\".\"recurly_integrations_tests_recurly_source\".\"stg_recurly__line_item_history_tmp\"", "raw_code": "select *\nfrom {{ var('line_item_history') }}", "language": "sql", "refs": [], "sources": [["recurly", "line_item_history"]], "metrics": [], "depends_on": {"macros": [], "nodes": ["source.recurly_source.recurly.line_item_history"]}, "compiled_path": "target/compiled/recurly_source/models/tmp/stg_recurly__line_item_history_tmp.sql", "compiled": true, "compiled_code": "select *\nfrom \"postgres\".\"recurly_integrations_tests\".\"line_item_history_data\"", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.recurly_source.stg_recurly__account_history_tmp": {"database": "postgres", "schema": "recurly_integrations_tests_recurly_source", "name": "stg_recurly__account_history_tmp", "resource_type": "model", "package_name": "recurly_source", "path": "tmp/stg_recurly__account_history_tmp.sql", "original_file_path": "models/tmp/stg_recurly__account_history_tmp.sql", "unique_id": "model.recurly_source.stg_recurly__account_history_tmp", "fqn": ["recurly_source", "tmp", "stg_recurly__account_history_tmp"], "alias": "stg_recurly__account_history_tmp", "checksum": {"name": "sha256", "checksum": "d32fe5adf0391d6a68689658b69458827b92b533b1e16a63d449dc5fe5c4278a"}, "config": {"enabled": true, "alias": null, "schema": "recurly_source", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"schema": "recurly_source", "materialized": "view"}, "created_at": 1722889775.425177, "relation_name": "\"postgres\".\"recurly_integrations_tests_recurly_source\".\"stg_recurly__account_history_tmp\"", "raw_code": "select * \nfrom {{ var('account_history') }}", "language": "sql", "refs": [], "sources": [["recurly", "account_history"]], "metrics": [], "depends_on": {"macros": [], "nodes": ["source.recurly_source.recurly.account_history"]}, "compiled_path": "target/compiled/recurly_source/models/tmp/stg_recurly__account_history_tmp.sql", "compiled": true, "compiled_code": "select * \nfrom \"postgres\".\"recurly_integrations_tests\".\"account_history_data\"", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.recurly_source.stg_recurly__invoice_coupon_redemption_history_tmp": {"database": "postgres", "schema": "recurly_integrations_tests_recurly_source", "name": "stg_recurly__invoice_coupon_redemption_history_tmp", "resource_type": "model", "package_name": "recurly_source", "path": "tmp/stg_recurly__invoice_coupon_redemption_history_tmp.sql", "original_file_path": "models/tmp/stg_recurly__invoice_coupon_redemption_history_tmp.sql", "unique_id": "model.recurly_source.stg_recurly__invoice_coupon_redemption_history_tmp", "fqn": ["recurly_source", "tmp", "stg_recurly__invoice_coupon_redemption_history_tmp"], "alias": "stg_recurly__invoice_coupon_redemption_history_tmp", "checksum": {"name": "sha256", "checksum": "6510a4b3284c8a826226b86cf0d05e78afb872ed66dac94e34b11b36bc4a1041"}, "config": {"enabled": true, "alias": null, "schema": "recurly_source", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"schema": "recurly_source", "materialized": "view"}, "created_at": 1722889775.428781, "relation_name": "\"postgres\".\"recurly_integrations_tests_recurly_source\".\"stg_recurly__invoice_coupon_redemption_history_tmp\"", "raw_code": "select * \nfrom {{ var('invoice_coupon_redemption_history') }}", "language": "sql", "refs": [], "sources": [["recurly", "invoice_coupon_redemption_history"]], "metrics": [], "depends_on": {"macros": [], "nodes": ["source.recurly_source.recurly.invoice_coupon_redemption_history"]}, "compiled_path": "target/compiled/recurly_source/models/tmp/stg_recurly__invoice_coupon_redemption_history_tmp.sql", "compiled": true, "compiled_code": "select * \nfrom \"postgres\".\"recurly_integrations_tests\".\"invoice_coupon_redemption_history_data\"", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.recurly_source.stg_recurly__transaction_tmp": {"database": "postgres", "schema": "recurly_integrations_tests_recurly_source", "name": "stg_recurly__transaction_tmp", "resource_type": "model", "package_name": "recurly_source", "path": "tmp/stg_recurly__transaction_tmp.sql", "original_file_path": "models/tmp/stg_recurly__transaction_tmp.sql", "unique_id": "model.recurly_source.stg_recurly__transaction_tmp", "fqn": ["recurly_source", "tmp", "stg_recurly__transaction_tmp"], "alias": "stg_recurly__transaction_tmp", "checksum": {"name": "sha256", "checksum": "c00169e517f71d5f91ffc1295216fb9b22100c76f8a4c585edae17a1da307f29"}, "config": {"enabled": true, "alias": null, "schema": "recurly_source", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"schema": "recurly_source", "materialized": "view"}, "created_at": 1722889775.43209, "relation_name": "\"postgres\".\"recurly_integrations_tests_recurly_source\".\"stg_recurly__transaction_tmp\"", "raw_code": "select * \nfrom {{ var('transaction') }}", "language": "sql", "refs": [], "sources": [["recurly", "transaction"]], "metrics": [], "depends_on": {"macros": [], "nodes": ["source.recurly_source.recurly.transaction"]}, "compiled_path": "target/compiled/recurly_source/models/tmp/stg_recurly__transaction_tmp.sql", "compiled": true, "compiled_code": "select * \nfrom \"postgres\".\"recurly_integrations_tests\".\"transaction_data\"", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.recurly.recurly__account_daily_overview": {"database": "postgres", "schema": "recurly_integrations_tests_recurly", "name": "recurly__account_daily_overview", "resource_type": "model", "package_name": "recurly", "path": "recurly__account_daily_overview.sql", "original_file_path": "models/recurly__account_daily_overview.sql", "unique_id": "model.recurly.recurly__account_daily_overview", "fqn": ["recurly", "recurly__account_daily_overview"], "alias": "recurly__account_daily_overview", "checksum": {"name": "sha256", "checksum": "f07f4a484ddfc6c5b67bad2ec2601e27713e74c5a0ebc9f7693d6954c4ae578e"}, "config": {"enabled": true, "alias": null, "schema": "recurly", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected"}, "tags": [], "description": "Each record is a day in an account and its accumulated balance totals based on all line item transactions up to that day.", "columns": {"account_daily_id": {"name": "account_daily_id", "description": "Unique account key, based on account id and date of balance data.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "account_id": {"name": "account_id", "description": "Account associated with balance transactions.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "account_created_at": {"name": "account_created_at", "description": "Timestamp of when the account entry was created.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "account_city": {"name": "account_city", "description": "City in the world the account is associated with.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "account_company": {"name": "account_company", "description": "The company related with the account.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "account_code": {"name": "account_code", "description": "The unique identifier of the account. This cannot be changed once the account is created.  Provided during account creation.\n", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "account_country": {"name": "account_country", "description": "Country in the world the account is associated with.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "account_email": {"name": "account_email", "description": "Email address associated with the account.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "account_first_name": {"name": "account_first_name", "description": "First name associated with the account.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "account_is_tax_exempt": {"name": "account_is_tax_exempt", "description": "The tax status of the account. true exempts tax on the account, false applies tax on the account.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "account_last_name": {"name": "account_last_name", "description": "Last name associated with the account.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "account_postal_code": {"name": "account_postal_code", "description": "Postal code in the world the account is associated with.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "account_region": {"name": "account_region", "description": "Region in the world the account is associated with (usually would be state if it was a U.S. account.)", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "account_state": {"name": "account_state", "description": "Current state of the account.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "account_username": {"name": "account_username", "description": "A secondary value for the account.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "date_day": {"name": "date_day", "description": "Date compiled transactions by day for this account balance took place.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "date_week": {"name": "date_week", "description": "Date compiled transactions by week for this account balance took place.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "date_month": {"name": "date_month", "description": "Date compiled transactions by month for this account balance took place.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "date_year": {"name": "date_year", "description": "Date compiled transactions by year for this account balance took place.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "date_index": {"name": "date_index", "description": "The nth date in the transaction model.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "daily_transaction_count": {"name": "daily_transaction_count", "description": "Number of transactions that took place this day for this account.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "daily_net_change": {"name": "daily_net_change", "description": "Total sum of all transactions that took place this day for this account and the balance change that ensued.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "daily_invoice_count": {"name": "daily_invoice_count", "description": "Number of invoices that day for this account.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "daily_charges": {"name": "daily_charges", "description": "Total sum of all charges that took place this day for this account.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "daily_credits": {"name": "daily_credits", "description": "Total sum of all credits that took place this day for this account.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "daily_discounts": {"name": "daily_discounts", "description": "Total sum of all discounts that took place this day for this account.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "daily_taxes": {"name": "daily_taxes", "description": "Total sum of all taxes that took place this day for this account.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "daily_charge_count": {"name": "daily_charge_count", "description": "Number of charges that day for this account.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "daily_credit_count": {"name": "daily_credit_count", "description": "Number of credits that day for this account.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "rolling_account_balance": {"name": "rolling_account_balance", "description": "Accumulated account balance based on previous daily transactions on this account.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "rolling_invoices": {"name": "rolling_invoices", "description": "Number of invoices on this account since it was created to the current date.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "rolling_transactions": {"name": "rolling_transactions", "description": "Number of transactions on this account since it was created to the current date.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "rolling_charge_balance": {"name": "rolling_charge_balance", "description": "Accumulated charge balance based on previous daily charges on this account.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "rolling_credit_balance": {"name": "rolling_credit_balance", "description": "Accumulated credit balance based on previous daily credits on this account.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "rolling_discount_balance": {"name": "rolling_discount_balance", "description": "Accumulated discount balance based on previous daily discounts on this account.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "rolling_tax_balance": {"name": "rolling_tax_balance", "description": "Accumulated tax balance based on previous daily taxes on this account.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "rolling_charges": {"name": "rolling_charges", "description": "Number of charges on this account since it was created to the current date.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "rolling_credits": {"name": "rolling_credits", "description": "Number of credits on this account since it was created to the current date.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "recurly://models/recurly.yml", "build_path": null, "unrendered_config": {"schema": "recurly", "materialized": "table"}, "created_at": 1722889775.8316429, "relation_name": "\"postgres\".\"recurly_integrations_tests_recurly\".\"recurly__account_daily_overview\"", "raw_code": "with final as (\n\n    select * \n    from {{ ref('int_recurly__account_running_totals') }}\n) \n\nselect *\nfrom final", "language": "sql", "refs": [{"name": "int_recurly__account_running_totals", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.recurly.int_recurly__account_running_totals"]}, "compiled_path": "target/compiled/recurly/models/recurly__account_daily_overview.sql", "compiled": true, "compiled_code": "with final as (\n\n    select * \n    from \"postgres\".\"recurly_integrations_tests_recurly_int\".\"int_recurly__account_running_totals\"\n) \n\nselect *\nfrom final", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.recurly.recurly__balance_transactions": {"database": "postgres", "schema": "recurly_integrations_tests_recurly", "name": "recurly__balance_transactions", "resource_type": "model", "package_name": "recurly", "path": "recurly__balance_transactions.sql", "original_file_path": "models/recurly__balance_transactions.sql", "unique_id": "model.recurly.recurly__balance_transactions", "fqn": ["recurly", "recurly__balance_transactions"], "alias": "recurly__balance_transactions", "checksum": {"name": "sha256", "checksum": "cdb5dfe3a7902ca86e2e6f41bb3f33f0b3fe514f10d8f9a9da4c2cf215e5bdad"}, "config": {"enabled": true, "alias": null, "schema": "recurly", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected"}, "tags": [], "description": "Each record represents a specific line item charge, credit, or other balance change that accumulates into the final invoices.", "columns": {"balance_transaction_id": {"name": "balance_transaction_id", "description": "Unique identifier for the balance transaction line item", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "created_at": {"name": "created_at", "description": "When the line item was created.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "updated_at": {"name": "updated_at", "description": "When the line item was last updated.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "account_id": {"name": "account_id", "description": "Customer in Recurly responsible for the line item.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "invoice_id": {"name": "invoice_id", "description": "Invoice in Recurly these line items are associated with.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "invoice_number": {"name": "invoice_number", "description": "If VAT taxation and the Country Invoice Sequencing feature are enabled,  invoices will have country-specific invoice numbers for invoices billed to EU countries (e.g. FR1001).  Non-EU invoices will continue to use the site-level invoice number sequence.\n", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "type": {"name": "type", "description": "Charges are positive line items that debit the account.  Credits are negative line items that credit the account. Enum: \"charge\", \"credit\"\n", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "state": {"name": "state", "description": "Pending line items are charges or credits on an account that have not been applied to an invoice yet.  Invoiced line items will always have an invoice_id value. Enum: \"invoiced\", \"pending\"\n", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "origin": {"name": "origin", "description": "A credit created from an original charge will have the value of the charge's origin\n", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "product_code": {"name": "product_code", "description": "For plan-related line items this will be the plan's code, for add-on related line items it will be the add-on's code.  For item-related line items it will be the item's external_sku.\n", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "discount": {"name": "discount", "description": "The discount applied to the line item.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "tax": {"name": "tax", "description": "The tax amount for the line item.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "description": {"name": "description", "description": "Description that appears on the invoice. For subscription related items this will be filled in automatically.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "plan_code": {"name": "plan_code", "description": "If the line item is a charge or credit for a plan or add-on, this is the plan's code.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "add_on_code": {"name": "add_on_code", "description": "If the line item is a charge or credit for an add-on, this is its code.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "has_refund": {"name": "has_refund", "description": "True if the line item is refund, false if it is not.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "refunded_quantity": {"name": "refunded_quantity", "description": "For refund charges, the quantity being refunded. For non-refund charges, the total quantity refunded (possibly over multiple refunds).", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "currency": {"name": "currency", "description": "3-letter ISO 4217 currency code.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "amount": {"name": "amount", "description": "Total after discounts and taxes (quantity * unit_amount) - (discount + tax).", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "credit_applied": {"name": "credit_applied", "description": "The amount of credit from this line item that was applied to the invoice.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "quantity": {"name": "quantity", "description": "This number will be multiplied by the unit amount to compute the subtotal before any discounts or taxes.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "unit_amount": {"name": "unit_amount", "description": "Positive amount for a charge, negative amount for a credit.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "subtotal": {"name": "subtotal", "description": "Total before discounts and taxes (quantity * unit_amount).", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "started_at": {"name": "started_at", "description": "If an end date is present, this is value indicates the beginning of a billing time range.  If no end date is present it indicates billing for a specific date.\n", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "ended_at": {"name": "ended_at", "description": "If this date is provided, it indicates the end of a time range", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "original_line_item_invoice_id": {"name": "original_line_item_invoice_id", "description": "The invoice where the credit originated.  Will only have a value if the line item is a credit created from a previous credit,  or if the credit was created from a charge refund.\n", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "previous_line_item_id": {"name": "previous_line_item_id", "description": "Will only have a value if the line item is a credit created from a previous credit,  or if the credit was created from a charge refund.\n", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "invoice_state": {"name": "invoice_state", "description": "The invoice state.  Enum: \"open\", \"pending\", \"processing\", \"past_due\", \"paid\", \"closed\", \"failed\", \"voided\".\n", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "invoice_origin": {"name": "invoice_origin", "description": "The event that created the invoice. Enum: \"credit\", \"gift_card\", \"immediate_change\", \"line_item_refund\", \"open_amount_refund\",  \"purchase\", \"renewal\", \"termination\", \"write_off\", \"prepayment\".\n", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "invoice_type": {"name": "invoice_type", "description": "Invoices are either \"charge\", \"credit\", or \"legacy\" invoices.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "invoice_created_at": {"name": "invoice_created_at", "description": "When the invoice was created.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "invoice_due_at": {"name": "invoice_due_at", "description": "Date invoice is due. This is the date the net terms are reached.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "invoice_closed_at": {"name": "invoice_closed_at", "description": "Date invoice was marked paid or failed.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "transaction_id": {"name": "transaction_id", "description": "The id of the transaction associated with the invoice.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "transaction_created_at": {"name": "transaction_created_at", "description": "Time transaction was created.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "transaction_type": {"name": "transaction_type", "description": "Transaction types:\n  authorization: verifies billing information and places a hold on money in the customer's account.\n  capture: captures funds held by an authorization and completes a purchase.\n  purchase: combines the authorization and capture in one transaction.\n  refund: returns all or a portion of the money collected in a previous transaction to the customer.\n  verify: a $0 or $1 transaction used to verify billing information which is immediately voided.\nEnum: \"authorization\", \"capture\", \"purchase\", \"refund\", \"verify\"\n", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "transaction_origin": {"name": "transaction_origin", "description": "Describes how the transaction was triggered. Enum: \"api\", \"chargeback\", \"force_collect\", \"hpp\", \"merchant\", \"recurly_admin\", \"recurlyjs\", \"recurring\", \"refunded_externally\", \"transparent\"\n", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "transaction_status": {"name": "transaction_status", "description": "The current transaction status. Note that the status may change, e.g. a pending transaction may become declined or success may later become void. Enum: \"chargeback\", \"declined\", \"error\", \"pending\", \"processing\", \"scheduled\", \"success\", \"void\"\n", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "transaction_billing_country": {"name": "transaction_billing_country", "description": "Billing info - Country, 2-letter ISO code.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "transaction_status_message": {"name": "transaction_status_message", "description": "For declined (success=false) transactions, the message displayed to the merchant.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "transaction_payment_method_object": {"name": "transaction_payment_method_object", "description": "Examples include: \"amazon\", \"amazon_billing_agreement\", \"apple_pay\", \"bank_account_info\", \"check\", \"credit_card\", \"eft\", \"debit\", \"gateway_token\", \"iban_bank_account\", \"money_order\", \"other\", \"paypal\", \"paypal_billing_agreement\", \"roku\",  \"sepadirectdebit\", \"wire_transfer\"\n", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "recurly://models/recurly.yml", "build_path": null, "unrendered_config": {"schema": "recurly", "materialized": "table"}, "created_at": 1722889775.838515, "relation_name": "\"postgres\".\"recurly_integrations_tests_recurly\".\"recurly__balance_transactions\"", "raw_code": "with line_item_history as (\n\n    select * \n    from {{ var('line_item_history')}}\n    where is_most_recent_record\n),\n\ninvoice_history as (\n\n    select *\n    from {{ var('invoice_history')}}\n    where is_most_recent_record\n),\n\ntransaction_history as (\n\n    select * \n    from {{ var('transaction')}}\n    where is_most_recent_record\n),\n\n\nfinal as (\n\n    select \n        line_item_history.line_item_id as balance_transaction_id,\n        line_item_history.created_at,\n        line_item_history.updated_at,\n        line_item_history.account_id,\n        line_item_history.invoice_id,\n        line_item_history.invoice_number,\n        line_item_history.type,\n        line_item_history.state,\n        line_item_history.origin,\n        line_item_history.product_code,\n        line_item_history.discount,\n        line_item_history.tax,\n        line_item_history.description,\n        line_item_history.plan_code,\n        line_item_history.add_on_code,\n        line_item_history.has_refund,\n        line_item_history.refunded_quantity,\n        line_item_history.currency,\n        line_item_history.amount,\n        line_item_history.credit_applied, \n        line_item_history.quantity,\n        line_item_history.unit_amount,\n        line_item_history.subtotal,\n        line_item_history.started_at,\n        line_item_history.ended_at,    \n        line_item_history.original_line_item_invoice_id,\n        line_item_history.previous_line_item_id,\n        invoice_history.state as invoice_state,\n        invoice_history.origin as invoice_origin,\n        invoice_history.type as invoice_type,\n        invoice_history.created_at as invoice_created_at,\n        invoice_history.due_at as invoice_due_at,\n        invoice_history.closed_at as invoice_closed_at, \n        transaction_history.transaction_id,\n        transaction_history.created_at as transaction_created_at,\n        transaction_history.type as transaction_type,\n        transaction_history.origin as transaction_origin,\n        transaction_history.status as transaction_status, \n        transaction_history.billing_country as transaction_billing_country, \n        transaction_history.status_message as transaction_status_message,\n        transaction_history.payment_method_object as transaction_payment_method_object\n    from line_item_history \n    left join invoice_history\n        on line_item_history.invoice_id = invoice_history.invoice_id\n    left join transaction_history \n        on invoice_history.invoice_id = transaction_history.invoice_id\n)\n\nselect * \nfrom final", "language": "sql", "refs": [{"name": "stg_recurly__line_item_history", "package": null, "version": null}, {"name": "stg_recurly__invoice_history", "package": null, "version": null}, {"name": "stg_recurly__transaction", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.recurly_source.stg_recurly__line_item_history", "model.recurly_source.stg_recurly__invoice_history", "model.recurly_source.stg_recurly__transaction"]}, "compiled_path": "target/compiled/recurly/models/recurly__balance_transactions.sql", "compiled": true, "compiled_code": "with line_item_history as (\n\n    select * \n    from \"postgres\".\"recurly_integrations_tests_recurly_source\".\"stg_recurly__line_item_history\"\n    where is_most_recent_record\n),\n\ninvoice_history as (\n\n    select *\n    from \"postgres\".\"recurly_integrations_tests_recurly_source\".\"stg_recurly__invoice_history\"\n    where is_most_recent_record\n),\n\ntransaction_history as (\n\n    select * \n    from \"postgres\".\"recurly_integrations_tests_recurly_source\".\"stg_recurly__transaction\"\n    where is_most_recent_record\n),\n\n\nfinal as (\n\n    select \n        line_item_history.line_item_id as balance_transaction_id,\n        line_item_history.created_at,\n        line_item_history.updated_at,\n        line_item_history.account_id,\n        line_item_history.invoice_id,\n        line_item_history.invoice_number,\n        line_item_history.type,\n        line_item_history.state,\n        line_item_history.origin,\n        line_item_history.product_code,\n        line_item_history.discount,\n        line_item_history.tax,\n        line_item_history.description,\n        line_item_history.plan_code,\n        line_item_history.add_on_code,\n        line_item_history.has_refund,\n        line_item_history.refunded_quantity,\n        line_item_history.currency,\n        line_item_history.amount,\n        line_item_history.credit_applied, \n        line_item_history.quantity,\n        line_item_history.unit_amount,\n        line_item_history.subtotal,\n        line_item_history.started_at,\n        line_item_history.ended_at,    \n        line_item_history.original_line_item_invoice_id,\n        line_item_history.previous_line_item_id,\n        invoice_history.state as invoice_state,\n        invoice_history.origin as invoice_origin,\n        invoice_history.type as invoice_type,\n        invoice_history.created_at as invoice_created_at,\n        invoice_history.due_at as invoice_due_at,\n        invoice_history.closed_at as invoice_closed_at, \n        transaction_history.transaction_id,\n        transaction_history.created_at as transaction_created_at,\n        transaction_history.type as transaction_type,\n        transaction_history.origin as transaction_origin,\n        transaction_history.status as transaction_status, \n        transaction_history.billing_country as transaction_billing_country, \n        transaction_history.status_message as transaction_status_message,\n        transaction_history.payment_method_object as transaction_payment_method_object\n    from line_item_history \n    left join invoice_history\n        on line_item_history.invoice_id = invoice_history.invoice_id\n    left join transaction_history \n        on invoice_history.invoice_id = transaction_history.invoice_id\n)\n\nselect * \nfrom final", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.recurly.recurly__account_overview": {"database": "postgres", "schema": "recurly_integrations_tests_recurly", "name": "recurly__account_overview", "resource_type": "model", "package_name": "recurly", "path": "recurly__account_overview.sql", "original_file_path": "models/recurly__account_overview.sql", "unique_id": "model.recurly.recurly__account_overview", "fqn": ["recurly", "recurly__account_overview"], "alias": "recurly__account_overview", "checksum": {"name": "sha256", "checksum": "514acaecfef90acaf0212685db6bd7bef3afd629d1db84cf8459f7a9970f64de"}, "config": {"enabled": true, "alias": null, "schema": "recurly", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected"}, "tags": [], "description": "Each record represents an account, enriched with metrics about their associated transactions.", "columns": {"account_id": {"name": "account_id", "description": "Primary key for the account.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "account_created_at": {"name": "account_created_at", "description": "Timestamp of when the account entry was created.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "account_city": {"name": "account_city", "description": "City in the world the account is associated with.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "account_company": {"name": "account_company", "description": "The company related with the account.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "account_code": {"name": "account_code", "description": "The unique identifier of the account. This cannot be changed once the account is created.  Provided during account creation.\n", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "account_country": {"name": "account_country", "description": "Country in the world the account is associated with.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "account_email": {"name": "account_email", "description": "Email address associated with the account.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "account_first_name": {"name": "account_first_name", "description": "First name associated with the account.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "account_is_tax_exempt": {"name": "account_is_tax_exempt", "description": "The tax status of the account. true exempts tax on the account, false applies tax on the account.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "account_last_name": {"name": "account_last_name", "description": "Last name associated with the account.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "account_postal_code": {"name": "account_postal_code", "description": "Postal code in the world the account is associated with.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "account_region": {"name": "account_region", "description": "Region in the world the account is associated with (usually would be state if it was a U.S. account.)", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "account_state": {"name": "account_state", "description": "Current state of the account.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "account_username": {"name": "account_username", "description": "A secondary value for the account.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "total_transactions": {"name": "total_transactions", "description": "Total amount of unique transactions issued to this account.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "total_invoices": {"name": "total_invoices", "description": "Total amount of unique invoices issued to this account.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "total_charges": {"name": "total_charges", "description": "Total amount of charges issued to this account.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "total_credits": {"name": "total_credits", "description": "Total amount of credits issued to this account.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "total_balance": {"name": "total_balance", "description": "Gross amount of all transactions made with this account.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "total_discounts": {"name": "total_discounts", "description": "Total amount of discounts issued to this account.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "total_taxes": {"name": "total_taxes", "description": "Total amount of taxes issued to this account.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "total_charge_count": {"name": "total_charge_count", "description": "Total number of charges issued to this account.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "total_credit_count": {"name": "total_credit_count", "description": "Total number of credits issued to this account.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "transactions_this_month": {"name": "transactions_this_month", "description": "All transactions on this account from this current calendar month.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "invoices_this_month": {"name": "invoices_this_month", "description": "All invoices on this account from this current calendar month.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "charges_this_month": {"name": "charges_this_month", "description": "All charges on this account from this current calendar month.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "credits_this_month": {"name": "credits_this_month", "description": "All credits on this account from this current calendar month.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "balance_this_month": {"name": "balance_this_month", "description": "Gross amount of all transactions made on this account from this current calendar month.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "discounts_this_month": {"name": "discounts_this_month", "description": "Discounts issued on the account from this current calendar month.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "taxes_this_month": {"name": "taxes_this_month", "description": "Taxes issued on the account from this current calendar month.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "first_charge_date": {"name": "first_charge_date", "description": "Date the first charge on the account was issued.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "most_recent_charge_date": {"name": "most_recent_charge_date", "description": "Date the most recent charge on the account was issued.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "first_invoice_date": {"name": "first_invoice_date", "description": "Date the first invoice on the account was issued.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "most_recent_invoice_date": {"name": "most_recent_invoice_date", "description": "Date the most recent invoice on the account was issued.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "next_invoice_due_at": {"name": "next_invoice_due_at", "description": "Date the most recent invoice on the account is due at.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "first_transaction_date": {"name": "first_transaction_date", "description": "Date first transaction occurred on the account.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "most_recent_transaction_date": {"name": "most_recent_transaction_date", "description": "Date most recent transaction occurred on the account.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "recurly://models/recurly.yml", "build_path": null, "unrendered_config": {"schema": "recurly", "materialized": "table"}, "created_at": 1722889775.83576, "relation_name": "\"postgres\".\"recurly_integrations_tests_recurly\".\"recurly__account_overview\"", "raw_code": "with account_history as (\n\n    select * \n    from {{ var('account_history') }}\n    where is_most_recent_record\n),\n\nbalance_transaction_joined as (\n\n    select * \n    from {{ ref('recurly__balance_transactions') }}\n),\n\naccount_cumulatives as (\n\n    select * \n    from {{ ref('int_recurly__account_cumulatives') }}\n),\n\naccount_next_invoice as (\n\n    select \n        account_id, \n        min(invoice_due_at) as next_invoice_due_at\n    from balance_transaction_joined\n    where invoice_due_at > {{ dbt.date_trunc('day', dbt.current_timestamp_backcompat()) }}\n    group by 1  \n),\n\nfinal as ( \n\n    select \n        account_history.account_id,\n        account_history.created_at as account_created_at,\n        account_history.account_city,\n        account_history.code as account_code,       \n        account_history.company as account_company,\n        account_history.account_country,\n        account_history.email as account_email,\n        account_history.first_name as account_first_name,\n        account_history.is_tax_exempt as account_is_tax_exempt,\n        account_history.last_name as account_last_name,\n        account_history.account_postal_code,\n        account_history.account_region,\n        account_history.state as account_state,\n        account_history.username as account_username\n\n        {{ fivetran_utils.persist_pass_through_columns('recurly_account_pass_through_columns', identifier='account_history') }},\n\n        coalesce(account_cumulatives.total_transactions, 0) as total_transactions,\n        coalesce(account_cumulatives.total_invoices, 0) as total_invoices,\n        coalesce(account_cumulatives.total_charges, 0) as total_charges,\n        coalesce(account_cumulatives.total_credits, 0) as total_credits,\n        coalesce(account_cumulatives.total_balance, 0) as total_balance,\n        coalesce(account_cumulatives.total_discounts, 0) as total_discounts,\n        coalesce(account_cumulatives.total_taxes, 0) as total_taxes,\n        coalesce(account_cumulatives.total_charge_count, 0) as total_charge_count,\n        coalesce(account_cumulatives.total_credit_count, 0) as total_credit_count,\n        coalesce(account_cumulatives.transactions_this_month, 0) as transactions_this_month,\n        coalesce(account_cumulatives.invoices_this_month, 0) as invoices_this_month,\n        coalesce(account_cumulatives.charges_this_month, 0) as charges_this_month,\n        coalesce(account_cumulatives.credits_this_month, 0) as credits_this_month,\n        coalesce(account_cumulatives.balance_this_month, 0) as balance_this_month,\n        coalesce(account_cumulatives.discounts_this_month, 0) as discounts_this_month,\n        coalesce(account_cumulatives.taxes_this_month, 0) as taxes_this_month,\n        account_cumulatives.first_charge_date,\n        account_cumulatives.most_recent_charge_date,\n        account_cumulatives.first_invoice_date,\n        account_cumulatives.most_recent_invoice_date,\n        account_next_invoice.next_invoice_due_at,\n        account_cumulatives.first_transaction_date,\n        account_cumulatives.most_recent_transaction_date\n\n    from account_history\n    left join account_cumulatives \n        on account_history.account_id = account_cumulatives.account_id\n    left join account_next_invoice\n        on account_cumulatives.account_id = account_next_invoice.account_id\n)\n\nselect * \nfrom final", "language": "sql", "refs": [{"name": "stg_recurly__account_history", "package": null, "version": null}, {"name": "recurly__balance_transactions", "package": null, "version": null}, {"name": "int_recurly__account_cumulatives", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.current_timestamp_backcompat", "macro.dbt.date_trunc", "macro.fivetran_utils.persist_pass_through_columns"], "nodes": ["model.recurly_source.stg_recurly__account_history", "model.recurly.recurly__balance_transactions", "model.recurly.int_recurly__account_cumulatives"]}, "compiled_path": "target/compiled/recurly/models/recurly__account_overview.sql", "compiled": true, "compiled_code": "with account_history as (\n\n    select * \n    from \"postgres\".\"recurly_integrations_tests_recurly_source\".\"stg_recurly__account_history\"\n    where is_most_recent_record\n),\n\nbalance_transaction_joined as (\n\n    select * \n    from \"postgres\".\"recurly_integrations_tests_recurly\".\"recurly__balance_transactions\"\n),\n\naccount_cumulatives as (\n\n    select * \n    from \"postgres\".\"recurly_integrations_tests_recurly_int\".\"int_recurly__account_cumulatives\"\n),\n\naccount_next_invoice as (\n\n    select \n        account_id, \n        min(invoice_due_at) as next_invoice_due_at\n    from balance_transaction_joined\n    where invoice_due_at > date_trunc('day', \n    current_timestamp::timestamp\n)\n    group by 1  \n),\n\nfinal as ( \n\n    select \n        account_history.account_id,\n        account_history.created_at as account_created_at,\n        account_history.account_city,\n        account_history.code as account_code,       \n        account_history.company as account_company,\n        account_history.account_country,\n        account_history.email as account_email,\n        account_history.first_name as account_first_name,\n        account_history.is_tax_exempt as account_is_tax_exempt,\n        account_history.last_name as account_last_name,\n        account_history.account_postal_code,\n        account_history.account_region,\n        account_history.state as account_state,\n        account_history.username as account_username\n\n        \n\n\n\n,\n\n        coalesce(account_cumulatives.total_transactions, 0) as total_transactions,\n        coalesce(account_cumulatives.total_invoices, 0) as total_invoices,\n        coalesce(account_cumulatives.total_charges, 0) as total_charges,\n        coalesce(account_cumulatives.total_credits, 0) as total_credits,\n        coalesce(account_cumulatives.total_balance, 0) as total_balance,\n        coalesce(account_cumulatives.total_discounts, 0) as total_discounts,\n        coalesce(account_cumulatives.total_taxes, 0) as total_taxes,\n        coalesce(account_cumulatives.total_charge_count, 0) as total_charge_count,\n        coalesce(account_cumulatives.total_credit_count, 0) as total_credit_count,\n        coalesce(account_cumulatives.transactions_this_month, 0) as transactions_this_month,\n        coalesce(account_cumulatives.invoices_this_month, 0) as invoices_this_month,\n        coalesce(account_cumulatives.charges_this_month, 0) as charges_this_month,\n        coalesce(account_cumulatives.credits_this_month, 0) as credits_this_month,\n        coalesce(account_cumulatives.balance_this_month, 0) as balance_this_month,\n        coalesce(account_cumulatives.discounts_this_month, 0) as discounts_this_month,\n        coalesce(account_cumulatives.taxes_this_month, 0) as taxes_this_month,\n        account_cumulatives.first_charge_date,\n        account_cumulatives.most_recent_charge_date,\n        account_cumulatives.first_invoice_date,\n        account_cumulatives.most_recent_invoice_date,\n        account_next_invoice.next_invoice_due_at,\n        account_cumulatives.first_transaction_date,\n        account_cumulatives.most_recent_transaction_date\n\n    from account_history\n    left join account_cumulatives \n        on account_history.account_id = account_cumulatives.account_id\n    left join account_next_invoice\n        on account_cumulatives.account_id = account_next_invoice.account_id\n)\n\nselect * \nfrom final", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.recurly.recurly__subscription_overview": {"database": "postgres", "schema": "recurly_integrations_tests_recurly", "name": "recurly__subscription_overview", "resource_type": "model", "package_name": "recurly", "path": "recurly__subscription_overview.sql", "original_file_path": "models/recurly__subscription_overview.sql", "unique_id": "model.recurly.recurly__subscription_overview", "fqn": ["recurly", "recurly__subscription_overview"], "alias": "recurly__subscription_overview", "checksum": {"name": "sha256", "checksum": "fe735cfe9119c48600d734a8bb47dc6afc348b37ca0a86b5a1be3b2fc92dc433"}, "config": {"enabled": true, "alias": null, "schema": "recurly", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected"}, "tags": [], "description": "Each record represents a subscription, enriched with metrics about time, revenue, state, and period.", "columns": {"subscription_key": {"name": "subscription_key", "description": "Unique identifier for the subscription daily overview table.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "subscription_id": {"name": "subscription_id", "description": "Unique identifier for the subscription.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "activated_at": {"name": "activated_at", "description": "When the subscription was activated.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "add_ons_total": {"name": "add_ons_total", "description": "Total price of add-ons. Greater or equal to 0.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "canceled_at": {"name": "canceled_at", "description": "When the subscription was canceled. Can take future dates.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "current_period_ended_at": {"name": "current_period_ended_at", "description": "Current billing period ends at.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "current_period_started_at": {"name": "current_period_started_at", "description": "Current billing period started at.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "expiration_reason": {"name": "expiration_reason", "description": "Reason for subscription expiration.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "expires_at": {"name": "expires_at", "description": "When the subscription has expired. Can take future dates.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "has_auto_renew": {"name": "has_auto_renew", "description": "Whether the subscription renews at the end of its term. Default: true\n", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "subscription_end_date": {"name": "subscription_end_date", "description": "When the subscription actually ends, factors in cancellations earlier than the expected end date.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "subscription_interval_days": {"name": "subscription_interval_days", "description": "Subscription interval by number of days, accounting for cancelled/expired periods.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "subscription_period": {"name": "subscription_period", "description": "The nth subscription defined by the time period set. Subscriptions start with month 0.\n", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "subscription_state": {"name": "subscription_state", "description": "The current state of the subscription. Enum: \"active\", \"canceled\", \"expired\", \"failed\", \"future\", \"paused\"\n", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "subtotal": {"name": "subtotal", "description": "Estimated total, before tax.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "trial_ends_at": {"name": "trial_ends_at", "description": "Trial period ends at.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "trial_started_at": {"name": "trial_started_at", "description": "Trial period started at.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "trial_interval_days": {"name": "trial_interval_days", "description": "Period of trial, in days.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "unit_amount": {"name": "unit_amount", "description": "Subscription unit price.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "updated_at": {"name": "updated_at", "description": "When the subscription was updated.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "account_id": {"name": "account_id", "description": "The account this subscription belongs to.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "account_created_at": {"name": "account_created_at", "description": "The date this account was created.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "account_email": {"name": "account_email", "description": "Email address associated with the account for this subscription.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "account_first_name": {"name": "account_first_name", "description": "First name associated with the account for this subscription.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "account_last_name": {"name": "account_last_name", "description": "Last name associated with the account for this subscription.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "account_state": {"name": "account_state", "description": "Current state of the account.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "plan_code": {"name": "plan_code", "description": "Unique code to identify the plan. This is used in Hosted Payment Page URLs and in the invoice exports.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "plan_created_at": {"name": "plan_created_at", "description": "When the plan was created.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "plan_deleted_at": {"name": "plan_deleted_at", "description": "When the plan was deleted.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "plan_interval_days": {"name": "plan_interval_days", "description": "The number of days on the expected Recurly plan.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "plan_is_tax_exempt": {"name": "plan_is_tax_exempt", "description": "true exempts tax on the plan, false applies tax on the plan.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "plan_name": {"name": "plan_name", "description": "This name describes your plan and will appear on the Hosted Payment Page and the subscriber's invoice.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "plan_state": {"name": "plan_state", "description": "The current state of the plan. Enum: \"active\", \"inactive\"\n", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "plan_total_billing_cycles": {"name": "plan_total_billing_cycles", "description": "Automatically terminate subscriptions after a defined number of billing cycles.  Number of billing cycles before the plan automatically stops renewing, defaults to null for continuous, automatic renewal.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "recurly://models/recurly.yml", "build_path": null, "unrendered_config": {"schema": "recurly", "materialized": "table"}, "created_at": 1722889775.843144, "relation_name": "\"postgres\".\"recurly_integrations_tests_recurly\".\"recurly__subscription_overview\"", "raw_code": "with subscription_history as (\n\n    select * \n    from {{ var('subscription_history') }}\n    where is_most_recent_record\n),\n\nplan_history as (\n\n    select * \n    from {{ var('plan_history') }}\n    where is_most_recent_record\n),\n\nsubscription_enhanced as (\n\n    select \n        *,\n        coalesce(canceled_at, current_period_ended_at) as subscription_end_date,\n        row_number() over (partition by subscription_id order by current_period_started_at) - 1 as subscription_period\n        from subscription_history\n),\n\naccount_overview as (\n\n    select * \n    from {{ ref('recurly__account_overview') }}\n),\n\nplan_enhanced as (\n\n    select \n        *, \n        case when lower(interval_unit) = 'months' then interval_length * 30\n            when lower(interval_unit) = 'weeks' then interval_length * 7\n            else interval_length \n            end as interval_days\n    from plan_history\n),\n\nfinal as (\n\n    select \n        subscription_enhanced.subscription_id,\n        subscription_enhanced.updated_at,\n        {{ dbt_utils.generate_surrogate_key(['subscription_enhanced.subscription_id','subscription_enhanced.updated_at']) }} as subscription_key,\n        subscription_enhanced.activated_at,\n        subscription_enhanced.add_ons_total, \n        subscription_enhanced.canceled_at,\n        subscription_enhanced.current_period_ended_at,\n        subscription_enhanced.current_period_started_at,\n        subscription_enhanced.expiration_reason, \n        subscription_enhanced.expires_at,\n        subscription_enhanced.has_auto_renew,\n        subscription_enhanced.subscription_period,  \n        subscription_enhanced.state as subscription_state,\n        subscription_enhanced.subscription_end_date,\n        {{ dbt.datediff('subscription_enhanced.current_period_started_at', 'subscription_enhanced.subscription_end_date', 'day') }} as subscription_interval_days,\n        subscription_enhanced.subtotal, \n        subscription_enhanced.trial_ends_at,\n        subscription_enhanced.trial_started_at,\n        {{ dbt.datediff('subscription_enhanced.trial_started_at', 'subscription_enhanced.trial_ends_at', 'day') }} as trial_interval_days,\n        subscription_enhanced.unit_amount\n\n        {{ fivetran_utils.persist_pass_through_columns('recurly_subscription_pass_through_columns', identifier='subscription_enhanced') }},\n\n        account_overview.account_id as account_id,\n        account_overview.account_created_at,\n        account_overview.account_email,\n        account_overview.account_first_name, \n        account_overview.account_last_name, \n        account_overview.account_state as account_state,\n        plan_enhanced.code as plan_code,\n        plan_enhanced.created_at as plan_created_at,\n        plan_enhanced.deleted_at as plan_deleted_at,\n        plan_enhanced.interval_days as plan_interval_days,\n        plan_enhanced.is_tax_exempt as plan_is_tax_exempt,\n        plan_enhanced.name as plan_name,\n        plan_enhanced.state as plan_state,\n        plan_enhanced.total_billing_cycles as plan_total_billing_cycles\n    from subscription_enhanced\n    left join account_overview\n        on subscription_enhanced.account_id = account_overview.account_id\n    left join plan_enhanced\n        on subscription_enhanced.plan_id = plan_enhanced.plan_id\n)\n\nselect * \nfrom final", "language": "sql", "refs": [{"name": "stg_recurly__subscription_history", "package": null, "version": null}, {"name": "stg_recurly__plan_history", "package": null, "version": null}, {"name": "recurly__account_overview", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.generate_surrogate_key", "macro.dbt.datediff", "macro.fivetran_utils.persist_pass_through_columns"], "nodes": ["model.recurly_source.stg_recurly__subscription_history", "model.recurly_source.stg_recurly__plan_history", "model.recurly.recurly__account_overview"]}, "compiled_path": "target/compiled/recurly/models/recurly__subscription_overview.sql", "compiled": true, "compiled_code": "with subscription_history as (\n\n    select * \n    from \"postgres\".\"recurly_integrations_tests_recurly_source\".\"stg_recurly__subscription_history\"\n    where is_most_recent_record\n),\n\nplan_history as (\n\n    select * \n    from \"postgres\".\"recurly_integrations_tests_recurly_source\".\"stg_recurly__plan_history\"\n    where is_most_recent_record\n),\n\nsubscription_enhanced as (\n\n    select \n        *,\n        coalesce(canceled_at, current_period_ended_at) as subscription_end_date,\n        row_number() over (partition by subscription_id order by current_period_started_at) - 1 as subscription_period\n        from subscription_history\n),\n\naccount_overview as (\n\n    select * \n    from \"postgres\".\"recurly_integrations_tests_recurly\".\"recurly__account_overview\"\n),\n\nplan_enhanced as (\n\n    select \n        *, \n        case when lower(interval_unit) = 'months' then interval_length * 30\n            when lower(interval_unit) = 'weeks' then interval_length * 7\n            else interval_length \n            end as interval_days\n    from plan_history\n),\n\nfinal as (\n\n    select \n        subscription_enhanced.subscription_id,\n        subscription_enhanced.updated_at,\n        md5(cast(coalesce(cast(subscription_enhanced.subscription_id as TEXT), '_dbt_utils_surrogate_key_null_') || '-' || coalesce(cast(subscription_enhanced.updated_at as TEXT), '_dbt_utils_surrogate_key_null_') as TEXT)) as subscription_key,\n        subscription_enhanced.activated_at,\n        subscription_enhanced.add_ons_total, \n        subscription_enhanced.canceled_at,\n        subscription_enhanced.current_period_ended_at,\n        subscription_enhanced.current_period_started_at,\n        subscription_enhanced.expiration_reason, \n        subscription_enhanced.expires_at,\n        subscription_enhanced.has_auto_renew,\n        subscription_enhanced.subscription_period,  \n        subscription_enhanced.state as subscription_state,\n        subscription_enhanced.subscription_end_date,\n        \n        ((subscription_enhanced.subscription_end_date)::date - (subscription_enhanced.current_period_started_at)::date)\n     as subscription_interval_days,\n        subscription_enhanced.subtotal, \n        subscription_enhanced.trial_ends_at,\n        subscription_enhanced.trial_started_at,\n        \n        ((subscription_enhanced.trial_ends_at)::date - (subscription_enhanced.trial_started_at)::date)\n     as trial_interval_days,\n        subscription_enhanced.unit_amount\n\n        \n\n\n\n,\n\n        account_overview.account_id as account_id,\n        account_overview.account_created_at,\n        account_overview.account_email,\n        account_overview.account_first_name, \n        account_overview.account_last_name, \n        account_overview.account_state as account_state,\n        plan_enhanced.code as plan_code,\n        plan_enhanced.created_at as plan_created_at,\n        plan_enhanced.deleted_at as plan_deleted_at,\n        plan_enhanced.interval_days as plan_interval_days,\n        plan_enhanced.is_tax_exempt as plan_is_tax_exempt,\n        plan_enhanced.name as plan_name,\n        plan_enhanced.state as plan_state,\n        plan_enhanced.total_billing_cycles as plan_total_billing_cycles\n    from subscription_enhanced\n    left join account_overview\n        on subscription_enhanced.account_id = account_overview.account_id\n    left join plan_enhanced\n        on subscription_enhanced.plan_id = plan_enhanced.plan_id\n)\n\nselect * \nfrom final", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.recurly.recurly__churn_analysis": {"database": "postgres", "schema": "recurly_integrations_tests_recurly", "name": "recurly__churn_analysis", "resource_type": "model", "package_name": "recurly", "path": "recurly__churn_analysis.sql", "original_file_path": "models/recurly__churn_analysis.sql", "unique_id": "model.recurly.recurly__churn_analysis", "fqn": ["recurly", "recurly__churn_analysis"], "alias": "recurly__churn_analysis", "checksum": {"name": "sha256", "checksum": "b42763bab73a795f5e7636ccd0f798687170f237eb2a498d915b16c851de64cd"}, "config": {"enabled": true, "alias": null, "schema": "recurly", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected"}, "tags": [], "description": "Each record represents a subscription and their churn status and details.", "columns": {"subscription_id": {"name": "subscription_id", "description": "Unique identifier for the subscription.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "activated_at": {"name": "activated_at", "description": "When the subscription was activated.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "account_id": {"name": "account_id", "description": "The account this subscription belongs to.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "account_state": {"name": "account_state", "description": "Current state of the account.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "canceled_at": {"name": "canceled_at", "description": "When the subscription was canceled. Can take future dates.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "current_period_ended_at": {"name": "current_period_ended_at", "description": "Current billing period ends at.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "current_period_started_at": {"name": "current_period_started_at", "description": "Current billing period started at.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "expires_at": {"name": "expires_at", "description": "When the subscription has expired. Can take future dates.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "expiration_reason": {"name": "expiration_reason", "description": "Reason for subscription expiration.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "has_auto_renew": {"name": "has_auto_renew", "description": "Whether the subscription renews at the end of its term. Default: true\n", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "plan_name": {"name": "plan_name", "description": "This name describes your plan and will appear on the Hosted Payment Page and the subscriber's invoice.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "plan_state": {"name": "plan_state", "description": "The current state of the plan. Enum: \"active\", \"inactive\"\n", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "subscription_end_date": {"name": "subscription_end_date", "description": "When the subscription actually ends, factors in cancellations earlier than the expected end date.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "subscription_interval_days": {"name": "subscription_interval_days", "description": "Subscription interval by number of days, accounting for cancelled/expired periods.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "subscription_period": {"name": "subscription_period", "description": "The nth subscription defined by the time period set. Subscriptions start with month 0.\n", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "subscription_state": {"name": "subscription_state", "description": "The current state of the subscription. Enum: \"active\", \"canceled\", \"expired\", \"failed\", \"future\", \"paused\"\n", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "subtotal": {"name": "subtotal", "description": "Estimated total, before tax.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "unit_amount": {"name": "unit_amount", "description": "Subscription unit price.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "churn_reason": {"name": "churn_reason", "description": "Reason for churn. null if subscription has no expiration date. Enum: \"account closed\", \"canceled\", \"gift ended\", \"non-payment\", \"non-renewing\", \"trial ended\"\n", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "churn_reason_type": {"name": "churn_reason_type", "description": "Type of churn, null if subscription has no expiration date. Enum: \"involuntary\", \"voluntary\"\n", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "recurly://models/recurly.yml", "build_path": null, "unrendered_config": {"schema": "recurly", "materialized": "table"}, "created_at": 1722889775.840131, "relation_name": "\"postgres\".\"recurly_integrations_tests_recurly\".\"recurly__churn_analysis\"", "raw_code": "with subscription_overview as (\n\n    select *\n    from {{ ref('recurly__subscription_overview') }}\n),\n\nsubscription_churn_reason as (\n\n    select \n        subscription_id,\n        activated_at,\n        account_id,\n        account_state,\n        canceled_at,\n        current_period_ended_at,\n        current_period_started_at,\n        expires_at,\n        expiration_reason,\n        has_auto_renew,\n        plan_name,\n        plan_state,\n        subscription_end_date, \n        subscription_interval_days,\n        subscription_period,\n        subscription_state,\n        subtotal,\n        unit_amount,\n        case when expires_at is null then null \n            when account_state != 'active' then 'account closed'\n            when lower(expiration_reason) = 'canceled' then 'canceled'\n            when lower(expiration_reason) = 'nonpayment_gift' then 'gift ended'\n            when lower(expiration_reason) = 'nonpayment' then 'non-payment'\n            when lower(expiration_reason) = 'non renewing' then 'non-renewing'\n            when lower(expiration_reason) = 'tax_location_invalid' then 'tax location invalid' \n            when lower(expiration_reason) = 'nonpayment_trial' then 'trial ended'\n            else null \n        end as churn_reason\n    from subscription_overview\n),\n\n\nfinal as\n(\n    select \n        *,\n        case when churn_reason is null then null\n            when churn_reason in ('non-payment', 'tax location invalid') then 'involuntary'\n            else 'voluntary'\n            end as churn_reason_type\n    from subscription_churn_reason\n)\n\nselect * \nfrom final", "language": "sql", "refs": [{"name": "recurly__subscription_overview", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.recurly.recurly__subscription_overview"]}, "compiled_path": "target/compiled/recurly/models/recurly__churn_analysis.sql", "compiled": true, "compiled_code": "with subscription_overview as (\n\n    select *\n    from \"postgres\".\"recurly_integrations_tests_recurly\".\"recurly__subscription_overview\"\n),\n\nsubscription_churn_reason as (\n\n    select \n        subscription_id,\n        activated_at,\n        account_id,\n        account_state,\n        canceled_at,\n        current_period_ended_at,\n        current_period_started_at,\n        expires_at,\n        expiration_reason,\n        has_auto_renew,\n        plan_name,\n        plan_state,\n        subscription_end_date, \n        subscription_interval_days,\n        subscription_period,\n        subscription_state,\n        subtotal,\n        unit_amount,\n        case when expires_at is null then null \n            when account_state != 'active' then 'account closed'\n            when lower(expiration_reason) = 'canceled' then 'canceled'\n            when lower(expiration_reason) = 'nonpayment_gift' then 'gift ended'\n            when lower(expiration_reason) = 'nonpayment' then 'non-payment'\n            when lower(expiration_reason) = 'non renewing' then 'non-renewing'\n            when lower(expiration_reason) = 'tax_location_invalid' then 'tax location invalid' \n            when lower(expiration_reason) = 'nonpayment_trial' then 'trial ended'\n            else null \n        end as churn_reason\n    from subscription_overview\n),\n\n\nfinal as\n(\n    select \n        *,\n        case when churn_reason is null then null\n            when churn_reason in ('non-payment', 'tax location invalid') then 'involuntary'\n            else 'voluntary'\n            end as churn_reason_type\n    from subscription_churn_reason\n)\n\nselect * \nfrom final", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.recurly.recurly__monthly_recurring_revenue": {"database": "postgres", "schema": "recurly_integrations_tests_recurly", "name": "recurly__monthly_recurring_revenue", "resource_type": "model", "package_name": "recurly", "path": "recurly__monthly_recurring_revenue.sql", "original_file_path": "models/recurly__monthly_recurring_revenue.sql", "unique_id": "model.recurly.recurly__monthly_recurring_revenue", "fqn": ["recurly", "recurly__monthly_recurring_revenue"], "alias": "recurly__monthly_recurring_revenue", "checksum": {"name": "sha256", "checksum": "7549e005f5e48a04e2288c91f990430babe0fa9d76d6cdcccc5fd13c6181ebb5"}, "config": {"enabled": true, "alias": null, "schema": "recurly", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected"}, "tags": [], "description": "Each record represents an account and MRR generated on a monthly basis.", "columns": {"account_monthly_id": {"name": "account_monthly_id", "description": "Unique identifier associated by account id and month.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "account_id": {"name": "account_id", "description": "id associated with the account.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "account_month": {"name": "account_month", "description": "Revenue details of the account by month.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "account_month_number": {"name": "account_month_number", "description": "The nth month the account has been active.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "current_month_mrr": {"name": "current_month_mrr", "description": "The current month's recurring revenue earned by account.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "previous_month_mrr": {"name": "previous_month_mrr", "description": "The previous month's recurring revenue earned by account.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "mrr_type": {"name": "mrr_type", "description": "Type of MRR earned.  Enum: \"churned\", \"contraction\", \"new\", \"reactivation\", \"unchanged\"\n", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "account_code": {"name": "account_code", "description": "The unique identifier of the account. This cannot be changed once the account is created. Provided during account creation.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "account_created_at": {"name": "account_created_at", "description": "When the account was created.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "account_email": {"name": "account_email", "description": "The email address used for communicating with this customer.  The customer will also use this email address to log into your hosted account management pages.  This value does not need to be unique.\n", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "account_first_name": {"name": "account_first_name", "description": "The first name of the customer related to the account.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "account_last_name": {"name": "account_last_name", "description": "The last name of the customer related to the account.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "account_username": {"name": "account_username", "description": "A secondary value for the account.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "recurly://models/recurly.yml", "build_path": null, "unrendered_config": {"schema": "recurly", "materialized": "table"}, "created_at": 1722889775.841423, "relation_name": "\"postgres\".\"recurly_integrations_tests_recurly\".\"recurly__monthly_recurring_revenue\"", "raw_code": "with account_history as (\n\n    select * \n    from {{ var('account_history') }}\n    where is_most_recent_record\n),\n\nrecurly__balance_transactions as (\n\n    select * \n    from {{ ref('recurly__balance_transactions') }}\n),\n\nmrr_balance_transactions as (\n\n    select \n        account_id,\n        amount,\n        {{ dbt.date_trunc('month', 'created_at') }} as account_month \n    from recurly__balance_transactions\n    where lower(type) = 'charge' \n        and started_at is not null\n        and ended_at is not null\n), \n\nmrr_by_account as (\n\n    select \n        account_id,\n        account_month,\n        {{ dbt_utils.generate_surrogate_key(['account_id', 'account_month']) }} as account_monthly_id,\n        row_number() over (partition by account_id order by account_month) as account_month_number,\n        sum(amount) as current_month_mrr\n    from mrr_balance_transactions\n    {{ dbt_utils.group_by(3) }}\n\n),\n\ncurrent_vs_previous_mrr as (\n    \n    select \n        account_monthly_id,\n        account_id,\n        account_month,\n        account_month_number,\n        current_month_mrr,\n        lag(current_month_mrr) over (partition by account_id order by account_month) as previous_month_mrr\n    from mrr_by_account\n),\n\nmrr_type_enhanced as (\n\n    select \n        *,\n        case when current_month_mrr > previous_month_mrr then 'expansion'\n            when current_month_mrr < previous_month_mrr then 'contraction'\n            when current_month_mrr = previous_month_mrr then 'unchanged'\n            when previous_month_mrr is null then 'new'\n            when (current_month_mrr = 0.0 or current_month_mrr is null)\n                and (previous_month_mrr != 0.0)\n                then 'churned'\n            when (previous_month_mrr = 0.0 and current_month_mrr > 0.0 \n                and account_month_number >= 3) \n                then 'reactivation'\n            end as mrr_type\n    from current_vs_previous_mrr\n),\n\nfinal as (\n\n    select \n        mrr_type_enhanced.*,\n        account_history.code as account_code,\n        account_history.created_at as account_created_at,\n        account_history.email as account_email,\n        account_history.first_name as account_first_name,\n        account_history.last_name as account_last_name,\n        account_history.username as account_username\n    from mrr_type_enhanced\n    left join account_history on mrr_type_enhanced.account_id = account_history.account_id\n)\n\nselect * \nfrom final", "language": "sql", "refs": [{"name": "stg_recurly__account_history", "package": null, "version": null}, {"name": "recurly__balance_transactions", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.date_trunc", "macro.dbt_utils.generate_surrogate_key", "macro.dbt_utils.group_by"], "nodes": ["model.recurly_source.stg_recurly__account_history", "model.recurly.recurly__balance_transactions"]}, "compiled_path": "target/compiled/recurly/models/recurly__monthly_recurring_revenue.sql", "compiled": true, "compiled_code": "with account_history as (\n\n    select * \n    from \"postgres\".\"recurly_integrations_tests_recurly_source\".\"stg_recurly__account_history\"\n    where is_most_recent_record\n),\n\nrecurly__balance_transactions as (\n\n    select * \n    from \"postgres\".\"recurly_integrations_tests_recurly\".\"recurly__balance_transactions\"\n),\n\nmrr_balance_transactions as (\n\n    select \n        account_id,\n        amount,\n        date_trunc('month', created_at) as account_month \n    from recurly__balance_transactions\n    where lower(type) = 'charge' \n        and started_at is not null\n        and ended_at is not null\n), \n\nmrr_by_account as (\n\n    select \n        account_id,\n        account_month,\n        md5(cast(coalesce(cast(account_id as TEXT), '_dbt_utils_surrogate_key_null_') || '-' || coalesce(cast(account_month as TEXT), '_dbt_utils_surrogate_key_null_') as TEXT)) as account_monthly_id,\n        row_number() over (partition by account_id order by account_month) as account_month_number,\n        sum(amount) as current_month_mrr\n    from mrr_balance_transactions\n    group by 1,2,3\n\n),\n\ncurrent_vs_previous_mrr as (\n    \n    select \n        account_monthly_id,\n        account_id,\n        account_month,\n        account_month_number,\n        current_month_mrr,\n        lag(current_month_mrr) over (partition by account_id order by account_month) as previous_month_mrr\n    from mrr_by_account\n),\n\nmrr_type_enhanced as (\n\n    select \n        *,\n        case when current_month_mrr > previous_month_mrr then 'expansion'\n            when current_month_mrr < previous_month_mrr then 'contraction'\n            when current_month_mrr = previous_month_mrr then 'unchanged'\n            when previous_month_mrr is null then 'new'\n            when (current_month_mrr = 0.0 or current_month_mrr is null)\n                and (previous_month_mrr != 0.0)\n                then 'churned'\n            when (previous_month_mrr = 0.0 and current_month_mrr > 0.0 \n                and account_month_number >= 3) \n                then 'reactivation'\n            end as mrr_type\n    from current_vs_previous_mrr\n),\n\nfinal as (\n\n    select \n        mrr_type_enhanced.*,\n        account_history.code as account_code,\n        account_history.created_at as account_created_at,\n        account_history.email as account_email,\n        account_history.first_name as account_first_name,\n        account_history.last_name as account_last_name,\n        account_history.username as account_username\n    from mrr_type_enhanced\n    left join account_history on mrr_type_enhanced.account_id = account_history.account_id\n)\n\nselect * \nfrom final", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.recurly.recurly__line_item_enhanced": {"database": "postgres", "schema": "recurly_integrations_tests_recurly", "name": "recurly__line_item_enhanced", "resource_type": "model", "package_name": "recurly", "path": "standardized_models/recurly__line_item_enhanced.sql", "original_file_path": "models/standardized_models/recurly__line_item_enhanced.sql", "unique_id": "model.recurly.recurly__line_item_enhanced", "fqn": ["recurly", "standardized_models", "recurly__line_item_enhanced"], "alias": "recurly__line_item_enhanced", "checksum": {"name": "sha256", "checksum": "30091d17dda0b24b120cc4e902a18e9af6cccd00d12c0ac7377f5d6769fffe66"}, "config": {"enabled": true, "alias": null, "schema": "recurly", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected"}, "tags": [], "description": "This model constructs a comprehensive, denormalized analytical table that enables reporting on key revenue, subscription, customer, and product metrics from your billing platform. It\u2019s designed to align with the schema of the `*__line_item_enhanced` model found in Recurly, Recharge, Stripe, and Zuora, offering standardized reporting across various billing platforms. To see the kinds of insights this model can generate, explore example visualizations in the [Fivetran Billing Model Streamlit App](https://fivetran-billing-model.streamlit.app/). Visit the app for more details.", "columns": {"header_id": {"name": "header_id", "description": "Id of corresponding invoice.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "line_item_id": {"name": "line_item_id", "description": "Invoice line item id.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "line_item_index": {"name": "line_item_index", "description": "Unique index of each line item id for each invoice.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "record_type": {"name": "record_type", "description": "header or line_item", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "created_at": {"name": "created_at", "description": "When the invoice was created", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "header_status": {"name": "header_status", "description": "Status of the invoice.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "billing_type": {"name": "billing_type", "description": "Type of invoice line item.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "currency": {"name": "currency", "description": "Currency used in the invoice.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "product_id": {"name": "product_id", "description": "ID of the plan associated with the line item.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "product_name": {"name": "product_name", "description": "Plan name", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "product_type": {"name": "product_type", "description": "Origin of the line item", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "transaction_type": {"name": "transaction_type", "description": "Type associated with the transaction.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "quantity": {"name": "quantity", "description": "The number of units of this line item.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "unit_amount": {"name": "unit_amount", "description": "Amount per unit.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "discount_amount": {"name": "discount_amount", "description": "The discount amount associated with this invoice.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "tax_amount": {"name": "tax_amount", "description": "The tax amount associated with this invoice.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "total_amount": {"name": "total_amount", "description": "Invoice total", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "payment_id": {"name": "payment_id", "description": "ID of the associated transaction", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "payment_method": {"name": "payment_method", "description": "Payment method object.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "payment_method_id": {"name": "payment_method_id", "description": "In Recurly there are no payment method IDs as these are abstracted from the transactions object. Therefore, this will always be null.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "payment_at": {"name": "payment_at", "description": "Date transaction was collected.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "fee_amount": {"name": "fee_amount", "description": "In Recurly there is currently no concept of fees. Therefore, this will be null for all records.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "refund_amount": {"name": "refund_amount", "description": "Refund amount associated with this invoice.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "subscription_id": {"name": "subscription_id", "description": "Subscription associated with this invoice.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "subscription_plan": {"name": "subscription_plan", "description": "The name of the plan which the subscription is associated.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "subscription_period_started_at": {"name": "subscription_period_started_at", "description": "Subscription's current period start", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "subscription_period_ended_at": {"name": "subscription_period_ended_at", "description": "Subscription's current period end", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "subscription_status": {"name": "subscription_status", "description": "Subscription status", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "customer_id": {"name": "customer_id", "description": "Customer associated with this invoice.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "customer_created_at": {"name": "customer_created_at", "description": "Date which the customer was created in Recurly.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "customer_level": {"name": "customer_level", "description": "Whether 'account' or 'customer'. For Recurly, the level is 'account'.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "customer_name": {"name": "customer_name", "description": "Customer name", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "customer_company": {"name": "customer_company", "description": "Associated account's company if applicable.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "customer_email": {"name": "customer_email", "description": "Customer email", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "customer_city": {"name": "customer_city", "description": "Customer city", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "customer_country": {"name": "customer_country", "description": "Customer country", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "recurly://models/standardized_models/recurly__standardized_models.yml", "build_path": null, "unrendered_config": {"schema": "recurly", "materialized": "table"}, "created_at": 1722889775.860265, "relation_name": "\"postgres\".\"recurly_integrations_tests_recurly\".\"recurly__line_item_enhanced\"", "raw_code": "with line_items as (\n\n    select * \n    from {{ var('line_item_history')}}\n    where is_most_recent_record\n),\n\ninvoices as (\n\n    select *\n    from {{ var('invoice_history')}}\n    where is_most_recent_record\n),\n\ntransactions as (\n\n    select * \n    from {{ var('transaction')}}\n    where is_most_recent_record\n),\n\nsubscription_history as (\n\n    select \n        *,\n        row_number() over (partition by subscription_id, current_period_started_at, current_period_ended_at order by updated_at desc) = 1 as is_latest_period\n    from {{ var('subscription_history') }}\n),\n\nplans as (\n\n    select * \n    from {{ var('plan_history') }}\n    where is_most_recent_record\n),\n\naccounts as (\n\n    select * \n    from {{ var('account_history') }}\n    where is_most_recent_record\n),\n\nsubscriptions as (\n\n    select \n        *\n    from subscription_history\n    where is_latest_period\n),\n\nenhanced as (\n\n    select\n        line_items.invoice_id as header_id,\n        line_items.line_item_id,\n        cast(row_number() over (partition by line_items.invoice_id order by line_items.created_at) as {{ dbt.type_int() }}) as line_item_index,\n        line_items.created_at,\n        line_items.currency,\n        line_items.state as line_item_status,\n        line_items.type as billing_type,\n        transactions.type as transaction_type,\n        invoices.state as header_status,\n        line_items.plan_id as product_id,\n        plans.name as product_name,\n        line_items.origin as product_type,\n        line_items.description as product_category,\n        line_items.quantity,\n        line_items.unit_amount,\n        line_items.discount as discount_amount,\n        line_items.tax as tax_amount,\n        line_items.amount as total_amount,\n        transactions.transaction_id as payment_id,\n        cast(null as {{ dbt.type_string() }}) as payment_method_id,\n        transactions.payment_method_object as payment_method,\n        transactions.collected_at as payment_at,\n        cast(null as {{ dbt.type_numeric() }}) as fee_amount,\n        invoices.refundable_amount as refund_amount,\n        transactions.is_refunded,\n        transactions.created_at as refunded_at,\n        line_items.subscription_id,\n        plans.name as subscription_plan,\n        subscriptions.current_period_started_at as subscription_period_started_at,\n        subscriptions.current_period_ended_at as subscription_period_ended_at,\n        subscriptions.state as subscription_status,\n        line_items.account_id as customer_id,\n        accounts.created_at as customer_created_at,\n        'account' as customer_level,\n        {{ dbt.concat([\"accounts.first_name\", \"''\", \"accounts.last_name\"]) }} as customer_name,\n        accounts.company as customer_company,\n        accounts.email as customer_email,\n        accounts.account_city as customer_city,\n        accounts.account_country as customer_country\n    from line_items\n    left join invoices\n        on invoices.invoice_id = line_items.invoice_id\n    left join transactions\n        on transactions.invoice_id = invoices.invoice_id\n    left join accounts\n        on accounts.account_id = line_items.account_id\n    left join subscriptions\n        on subscriptions.subscription_id = line_items.subscription_id\n            and subscriptions.current_period_started_at <= line_items.created_at\n            and subscriptions.current_period_ended_at > line_items.created_at\n    left join plans\n        on cast(plans.plan_id as {{ dbt.type_string() }}) = cast(line_items.plan_id as {{ dbt.type_string() }})\n),\n\nfinal as (\n\n    select \n        header_id,\n        line_item_id,\n        line_item_index,\n        'line_item' as record_type,\n        created_at,\n        currency,\n        header_status,\n        product_id,\n        product_name,\n        transaction_type,\n        billing_type,\n        product_type,\n        quantity,\n        unit_amount,\n        discount_amount,\n        tax_amount,\n        total_amount,\n        payment_id,\n        cast(null as {{ dbt.type_string() }}) as payment_method_id,\n        payment_method,\n        payment_at,\n        fee_amount,\n        cast(null as {{ dbt.type_float() }}) as refund_amount,\n        subscription_id,\n        subscription_plan,\n        subscription_period_started_at,\n        subscription_period_ended_at,\n        subscription_status,\n        customer_id,\n        customer_created_at,\n        customer_level,\n        customer_name,\n        customer_company,\n        customer_email,\n        customer_city,\n        customer_country\n    from enhanced\n\n    union all\n\n    -- Refund information is only reliable at the invoice header. Therefore the below operation creates a new line to track the refund values.\n    select\n        header_id,\n        line_item_id,\n        cast(0 as {{ dbt.type_int() }}) as line_item_index,\n        'header' as record_type,\n        created_at,\n        currency,\n        header_status,\n        product_id,\n        product_name,\n        transaction_type,\n        billing_type,\n        cast(null as {{ dbt.type_string() }}) as product_type,\n        cast(null as {{ dbt.type_float() }}) as quantity,\n        cast(null as {{ dbt.type_float() }}) as unit_amount,\n        cast(null as {{ dbt.type_float() }}) as discount_amount,\n        cast(null as {{ dbt.type_float() }}) as tax_amount,\n        cast(null as {{ dbt.type_float() }}) as total_amount,\n        payment_id,\n        cast(null as {{ dbt.type_string() }}) as payment_method_id,\n        payment_method,\n        payment_at,\n        fee_amount,\n        refund_amount,\n        subscription_id,\n        subscription_plan,\n        subscription_period_started_at,\n        subscription_period_ended_at,\n        subscription_status,\n        customer_id,\n        customer_created_at,\n        customer_level,\n        customer_name,\n        customer_company,\n        customer_email,\n        customer_city,\n        customer_country\n    from enhanced\n    where is_refunded \n        and line_item_index = 1\n)\n\nselect *\nfrom final", "language": "sql", "refs": [{"name": "stg_recurly__line_item_history", "package": null, "version": null}, {"name": "stg_recurly__invoice_history", "package": null, "version": null}, {"name": "stg_recurly__transaction", "package": null, "version": null}, {"name": "stg_recurly__subscription_history", "package": null, "version": null}, {"name": "stg_recurly__plan_history", "package": null, "version": null}, {"name": "stg_recurly__account_history", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.type_int", "macro.dbt.type_string", "macro.dbt.type_numeric", "macro.dbt.concat", "macro.dbt.type_float"], "nodes": ["model.recurly_source.stg_recurly__line_item_history", "model.recurly_source.stg_recurly__invoice_history", "model.recurly_source.stg_recurly__transaction", "model.recurly_source.stg_recurly__subscription_history", "model.recurly_source.stg_recurly__plan_history", "model.recurly_source.stg_recurly__account_history"]}, "compiled_path": "target/compiled/recurly/models/standardized_models/recurly__line_item_enhanced.sql", "compiled": true, "compiled_code": "with line_items as (\n\n    select * \n    from \"postgres\".\"recurly_integrations_tests_recurly_source\".\"stg_recurly__line_item_history\"\n    where is_most_recent_record\n),\n\ninvoices as (\n\n    select *\n    from \"postgres\".\"recurly_integrations_tests_recurly_source\".\"stg_recurly__invoice_history\"\n    where is_most_recent_record\n),\n\ntransactions as (\n\n    select * \n    from \"postgres\".\"recurly_integrations_tests_recurly_source\".\"stg_recurly__transaction\"\n    where is_most_recent_record\n),\n\nsubscription_history as (\n\n    select \n        *,\n        row_number() over (partition by subscription_id, current_period_started_at, current_period_ended_at order by updated_at desc) = 1 as is_latest_period\n    from \"postgres\".\"recurly_integrations_tests_recurly_source\".\"stg_recurly__subscription_history\"\n),\n\nplans as (\n\n    select * \n    from \"postgres\".\"recurly_integrations_tests_recurly_source\".\"stg_recurly__plan_history\"\n    where is_most_recent_record\n),\n\naccounts as (\n\n    select * \n    from \"postgres\".\"recurly_integrations_tests_recurly_source\".\"stg_recurly__account_history\"\n    where is_most_recent_record\n),\n\nsubscriptions as (\n\n    select \n        *\n    from subscription_history\n    where is_latest_period\n),\n\nenhanced as (\n\n    select\n        line_items.invoice_id as header_id,\n        line_items.line_item_id,\n        cast(row_number() over (partition by line_items.invoice_id order by line_items.created_at) as integer) as line_item_index,\n        line_items.created_at,\n        line_items.currency,\n        line_items.state as line_item_status,\n        line_items.type as billing_type,\n        transactions.type as transaction_type,\n        invoices.state as header_status,\n        line_items.plan_id as product_id,\n        plans.name as product_name,\n        line_items.origin as product_type,\n        line_items.description as product_category,\n        line_items.quantity,\n        line_items.unit_amount,\n        line_items.discount as discount_amount,\n        line_items.tax as tax_amount,\n        line_items.amount as total_amount,\n        transactions.transaction_id as payment_id,\n        cast(null as TEXT) as payment_method_id,\n        transactions.payment_method_object as payment_method,\n        transactions.collected_at as payment_at,\n        cast(null as numeric(28,6)) as fee_amount,\n        invoices.refundable_amount as refund_amount,\n        transactions.is_refunded,\n        transactions.created_at as refunded_at,\n        line_items.subscription_id,\n        plans.name as subscription_plan,\n        subscriptions.current_period_started_at as subscription_period_started_at,\n        subscriptions.current_period_ended_at as subscription_period_ended_at,\n        subscriptions.state as subscription_status,\n        line_items.account_id as customer_id,\n        accounts.created_at as customer_created_at,\n        'account' as customer_level,\n        accounts.first_name || '' || accounts.last_name as customer_name,\n        accounts.company as customer_company,\n        accounts.email as customer_email,\n        accounts.account_city as customer_city,\n        accounts.account_country as customer_country\n    from line_items\n    left join invoices\n        on invoices.invoice_id = line_items.invoice_id\n    left join transactions\n        on transactions.invoice_id = invoices.invoice_id\n    left join accounts\n        on accounts.account_id = line_items.account_id\n    left join subscriptions\n        on subscriptions.subscription_id = line_items.subscription_id\n            and subscriptions.current_period_started_at <= line_items.created_at\n            and subscriptions.current_period_ended_at > line_items.created_at\n    left join plans\n        on cast(plans.plan_id as TEXT) = cast(line_items.plan_id as TEXT)\n),\n\nfinal as (\n\n    select \n        header_id,\n        line_item_id,\n        line_item_index,\n        'line_item' as record_type,\n        created_at,\n        currency,\n        header_status,\n        product_id,\n        product_name,\n        transaction_type,\n        billing_type,\n        product_type,\n        quantity,\n        unit_amount,\n        discount_amount,\n        tax_amount,\n        total_amount,\n        payment_id,\n        cast(null as TEXT) as payment_method_id,\n        payment_method,\n        payment_at,\n        fee_amount,\n        cast(null as float) as refund_amount,\n        subscription_id,\n        subscription_plan,\n        subscription_period_started_at,\n        subscription_period_ended_at,\n        subscription_status,\n        customer_id,\n        customer_created_at,\n        customer_level,\n        customer_name,\n        customer_company,\n        customer_email,\n        customer_city,\n        customer_country\n    from enhanced\n\n    union all\n\n    -- Refund information is only reliable at the invoice header. Therefore the below operation creates a new line to track the refund values.\n    select\n        header_id,\n        line_item_id,\n        cast(0 as integer) as line_item_index,\n        'header' as record_type,\n        created_at,\n        currency,\n        header_status,\n        product_id,\n        product_name,\n        transaction_type,\n        billing_type,\n        cast(null as TEXT) as product_type,\n        cast(null as float) as quantity,\n        cast(null as float) as unit_amount,\n        cast(null as float) as discount_amount,\n        cast(null as float) as tax_amount,\n        cast(null as float) as total_amount,\n        payment_id,\n        cast(null as TEXT) as payment_method_id,\n        payment_method,\n        payment_at,\n        fee_amount,\n        refund_amount,\n        subscription_id,\n        subscription_plan,\n        subscription_period_started_at,\n        subscription_period_ended_at,\n        subscription_status,\n        customer_id,\n        customer_created_at,\n        customer_level,\n        customer_name,\n        customer_company,\n        customer_email,\n        customer_city,\n        customer_country\n    from enhanced\n    where is_refunded \n        and line_item_index = 1\n)\n\nselect *\nfrom final", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.recurly.int_recurly__transactions_date_spine": {"database": "postgres", "schema": "recurly_integrations_tests_recurly_int", "name": "int_recurly__transactions_date_spine", "resource_type": "model", "package_name": "recurly", "path": "intermediate/int_recurly__transactions_date_spine.sql", "original_file_path": "models/intermediate/int_recurly__transactions_date_spine.sql", "unique_id": "model.recurly.int_recurly__transactions_date_spine", "fqn": ["recurly", "intermediate", "int_recurly__transactions_date_spine"], "alias": "int_recurly__transactions_date_spine", "checksum": {"name": "sha256", "checksum": "18d9dc8bfbb342ca9927fdb61fc821ecb817bc4d6c656dfedfc4fc39ecc0b1d4"}, "config": {"enabled": true, "alias": null, "schema": "recurly_int", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected"}, "tags": [], "description": "This date spine allows us to construct a full date calendar for account rolling totals.", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "recurly://models/recurly.yml", "build_path": null, "unrendered_config": {"schema": "recurly_int", "materialized": "table"}, "created_at": 1722889775.826713, "relation_name": "\"postgres\".\"recurly_integrations_tests_recurly_int\".\"int_recurly__transactions_date_spine\"", "raw_code": "with spine as (\n\n    {% if execute %}\n    {% set first_date_query %}\n        select  min( created_at ) as min_date from {{ ref('recurly__balance_transactions') }}\n    {% endset %}\n    {% set first_date = run_query(first_date_query).columns[0][0]|string %}\n    \n        {% if target.type == 'postgres' %}\n            {% set first_date_adjust = \"cast('\" ~ first_date[0:10] ~ \"' as date)\" %}\n\n        {% else %}\n            {% set first_date_adjust = \"'\" ~ first_date[0:10] ~ \"'\" %}\n\n        {% endif %}\n\n    {% else %} {% set first_date_adjust = \"'2009-01-01'\" %}\n    {% endif %}\n\n    {% if execute %}\n    {% set last_date_query %}\n        select  max( created_at ) as max_date from {{ ref('recurly__balance_transactions') }}\n    {% endset %}\n\n    {% set current_date_query %}\n        select current_date\n    {% endset %}\n\n    {% if run_query(current_date_query).columns[0][0]|string < run_query(last_date_query).columns[0][0]|string %}\n\n    {% set last_date = run_query(last_date_query).columns[0][0]|string %}\n\n    {% else %} {% set last_date = run_query(current_date_query).columns[0][0]|string %}\n    {% endif %}\n        \n    {% if target.type == 'postgres' %}\n        {% set last_date_adjust = \"cast('\" ~ last_date[0:10] ~ \"' as date)\" %}\n\n    {% else %}\n        {% set last_date_adjust = \"'\" ~ last_date[0:10] ~ \"'\" %}\n\n    {% endif %}\n    {% endif %}\n\n    {{ dbt_utils.date_spine(\n        datepart=\"day\",\n        start_date=first_date_adjust,\n        end_date=dbt.dateadd(\"day\", 1, last_date_adjust)\n        )\n    }}\n),\n\nbalance_transactions as (\n    \n    select *\n    from {{ ref('recurly__balance_transactions') }}\n),\n\naccount_overview as (\n\n    select *\n    from {{ ref('recurly__account_overview') }}\n),\n\ndate_spine as (\n\n    select\n        cast({{ dbt.date_trunc(\"day\", \"date_day\") }} as date) as date_day, \n        cast({{ dbt.date_trunc(\"week\", \"date_day\") }} as date) as date_week, \n        cast({{ dbt.date_trunc(\"month\", \"date_day\") }} as date) as date_month,\n        cast({{ dbt.date_trunc(\"year\", \"date_day\") }} as date) as date_year,  \n        row_number() over (order by cast({{ dbt.date_trunc(\"day\", \"date_day\") }} as date)) as date_index\n    from spine\n),\n\nfinal as (\n\n    select distinct\n        account_overview.account_id,\n        date_spine.date_day,\n        date_spine.date_week,\n        date_spine.date_month,\n        date_spine.date_year,\n        date_spine.date_index\n    from account_overview \n    cross join date_spine\n)\n\nselect * \nfrom final", "language": "sql", "refs": [{"name": "recurly__balance_transactions", "package": null, "version": null}, {"name": "recurly__account_overview", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.dateadd", "macro.dbt_utils.date_spine", "macro.dbt.date_trunc", "macro.dbt.run_query"], "nodes": ["model.recurly.recurly__balance_transactions", "model.recurly.recurly__account_overview"]}, "compiled_path": "target/compiled/recurly/models/intermediate/int_recurly__transactions_date_spine.sql", "compiled": true, "compiled_code": "with spine as (\n\n    \n    \n    \n    \n        \n            \n\n        \n\n    \n\n    \n    \n\n    \n\n     \n    \n        \n    \n        \n\n    \n    \n\n    \n\n\n\n\n\nwith rawdata as (\n\n    \n\n    \n\n    with p as (\n        select 0 as generated_number union all select 1\n    ), unioned as (\n\n    select\n\n    \n    p0.generated_number * power(2, 0)\n     + \n    \n    p1.generated_number * power(2, 1)\n     + \n    \n    p2.generated_number * power(2, 2)\n     + \n    \n    p3.generated_number * power(2, 3)\n     + \n    \n    p4.generated_number * power(2, 4)\n     + \n    \n    p5.generated_number * power(2, 5)\n     + \n    \n    p6.generated_number * power(2, 6)\n     + \n    \n    p7.generated_number * power(2, 7)\n     + \n    \n    p8.generated_number * power(2, 8)\n     + \n    \n    p9.generated_number * power(2, 9)\n     + \n    \n    p10.generated_number * power(2, 10)\n     + \n    \n    p11.generated_number * power(2, 11)\n    \n    \n    + 1\n    as generated_number\n\n    from\n\n    \n    p as p0\n     cross join \n    \n    p as p1\n     cross join \n    \n    p as p2\n     cross join \n    \n    p as p3\n     cross join \n    \n    p as p4\n     cross join \n    \n    p as p5\n     cross join \n    \n    p as p6\n     cross join \n    \n    p as p7\n     cross join \n    \n    p as p8\n     cross join \n    \n    p as p9\n     cross join \n    \n    p as p10\n     cross join \n    \n    p as p11\n    \n    \n\n    )\n\n    select *\n    from unioned\n    where generated_number <= 3464\n    order by generated_number\n\n\n\n),\n\nall_periods as (\n\n    select (\n        \n\n    cast('2015-02-11' as date) + ((interval '1 day') * (row_number() over (order by 1) - 1))\n\n\n    ) as date_day\n    from rawdata\n\n),\n\nfiltered as (\n\n    select *\n    from all_periods\n    where date_day <= \n\n    cast('2024-08-05' as date) + ((interval '1 day') * (1))\n\n\n\n)\n\nselect * from filtered\n\n\n),\n\nbalance_transactions as (\n    \n    select *\n    from \"postgres\".\"recurly_integrations_tests_recurly\".\"recurly__balance_transactions\"\n),\n\naccount_overview as (\n\n    select *\n    from \"postgres\".\"recurly_integrations_tests_recurly\".\"recurly__account_overview\"\n),\n\ndate_spine as (\n\n    select\n        cast(date_trunc('day', date_day) as date) as date_day, \n        cast(date_trunc('week', date_day) as date) as date_week, \n        cast(date_trunc('month', date_day) as date) as date_month,\n        cast(date_trunc('year', date_day) as date) as date_year,  \n        row_number() over (order by cast(date_trunc('day', date_day) as date)) as date_index\n    from spine\n),\n\nfinal as (\n\n    select distinct\n        account_overview.account_id,\n        date_spine.date_day,\n        date_spine.date_week,\n        date_spine.date_month,\n        date_spine.date_year,\n        date_spine.date_index\n    from account_overview \n    cross join date_spine\n)\n\nselect * \nfrom final", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.recurly.int_recurly__transactions_grouped": {"database": "postgres", "schema": "recurly_integrations_tests_recurly_int", "name": "int_recurly__transactions_grouped", "resource_type": "model", "package_name": "recurly", "path": "intermediate/int_recurly__transactions_grouped.sql", "original_file_path": "models/intermediate/int_recurly__transactions_grouped.sql", "unique_id": "model.recurly.int_recurly__transactions_grouped", "fqn": ["recurly", "intermediate", "int_recurly__transactions_grouped"], "alias": "int_recurly__transactions_grouped", "checksum": {"name": "sha256", "checksum": "24a54ab17aeb1eb950ebeea0dc09d62a78035df83aa981dffb199fec10bd9673"}, "config": {"enabled": true, "alias": null, "schema": "recurly_int", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected"}, "tags": [], "description": "Each record is a group of transactions brought together by account and day.", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "recurly://models/recurly.yml", "build_path": null, "unrendered_config": {"schema": "recurly_int", "materialized": "table"}, "created_at": 1722889775.826921, "relation_name": "\"postgres\".\"recurly_integrations_tests_recurly_int\".\"int_recurly__transactions_grouped\"", "raw_code": "with balance_transaction_joined as (\n\n    select * \n    from {{ ref('recurly__balance_transactions') }}\n),\n\nfinal as (\n    \n    select  \n        account_id,\n        cast({{ dbt.date_trunc(\"day\", \"created_at\") }} as date) as date_day,             \n        cast({{ dbt.date_trunc(\"week\", \"created_at\") }} as date) as date_week, \n        cast({{ dbt.date_trunc(\"month\", \"created_at\") }} as date) as date_month, \n        cast({{ dbt.date_trunc(\"year\", \"created_at\") }} as date) as date_year,  \n        count(distinct transaction_id) as daily_transactions,\n        count(distinct invoice_id) as daily_invoices,\n        sum(case when lower(type) = 'charge' \n            then amount\n            else 0 \n            end) as daily_charges,\n        sum(case when lower(type) = 'credit' \n            then amount\n            else 0 \n            end) as daily_credits,\n        sum(amount) as daily_balance,\n        sum(discount) as daily_discounts,\n        sum(tax) as daily_taxes,\n        sum(case when lower(type) = 'charge' \n            then 1\n            else 0 \n            end) as daily_charge_count,\n        sum(case when lower(type) = 'credit' \n            then 1\n            else 0 \n            end) as daily_credit_count\n    from balance_transaction_joined\n    {{ dbt_utils.group_by(5) }}\n) \n\nselect * \nfrom final", "language": "sql", "refs": [{"name": "recurly__balance_transactions", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.date_trunc", "macro.dbt_utils.group_by"], "nodes": ["model.recurly.recurly__balance_transactions"]}, "compiled_path": "target/compiled/recurly/models/intermediate/int_recurly__transactions_grouped.sql", "compiled": true, "compiled_code": "with balance_transaction_joined as (\n\n    select * \n    from \"postgres\".\"recurly_integrations_tests_recurly\".\"recurly__balance_transactions\"\n),\n\nfinal as (\n    \n    select  \n        account_id,\n        cast(date_trunc('day', created_at) as date) as date_day,             \n        cast(date_trunc('week', created_at) as date) as date_week, \n        cast(date_trunc('month', created_at) as date) as date_month, \n        cast(date_trunc('year', created_at) as date) as date_year,  \n        count(distinct transaction_id) as daily_transactions,\n        count(distinct invoice_id) as daily_invoices,\n        sum(case when lower(type) = 'charge' \n            then amount\n            else 0 \n            end) as daily_charges,\n        sum(case when lower(type) = 'credit' \n            then amount\n            else 0 \n            end) as daily_credits,\n        sum(amount) as daily_balance,\n        sum(discount) as daily_discounts,\n        sum(tax) as daily_taxes,\n        sum(case when lower(type) = 'charge' \n            then 1\n            else 0 \n            end) as daily_charge_count,\n        sum(case when lower(type) = 'credit' \n            then 1\n            else 0 \n            end) as daily_credit_count\n    from balance_transaction_joined\n    group by 1,2,3,4,5\n) \n\nselect * \nfrom final", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.recurly.int_recurly__account_rolling_totals": {"database": "postgres", "schema": "recurly_integrations_tests_recurly_int", "name": "int_recurly__account_rolling_totals", "resource_type": "model", "package_name": "recurly", "path": "intermediate/int_recurly__account_rolling_totals.sql", "original_file_path": "models/intermediate/int_recurly__account_rolling_totals.sql", "unique_id": "model.recurly.int_recurly__account_rolling_totals", "fqn": ["recurly", "intermediate", "int_recurly__account_rolling_totals"], "alias": "int_recurly__account_rolling_totals", "checksum": {"name": "sha256", "checksum": "28a8c968d304af4fc880c311aa4917f8f2ea1b2549666d866910323b6c93dbfc"}, "config": {"enabled": true, "alias": null, "schema": "recurly_int", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected"}, "tags": [], "description": "Each record is a historical look at an account's balance and its changes over time.", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "recurly://models/recurly.yml", "build_path": null, "unrendered_config": {"schema": "recurly_int", "materialized": "table"}, "created_at": 1722889775.82622, "relation_name": "\"postgres\".\"recurly_integrations_tests_recurly_int\".\"int_recurly__account_rolling_totals\"", "raw_code": "{% set fields = ['rolling_account_balance','rolling_invoices','rolling_transactions','rolling_charge_balance','rolling_credit_balance','rolling_discount_balance','rolling_tax_balance','rolling_charges','rolling_credits'] %}\n\nwith balance_transaction_periods as (\n\n    select * \n    from {{ ref('int_recurly__transactions_date_spine') }}\n),\n\naccount_balances as (\n\n    select *\n    from {{ ref('int_recurly__transactions_grouped') }}\n), \n\naccount_rolling_overview as (\n    \n    select\n        *,\n        sum(daily_balance) over (partition by account_id order by date_day, account_id rows unbounded preceding) as rolling_account_balance,\n        sum(daily_invoices) over (partition by account_id order by date_day, account_id rows unbounded preceding) as rolling_invoices,\n        sum(daily_transactions) over (partition by account_id order by date_day, account_id rows unbounded preceding) as rolling_transactions,\n        sum(daily_charges) over (partition by account_id order by date_day, account_id rows unbounded preceding) as rolling_charge_balance,  \n        sum(daily_credits) over (partition by account_id order by date_day, account_id rows unbounded preceding) as rolling_credit_balance,\n        sum(daily_discounts) over (partition by account_id order by date_day, account_id rows unbounded preceding) as rolling_discount_balance,  \n        sum(daily_taxes) over (partition by account_id order by date_day, account_id rows unbounded preceding) as rolling_tax_balance,\n        sum(daily_charge_count) over (partition by account_id order by date_day, account_id rows unbounded preceding) as rolling_charges,  \n        sum(daily_credit_count) over (partition by account_id order by date_day, account_id rows unbounded preceding) as rolling_credits\n    from account_balances\n),\n\nfinal as (\n    \n    select \n        coalesce(account_rolling_overview.account_id, balance_transaction_periods.account_id) as account_id,\n        coalesce(account_rolling_overview.date_day, balance_transaction_periods.date_day) as date_day, \n        coalesce(account_rolling_overview.date_week, balance_transaction_periods.date_week) as date_week,\n        coalesce(account_rolling_overview.date_month, balance_transaction_periods.date_month) as date_month, \n        coalesce(account_rolling_overview.date_year, balance_transaction_periods.date_year) as date_year, \n        account_rolling_overview.daily_transactions,\n        account_rolling_overview.daily_balance,\n        account_rolling_overview.daily_invoices,\n        account_rolling_overview.daily_charges,\n        account_rolling_overview.daily_credits,\n        account_rolling_overview.daily_discounts,\n        account_rolling_overview.daily_taxes,\n        account_rolling_overview.daily_charge_count,\n        account_rolling_overview.daily_credit_count,\n        {% for f in fields %}\n        case when account_rolling_overview.{{ f }} is null and date_index = 1\n            then 0\n            else account_rolling_overview.{{ f }}\n            end as {{ f }},\n        {% endfor %}\n        balance_transaction_periods.date_index\n    from balance_transaction_periods \n    left join account_rolling_overview\n        on account_rolling_overview.account_id = balance_transaction_periods.account_id \n        and account_rolling_overview.date_day = balance_transaction_periods.date_day\n        and account_rolling_overview.date_week = balance_transaction_periods.date_week\n        and account_rolling_overview.date_month = balance_transaction_periods.date_month\n        and account_rolling_overview.date_year = balance_transaction_periods.date_year\n)\n\nselect * \nfrom final", "language": "sql", "refs": [{"name": "int_recurly__transactions_date_spine", "package": null, "version": null}, {"name": "int_recurly__transactions_grouped", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.recurly.int_recurly__transactions_date_spine", "model.recurly.int_recurly__transactions_grouped"]}, "compiled_path": "target/compiled/recurly/models/intermediate/int_recurly__account_rolling_totals.sql", "compiled": true, "compiled_code": "\n\nwith balance_transaction_periods as (\n\n    select * \n    from \"postgres\".\"recurly_integrations_tests_recurly_int\".\"int_recurly__transactions_date_spine\"\n),\n\naccount_balances as (\n\n    select *\n    from \"postgres\".\"recurly_integrations_tests_recurly_int\".\"int_recurly__transactions_grouped\"\n), \n\naccount_rolling_overview as (\n    \n    select\n        *,\n        sum(daily_balance) over (partition by account_id order by date_day, account_id rows unbounded preceding) as rolling_account_balance,\n        sum(daily_invoices) over (partition by account_id order by date_day, account_id rows unbounded preceding) as rolling_invoices,\n        sum(daily_transactions) over (partition by account_id order by date_day, account_id rows unbounded preceding) as rolling_transactions,\n        sum(daily_charges) over (partition by account_id order by date_day, account_id rows unbounded preceding) as rolling_charge_balance,  \n        sum(daily_credits) over (partition by account_id order by date_day, account_id rows unbounded preceding) as rolling_credit_balance,\n        sum(daily_discounts) over (partition by account_id order by date_day, account_id rows unbounded preceding) as rolling_discount_balance,  \n        sum(daily_taxes) over (partition by account_id order by date_day, account_id rows unbounded preceding) as rolling_tax_balance,\n        sum(daily_charge_count) over (partition by account_id order by date_day, account_id rows unbounded preceding) as rolling_charges,  \n        sum(daily_credit_count) over (partition by account_id order by date_day, account_id rows unbounded preceding) as rolling_credits\n    from account_balances\n),\n\nfinal as (\n    \n    select \n        coalesce(account_rolling_overview.account_id, balance_transaction_periods.account_id) as account_id,\n        coalesce(account_rolling_overview.date_day, balance_transaction_periods.date_day) as date_day, \n        coalesce(account_rolling_overview.date_week, balance_transaction_periods.date_week) as date_week,\n        coalesce(account_rolling_overview.date_month, balance_transaction_periods.date_month) as date_month, \n        coalesce(account_rolling_overview.date_year, balance_transaction_periods.date_year) as date_year, \n        account_rolling_overview.daily_transactions,\n        account_rolling_overview.daily_balance,\n        account_rolling_overview.daily_invoices,\n        account_rolling_overview.daily_charges,\n        account_rolling_overview.daily_credits,\n        account_rolling_overview.daily_discounts,\n        account_rolling_overview.daily_taxes,\n        account_rolling_overview.daily_charge_count,\n        account_rolling_overview.daily_credit_count,\n        \n        case when account_rolling_overview.rolling_account_balance is null and date_index = 1\n            then 0\n            else account_rolling_overview.rolling_account_balance\n            end as rolling_account_balance,\n        \n        case when account_rolling_overview.rolling_invoices is null and date_index = 1\n            then 0\n            else account_rolling_overview.rolling_invoices\n            end as rolling_invoices,\n        \n        case when account_rolling_overview.rolling_transactions is null and date_index = 1\n            then 0\n            else account_rolling_overview.rolling_transactions\n            end as rolling_transactions,\n        \n        case when account_rolling_overview.rolling_charge_balance is null and date_index = 1\n            then 0\n            else account_rolling_overview.rolling_charge_balance\n            end as rolling_charge_balance,\n        \n        case when account_rolling_overview.rolling_credit_balance is null and date_index = 1\n            then 0\n            else account_rolling_overview.rolling_credit_balance\n            end as rolling_credit_balance,\n        \n        case when account_rolling_overview.rolling_discount_balance is null and date_index = 1\n            then 0\n            else account_rolling_overview.rolling_discount_balance\n            end as rolling_discount_balance,\n        \n        case when account_rolling_overview.rolling_tax_balance is null and date_index = 1\n            then 0\n            else account_rolling_overview.rolling_tax_balance\n            end as rolling_tax_balance,\n        \n        case when account_rolling_overview.rolling_charges is null and date_index = 1\n            then 0\n            else account_rolling_overview.rolling_charges\n            end as rolling_charges,\n        \n        case when account_rolling_overview.rolling_credits is null and date_index = 1\n            then 0\n            else account_rolling_overview.rolling_credits\n            end as rolling_credits,\n        \n        balance_transaction_periods.date_index\n    from balance_transaction_periods \n    left join account_rolling_overview\n        on account_rolling_overview.account_id = balance_transaction_periods.account_id \n        and account_rolling_overview.date_day = balance_transaction_periods.date_day\n        and account_rolling_overview.date_week = balance_transaction_periods.date_week\n        and account_rolling_overview.date_month = balance_transaction_periods.date_month\n        and account_rolling_overview.date_year = balance_transaction_periods.date_year\n)\n\nselect * \nfrom final", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.recurly.int_recurly__account_partitions": {"database": "postgres", "schema": "recurly_integrations_tests_recurly_int", "name": "int_recurly__account_partitions", "resource_type": "model", "package_name": "recurly", "path": "intermediate/int_recurly__account_partitions.sql", "original_file_path": "models/intermediate/int_recurly__account_partitions.sql", "unique_id": "model.recurly.int_recurly__account_partitions", "fqn": ["recurly", "intermediate", "int_recurly__account_partitions"], "alias": "int_recurly__account_partitions", "checksum": {"name": "sha256", "checksum": "2a676f186a210e179bb0cde4d7516e54fe42ba497ab6359205ea682e20cb0522"}, "config": {"enabled": true, "alias": null, "schema": "recurly_int", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected"}, "tags": [], "description": "Each record is a group of partitioned account totals updating null values with zeroes to eventually calculate running totals downstream.", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "recurly://models/recurly.yml", "build_path": null, "unrendered_config": {"schema": "recurly_int", "materialized": "table"}, "created_at": 1722889775.825999, "relation_name": "\"postgres\".\"recurly_integrations_tests_recurly_int\".\"int_recurly__account_partitions\"", "raw_code": "{% set fields = ['rolling_account_balance','rolling_invoices','rolling_transactions','rolling_charge_balance','rolling_credit_balance','rolling_discount_balance','rolling_tax_balance','rolling_charges','rolling_credits'] %}\n\nwith account_rolling_totals as (\n\n    select * \n    from {{ ref('int_recurly__account_rolling_totals') }}\n),\n\n\nfinal as (\n\n    select\n        *,\n        {% for f in fields %}\n        sum(case when {{ f }} is null  \n            then 0  \n            else 1  \n                end) over (order by account_id, date_day rows unbounded preceding) as {{ f }}_partition\n        {%- if not loop.last -%},{%- endif -%}\n        {% endfor %}                  \n    from account_rolling_totals\n)\n\nselect * \nfrom final", "language": "sql", "refs": [{"name": "int_recurly__account_rolling_totals", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.recurly.int_recurly__account_rolling_totals"]}, "compiled_path": "target/compiled/recurly/models/intermediate/int_recurly__account_partitions.sql", "compiled": true, "compiled_code": "\n\nwith account_rolling_totals as (\n\n    select * \n    from \"postgres\".\"recurly_integrations_tests_recurly_int\".\"int_recurly__account_rolling_totals\"\n),\n\n\nfinal as (\n\n    select\n        *,\n        \n        sum(case when rolling_account_balance is null  \n            then 0  \n            else 1  \n                end) over (order by account_id, date_day rows unbounded preceding) as rolling_account_balance_partition,\n        sum(case when rolling_invoices is null  \n            then 0  \n            else 1  \n                end) over (order by account_id, date_day rows unbounded preceding) as rolling_invoices_partition,\n        sum(case when rolling_transactions is null  \n            then 0  \n            else 1  \n                end) over (order by account_id, date_day rows unbounded preceding) as rolling_transactions_partition,\n        sum(case when rolling_charge_balance is null  \n            then 0  \n            else 1  \n                end) over (order by account_id, date_day rows unbounded preceding) as rolling_charge_balance_partition,\n        sum(case when rolling_credit_balance is null  \n            then 0  \n            else 1  \n                end) over (order by account_id, date_day rows unbounded preceding) as rolling_credit_balance_partition,\n        sum(case when rolling_discount_balance is null  \n            then 0  \n            else 1  \n                end) over (order by account_id, date_day rows unbounded preceding) as rolling_discount_balance_partition,\n        sum(case when rolling_tax_balance is null  \n            then 0  \n            else 1  \n                end) over (order by account_id, date_day rows unbounded preceding) as rolling_tax_balance_partition,\n        sum(case when rolling_charges is null  \n            then 0  \n            else 1  \n                end) over (order by account_id, date_day rows unbounded preceding) as rolling_charges_partition,\n        sum(case when rolling_credits is null  \n            then 0  \n            else 1  \n                end) over (order by account_id, date_day rows unbounded preceding) as rolling_credits_partition                  \n    from account_rolling_totals\n)\n\nselect * \nfrom final", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.recurly.int_recurly__account_cumulatives": {"database": "postgres", "schema": "recurly_integrations_tests_recurly_int", "name": "int_recurly__account_cumulatives", "resource_type": "model", "package_name": "recurly", "path": "intermediate/int_recurly__account_cumulatives.sql", "original_file_path": "models/intermediate/int_recurly__account_cumulatives.sql", "unique_id": "model.recurly.int_recurly__account_cumulatives", "fqn": ["recurly", "intermediate", "int_recurly__account_cumulatives"], "alias": "int_recurly__account_cumulatives", "checksum": {"name": "sha256", "checksum": "c4ed7570ad44f0969b343aaffdb770a2c10554e39c35185efca1c3eb72e1b661"}, "config": {"enabled": true, "alias": null, "schema": "recurly_int", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected"}, "tags": [], "description": "Each record is an account and its aggregates in terms of balance and record history.", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "recurly://models/recurly.yml", "build_path": null, "unrendered_config": {"schema": "recurly_int", "materialized": "table"}, "created_at": 1722889775.825748, "relation_name": "\"postgres\".\"recurly_integrations_tests_recurly_int\".\"int_recurly__account_cumulatives\"", "raw_code": "with transactions_grouped as (\n\n    select * \n    from {{ ref('int_recurly__transactions_grouped') }}\n),\n\nbalance_transaction_joined as (\n\n    select * \n    from {{ ref('recurly__balance_transactions') }}\n),\n \naccount_current_month as (\n        \n        select account_id,\n                sum(case when {{ dbt.date_trunc('month', 'date_day') }} = {{ dbt.date_trunc('month', dbt.current_timestamp_backcompat()) }}\n                        then daily_transactions\n                        else 0 \n                        end) as transactions_this_month,\n                sum(case when {{ dbt.date_trunc('month', 'date_day') }} = {{ dbt.date_trunc('month', dbt.current_timestamp_backcompat()) }}\n                        then daily_invoices\n                        else 0 \n                        end) as invoices_this_month,\n                sum(case when {{ dbt.date_trunc('month', 'date_day') }} = {{ dbt.date_trunc('month', dbt.current_timestamp_backcompat()) }}\n                        then daily_balance\n                        else 0 \n                        end) as balance_this_month,\n                sum(case when {{ dbt.date_trunc('month', 'date_day') }} = {{ dbt.date_trunc('month', dbt.current_timestamp_backcompat()) }}\n                        then daily_charges\n                        else 0 \n                        end) as charges_this_month,\n                sum(case when {{ dbt.date_trunc('month', 'date_day') }} = {{ dbt.date_trunc('month', dbt.current_timestamp_backcompat()) }}\n                        then daily_credits\n                        else 0 \n                        end) as credits_this_month,\n                sum(case when {{ dbt.date_trunc('month', 'date_day') }} = {{ dbt.date_trunc('month', dbt.current_timestamp_backcompat()) }}\n                        then daily_discounts\n                        else 0 \n                        end) as discounts_this_month,\n                sum(case when {{ dbt.date_trunc('month', 'date_day') }} = {{ dbt.date_trunc('month', dbt.current_timestamp_backcompat()) }}\n                        then daily_credits\n                        else 0 \n                        end) as taxes_this_month\n        from transactions_grouped\n        {{ dbt_utils.group_by(1) }}  \n),\n\n\naccount_min_max as (\n\n    select \n        account_id,\n        min(case when lower(type) = 'charge' \n            then {{ 'created_at' }} \n            else null end) as first_charge_date,\n        max(case when lower(type) = 'charge' \n            then {{ 'created_at' }}\n            else null end) as most_recent_charge_date,\n        min(invoice_created_at) as first_invoice_date,\n        max(invoice_created_at) as most_recent_invoice_date,\n        min(transaction_created_at) as first_transaction_date,\n        max(transaction_created_at) as most_recent_transaction_date\n    from balance_transaction_joined\n    {{ dbt_utils.group_by(1) }}\n),\n\n\naccount_totals as (\n\n    select \n        account_id,\n        sum(daily_transactions) as total_transactions,\n        sum(daily_invoices) as total_invoices,\n        sum(daily_charges) as total_charges,\n        sum(daily_credits) as total_credits,\n        sum(daily_balance) as total_balance,\n        sum(daily_discounts) as total_discounts,\n        sum(daily_taxes) as total_taxes,\n        sum(daily_charge_count) as total_charge_count,\n        sum(daily_credit_count) as total_credit_count\n    from transactions_grouped\n    {{ dbt_utils.group_by(1) }}\n),\n\nfinal as (\n\n    select distinct\n        account_totals.*,\n        account_current_month.transactions_this_month,\n        account_current_month.invoices_this_month,\n        account_current_month.balance_this_month,\n        account_current_month.charges_this_month,\n        account_current_month.credits_this_month,\n        account_current_month.discounts_this_month,\n        account_current_month.taxes_this_month,\n        account_min_max.first_charge_date,\n        account_min_max.most_recent_charge_date,\n        account_min_max.first_invoice_date,\n        account_min_max.most_recent_invoice_date,\n        account_min_max.first_transaction_date,\n        account_min_max.most_recent_transaction_date\n    from account_totals\n    left join account_current_month \n        on account_totals.account_id = account_current_month.account_id\n    left join account_min_max\n        on account_totals.account_id = account_min_max.account_id\n)\n\nselect *\nfrom final", "language": "sql", "refs": [{"name": "int_recurly__transactions_grouped", "package": null, "version": null}, {"name": "recurly__balance_transactions", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.date_trunc", "macro.dbt.current_timestamp_backcompat", "macro.dbt_utils.group_by"], "nodes": ["model.recurly.int_recurly__transactions_grouped", "model.recurly.recurly__balance_transactions"]}, "compiled_path": "target/compiled/recurly/models/intermediate/int_recurly__account_cumulatives.sql", "compiled": true, "compiled_code": "with transactions_grouped as (\n\n    select * \n    from \"postgres\".\"recurly_integrations_tests_recurly_int\".\"int_recurly__transactions_grouped\"\n),\n\nbalance_transaction_joined as (\n\n    select * \n    from \"postgres\".\"recurly_integrations_tests_recurly\".\"recurly__balance_transactions\"\n),\n \naccount_current_month as (\n        \n        select account_id,\n                sum(case when date_trunc('month', date_day) = date_trunc('month', \n    current_timestamp::timestamp\n)\n                        then daily_transactions\n                        else 0 \n                        end) as transactions_this_month,\n                sum(case when date_trunc('month', date_day) = date_trunc('month', \n    current_timestamp::timestamp\n)\n                        then daily_invoices\n                        else 0 \n                        end) as invoices_this_month,\n                sum(case when date_trunc('month', date_day) = date_trunc('month', \n    current_timestamp::timestamp\n)\n                        then daily_balance\n                        else 0 \n                        end) as balance_this_month,\n                sum(case when date_trunc('month', date_day) = date_trunc('month', \n    current_timestamp::timestamp\n)\n                        then daily_charges\n                        else 0 \n                        end) as charges_this_month,\n                sum(case when date_trunc('month', date_day) = date_trunc('month', \n    current_timestamp::timestamp\n)\n                        then daily_credits\n                        else 0 \n                        end) as credits_this_month,\n                sum(case when date_trunc('month', date_day) = date_trunc('month', \n    current_timestamp::timestamp\n)\n                        then daily_discounts\n                        else 0 \n                        end) as discounts_this_month,\n                sum(case when date_trunc('month', date_day) = date_trunc('month', \n    current_timestamp::timestamp\n)\n                        then daily_credits\n                        else 0 \n                        end) as taxes_this_month\n        from transactions_grouped\n        group by 1  \n),\n\n\naccount_min_max as (\n\n    select \n        account_id,\n        min(case when lower(type) = 'charge' \n            then created_at \n            else null end) as first_charge_date,\n        max(case when lower(type) = 'charge' \n            then created_at\n            else null end) as most_recent_charge_date,\n        min(invoice_created_at) as first_invoice_date,\n        max(invoice_created_at) as most_recent_invoice_date,\n        min(transaction_created_at) as first_transaction_date,\n        max(transaction_created_at) as most_recent_transaction_date\n    from balance_transaction_joined\n    group by 1\n),\n\n\naccount_totals as (\n\n    select \n        account_id,\n        sum(daily_transactions) as total_transactions,\n        sum(daily_invoices) as total_invoices,\n        sum(daily_charges) as total_charges,\n        sum(daily_credits) as total_credits,\n        sum(daily_balance) as total_balance,\n        sum(daily_discounts) as total_discounts,\n        sum(daily_taxes) as total_taxes,\n        sum(daily_charge_count) as total_charge_count,\n        sum(daily_credit_count) as total_credit_count\n    from transactions_grouped\n    group by 1\n),\n\nfinal as (\n\n    select distinct\n        account_totals.*,\n        account_current_month.transactions_this_month,\n        account_current_month.invoices_this_month,\n        account_current_month.balance_this_month,\n        account_current_month.charges_this_month,\n        account_current_month.credits_this_month,\n        account_current_month.discounts_this_month,\n        account_current_month.taxes_this_month,\n        account_min_max.first_charge_date,\n        account_min_max.most_recent_charge_date,\n        account_min_max.first_invoice_date,\n        account_min_max.most_recent_invoice_date,\n        account_min_max.first_transaction_date,\n        account_min_max.most_recent_transaction_date\n    from account_totals\n    left join account_current_month \n        on account_totals.account_id = account_current_month.account_id\n    left join account_min_max\n        on account_totals.account_id = account_min_max.account_id\n)\n\nselect *\nfrom final", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.recurly.int_recurly__account_running_totals": {"database": "postgres", "schema": "recurly_integrations_tests_recurly_int", "name": "int_recurly__account_running_totals", "resource_type": "model", "package_name": "recurly", "path": "intermediate/int_recurly__account_running_totals.sql", "original_file_path": "models/intermediate/int_recurly__account_running_totals.sql", "unique_id": "model.recurly.int_recurly__account_running_totals", "fqn": ["recurly", "intermediate", "int_recurly__account_running_totals"], "alias": "int_recurly__account_running_totals", "checksum": {"name": "sha256", "checksum": "2f5f5c6580f7c3a4b27c5b94bd251c3998b3d0cb009e2e8fabb7d21165fd57cb"}, "config": {"enabled": true, "alias": null, "schema": "recurly_int", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected"}, "tags": [], "description": "Each record is a historical look at an account's balance, changes over time, and daily running updates to key metrics", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "recurly://models/recurly.yml", "build_path": null, "unrendered_config": {"schema": "recurly_int", "materialized": "table"}, "created_at": 1722889775.826435, "relation_name": "\"postgres\".\"recurly_integrations_tests_recurly_int\".\"int_recurly__account_running_totals\"", "raw_code": "{% set fields = ['rolling_account_balance','rolling_invoices','rolling_transactions','rolling_charge_balance','rolling_credit_balance','rolling_discount_balance','rolling_tax_balance','rolling_charges','rolling_credits'] %}\n\nwith account_partitions as (\n\n    select * \n    from {{ ref('int_recurly__account_partitions') }}\n),\n\naccount_overview as (\n\n    select * \n    from {{ ref('recurly__account_overview') }}\n),\n\nfinal as (\n\n    select\n        account_partitions.account_id,\n        account_overview.account_created_at,\n        account_overview.account_city,\n        account_overview.account_company,\n        account_overview.account_country,\n        account_overview.account_code,\n        account_overview.account_email,\n        account_overview.account_first_name,\n        account_overview.account_last_name,\n        account_overview.account_is_tax_exempt,\n        account_overview.account_postal_code,\n        account_overview.account_region,\n        account_overview.account_state,\n        account_overview.account_username\n\n        {{ fivetran_utils.persist_pass_through_columns('recurly_account_pass_through_columns', identifier='account_overview') }},      \n        {{ dbt_utils.generate_surrogate_key(['account_partitions.account_id','date_day']) }} as account_daily_id,\n\n        date_day,        \n        date_week, \n        date_month, \n        date_year,  \n        date_index, \n        coalesce(daily_transactions,0) as daily_transaction_count,\n        coalesce(daily_balance,0) as daily_net_change,\n        coalesce(daily_invoices,0) as daily_invoice_count,\n        coalesce(daily_charges,0) as daily_charges,\n        coalesce(daily_credits,0) as daily_credits,\n        coalesce(daily_discounts,0) as daily_discounts,\n        coalesce(daily_taxes,0) as daily_taxes,\n        coalesce(daily_charge_count,0) as daily_charge_count,\n        coalesce(daily_credit_count,0) as daily_credit_count,\n        {% for f in fields %}\n        coalesce({{ f }},   \n            first_value({{ f }}) over (partition by {{ f }}_partition order by date_day rows unbounded preceding)) as {{ f }}\n        {%- if not loop.last -%},{%- endif -%}\n        {% endfor %}\n    from account_partitions\n    left join account_overview\n        on account_partitions.account_id = account_overview.account_id\n)    \n\nselect *\nfrom final", "language": "sql", "refs": [{"name": "int_recurly__account_partitions", "package": null, "version": null}, {"name": "recurly__account_overview", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.fivetran_utils.persist_pass_through_columns", "macro.dbt_utils.generate_surrogate_key"], "nodes": ["model.recurly.int_recurly__account_partitions", "model.recurly.recurly__account_overview"]}, "compiled_path": "target/compiled/recurly/models/intermediate/int_recurly__account_running_totals.sql", "compiled": true, "compiled_code": "\n\nwith account_partitions as (\n\n    select * \n    from \"postgres\".\"recurly_integrations_tests_recurly_int\".\"int_recurly__account_partitions\"\n),\n\naccount_overview as (\n\n    select * \n    from \"postgres\".\"recurly_integrations_tests_recurly\".\"recurly__account_overview\"\n),\n\nfinal as (\n\n    select\n        account_partitions.account_id,\n        account_overview.account_created_at,\n        account_overview.account_city,\n        account_overview.account_company,\n        account_overview.account_country,\n        account_overview.account_code,\n        account_overview.account_email,\n        account_overview.account_first_name,\n        account_overview.account_last_name,\n        account_overview.account_is_tax_exempt,\n        account_overview.account_postal_code,\n        account_overview.account_region,\n        account_overview.account_state,\n        account_overview.account_username\n\n        \n\n\n\n,      \n        md5(cast(coalesce(cast(account_partitions.account_id as TEXT), '_dbt_utils_surrogate_key_null_') || '-' || coalesce(cast(date_day as TEXT), '_dbt_utils_surrogate_key_null_') as TEXT)) as account_daily_id,\n\n        date_day,        \n        date_week, \n        date_month, \n        date_year,  \n        date_index, \n        coalesce(daily_transactions,0) as daily_transaction_count,\n        coalesce(daily_balance,0) as daily_net_change,\n        coalesce(daily_invoices,0) as daily_invoice_count,\n        coalesce(daily_charges,0) as daily_charges,\n        coalesce(daily_credits,0) as daily_credits,\n        coalesce(daily_discounts,0) as daily_discounts,\n        coalesce(daily_taxes,0) as daily_taxes,\n        coalesce(daily_charge_count,0) as daily_charge_count,\n        coalesce(daily_credit_count,0) as daily_credit_count,\n        \n        coalesce(rolling_account_balance,   \n            first_value(rolling_account_balance) over (partition by rolling_account_balance_partition order by date_day rows unbounded preceding)) as rolling_account_balance,\n        coalesce(rolling_invoices,   \n            first_value(rolling_invoices) over (partition by rolling_invoices_partition order by date_day rows unbounded preceding)) as rolling_invoices,\n        coalesce(rolling_transactions,   \n            first_value(rolling_transactions) over (partition by rolling_transactions_partition order by date_day rows unbounded preceding)) as rolling_transactions,\n        coalesce(rolling_charge_balance,   \n            first_value(rolling_charge_balance) over (partition by rolling_charge_balance_partition order by date_day rows unbounded preceding)) as rolling_charge_balance,\n        coalesce(rolling_credit_balance,   \n            first_value(rolling_credit_balance) over (partition by rolling_credit_balance_partition order by date_day rows unbounded preceding)) as rolling_credit_balance,\n        coalesce(rolling_discount_balance,   \n            first_value(rolling_discount_balance) over (partition by rolling_discount_balance_partition order by date_day rows unbounded preceding)) as rolling_discount_balance,\n        coalesce(rolling_tax_balance,   \n            first_value(rolling_tax_balance) over (partition by rolling_tax_balance_partition order by date_day rows unbounded preceding)) as rolling_tax_balance,\n        coalesce(rolling_charges,   \n            first_value(rolling_charges) over (partition by rolling_charges_partition order by date_day rows unbounded preceding)) as rolling_charges,\n        coalesce(rolling_credits,   \n            first_value(rolling_credits) over (partition by rolling_credits_partition order by date_day rows unbounded preceding)) as rolling_credits\n    from account_partitions\n    left join account_overview\n        on account_partitions.account_id = account_overview.account_id\n)    \n\nselect *\nfrom final", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "test.recurly_source.not_null_stg_recurly__account_balance_history_account_id.3e5f5059aa": {"database": "postgres", "schema": "recurly_integrations_tests_dbt_test__audit", "name": "not_null_stg_recurly__account_balance_history_account_id", "resource_type": "test", "package_name": "recurly_source", "path": "not_null_stg_recurly__account_balance_history_account_id.sql", "original_file_path": "models/stg_recurly.yml", "unique_id": "test.recurly_source.not_null_stg_recurly__account_balance_history_account_id.3e5f5059aa", "fqn": ["recurly_source", "not_null_stg_recurly__account_balance_history_account_id"], "alias": "not_null_stg_recurly__account_balance_history_account_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1722889775.682964, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "stg_recurly__account_balance_history", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.recurly_source.stg_recurly__account_balance_history"]}, "compiled_path": "target/compiled/recurly_source/models/stg_recurly.yml/not_null_stg_recurly__account_balance_history_account_id.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect account_id\nfrom \"postgres\".\"recurly_integrations_tests_recurly_source\".\"stg_recurly__account_balance_history\"\nwhere account_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "account_id", "file_key_name": "models.stg_recurly__account_balance_history", "attached_node": "model.recurly_source.stg_recurly__account_balance_history", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "account_id", "model": "{{ get_where_subquery(ref('stg_recurly__account_balance_history')) }}"}, "namespace": null}}, "test.recurly_source.dbt_utils_unique_combination_of_columns_stg_recurly__account_balance_history_account_id__account_updated_at__currency.f2a92ef487": {"database": "postgres", "schema": "recurly_integrations_tests_dbt_test__audit", "name": "dbt_utils_unique_combination_of_columns_stg_recurly__account_balance_history_account_id__account_updated_at__currency", "resource_type": "test", "package_name": "recurly_source", "path": "dbt_utils_unique_combination_o_35775c0b26189c11f1e7c925432764ca.sql", "original_file_path": "models/stg_recurly.yml", "unique_id": "test.recurly_source.dbt_utils_unique_combination_of_columns_stg_recurly__account_balance_history_account_id__account_updated_at__currency.f2a92ef487", "fqn": ["recurly_source", "dbt_utils_unique_combination_of_columns_stg_recurly__account_balance_history_account_id__account_updated_at__currency"], "alias": "dbt_utils_unique_combination_o_35775c0b26189c11f1e7c925432764ca", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_utils_unique_combination_o_35775c0b26189c11f1e7c925432764ca", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "dbt_utils_unique_combination_o_35775c0b26189c11f1e7c925432764ca"}, "created_at": 1722889775.684225, "relation_name": null, "raw_code": "{{ dbt_utils.test_unique_combination_of_columns(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_unique_combination_o_35775c0b26189c11f1e7c925432764ca\") }}", "language": "sql", "refs": [{"name": "stg_recurly__account_balance_history", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.test_unique_combination_of_columns", "macro.dbt.get_where_subquery"], "nodes": ["model.recurly_source.stg_recurly__account_balance_history"]}, "compiled_path": "target/compiled/recurly_source/models/stg_recurly.yml/dbt_utils_unique_combination_o_35775c0b26189c11f1e7c925432764ca.sql", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        account_id, account_updated_at, currency\n    from \"postgres\".\"recurly_integrations_tests_recurly_source\".\"stg_recurly__account_balance_history\"\n    group by account_id, account_updated_at, currency\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": null, "file_key_name": "models.stg_recurly__account_balance_history", "attached_node": "model.recurly_source.stg_recurly__account_balance_history", "test_metadata": {"name": "unique_combination_of_columns", "kwargs": {"combination_of_columns": ["account_id", "account_updated_at", "currency"], "model": "{{ get_where_subquery(ref('stg_recurly__account_balance_history')) }}"}, "namespace": "dbt_utils"}}, "test.recurly_source.not_null_stg_recurly__account_history_account_id.44786b38b6": {"database": "postgres", "schema": "recurly_integrations_tests_dbt_test__audit", "name": "not_null_stg_recurly__account_history_account_id", "resource_type": "test", "package_name": "recurly_source", "path": "not_null_stg_recurly__account_history_account_id.sql", "original_file_path": "models/stg_recurly.yml", "unique_id": "test.recurly_source.not_null_stg_recurly__account_history_account_id.44786b38b6", "fqn": ["recurly_source", "not_null_stg_recurly__account_history_account_id"], "alias": "not_null_stg_recurly__account_history_account_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1722889775.6956139, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "stg_recurly__account_history", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.recurly_source.stg_recurly__account_history"]}, "compiled_path": "target/compiled/recurly_source/models/stg_recurly.yml/not_null_stg_recurly__account_history_account_id.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect account_id\nfrom \"postgres\".\"recurly_integrations_tests_recurly_source\".\"stg_recurly__account_history\"\nwhere account_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "account_id", "file_key_name": "models.stg_recurly__account_history", "attached_node": "model.recurly_source.stg_recurly__account_history", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "account_id", "model": "{{ get_where_subquery(ref('stg_recurly__account_history')) }}"}, "namespace": null}}, "test.recurly_source.dbt_utils_unique_combination_of_columns_stg_recurly__account_history_account_id__updated_at.8b52517a8d": {"database": "postgres", "schema": "recurly_integrations_tests_dbt_test__audit", "name": "dbt_utils_unique_combination_of_columns_stg_recurly__account_history_account_id__updated_at", "resource_type": "test", "package_name": "recurly_source", "path": "dbt_utils_unique_combination_o_9870817be57f00ffa9912dff37b2cf64.sql", "original_file_path": "models/stg_recurly.yml", "unique_id": "test.recurly_source.dbt_utils_unique_combination_of_columns_stg_recurly__account_history_account_id__updated_at.8b52517a8d", "fqn": ["recurly_source", "dbt_utils_unique_combination_of_columns_stg_recurly__account_history_account_id__updated_at"], "alias": "dbt_utils_unique_combination_o_9870817be57f00ffa9912dff37b2cf64", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_utils_unique_combination_o_9870817be57f00ffa9912dff37b2cf64", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "dbt_utils_unique_combination_o_9870817be57f00ffa9912dff37b2cf64"}, "created_at": 1722889775.696586, "relation_name": null, "raw_code": "{{ dbt_utils.test_unique_combination_of_columns(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_unique_combination_o_9870817be57f00ffa9912dff37b2cf64\") }}", "language": "sql", "refs": [{"name": "stg_recurly__account_history", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.test_unique_combination_of_columns", "macro.dbt.get_where_subquery"], "nodes": ["model.recurly_source.stg_recurly__account_history"]}, "compiled_path": "target/compiled/recurly_source/models/stg_recurly.yml/dbt_utils_unique_combination_o_9870817be57f00ffa9912dff37b2cf64.sql", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        account_id, updated_at\n    from \"postgres\".\"recurly_integrations_tests_recurly_source\".\"stg_recurly__account_history\"\n    group by account_id, updated_at\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": null, "file_key_name": "models.stg_recurly__account_history", "attached_node": "model.recurly_source.stg_recurly__account_history", "test_metadata": {"name": "unique_combination_of_columns", "kwargs": {"combination_of_columns": ["account_id", "updated_at"], "model": "{{ get_where_subquery(ref('stg_recurly__account_history')) }}"}, "namespace": "dbt_utils"}}, "test.recurly_source.not_null_stg_recurly__account_note_history_account_note_id.149e8223d0": {"database": "postgres", "schema": "recurly_integrations_tests_dbt_test__audit", "name": "not_null_stg_recurly__account_note_history_account_note_id", "resource_type": "test", "package_name": "recurly_source", "path": "not_null_stg_recurly__account_note_history_account_note_id.sql", "original_file_path": "models/stg_recurly.yml", "unique_id": "test.recurly_source.not_null_stg_recurly__account_note_history_account_note_id.149e8223d0", "fqn": ["recurly_source", "not_null_stg_recurly__account_note_history_account_note_id"], "alias": "not_null_stg_recurly__account_note_history_account_note_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1722889775.698965, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "stg_recurly__account_note_history", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.recurly_source.stg_recurly__account_note_history"]}, "compiled_path": "target/compiled/recurly_source/models/stg_recurly.yml/not_null_stg_recurly__account_note_history_account_note_id.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect account_note_id\nfrom \"postgres\".\"recurly_integrations_tests_recurly_source\".\"stg_recurly__account_note_history\"\nwhere account_note_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "account_note_id", "file_key_name": "models.stg_recurly__account_note_history", "attached_node": "model.recurly_source.stg_recurly__account_note_history", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "account_note_id", "model": "{{ get_where_subquery(ref('stg_recurly__account_note_history')) }}"}, "namespace": null}}, "test.recurly_source.dbt_utils_unique_combination_of_columns_stg_recurly__account_note_history_account_note_id__account_id__account_updated_at.16e69c745d": {"database": "postgres", "schema": "recurly_integrations_tests_dbt_test__audit", "name": "dbt_utils_unique_combination_of_columns_stg_recurly__account_note_history_account_note_id__account_id__account_updated_at", "resource_type": "test", "package_name": "recurly_source", "path": "dbt_utils_unique_combination_o_9a7872aabde8c18f52b17209d9abdb5b.sql", "original_file_path": "models/stg_recurly.yml", "unique_id": "test.recurly_source.dbt_utils_unique_combination_of_columns_stg_recurly__account_note_history_account_note_id__account_id__account_updated_at.16e69c745d", "fqn": ["recurly_source", "dbt_utils_unique_combination_of_columns_stg_recurly__account_note_history_account_note_id__account_id__account_updated_at"], "alias": "dbt_utils_unique_combination_o_9a7872aabde8c18f52b17209d9abdb5b", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_utils_unique_combination_o_9a7872aabde8c18f52b17209d9abdb5b", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "dbt_utils_unique_combination_o_9a7872aabde8c18f52b17209d9abdb5b"}, "created_at": 1722889775.699863, "relation_name": null, "raw_code": "{{ dbt_utils.test_unique_combination_of_columns(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_unique_combination_o_9a7872aabde8c18f52b17209d9abdb5b\") }}", "language": "sql", "refs": [{"name": "stg_recurly__account_note_history", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.test_unique_combination_of_columns", "macro.dbt.get_where_subquery"], "nodes": ["model.recurly_source.stg_recurly__account_note_history"]}, "compiled_path": "target/compiled/recurly_source/models/stg_recurly.yml/dbt_utils_unique_combination_o_9a7872aabde8c18f52b17209d9abdb5b.sql", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        account_note_id, account_id, account_updated_at\n    from \"postgres\".\"recurly_integrations_tests_recurly_source\".\"stg_recurly__account_note_history\"\n    group by account_note_id, account_id, account_updated_at\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": null, "file_key_name": "models.stg_recurly__account_note_history", "attached_node": "model.recurly_source.stg_recurly__account_note_history", "test_metadata": {"name": "unique_combination_of_columns", "kwargs": {"combination_of_columns": ["account_note_id", "account_id", "account_updated_at"], "model": "{{ get_where_subquery(ref('stg_recurly__account_note_history')) }}"}, "namespace": "dbt_utils"}}, "test.recurly_source.not_null_stg_recurly__billing_info_history_billing_id.0ea7044987": {"database": "postgres", "schema": "recurly_integrations_tests_dbt_test__audit", "name": "not_null_stg_recurly__billing_info_history_billing_id", "resource_type": "test", "package_name": "recurly_source", "path": "not_null_stg_recurly__billing_info_history_billing_id.sql", "original_file_path": "models/stg_recurly.yml", "unique_id": "test.recurly_source.not_null_stg_recurly__billing_info_history_billing_id.0ea7044987", "fqn": ["recurly_source", "not_null_stg_recurly__billing_info_history_billing_id"], "alias": "not_null_stg_recurly__billing_info_history_billing_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1722889775.702121, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "stg_recurly__billing_info_history", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.recurly_source.stg_recurly__billing_info_history"]}, "compiled_path": "target/compiled/recurly_source/models/stg_recurly.yml/not_null_stg_recurly__billing_info_history_billing_id.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect billing_id\nfrom \"postgres\".\"recurly_integrations_tests_recurly_source\".\"stg_recurly__billing_info_history\"\nwhere billing_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "billing_id", "file_key_name": "models.stg_recurly__billing_info_history", "attached_node": "model.recurly_source.stg_recurly__billing_info_history", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "billing_id", "model": "{{ get_where_subquery(ref('stg_recurly__billing_info_history')) }}"}, "namespace": null}}, "test.recurly_source.dbt_utils_unique_combination_of_columns_stg_recurly__billing_info_history_billing_id__updated_at.e0eac3a8ea": {"database": "postgres", "schema": "recurly_integrations_tests_dbt_test__audit", "name": "dbt_utils_unique_combination_of_columns_stg_recurly__billing_info_history_billing_id__updated_at", "resource_type": "test", "package_name": "recurly_source", "path": "dbt_utils_unique_combination_o_a336812353e7281af688bc74a8e35760.sql", "original_file_path": "models/stg_recurly.yml", "unique_id": "test.recurly_source.dbt_utils_unique_combination_of_columns_stg_recurly__billing_info_history_billing_id__updated_at.e0eac3a8ea", "fqn": ["recurly_source", "dbt_utils_unique_combination_of_columns_stg_recurly__billing_info_history_billing_id__updated_at"], "alias": "dbt_utils_unique_combination_o_a336812353e7281af688bc74a8e35760", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_utils_unique_combination_o_a336812353e7281af688bc74a8e35760", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "dbt_utils_unique_combination_o_a336812353e7281af688bc74a8e35760"}, "created_at": 1722889775.703069, "relation_name": null, "raw_code": "{{ dbt_utils.test_unique_combination_of_columns(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_unique_combination_o_a336812353e7281af688bc74a8e35760\") }}", "language": "sql", "refs": [{"name": "stg_recurly__billing_info_history", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.test_unique_combination_of_columns", "macro.dbt.get_where_subquery"], "nodes": ["model.recurly_source.stg_recurly__billing_info_history"]}, "compiled_path": "target/compiled/recurly_source/models/stg_recurly.yml/dbt_utils_unique_combination_o_a336812353e7281af688bc74a8e35760.sql", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        billing_id, updated_at\n    from \"postgres\".\"recurly_integrations_tests_recurly_source\".\"stg_recurly__billing_info_history\"\n    group by billing_id, updated_at\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": null, "file_key_name": "models.stg_recurly__billing_info_history", "attached_node": "model.recurly_source.stg_recurly__billing_info_history", "test_metadata": {"name": "unique_combination_of_columns", "kwargs": {"combination_of_columns": ["billing_id", "updated_at"], "model": "{{ get_where_subquery(ref('stg_recurly__billing_info_history')) }}"}, "namespace": "dbt_utils"}}, "test.recurly_source.not_null_stg_recurly__coupon_discount_fivetran_id.72815f9856": {"database": "postgres", "schema": "recurly_integrations_tests_dbt_test__audit", "name": "not_null_stg_recurly__coupon_discount_fivetran_id", "resource_type": "test", "package_name": "recurly_source", "path": "not_null_stg_recurly__coupon_discount_fivetran_id.sql", "original_file_path": "models/stg_recurly.yml", "unique_id": "test.recurly_source.not_null_stg_recurly__coupon_discount_fivetran_id.72815f9856", "fqn": ["recurly_source", "not_null_stg_recurly__coupon_discount_fivetran_id"], "alias": "not_null_stg_recurly__coupon_discount_fivetran_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1722889775.7055612, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "stg_recurly__coupon_discount", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.recurly_source.stg_recurly__coupon_discount"]}, "compiled_path": "target/compiled/recurly_source/models/stg_recurly.yml/not_null_stg_recurly__coupon_discount_fivetran_id.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect fivetran_id\nfrom \"postgres\".\"recurly_integrations_tests_recurly_source\".\"stg_recurly__coupon_discount\"\nwhere fivetran_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "fivetran_id", "file_key_name": "models.stg_recurly__coupon_discount", "attached_node": "model.recurly_source.stg_recurly__coupon_discount", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "fivetran_id", "model": "{{ get_where_subquery(ref('stg_recurly__coupon_discount')) }}"}, "namespace": null}}, "test.recurly_source.not_null_stg_recurly__coupon_discount_coupon_id.5cadc37042": {"database": "postgres", "schema": "recurly_integrations_tests_dbt_test__audit", "name": "not_null_stg_recurly__coupon_discount_coupon_id", "resource_type": "test", "package_name": "recurly_source", "path": "not_null_stg_recurly__coupon_discount_coupon_id.sql", "original_file_path": "models/stg_recurly.yml", "unique_id": "test.recurly_source.not_null_stg_recurly__coupon_discount_coupon_id.5cadc37042", "fqn": ["recurly_source", "not_null_stg_recurly__coupon_discount_coupon_id"], "alias": "not_null_stg_recurly__coupon_discount_coupon_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1722889775.7068741, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "stg_recurly__coupon_discount", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.recurly_source.stg_recurly__coupon_discount"]}, "compiled_path": "target/compiled/recurly_source/models/stg_recurly.yml/not_null_stg_recurly__coupon_discount_coupon_id.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect coupon_id\nfrom \"postgres\".\"recurly_integrations_tests_recurly_source\".\"stg_recurly__coupon_discount\"\nwhere coupon_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "coupon_id", "file_key_name": "models.stg_recurly__coupon_discount", "attached_node": "model.recurly_source.stg_recurly__coupon_discount", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "coupon_id", "model": "{{ get_where_subquery(ref('stg_recurly__coupon_discount')) }}"}, "namespace": null}}, "test.recurly_source.dbt_utils_unique_combination_of_columns_stg_recurly__coupon_discount_fivetran_id__coupon_id.3b43f53454": {"database": "postgres", "schema": "recurly_integrations_tests_dbt_test__audit", "name": "dbt_utils_unique_combination_of_columns_stg_recurly__coupon_discount_fivetran_id__coupon_id", "resource_type": "test", "package_name": "recurly_source", "path": "dbt_utils_unique_combination_o_e80615ec84971974de1f606dbde38f20.sql", "original_file_path": "models/stg_recurly.yml", "unique_id": "test.recurly_source.dbt_utils_unique_combination_of_columns_stg_recurly__coupon_discount_fivetran_id__coupon_id.3b43f53454", "fqn": ["recurly_source", "dbt_utils_unique_combination_of_columns_stg_recurly__coupon_discount_fivetran_id__coupon_id"], "alias": "dbt_utils_unique_combination_o_e80615ec84971974de1f606dbde38f20", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_utils_unique_combination_o_e80615ec84971974de1f606dbde38f20", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "dbt_utils_unique_combination_o_e80615ec84971974de1f606dbde38f20"}, "created_at": 1722889775.707854, "relation_name": null, "raw_code": "{{ dbt_utils.test_unique_combination_of_columns(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_unique_combination_o_e80615ec84971974de1f606dbde38f20\") }}", "language": "sql", "refs": [{"name": "stg_recurly__coupon_discount", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.test_unique_combination_of_columns", "macro.dbt.get_where_subquery"], "nodes": ["model.recurly_source.stg_recurly__coupon_discount"]}, "compiled_path": "target/compiled/recurly_source/models/stg_recurly.yml/dbt_utils_unique_combination_o_e80615ec84971974de1f606dbde38f20.sql", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        fivetran_id, coupon_id\n    from \"postgres\".\"recurly_integrations_tests_recurly_source\".\"stg_recurly__coupon_discount\"\n    group by fivetran_id, coupon_id\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": null, "file_key_name": "models.stg_recurly__coupon_discount", "attached_node": "model.recurly_source.stg_recurly__coupon_discount", "test_metadata": {"name": "unique_combination_of_columns", "kwargs": {"combination_of_columns": ["fivetran_id", "coupon_id"], "model": "{{ get_where_subquery(ref('stg_recurly__coupon_discount')) }}"}, "namespace": "dbt_utils"}}, "test.recurly_source.not_null_stg_recurly__coupon_redemption_history_coupon_redemption_id.e23507152c": {"database": "postgres", "schema": "recurly_integrations_tests_dbt_test__audit", "name": "not_null_stg_recurly__coupon_redemption_history_coupon_redemption_id", "resource_type": "test", "package_name": "recurly_source", "path": "not_null_stg_recurly__coupon_r_17b3406da530b414078db516ccab1bae.sql", "original_file_path": "models/stg_recurly.yml", "unique_id": "test.recurly_source.not_null_stg_recurly__coupon_redemption_history_coupon_redemption_id.e23507152c", "fqn": ["recurly_source", "not_null_stg_recurly__coupon_redemption_history_coupon_redemption_id"], "alias": "not_null_stg_recurly__coupon_r_17b3406da530b414078db516ccab1bae", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "not_null_stg_recurly__coupon_r_17b3406da530b414078db516ccab1bae", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "not_null_stg_recurly__coupon_r_17b3406da530b414078db516ccab1bae"}, "created_at": 1722889775.710419, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}{{ config(alias=\"not_null_stg_recurly__coupon_r_17b3406da530b414078db516ccab1bae\") }}", "language": "sql", "refs": [{"name": "stg_recurly__coupon_redemption_history", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.recurly_source.stg_recurly__coupon_redemption_history"]}, "compiled_path": "target/compiled/recurly_source/models/stg_recurly.yml/not_null_stg_recurly__coupon_r_17b3406da530b414078db516ccab1bae.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect coupon_redemption_id\nfrom \"postgres\".\"recurly_integrations_tests_recurly_source\".\"stg_recurly__coupon_redemption_history\"\nwhere coupon_redemption_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "coupon_redemption_id", "file_key_name": "models.stg_recurly__coupon_redemption_history", "attached_node": "model.recurly_source.stg_recurly__coupon_redemption_history", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "coupon_redemption_id", "model": "{{ get_where_subquery(ref('stg_recurly__coupon_redemption_history')) }}"}, "namespace": null}}, "test.recurly_source.dbt_utils_unique_combination_of_columns_stg_recurly__coupon_redemption_history_coupon_redemption_id__updated_at.3231280b1f": {"database": "postgres", "schema": "recurly_integrations_tests_dbt_test__audit", "name": "dbt_utils_unique_combination_of_columns_stg_recurly__coupon_redemption_history_coupon_redemption_id__updated_at", "resource_type": "test", "package_name": "recurly_source", "path": "dbt_utils_unique_combination_o_d9ce5a7532e91d823872d964768d379e.sql", "original_file_path": "models/stg_recurly.yml", "unique_id": "test.recurly_source.dbt_utils_unique_combination_of_columns_stg_recurly__coupon_redemption_history_coupon_redemption_id__updated_at.3231280b1f", "fqn": ["recurly_source", "dbt_utils_unique_combination_of_columns_stg_recurly__coupon_redemption_history_coupon_redemption_id__updated_at"], "alias": "dbt_utils_unique_combination_o_d9ce5a7532e91d823872d964768d379e", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_utils_unique_combination_o_d9ce5a7532e91d823872d964768d379e", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "dbt_utils_unique_combination_o_d9ce5a7532e91d823872d964768d379e"}, "created_at": 1722889775.7113101, "relation_name": null, "raw_code": "{{ dbt_utils.test_unique_combination_of_columns(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_unique_combination_o_d9ce5a7532e91d823872d964768d379e\") }}", "language": "sql", "refs": [{"name": "stg_recurly__coupon_redemption_history", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.test_unique_combination_of_columns", "macro.dbt.get_where_subquery"], "nodes": ["model.recurly_source.stg_recurly__coupon_redemption_history"]}, "compiled_path": "target/compiled/recurly_source/models/stg_recurly.yml/dbt_utils_unique_combination_o_d9ce5a7532e91d823872d964768d379e.sql", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        coupon_redemption_id, updated_at\n    from \"postgres\".\"recurly_integrations_tests_recurly_source\".\"stg_recurly__coupon_redemption_history\"\n    group by coupon_redemption_id, updated_at\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": null, "file_key_name": "models.stg_recurly__coupon_redemption_history", "attached_node": "model.recurly_source.stg_recurly__coupon_redemption_history", "test_metadata": {"name": "unique_combination_of_columns", "kwargs": {"combination_of_columns": ["coupon_redemption_id", "updated_at"], "model": "{{ get_where_subquery(ref('stg_recurly__coupon_redemption_history')) }}"}, "namespace": "dbt_utils"}}, "test.recurly_source.not_null_stg_recurly__credit_payment_history_credit_payment_id.242ec5084a": {"database": "postgres", "schema": "recurly_integrations_tests_dbt_test__audit", "name": "not_null_stg_recurly__credit_payment_history_credit_payment_id", "resource_type": "test", "package_name": "recurly_source", "path": "not_null_stg_recurly__credit_payment_history_credit_payment_id.sql", "original_file_path": "models/stg_recurly.yml", "unique_id": "test.recurly_source.not_null_stg_recurly__credit_payment_history_credit_payment_id.242ec5084a", "fqn": ["recurly_source", "not_null_stg_recurly__credit_payment_history_credit_payment_id"], "alias": "not_null_stg_recurly__credit_payment_history_credit_payment_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1722889775.71353, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "stg_recurly__credit_payment_history", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.recurly_source.stg_recurly__credit_payment_history"]}, "compiled_path": "target/compiled/recurly_source/models/stg_recurly.yml/not_null_stg_recurly__credit_payment_history_credit_payment_id.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect credit_payment_id\nfrom \"postgres\".\"recurly_integrations_tests_recurly_source\".\"stg_recurly__credit_payment_history\"\nwhere credit_payment_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "credit_payment_id", "file_key_name": "models.stg_recurly__credit_payment_history", "attached_node": "model.recurly_source.stg_recurly__credit_payment_history", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "credit_payment_id", "model": "{{ get_where_subquery(ref('stg_recurly__credit_payment_history')) }}"}, "namespace": null}}, "test.recurly_source.dbt_utils_unique_combination_of_columns_stg_recurly__credit_payment_history_credit_payment_id__updated_at.4b777b7f53": {"database": "postgres", "schema": "recurly_integrations_tests_dbt_test__audit", "name": "dbt_utils_unique_combination_of_columns_stg_recurly__credit_payment_history_credit_payment_id__updated_at", "resource_type": "test", "package_name": "recurly_source", "path": "dbt_utils_unique_combination_o_fc058d27ff18221fa26b8d1c2ec0aa56.sql", "original_file_path": "models/stg_recurly.yml", "unique_id": "test.recurly_source.dbt_utils_unique_combination_of_columns_stg_recurly__credit_payment_history_credit_payment_id__updated_at.4b777b7f53", "fqn": ["recurly_source", "dbt_utils_unique_combination_of_columns_stg_recurly__credit_payment_history_credit_payment_id__updated_at"], "alias": "dbt_utils_unique_combination_o_fc058d27ff18221fa26b8d1c2ec0aa56", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_utils_unique_combination_o_fc058d27ff18221fa26b8d1c2ec0aa56", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "dbt_utils_unique_combination_o_fc058d27ff18221fa26b8d1c2ec0aa56"}, "created_at": 1722889775.7144508, "relation_name": null, "raw_code": "{{ dbt_utils.test_unique_combination_of_columns(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_unique_combination_o_fc058d27ff18221fa26b8d1c2ec0aa56\") }}", "language": "sql", "refs": [{"name": "stg_recurly__credit_payment_history", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.test_unique_combination_of_columns", "macro.dbt.get_where_subquery"], "nodes": ["model.recurly_source.stg_recurly__credit_payment_history"]}, "compiled_path": "target/compiled/recurly_source/models/stg_recurly.yml/dbt_utils_unique_combination_o_fc058d27ff18221fa26b8d1c2ec0aa56.sql", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        credit_payment_id, updated_at\n    from \"postgres\".\"recurly_integrations_tests_recurly_source\".\"stg_recurly__credit_payment_history\"\n    group by credit_payment_id, updated_at\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": null, "file_key_name": "models.stg_recurly__credit_payment_history", "attached_node": "model.recurly_source.stg_recurly__credit_payment_history", "test_metadata": {"name": "unique_combination_of_columns", "kwargs": {"combination_of_columns": ["credit_payment_id", "updated_at"], "model": "{{ get_where_subquery(ref('stg_recurly__credit_payment_history')) }}"}, "namespace": "dbt_utils"}}, "test.recurly_source.not_null_stg_recurly__invoice_coupon_redemption_history_coupon_redemption_id.7231a87702": {"database": "postgres", "schema": "recurly_integrations_tests_dbt_test__audit", "name": "not_null_stg_recurly__invoice_coupon_redemption_history_coupon_redemption_id", "resource_type": "test", "package_name": "recurly_source", "path": "not_null_stg_recurly__invoice__bb442a06e66f398a30abc80cb3fa7365.sql", "original_file_path": "models/stg_recurly.yml", "unique_id": "test.recurly_source.not_null_stg_recurly__invoice_coupon_redemption_history_coupon_redemption_id.7231a87702", "fqn": ["recurly_source", "not_null_stg_recurly__invoice_coupon_redemption_history_coupon_redemption_id"], "alias": "not_null_stg_recurly__invoice__bb442a06e66f398a30abc80cb3fa7365", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "not_null_stg_recurly__invoice__bb442a06e66f398a30abc80cb3fa7365", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "not_null_stg_recurly__invoice__bb442a06e66f398a30abc80cb3fa7365"}, "created_at": 1722889775.717163, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}{{ config(alias=\"not_null_stg_recurly__invoice__bb442a06e66f398a30abc80cb3fa7365\") }}", "language": "sql", "refs": [{"name": "stg_recurly__invoice_coupon_redemption_history", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.recurly_source.stg_recurly__invoice_coupon_redemption_history"]}, "compiled_path": "target/compiled/recurly_source/models/stg_recurly.yml/not_null_stg_recurly__invoice__bb442a06e66f398a30abc80cb3fa7365.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect coupon_redemption_id\nfrom \"postgres\".\"recurly_integrations_tests_recurly_source\".\"stg_recurly__invoice_coupon_redemption_history\"\nwhere coupon_redemption_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "coupon_redemption_id", "file_key_name": "models.stg_recurly__invoice_coupon_redemption_history", "attached_node": "model.recurly_source.stg_recurly__invoice_coupon_redemption_history", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "coupon_redemption_id", "model": "{{ get_where_subquery(ref('stg_recurly__invoice_coupon_redemption_history')) }}"}, "namespace": null}}, "test.recurly_source.dbt_utils_unique_combination_of_columns_stg_recurly__invoice_coupon_redemption_history_coupon_redemption_id__invoice_id__invoice_updated_at.342096847a": {"database": "postgres", "schema": "recurly_integrations_tests_dbt_test__audit", "name": "dbt_utils_unique_combination_of_columns_stg_recurly__invoice_coupon_redemption_history_coupon_redemption_id__invoice_id__invoice_updated_at", "resource_type": "test", "package_name": "recurly_source", "path": "dbt_utils_unique_combination_o_d9b557ec93a371c0e31ab4109fb09826.sql", "original_file_path": "models/stg_recurly.yml", "unique_id": "test.recurly_source.dbt_utils_unique_combination_of_columns_stg_recurly__invoice_coupon_redemption_history_coupon_redemption_id__invoice_id__invoice_updated_at.342096847a", "fqn": ["recurly_source", "dbt_utils_unique_combination_of_columns_stg_recurly__invoice_coupon_redemption_history_coupon_redemption_id__invoice_id__invoice_updated_at"], "alias": "dbt_utils_unique_combination_o_d9b557ec93a371c0e31ab4109fb09826", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_utils_unique_combination_o_d9b557ec93a371c0e31ab4109fb09826", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "dbt_utils_unique_combination_o_d9b557ec93a371c0e31ab4109fb09826"}, "created_at": 1722889775.718098, "relation_name": null, "raw_code": "{{ dbt_utils.test_unique_combination_of_columns(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_unique_combination_o_d9b557ec93a371c0e31ab4109fb09826\") }}", "language": "sql", "refs": [{"name": "stg_recurly__invoice_coupon_redemption_history", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.test_unique_combination_of_columns", "macro.dbt.get_where_subquery"], "nodes": ["model.recurly_source.stg_recurly__invoice_coupon_redemption_history"]}, "compiled_path": "target/compiled/recurly_source/models/stg_recurly.yml/dbt_utils_unique_combination_o_d9b557ec93a371c0e31ab4109fb09826.sql", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        coupon_redemption_id, invoice_id, invoice_updated_at\n    from \"postgres\".\"recurly_integrations_tests_recurly_source\".\"stg_recurly__invoice_coupon_redemption_history\"\n    group by coupon_redemption_id, invoice_id, invoice_updated_at\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": null, "file_key_name": "models.stg_recurly__invoice_coupon_redemption_history", "attached_node": "model.recurly_source.stg_recurly__invoice_coupon_redemption_history", "test_metadata": {"name": "unique_combination_of_columns", "kwargs": {"combination_of_columns": ["coupon_redemption_id", "invoice_id", "invoice_updated_at"], "model": "{{ get_where_subquery(ref('stg_recurly__invoice_coupon_redemption_history')) }}"}, "namespace": "dbt_utils"}}, "test.recurly_source.not_null_stg_recurly__invoice_history_invoice_id.8a72a867d9": {"database": "postgres", "schema": "recurly_integrations_tests_dbt_test__audit", "name": "not_null_stg_recurly__invoice_history_invoice_id", "resource_type": "test", "package_name": "recurly_source", "path": "not_null_stg_recurly__invoice_history_invoice_id.sql", "original_file_path": "models/stg_recurly.yml", "unique_id": "test.recurly_source.not_null_stg_recurly__invoice_history_invoice_id.8a72a867d9", "fqn": ["recurly_source", "not_null_stg_recurly__invoice_history_invoice_id"], "alias": "not_null_stg_recurly__invoice_history_invoice_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1722889775.720438, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "stg_recurly__invoice_history", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.recurly_source.stg_recurly__invoice_history"]}, "compiled_path": "target/compiled/recurly_source/models/stg_recurly.yml/not_null_stg_recurly__invoice_history_invoice_id.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect invoice_id\nfrom \"postgres\".\"recurly_integrations_tests_recurly_source\".\"stg_recurly__invoice_history\"\nwhere invoice_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "invoice_id", "file_key_name": "models.stg_recurly__invoice_history", "attached_node": "model.recurly_source.stg_recurly__invoice_history", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "invoice_id", "model": "{{ get_where_subquery(ref('stg_recurly__invoice_history')) }}"}, "namespace": null}}, "test.recurly_source.not_null_stg_recurly__invoice_history_number.2f6fe530ab": {"database": "postgres", "schema": "recurly_integrations_tests_dbt_test__audit", "name": "not_null_stg_recurly__invoice_history_number", "resource_type": "test", "package_name": "recurly_source", "path": "not_null_stg_recurly__invoice_history_number.sql", "original_file_path": "models/stg_recurly.yml", "unique_id": "test.recurly_source.not_null_stg_recurly__invoice_history_number.2f6fe530ab", "fqn": ["recurly_source", "not_null_stg_recurly__invoice_history_number"], "alias": "not_null_stg_recurly__invoice_history_number", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1722889775.721308, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "stg_recurly__invoice_history", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.recurly_source.stg_recurly__invoice_history"]}, "compiled_path": "target/compiled/recurly_source/models/stg_recurly.yml/not_null_stg_recurly__invoice_history_number.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect number\nfrom \"postgres\".\"recurly_integrations_tests_recurly_source\".\"stg_recurly__invoice_history\"\nwhere number is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "number", "file_key_name": "models.stg_recurly__invoice_history", "attached_node": "model.recurly_source.stg_recurly__invoice_history", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "number", "model": "{{ get_where_subquery(ref('stg_recurly__invoice_history')) }}"}, "namespace": null}}, "test.recurly_source.dbt_utils_unique_combination_of_columns_stg_recurly__invoice_history_invoice_id__updated_at.7ab44a4bd3": {"database": "postgres", "schema": "recurly_integrations_tests_dbt_test__audit", "name": "dbt_utils_unique_combination_of_columns_stg_recurly__invoice_history_invoice_id__updated_at", "resource_type": "test", "package_name": "recurly_source", "path": "dbt_utils_unique_combination_o_f51e9997519a21a9c8c3c2a45a9efa1c.sql", "original_file_path": "models/stg_recurly.yml", "unique_id": "test.recurly_source.dbt_utils_unique_combination_of_columns_stg_recurly__invoice_history_invoice_id__updated_at.7ab44a4bd3", "fqn": ["recurly_source", "dbt_utils_unique_combination_of_columns_stg_recurly__invoice_history_invoice_id__updated_at"], "alias": "dbt_utils_unique_combination_o_f51e9997519a21a9c8c3c2a45a9efa1c", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_utils_unique_combination_o_f51e9997519a21a9c8c3c2a45a9efa1c", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "dbt_utils_unique_combination_o_f51e9997519a21a9c8c3c2a45a9efa1c"}, "created_at": 1722889775.722187, "relation_name": null, "raw_code": "{{ dbt_utils.test_unique_combination_of_columns(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_unique_combination_o_f51e9997519a21a9c8c3c2a45a9efa1c\") }}", "language": "sql", "refs": [{"name": "stg_recurly__invoice_history", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.test_unique_combination_of_columns", "macro.dbt.get_where_subquery"], "nodes": ["model.recurly_source.stg_recurly__invoice_history"]}, "compiled_path": "target/compiled/recurly_source/models/stg_recurly.yml/dbt_utils_unique_combination_o_f51e9997519a21a9c8c3c2a45a9efa1c.sql", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        invoice_id, updated_at\n    from \"postgres\".\"recurly_integrations_tests_recurly_source\".\"stg_recurly__invoice_history\"\n    group by invoice_id, updated_at\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": null, "file_key_name": "models.stg_recurly__invoice_history", "attached_node": "model.recurly_source.stg_recurly__invoice_history", "test_metadata": {"name": "unique_combination_of_columns", "kwargs": {"combination_of_columns": ["invoice_id", "updated_at"], "model": "{{ get_where_subquery(ref('stg_recurly__invoice_history')) }}"}, "namespace": "dbt_utils"}}, "test.recurly_source.not_null_stg_recurly__invoice_subscription_history_invoice_id.0cf4105c8e": {"database": "postgres", "schema": "recurly_integrations_tests_dbt_test__audit", "name": "not_null_stg_recurly__invoice_subscription_history_invoice_id", "resource_type": "test", "package_name": "recurly_source", "path": "not_null_stg_recurly__invoice_subscription_history_invoice_id.sql", "original_file_path": "models/stg_recurly.yml", "unique_id": "test.recurly_source.not_null_stg_recurly__invoice_subscription_history_invoice_id.0cf4105c8e", "fqn": ["recurly_source", "not_null_stg_recurly__invoice_subscription_history_invoice_id"], "alias": "not_null_stg_recurly__invoice_subscription_history_invoice_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1722889775.725058, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "stg_recurly__invoice_subscription_history", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.recurly_source.stg_recurly__invoice_subscription_history"]}, "compiled_path": "target/compiled/recurly_source/models/stg_recurly.yml/not_null_stg_recurly__invoice_subscription_history_invoice_id.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect invoice_id\nfrom \"postgres\".\"recurly_integrations_tests_recurly_source\".\"stg_recurly__invoice_subscription_history\"\nwhere invoice_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "invoice_id", "file_key_name": "models.stg_recurly__invoice_subscription_history", "attached_node": "model.recurly_source.stg_recurly__invoice_subscription_history", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "invoice_id", "model": "{{ get_where_subquery(ref('stg_recurly__invoice_subscription_history')) }}"}, "namespace": null}}, "test.recurly_source.not_null_stg_recurly__invoice_subscription_history_subscription_id.ded699c67d": {"database": "postgres", "schema": "recurly_integrations_tests_dbt_test__audit", "name": "not_null_stg_recurly__invoice_subscription_history_subscription_id", "resource_type": "test", "package_name": "recurly_source", "path": "not_null_stg_recurly__invoice__008a1badd66c13c3bdbccecb455ce7f9.sql", "original_file_path": "models/stg_recurly.yml", "unique_id": "test.recurly_source.not_null_stg_recurly__invoice_subscription_history_subscription_id.ded699c67d", "fqn": ["recurly_source", "not_null_stg_recurly__invoice_subscription_history_subscription_id"], "alias": "not_null_stg_recurly__invoice__008a1badd66c13c3bdbccecb455ce7f9", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "not_null_stg_recurly__invoice__008a1badd66c13c3bdbccecb455ce7f9", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "not_null_stg_recurly__invoice__008a1badd66c13c3bdbccecb455ce7f9"}, "created_at": 1722889775.726272, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}{{ config(alias=\"not_null_stg_recurly__invoice__008a1badd66c13c3bdbccecb455ce7f9\") }}", "language": "sql", "refs": [{"name": "stg_recurly__invoice_subscription_history", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.recurly_source.stg_recurly__invoice_subscription_history"]}, "compiled_path": "target/compiled/recurly_source/models/stg_recurly.yml/not_null_stg_recurly__invoice__008a1badd66c13c3bdbccecb455ce7f9.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect subscription_id\nfrom \"postgres\".\"recurly_integrations_tests_recurly_source\".\"stg_recurly__invoice_subscription_history\"\nwhere subscription_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "subscription_id", "file_key_name": "models.stg_recurly__invoice_subscription_history", "attached_node": "model.recurly_source.stg_recurly__invoice_subscription_history", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "subscription_id", "model": "{{ get_where_subquery(ref('stg_recurly__invoice_subscription_history')) }}"}, "namespace": null}}, "test.recurly_source.dbt_utils_unique_combination_of_columns_stg_recurly__invoice_subscription_history_invoice_id__invoice_updated_at__subscription_id.f57f4495ea": {"database": "postgres", "schema": "recurly_integrations_tests_dbt_test__audit", "name": "dbt_utils_unique_combination_of_columns_stg_recurly__invoice_subscription_history_invoice_id__invoice_updated_at__subscription_id", "resource_type": "test", "package_name": "recurly_source", "path": "dbt_utils_unique_combination_o_8e53ac47ce8fbf73e6f780543bfa6109.sql", "original_file_path": "models/stg_recurly.yml", "unique_id": "test.recurly_source.dbt_utils_unique_combination_of_columns_stg_recurly__invoice_subscription_history_invoice_id__invoice_updated_at__subscription_id.f57f4495ea", "fqn": ["recurly_source", "dbt_utils_unique_combination_of_columns_stg_recurly__invoice_subscription_history_invoice_id__invoice_updated_at__subscription_id"], "alias": "dbt_utils_unique_combination_o_8e53ac47ce8fbf73e6f780543bfa6109", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_utils_unique_combination_o_8e53ac47ce8fbf73e6f780543bfa6109", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "dbt_utils_unique_combination_o_8e53ac47ce8fbf73e6f780543bfa6109"}, "created_at": 1722889775.7272608, "relation_name": null, "raw_code": "{{ dbt_utils.test_unique_combination_of_columns(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_unique_combination_o_8e53ac47ce8fbf73e6f780543bfa6109\") }}", "language": "sql", "refs": [{"name": "stg_recurly__invoice_subscription_history", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.test_unique_combination_of_columns", "macro.dbt.get_where_subquery"], "nodes": ["model.recurly_source.stg_recurly__invoice_subscription_history"]}, "compiled_path": "target/compiled/recurly_source/models/stg_recurly.yml/dbt_utils_unique_combination_o_8e53ac47ce8fbf73e6f780543bfa6109.sql", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        invoice_id, invoice_updated_at, subscription_id\n    from \"postgres\".\"recurly_integrations_tests_recurly_source\".\"stg_recurly__invoice_subscription_history\"\n    group by invoice_id, invoice_updated_at, subscription_id\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": null, "file_key_name": "models.stg_recurly__invoice_subscription_history", "attached_node": "model.recurly_source.stg_recurly__invoice_subscription_history", "test_metadata": {"name": "unique_combination_of_columns", "kwargs": {"combination_of_columns": ["invoice_id", "invoice_updated_at", "subscription_id"], "model": "{{ get_where_subquery(ref('stg_recurly__invoice_subscription_history')) }}"}, "namespace": "dbt_utils"}}, "test.recurly_source.not_null_stg_recurly__line_item_history_line_item_id.a1e1c656cf": {"database": "postgres", "schema": "recurly_integrations_tests_dbt_test__audit", "name": "not_null_stg_recurly__line_item_history_line_item_id", "resource_type": "test", "package_name": "recurly_source", "path": "not_null_stg_recurly__line_item_history_line_item_id.sql", "original_file_path": "models/stg_recurly.yml", "unique_id": "test.recurly_source.not_null_stg_recurly__line_item_history_line_item_id.a1e1c656cf", "fqn": ["recurly_source", "not_null_stg_recurly__line_item_history_line_item_id"], "alias": "not_null_stg_recurly__line_item_history_line_item_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1722889775.7299032, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "stg_recurly__line_item_history", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.recurly_source.stg_recurly__line_item_history"]}, "compiled_path": "target/compiled/recurly_source/models/stg_recurly.yml/not_null_stg_recurly__line_item_history_line_item_id.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect line_item_id\nfrom \"postgres\".\"recurly_integrations_tests_recurly_source\".\"stg_recurly__line_item_history\"\nwhere line_item_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "line_item_id", "file_key_name": "models.stg_recurly__line_item_history", "attached_node": "model.recurly_source.stg_recurly__line_item_history", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "line_item_id", "model": "{{ get_where_subquery(ref('stg_recurly__line_item_history')) }}"}, "namespace": null}}, "test.recurly_source.dbt_utils_unique_combination_of_columns_stg_recurly__line_item_history_line_item_id__updated_at.d4b4d9b36d": {"database": "postgres", "schema": "recurly_integrations_tests_dbt_test__audit", "name": "dbt_utils_unique_combination_of_columns_stg_recurly__line_item_history_line_item_id__updated_at", "resource_type": "test", "package_name": "recurly_source", "path": "dbt_utils_unique_combination_o_a17d6b179464daf54a166e1ee7c528e7.sql", "original_file_path": "models/stg_recurly.yml", "unique_id": "test.recurly_source.dbt_utils_unique_combination_of_columns_stg_recurly__line_item_history_line_item_id__updated_at.d4b4d9b36d", "fqn": ["recurly_source", "dbt_utils_unique_combination_of_columns_stg_recurly__line_item_history_line_item_id__updated_at"], "alias": "dbt_utils_unique_combination_o_a17d6b179464daf54a166e1ee7c528e7", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_utils_unique_combination_o_a17d6b179464daf54a166e1ee7c528e7", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "dbt_utils_unique_combination_o_a17d6b179464daf54a166e1ee7c528e7"}, "created_at": 1722889775.73086, "relation_name": null, "raw_code": "{{ dbt_utils.test_unique_combination_of_columns(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_unique_combination_o_a17d6b179464daf54a166e1ee7c528e7\") }}", "language": "sql", "refs": [{"name": "stg_recurly__line_item_history", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.test_unique_combination_of_columns", "macro.dbt.get_where_subquery"], "nodes": ["model.recurly_source.stg_recurly__line_item_history"]}, "compiled_path": "target/compiled/recurly_source/models/stg_recurly.yml/dbt_utils_unique_combination_o_a17d6b179464daf54a166e1ee7c528e7.sql", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        line_item_id, updated_at\n    from \"postgres\".\"recurly_integrations_tests_recurly_source\".\"stg_recurly__line_item_history\"\n    group by line_item_id, updated_at\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": null, "file_key_name": "models.stg_recurly__line_item_history", "attached_node": "model.recurly_source.stg_recurly__line_item_history", "test_metadata": {"name": "unique_combination_of_columns", "kwargs": {"combination_of_columns": ["line_item_id", "updated_at"], "model": "{{ get_where_subquery(ref('stg_recurly__line_item_history')) }}"}, "namespace": "dbt_utils"}}, "test.recurly_source.not_null_stg_recurly__plan_currency_history_plan_id.9fc7106759": {"database": "postgres", "schema": "recurly_integrations_tests_dbt_test__audit", "name": "not_null_stg_recurly__plan_currency_history_plan_id", "resource_type": "test", "package_name": "recurly_source", "path": "not_null_stg_recurly__plan_currency_history_plan_id.sql", "original_file_path": "models/stg_recurly.yml", "unique_id": "test.recurly_source.not_null_stg_recurly__plan_currency_history_plan_id.9fc7106759", "fqn": ["recurly_source", "not_null_stg_recurly__plan_currency_history_plan_id"], "alias": "not_null_stg_recurly__plan_currency_history_plan_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1722889775.733234, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "stg_recurly__plan_currency_history", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.recurly_source.stg_recurly__plan_currency_history"]}, "compiled_path": "target/compiled/recurly_source/models/stg_recurly.yml/not_null_stg_recurly__plan_currency_history_plan_id.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect plan_id\nfrom \"postgres\".\"recurly_integrations_tests_recurly_source\".\"stg_recurly__plan_currency_history\"\nwhere plan_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "plan_id", "file_key_name": "models.stg_recurly__plan_currency_history", "attached_node": "model.recurly_source.stg_recurly__plan_currency_history", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "plan_id", "model": "{{ get_where_subquery(ref('stg_recurly__plan_currency_history')) }}"}, "namespace": null}}, "test.recurly_source.dbt_utils_unique_combination_of_columns_stg_recurly__plan_currency_history_plan_id__plan_updated_at__currency.e0bd5adf3b": {"database": "postgres", "schema": "recurly_integrations_tests_dbt_test__audit", "name": "dbt_utils_unique_combination_of_columns_stg_recurly__plan_currency_history_plan_id__plan_updated_at__currency", "resource_type": "test", "package_name": "recurly_source", "path": "dbt_utils_unique_combination_o_3e39840539c0450045d31332771d953d.sql", "original_file_path": "models/stg_recurly.yml", "unique_id": "test.recurly_source.dbt_utils_unique_combination_of_columns_stg_recurly__plan_currency_history_plan_id__plan_updated_at__currency.e0bd5adf3b", "fqn": ["recurly_source", "dbt_utils_unique_combination_of_columns_stg_recurly__plan_currency_history_plan_id__plan_updated_at__currency"], "alias": "dbt_utils_unique_combination_o_3e39840539c0450045d31332771d953d", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_utils_unique_combination_o_3e39840539c0450045d31332771d953d", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "dbt_utils_unique_combination_o_3e39840539c0450045d31332771d953d"}, "created_at": 1722889775.734185, "relation_name": null, "raw_code": "{{ dbt_utils.test_unique_combination_of_columns(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_unique_combination_o_3e39840539c0450045d31332771d953d\") }}", "language": "sql", "refs": [{"name": "stg_recurly__plan_currency_history", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.test_unique_combination_of_columns", "macro.dbt.get_where_subquery"], "nodes": ["model.recurly_source.stg_recurly__plan_currency_history"]}, "compiled_path": "target/compiled/recurly_source/models/stg_recurly.yml/dbt_utils_unique_combination_o_3e39840539c0450045d31332771d953d.sql", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        plan_id, plan_updated_at, currency\n    from \"postgres\".\"recurly_integrations_tests_recurly_source\".\"stg_recurly__plan_currency_history\"\n    group by plan_id, plan_updated_at, currency\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": null, "file_key_name": "models.stg_recurly__plan_currency_history", "attached_node": "model.recurly_source.stg_recurly__plan_currency_history", "test_metadata": {"name": "unique_combination_of_columns", "kwargs": {"combination_of_columns": ["plan_id", "plan_updated_at", "currency"], "model": "{{ get_where_subquery(ref('stg_recurly__plan_currency_history')) }}"}, "namespace": "dbt_utils"}}, "test.recurly_source.not_null_stg_recurly__plan_history_plan_id.78effe7ba4": {"database": "postgres", "schema": "recurly_integrations_tests_dbt_test__audit", "name": "not_null_stg_recurly__plan_history_plan_id", "resource_type": "test", "package_name": "recurly_source", "path": "not_null_stg_recurly__plan_history_plan_id.sql", "original_file_path": "models/stg_recurly.yml", "unique_id": "test.recurly_source.not_null_stg_recurly__plan_history_plan_id.78effe7ba4", "fqn": ["recurly_source", "not_null_stg_recurly__plan_history_plan_id"], "alias": "not_null_stg_recurly__plan_history_plan_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1722889775.736504, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "stg_recurly__plan_history", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.recurly_source.stg_recurly__plan_history"]}, "compiled_path": "target/compiled/recurly_source/models/stg_recurly.yml/not_null_stg_recurly__plan_history_plan_id.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect plan_id\nfrom \"postgres\".\"recurly_integrations_tests_recurly_source\".\"stg_recurly__plan_history\"\nwhere plan_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "plan_id", "file_key_name": "models.stg_recurly__plan_history", "attached_node": "model.recurly_source.stg_recurly__plan_history", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "plan_id", "model": "{{ get_where_subquery(ref('stg_recurly__plan_history')) }}"}, "namespace": null}}, "test.recurly_source.dbt_utils_unique_combination_of_columns_stg_recurly__plan_history_plan_id__updated_at.266aec2c6a": {"database": "postgres", "schema": "recurly_integrations_tests_dbt_test__audit", "name": "dbt_utils_unique_combination_of_columns_stg_recurly__plan_history_plan_id__updated_at", "resource_type": "test", "package_name": "recurly_source", "path": "dbt_utils_unique_combination_o_30b22c222b07ff07bdd48d061ef85319.sql", "original_file_path": "models/stg_recurly.yml", "unique_id": "test.recurly_source.dbt_utils_unique_combination_of_columns_stg_recurly__plan_history_plan_id__updated_at.266aec2c6a", "fqn": ["recurly_source", "dbt_utils_unique_combination_of_columns_stg_recurly__plan_history_plan_id__updated_at"], "alias": "dbt_utils_unique_combination_o_30b22c222b07ff07bdd48d061ef85319", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_utils_unique_combination_o_30b22c222b07ff07bdd48d061ef85319", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "dbt_utils_unique_combination_o_30b22c222b07ff07bdd48d061ef85319"}, "created_at": 1722889775.737442, "relation_name": null, "raw_code": "{{ dbt_utils.test_unique_combination_of_columns(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_unique_combination_o_30b22c222b07ff07bdd48d061ef85319\") }}", "language": "sql", "refs": [{"name": "stg_recurly__plan_history", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.test_unique_combination_of_columns", "macro.dbt.get_where_subquery"], "nodes": ["model.recurly_source.stg_recurly__plan_history"]}, "compiled_path": "target/compiled/recurly_source/models/stg_recurly.yml/dbt_utils_unique_combination_o_30b22c222b07ff07bdd48d061ef85319.sql", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        plan_id, updated_at\n    from \"postgres\".\"recurly_integrations_tests_recurly_source\".\"stg_recurly__plan_history\"\n    group by plan_id, updated_at\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": null, "file_key_name": "models.stg_recurly__plan_history", "attached_node": "model.recurly_source.stg_recurly__plan_history", "test_metadata": {"name": "unique_combination_of_columns", "kwargs": {"combination_of_columns": ["plan_id", "updated_at"], "model": "{{ get_where_subquery(ref('stg_recurly__plan_history')) }}"}, "namespace": "dbt_utils"}}, "test.recurly_source.not_null_stg_recurly__subscription_add_on_history_subscription_add_on_id.17162cbb6e": {"database": "postgres", "schema": "recurly_integrations_tests_dbt_test__audit", "name": "not_null_stg_recurly__subscription_add_on_history_subscription_add_on_id", "resource_type": "test", "package_name": "recurly_source", "path": "not_null_stg_recurly__subscrip_c7c8193f3a8059a9e0bb9aa352ca6177.sql", "original_file_path": "models/stg_recurly.yml", "unique_id": "test.recurly_source.not_null_stg_recurly__subscription_add_on_history_subscription_add_on_id.17162cbb6e", "fqn": ["recurly_source", "not_null_stg_recurly__subscription_add_on_history_subscription_add_on_id"], "alias": "not_null_stg_recurly__subscrip_c7c8193f3a8059a9e0bb9aa352ca6177", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "not_null_stg_recurly__subscrip_c7c8193f3a8059a9e0bb9aa352ca6177", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "not_null_stg_recurly__subscrip_c7c8193f3a8059a9e0bb9aa352ca6177"}, "created_at": 1722889775.739713, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}{{ config(alias=\"not_null_stg_recurly__subscrip_c7c8193f3a8059a9e0bb9aa352ca6177\") }}", "language": "sql", "refs": [{"name": "stg_recurly__subscription_add_on_history", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.recurly_source.stg_recurly__subscription_add_on_history"]}, "compiled_path": "target/compiled/recurly_source/models/stg_recurly.yml/not_null_stg_recurly__subscrip_c7c8193f3a8059a9e0bb9aa352ca6177.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect subscription_add_on_id\nfrom \"postgres\".\"recurly_integrations_tests_recurly_source\".\"stg_recurly__subscription_add_on_history\"\nwhere subscription_add_on_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "subscription_add_on_id", "file_key_name": "models.stg_recurly__subscription_add_on_history", "attached_node": "model.recurly_source.stg_recurly__subscription_add_on_history", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "subscription_add_on_id", "model": "{{ get_where_subquery(ref('stg_recurly__subscription_add_on_history')) }}"}, "namespace": null}}, "test.recurly_source.dbt_utils_unique_combination_of_columns_stg_recurly__subscription_add_on_history_subscription_add_on_id__updated_at.a589f1354f": {"database": "postgres", "schema": "recurly_integrations_tests_dbt_test__audit", "name": "dbt_utils_unique_combination_of_columns_stg_recurly__subscription_add_on_history_subscription_add_on_id__updated_at", "resource_type": "test", "package_name": "recurly_source", "path": "dbt_utils_unique_combination_o_17aa1a321264083b5fe4fe95b6f2be79.sql", "original_file_path": "models/stg_recurly.yml", "unique_id": "test.recurly_source.dbt_utils_unique_combination_of_columns_stg_recurly__subscription_add_on_history_subscription_add_on_id__updated_at.a589f1354f", "fqn": ["recurly_source", "dbt_utils_unique_combination_of_columns_stg_recurly__subscription_add_on_history_subscription_add_on_id__updated_at"], "alias": "dbt_utils_unique_combination_o_17aa1a321264083b5fe4fe95b6f2be79", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_utils_unique_combination_o_17aa1a321264083b5fe4fe95b6f2be79", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "dbt_utils_unique_combination_o_17aa1a321264083b5fe4fe95b6f2be79"}, "created_at": 1722889775.740606, "relation_name": null, "raw_code": "{{ dbt_utils.test_unique_combination_of_columns(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_unique_combination_o_17aa1a321264083b5fe4fe95b6f2be79\") }}", "language": "sql", "refs": [{"name": "stg_recurly__subscription_add_on_history", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.test_unique_combination_of_columns", "macro.dbt.get_where_subquery"], "nodes": ["model.recurly_source.stg_recurly__subscription_add_on_history"]}, "compiled_path": "target/compiled/recurly_source/models/stg_recurly.yml/dbt_utils_unique_combination_o_17aa1a321264083b5fe4fe95b6f2be79.sql", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        subscription_add_on_id, updated_at\n    from \"postgres\".\"recurly_integrations_tests_recurly_source\".\"stg_recurly__subscription_add_on_history\"\n    group by subscription_add_on_id, updated_at\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": null, "file_key_name": "models.stg_recurly__subscription_add_on_history", "attached_node": "model.recurly_source.stg_recurly__subscription_add_on_history", "test_metadata": {"name": "unique_combination_of_columns", "kwargs": {"combination_of_columns": ["subscription_add_on_id", "updated_at"], "model": "{{ get_where_subquery(ref('stg_recurly__subscription_add_on_history')) }}"}, "namespace": "dbt_utils"}}, "test.recurly_source.not_null_stg_recurly__subscription_change_history_subscription_change_id.d2bd0b27a6": {"database": "postgres", "schema": "recurly_integrations_tests_dbt_test__audit", "name": "not_null_stg_recurly__subscription_change_history_subscription_change_id", "resource_type": "test", "package_name": "recurly_source", "path": "not_null_stg_recurly__subscrip_766ebd4ba6c711219196b41ef2827070.sql", "original_file_path": "models/stg_recurly.yml", "unique_id": "test.recurly_source.not_null_stg_recurly__subscription_change_history_subscription_change_id.d2bd0b27a6", "fqn": ["recurly_source", "not_null_stg_recurly__subscription_change_history_subscription_change_id"], "alias": "not_null_stg_recurly__subscrip_766ebd4ba6c711219196b41ef2827070", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "not_null_stg_recurly__subscrip_766ebd4ba6c711219196b41ef2827070", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "not_null_stg_recurly__subscrip_766ebd4ba6c711219196b41ef2827070"}, "created_at": 1722889775.7430441, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}{{ config(alias=\"not_null_stg_recurly__subscrip_766ebd4ba6c711219196b41ef2827070\") }}", "language": "sql", "refs": [{"name": "stg_recurly__subscription_change_history", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.recurly_source.stg_recurly__subscription_change_history"]}, "compiled_path": "target/compiled/recurly_source/models/stg_recurly.yml/not_null_stg_recurly__subscrip_766ebd4ba6c711219196b41ef2827070.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect subscription_change_id\nfrom \"postgres\".\"recurly_integrations_tests_recurly_source\".\"stg_recurly__subscription_change_history\"\nwhere subscription_change_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "subscription_change_id", "file_key_name": "models.stg_recurly__subscription_change_history", "attached_node": "model.recurly_source.stg_recurly__subscription_change_history", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "subscription_change_id", "model": "{{ get_where_subquery(ref('stg_recurly__subscription_change_history')) }}"}, "namespace": null}}, "test.recurly_source.dbt_utils_unique_combination_of_columns_stg_recurly__subscription_change_history_subscription_change_id__updated_at.bb2112fd18": {"database": "postgres", "schema": "recurly_integrations_tests_dbt_test__audit", "name": "dbt_utils_unique_combination_of_columns_stg_recurly__subscription_change_history_subscription_change_id__updated_at", "resource_type": "test", "package_name": "recurly_source", "path": "dbt_utils_unique_combination_o_06b4540394a3013a335ecb4275265567.sql", "original_file_path": "models/stg_recurly.yml", "unique_id": "test.recurly_source.dbt_utils_unique_combination_of_columns_stg_recurly__subscription_change_history_subscription_change_id__updated_at.bb2112fd18", "fqn": ["recurly_source", "dbt_utils_unique_combination_of_columns_stg_recurly__subscription_change_history_subscription_change_id__updated_at"], "alias": "dbt_utils_unique_combination_o_06b4540394a3013a335ecb4275265567", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_utils_unique_combination_o_06b4540394a3013a335ecb4275265567", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "dbt_utils_unique_combination_o_06b4540394a3013a335ecb4275265567"}, "created_at": 1722889775.744032, "relation_name": null, "raw_code": "{{ dbt_utils.test_unique_combination_of_columns(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_unique_combination_o_06b4540394a3013a335ecb4275265567\") }}", "language": "sql", "refs": [{"name": "stg_recurly__subscription_change_history", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.test_unique_combination_of_columns", "macro.dbt.get_where_subquery"], "nodes": ["model.recurly_source.stg_recurly__subscription_change_history"]}, "compiled_path": "target/compiled/recurly_source/models/stg_recurly.yml/dbt_utils_unique_combination_o_06b4540394a3013a335ecb4275265567.sql", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        subscription_change_id, updated_at\n    from \"postgres\".\"recurly_integrations_tests_recurly_source\".\"stg_recurly__subscription_change_history\"\n    group by subscription_change_id, updated_at\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": null, "file_key_name": "models.stg_recurly__subscription_change_history", "attached_node": "model.recurly_source.stg_recurly__subscription_change_history", "test_metadata": {"name": "unique_combination_of_columns", "kwargs": {"combination_of_columns": ["subscription_change_id", "updated_at"], "model": "{{ get_where_subquery(ref('stg_recurly__subscription_change_history')) }}"}, "namespace": "dbt_utils"}}, "test.recurly_source.not_null_stg_recurly__subscription_history_subscription_id.57c06c08bb": {"database": "postgres", "schema": "recurly_integrations_tests_dbt_test__audit", "name": "not_null_stg_recurly__subscription_history_subscription_id", "resource_type": "test", "package_name": "recurly_source", "path": "not_null_stg_recurly__subscription_history_subscription_id.sql", "original_file_path": "models/stg_recurly.yml", "unique_id": "test.recurly_source.not_null_stg_recurly__subscription_history_subscription_id.57c06c08bb", "fqn": ["recurly_source", "not_null_stg_recurly__subscription_history_subscription_id"], "alias": "not_null_stg_recurly__subscription_history_subscription_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1722889775.746539, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "stg_recurly__subscription_history", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.recurly_source.stg_recurly__subscription_history"]}, "compiled_path": "target/compiled/recurly_source/models/stg_recurly.yml/not_null_stg_recurly__subscription_history_subscription_id.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect subscription_id\nfrom \"postgres\".\"recurly_integrations_tests_recurly_source\".\"stg_recurly__subscription_history\"\nwhere subscription_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "subscription_id", "file_key_name": "models.stg_recurly__subscription_history", "attached_node": "model.recurly_source.stg_recurly__subscription_history", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "subscription_id", "model": "{{ get_where_subquery(ref('stg_recurly__subscription_history')) }}"}, "namespace": null}}, "test.recurly_source.dbt_utils_unique_combination_of_columns_stg_recurly__subscription_history_subscription_id__updated_at.bcb59ad4a4": {"database": "postgres", "schema": "recurly_integrations_tests_dbt_test__audit", "name": "dbt_utils_unique_combination_of_columns_stg_recurly__subscription_history_subscription_id__updated_at", "resource_type": "test", "package_name": "recurly_source", "path": "dbt_utils_unique_combination_o_470896ffeaba4dce66b4c5bdc8108f89.sql", "original_file_path": "models/stg_recurly.yml", "unique_id": "test.recurly_source.dbt_utils_unique_combination_of_columns_stg_recurly__subscription_history_subscription_id__updated_at.bcb59ad4a4", "fqn": ["recurly_source", "dbt_utils_unique_combination_of_columns_stg_recurly__subscription_history_subscription_id__updated_at"], "alias": "dbt_utils_unique_combination_o_470896ffeaba4dce66b4c5bdc8108f89", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_utils_unique_combination_o_470896ffeaba4dce66b4c5bdc8108f89", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "dbt_utils_unique_combination_o_470896ffeaba4dce66b4c5bdc8108f89"}, "created_at": 1722889775.7474859, "relation_name": null, "raw_code": "{{ dbt_utils.test_unique_combination_of_columns(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_unique_combination_o_470896ffeaba4dce66b4c5bdc8108f89\") }}", "language": "sql", "refs": [{"name": "stg_recurly__subscription_history", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.test_unique_combination_of_columns", "macro.dbt.get_where_subquery"], "nodes": ["model.recurly_source.stg_recurly__subscription_history"]}, "compiled_path": "target/compiled/recurly_source/models/stg_recurly.yml/dbt_utils_unique_combination_o_470896ffeaba4dce66b4c5bdc8108f89.sql", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        subscription_id, updated_at\n    from \"postgres\".\"recurly_integrations_tests_recurly_source\".\"stg_recurly__subscription_history\"\n    group by subscription_id, updated_at\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": null, "file_key_name": "models.stg_recurly__subscription_history", "attached_node": "model.recurly_source.stg_recurly__subscription_history", "test_metadata": {"name": "unique_combination_of_columns", "kwargs": {"combination_of_columns": ["subscription_id", "updated_at"], "model": "{{ get_where_subquery(ref('stg_recurly__subscription_history')) }}"}, "namespace": "dbt_utils"}}, "test.recurly_source.not_null_stg_recurly__transaction_subscription_transaction_id.99c6baecfe": {"database": "postgres", "schema": "recurly_integrations_tests_dbt_test__audit", "name": "not_null_stg_recurly__transaction_subscription_transaction_id", "resource_type": "test", "package_name": "recurly_source", "path": "not_null_stg_recurly__transaction_subscription_transaction_id.sql", "original_file_path": "models/stg_recurly.yml", "unique_id": "test.recurly_source.not_null_stg_recurly__transaction_subscription_transaction_id.99c6baecfe", "fqn": ["recurly_source", "not_null_stg_recurly__transaction_subscription_transaction_id"], "alias": "not_null_stg_recurly__transaction_subscription_transaction_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1722889775.74989, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "stg_recurly__transaction_subscription", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.recurly_source.stg_recurly__transaction_subscription"]}, "compiled_path": "target/compiled/recurly_source/models/stg_recurly.yml/not_null_stg_recurly__transaction_subscription_transaction_id.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect transaction_id\nfrom \"postgres\".\"recurly_integrations_tests_recurly_source\".\"stg_recurly__transaction_subscription\"\nwhere transaction_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "transaction_id", "file_key_name": "models.stg_recurly__transaction_subscription", "attached_node": "model.recurly_source.stg_recurly__transaction_subscription", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "transaction_id", "model": "{{ get_where_subquery(ref('stg_recurly__transaction_subscription')) }}"}, "namespace": null}}, "test.recurly_source.not_null_stg_recurly__transaction_subscription_subscription_id.0f7cd7e702": {"database": "postgres", "schema": "recurly_integrations_tests_dbt_test__audit", "name": "not_null_stg_recurly__transaction_subscription_subscription_id", "resource_type": "test", "package_name": "recurly_source", "path": "not_null_stg_recurly__transaction_subscription_subscription_id.sql", "original_file_path": "models/stg_recurly.yml", "unique_id": "test.recurly_source.not_null_stg_recurly__transaction_subscription_subscription_id.0f7cd7e702", "fqn": ["recurly_source", "not_null_stg_recurly__transaction_subscription_subscription_id"], "alias": "not_null_stg_recurly__transaction_subscription_subscription_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1722889775.750834, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "stg_recurly__transaction_subscription", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.recurly_source.stg_recurly__transaction_subscription"]}, "compiled_path": "target/compiled/recurly_source/models/stg_recurly.yml/not_null_stg_recurly__transaction_subscription_subscription_id.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect subscription_id\nfrom \"postgres\".\"recurly_integrations_tests_recurly_source\".\"stg_recurly__transaction_subscription\"\nwhere subscription_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "subscription_id", "file_key_name": "models.stg_recurly__transaction_subscription", "attached_node": "model.recurly_source.stg_recurly__transaction_subscription", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "subscription_id", "model": "{{ get_where_subquery(ref('stg_recurly__transaction_subscription')) }}"}, "namespace": null}}, "test.recurly_source.dbt_utils_unique_combination_of_columns_stg_recurly__transaction_subscription_transaction_id__subscription_id.f396a8e771": {"database": "postgres", "schema": "recurly_integrations_tests_dbt_test__audit", "name": "dbt_utils_unique_combination_of_columns_stg_recurly__transaction_subscription_transaction_id__subscription_id", "resource_type": "test", "package_name": "recurly_source", "path": "dbt_utils_unique_combination_o_3f4e443ded88bc65feb20db833c0105f.sql", "original_file_path": "models/stg_recurly.yml", "unique_id": "test.recurly_source.dbt_utils_unique_combination_of_columns_stg_recurly__transaction_subscription_transaction_id__subscription_id.f396a8e771", "fqn": ["recurly_source", "dbt_utils_unique_combination_of_columns_stg_recurly__transaction_subscription_transaction_id__subscription_id"], "alias": "dbt_utils_unique_combination_o_3f4e443ded88bc65feb20db833c0105f", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_utils_unique_combination_o_3f4e443ded88bc65feb20db833c0105f", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "dbt_utils_unique_combination_o_3f4e443ded88bc65feb20db833c0105f"}, "created_at": 1722889775.751779, "relation_name": null, "raw_code": "{{ dbt_utils.test_unique_combination_of_columns(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_unique_combination_o_3f4e443ded88bc65feb20db833c0105f\") }}", "language": "sql", "refs": [{"name": "stg_recurly__transaction_subscription", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.test_unique_combination_of_columns", "macro.dbt.get_where_subquery"], "nodes": ["model.recurly_source.stg_recurly__transaction_subscription"]}, "compiled_path": "target/compiled/recurly_source/models/stg_recurly.yml/dbt_utils_unique_combination_o_3f4e443ded88bc65feb20db833c0105f.sql", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        transaction_id, subscription_id\n    from \"postgres\".\"recurly_integrations_tests_recurly_source\".\"stg_recurly__transaction_subscription\"\n    group by transaction_id, subscription_id\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": null, "file_key_name": "models.stg_recurly__transaction_subscription", "attached_node": "model.recurly_source.stg_recurly__transaction_subscription", "test_metadata": {"name": "unique_combination_of_columns", "kwargs": {"combination_of_columns": ["transaction_id", "subscription_id"], "model": "{{ get_where_subquery(ref('stg_recurly__transaction_subscription')) }}"}, "namespace": "dbt_utils"}}, "test.recurly_source.not_null_stg_recurly__transaction_transaction_id.5f44527c3c": {"database": "postgres", "schema": "recurly_integrations_tests_dbt_test__audit", "name": "not_null_stg_recurly__transaction_transaction_id", "resource_type": "test", "package_name": "recurly_source", "path": "not_null_stg_recurly__transaction_transaction_id.sql", "original_file_path": "models/stg_recurly.yml", "unique_id": "test.recurly_source.not_null_stg_recurly__transaction_transaction_id.5f44527c3c", "fqn": ["recurly_source", "not_null_stg_recurly__transaction_transaction_id"], "alias": "not_null_stg_recurly__transaction_transaction_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1722889775.754312, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "stg_recurly__transaction", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.recurly_source.stg_recurly__transaction"]}, "compiled_path": "target/compiled/recurly_source/models/stg_recurly.yml/not_null_stg_recurly__transaction_transaction_id.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect transaction_id\nfrom \"postgres\".\"recurly_integrations_tests_recurly_source\".\"stg_recurly__transaction\"\nwhere transaction_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "transaction_id", "file_key_name": "models.stg_recurly__transaction", "attached_node": "model.recurly_source.stg_recurly__transaction", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "transaction_id", "model": "{{ get_where_subquery(ref('stg_recurly__transaction')) }}"}, "namespace": null}}, "test.recurly_source.dbt_utils_unique_combination_of_columns_stg_recurly__transaction_transaction_id__created_at.769d67c8b8": {"database": "postgres", "schema": "recurly_integrations_tests_dbt_test__audit", "name": "dbt_utils_unique_combination_of_columns_stg_recurly__transaction_transaction_id__created_at", "resource_type": "test", "package_name": "recurly_source", "path": "dbt_utils_unique_combination_o_3276befe98aaac45a663aafb394abb5a.sql", "original_file_path": "models/stg_recurly.yml", "unique_id": "test.recurly_source.dbt_utils_unique_combination_of_columns_stg_recurly__transaction_transaction_id__created_at.769d67c8b8", "fqn": ["recurly_source", "dbt_utils_unique_combination_of_columns_stg_recurly__transaction_transaction_id__created_at"], "alias": "dbt_utils_unique_combination_o_3276befe98aaac45a663aafb394abb5a", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_utils_unique_combination_o_3276befe98aaac45a663aafb394abb5a", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "dbt_utils_unique_combination_o_3276befe98aaac45a663aafb394abb5a"}, "created_at": 1722889775.755295, "relation_name": null, "raw_code": "{{ dbt_utils.test_unique_combination_of_columns(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_unique_combination_o_3276befe98aaac45a663aafb394abb5a\") }}", "language": "sql", "refs": [{"name": "stg_recurly__transaction", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.test_unique_combination_of_columns", "macro.dbt.get_where_subquery"], "nodes": ["model.recurly_source.stg_recurly__transaction"]}, "compiled_path": "target/compiled/recurly_source/models/stg_recurly.yml/dbt_utils_unique_combination_o_3276befe98aaac45a663aafb394abb5a.sql", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        transaction_id, created_at\n    from \"postgres\".\"recurly_integrations_tests_recurly_source\".\"stg_recurly__transaction\"\n    group by transaction_id, created_at\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": null, "file_key_name": "models.stg_recurly__transaction", "attached_node": "model.recurly_source.stg_recurly__transaction", "test_metadata": {"name": "unique_combination_of_columns", "kwargs": {"combination_of_columns": ["transaction_id", "created_at"], "model": "{{ get_where_subquery(ref('stg_recurly__transaction')) }}"}, "namespace": "dbt_utils"}}, "test.recurly.unique_recurly__account_daily_overview_account_daily_id.3e059c878a": {"database": "postgres", "schema": "recurly_integrations_tests_dbt_test__audit", "name": "unique_recurly__account_daily_overview_account_daily_id", "resource_type": "test", "package_name": "recurly", "path": "unique_recurly__account_daily_overview_account_daily_id.sql", "original_file_path": "models/recurly.yml", "unique_id": "test.recurly.unique_recurly__account_daily_overview_account_daily_id.3e059c878a", "fqn": ["recurly", "unique_recurly__account_daily_overview_account_daily_id"], "alias": "unique_recurly__account_daily_overview_account_daily_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1722889775.843703, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "recurly__account_daily_overview", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery"], "nodes": ["model.recurly.recurly__account_daily_overview"]}, "compiled_path": "target/compiled/recurly/models/recurly.yml/unique_recurly__account_daily_overview_account_daily_id.sql", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    account_daily_id as unique_field,\n    count(*) as n_records\n\nfrom \"postgres\".\"recurly_integrations_tests_recurly\".\"recurly__account_daily_overview\"\nwhere account_daily_id is not null\ngroup by account_daily_id\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "account_daily_id", "file_key_name": "models.recurly__account_daily_overview", "attached_node": "model.recurly.recurly__account_daily_overview", "test_metadata": {"name": "unique", "kwargs": {"column_name": "account_daily_id", "model": "{{ get_where_subquery(ref('recurly__account_daily_overview')) }}"}, "namespace": null}}, "test.recurly.not_null_recurly__account_daily_overview_account_daily_id.560ba5d6ac": {"database": "postgres", "schema": "recurly_integrations_tests_dbt_test__audit", "name": "not_null_recurly__account_daily_overview_account_daily_id", "resource_type": "test", "package_name": "recurly", "path": "not_null_recurly__account_daily_overview_account_daily_id.sql", "original_file_path": "models/recurly.yml", "unique_id": "test.recurly.not_null_recurly__account_daily_overview_account_daily_id.560ba5d6ac", "fqn": ["recurly", "not_null_recurly__account_daily_overview_account_daily_id"], "alias": "not_null_recurly__account_daily_overview_account_daily_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1722889775.844749, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "recurly__account_daily_overview", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.recurly.recurly__account_daily_overview"]}, "compiled_path": "target/compiled/recurly/models/recurly.yml/not_null_recurly__account_daily_overview_account_daily_id.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect account_daily_id\nfrom \"postgres\".\"recurly_integrations_tests_recurly\".\"recurly__account_daily_overview\"\nwhere account_daily_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "account_daily_id", "file_key_name": "models.recurly__account_daily_overview", "attached_node": "model.recurly.recurly__account_daily_overview", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "account_daily_id", "model": "{{ get_where_subquery(ref('recurly__account_daily_overview')) }}"}, "namespace": null}}, "test.recurly.unique_recurly__account_overview_account_id.ab3c32728d": {"database": "postgres", "schema": "recurly_integrations_tests_dbt_test__audit", "name": "unique_recurly__account_overview_account_id", "resource_type": "test", "package_name": "recurly", "path": "unique_recurly__account_overview_account_id.sql", "original_file_path": "models/recurly.yml", "unique_id": "test.recurly.unique_recurly__account_overview_account_id.ab3c32728d", "fqn": ["recurly", "unique_recurly__account_overview_account_id"], "alias": "unique_recurly__account_overview_account_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1722889775.845702, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "recurly__account_overview", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery"], "nodes": ["model.recurly.recurly__account_overview"]}, "compiled_path": "target/compiled/recurly/models/recurly.yml/unique_recurly__account_overview_account_id.sql", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    account_id as unique_field,\n    count(*) as n_records\n\nfrom \"postgres\".\"recurly_integrations_tests_recurly\".\"recurly__account_overview\"\nwhere account_id is not null\ngroup by account_id\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "account_id", "file_key_name": "models.recurly__account_overview", "attached_node": "model.recurly.recurly__account_overview", "test_metadata": {"name": "unique", "kwargs": {"column_name": "account_id", "model": "{{ get_where_subquery(ref('recurly__account_overview')) }}"}, "namespace": null}}, "test.recurly.not_null_recurly__account_overview_account_id.55789d9c23": {"database": "postgres", "schema": "recurly_integrations_tests_dbt_test__audit", "name": "not_null_recurly__account_overview_account_id", "resource_type": "test", "package_name": "recurly", "path": "not_null_recurly__account_overview_account_id.sql", "original_file_path": "models/recurly.yml", "unique_id": "test.recurly.not_null_recurly__account_overview_account_id.55789d9c23", "fqn": ["recurly", "not_null_recurly__account_overview_account_id"], "alias": "not_null_recurly__account_overview_account_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1722889775.8466592, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "recurly__account_overview", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.recurly.recurly__account_overview"]}, "compiled_path": "target/compiled/recurly/models/recurly.yml/not_null_recurly__account_overview_account_id.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect account_id\nfrom \"postgres\".\"recurly_integrations_tests_recurly\".\"recurly__account_overview\"\nwhere account_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "account_id", "file_key_name": "models.recurly__account_overview", "attached_node": "model.recurly.recurly__account_overview", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "account_id", "model": "{{ get_where_subquery(ref('recurly__account_overview')) }}"}, "namespace": null}}, "test.recurly.not_null_recurly__balance_transactions_balance_transaction_id.63b1820723": {"database": "postgres", "schema": "recurly_integrations_tests_dbt_test__audit", "name": "not_null_recurly__balance_transactions_balance_transaction_id", "resource_type": "test", "package_name": "recurly", "path": "not_null_recurly__balance_transactions_balance_transaction_id.sql", "original_file_path": "models/recurly.yml", "unique_id": "test.recurly.not_null_recurly__balance_transactions_balance_transaction_id.63b1820723", "fqn": ["recurly", "not_null_recurly__balance_transactions_balance_transaction_id"], "alias": "not_null_recurly__balance_transactions_balance_transaction_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1722889775.847533, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "recurly__balance_transactions", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.recurly.recurly__balance_transactions"]}, "compiled_path": "target/compiled/recurly/models/recurly.yml/not_null_recurly__balance_transactions_balance_transaction_id.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect balance_transaction_id\nfrom \"postgres\".\"recurly_integrations_tests_recurly\".\"recurly__balance_transactions\"\nwhere balance_transaction_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "balance_transaction_id", "file_key_name": "models.recurly__balance_transactions", "attached_node": "model.recurly.recurly__balance_transactions", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "balance_transaction_id", "model": "{{ get_where_subquery(ref('recurly__balance_transactions')) }}"}, "namespace": null}}, "test.recurly.dbt_utils_unique_combination_of_columns_recurly__balance_transactions_balance_transaction_id__transaction_id.837e2ce868": {"database": "postgres", "schema": "recurly_integrations_tests_dbt_test__audit", "name": "dbt_utils_unique_combination_of_columns_recurly__balance_transactions_balance_transaction_id__transaction_id", "resource_type": "test", "package_name": "recurly", "path": "dbt_utils_unique_combination_o_b38acc94efc774c7970124e484af3dcb.sql", "original_file_path": "models/recurly.yml", "unique_id": "test.recurly.dbt_utils_unique_combination_of_columns_recurly__balance_transactions_balance_transaction_id__transaction_id.837e2ce868", "fqn": ["recurly", "dbt_utils_unique_combination_of_columns_recurly__balance_transactions_balance_transaction_id__transaction_id"], "alias": "dbt_utils_unique_combination_o_b38acc94efc774c7970124e484af3dcb", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_utils_unique_combination_o_b38acc94efc774c7970124e484af3dcb", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "dbt_utils_unique_combination_o_b38acc94efc774c7970124e484af3dcb"}, "created_at": 1722889775.848394, "relation_name": null, "raw_code": "{{ dbt_utils.test_unique_combination_of_columns(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_unique_combination_o_b38acc94efc774c7970124e484af3dcb\") }}", "language": "sql", "refs": [{"name": "recurly__balance_transactions", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.test_unique_combination_of_columns", "macro.dbt.get_where_subquery"], "nodes": ["model.recurly.recurly__balance_transactions"]}, "compiled_path": "target/compiled/recurly/models/recurly.yml/dbt_utils_unique_combination_o_b38acc94efc774c7970124e484af3dcb.sql", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        balance_transaction_id, transaction_id\n    from \"postgres\".\"recurly_integrations_tests_recurly\".\"recurly__balance_transactions\"\n    group by balance_transaction_id, transaction_id\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": null, "file_key_name": "models.recurly__balance_transactions", "attached_node": "model.recurly.recurly__balance_transactions", "test_metadata": {"name": "unique_combination_of_columns", "kwargs": {"combination_of_columns": ["balance_transaction_id", "transaction_id"], "model": "{{ get_where_subquery(ref('recurly__balance_transactions')) }}"}, "namespace": "dbt_utils"}}, "test.recurly.unique_recurly__churn_analysis_subscription_id.701f6b0aaf": {"database": "postgres", "schema": "recurly_integrations_tests_dbt_test__audit", "name": "unique_recurly__churn_analysis_subscription_id", "resource_type": "test", "package_name": "recurly", "path": "unique_recurly__churn_analysis_subscription_id.sql", "original_file_path": "models/recurly.yml", "unique_id": "test.recurly.unique_recurly__churn_analysis_subscription_id.701f6b0aaf", "fqn": ["recurly", "unique_recurly__churn_analysis_subscription_id"], "alias": "unique_recurly__churn_analysis_subscription_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1722889775.8511128, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "recurly__churn_analysis", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery"], "nodes": ["model.recurly.recurly__churn_analysis"]}, "compiled_path": "target/compiled/recurly/models/recurly.yml/unique_recurly__churn_analysis_subscription_id.sql", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    subscription_id as unique_field,\n    count(*) as n_records\n\nfrom \"postgres\".\"recurly_integrations_tests_recurly\".\"recurly__churn_analysis\"\nwhere subscription_id is not null\ngroup by subscription_id\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "subscription_id", "file_key_name": "models.recurly__churn_analysis", "attached_node": "model.recurly.recurly__churn_analysis", "test_metadata": {"name": "unique", "kwargs": {"column_name": "subscription_id", "model": "{{ get_where_subquery(ref('recurly__churn_analysis')) }}"}, "namespace": null}}, "test.recurly.not_null_recurly__churn_analysis_subscription_id.9f21047592": {"database": "postgres", "schema": "recurly_integrations_tests_dbt_test__audit", "name": "not_null_recurly__churn_analysis_subscription_id", "resource_type": "test", "package_name": "recurly", "path": "not_null_recurly__churn_analysis_subscription_id.sql", "original_file_path": "models/recurly.yml", "unique_id": "test.recurly.not_null_recurly__churn_analysis_subscription_id.9f21047592", "fqn": ["recurly", "not_null_recurly__churn_analysis_subscription_id"], "alias": "not_null_recurly__churn_analysis_subscription_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1722889775.852036, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "recurly__churn_analysis", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.recurly.recurly__churn_analysis"]}, "compiled_path": "target/compiled/recurly/models/recurly.yml/not_null_recurly__churn_analysis_subscription_id.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect subscription_id\nfrom \"postgres\".\"recurly_integrations_tests_recurly\".\"recurly__churn_analysis\"\nwhere subscription_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "subscription_id", "file_key_name": "models.recurly__churn_analysis", "attached_node": "model.recurly.recurly__churn_analysis", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "subscription_id", "model": "{{ get_where_subquery(ref('recurly__churn_analysis')) }}"}, "namespace": null}}, "test.recurly.unique_recurly__monthly_recurring_revenue_account_monthly_id.f687206566": {"database": "postgres", "schema": "recurly_integrations_tests_dbt_test__audit", "name": "unique_recurly__monthly_recurring_revenue_account_monthly_id", "resource_type": "test", "package_name": "recurly", "path": "unique_recurly__monthly_recurring_revenue_account_monthly_id.sql", "original_file_path": "models/recurly.yml", "unique_id": "test.recurly.unique_recurly__monthly_recurring_revenue_account_monthly_id.f687206566", "fqn": ["recurly", "unique_recurly__monthly_recurring_revenue_account_monthly_id"], "alias": "unique_recurly__monthly_recurring_revenue_account_monthly_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1722889775.8529642, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "recurly__monthly_recurring_revenue", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery"], "nodes": ["model.recurly.recurly__monthly_recurring_revenue"]}, "compiled_path": "target/compiled/recurly/models/recurly.yml/unique_recurly__monthly_recurring_revenue_account_monthly_id.sql", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    account_monthly_id as unique_field,\n    count(*) as n_records\n\nfrom \"postgres\".\"recurly_integrations_tests_recurly\".\"recurly__monthly_recurring_revenue\"\nwhere account_monthly_id is not null\ngroup by account_monthly_id\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "account_monthly_id", "file_key_name": "models.recurly__monthly_recurring_revenue", "attached_node": "model.recurly.recurly__monthly_recurring_revenue", "test_metadata": {"name": "unique", "kwargs": {"column_name": "account_monthly_id", "model": "{{ get_where_subquery(ref('recurly__monthly_recurring_revenue')) }}"}, "namespace": null}}, "test.recurly.not_null_recurly__monthly_recurring_revenue_account_monthly_id.3957633afc": {"database": "postgres", "schema": "recurly_integrations_tests_dbt_test__audit", "name": "not_null_recurly__monthly_recurring_revenue_account_monthly_id", "resource_type": "test", "package_name": "recurly", "path": "not_null_recurly__monthly_recurring_revenue_account_monthly_id.sql", "original_file_path": "models/recurly.yml", "unique_id": "test.recurly.not_null_recurly__monthly_recurring_revenue_account_monthly_id.3957633afc", "fqn": ["recurly", "not_null_recurly__monthly_recurring_revenue_account_monthly_id"], "alias": "not_null_recurly__monthly_recurring_revenue_account_monthly_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1722889775.853873, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "recurly__monthly_recurring_revenue", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.recurly.recurly__monthly_recurring_revenue"]}, "compiled_path": "target/compiled/recurly/models/recurly.yml/not_null_recurly__monthly_recurring_revenue_account_monthly_id.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect account_monthly_id\nfrom \"postgres\".\"recurly_integrations_tests_recurly\".\"recurly__monthly_recurring_revenue\"\nwhere account_monthly_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "account_monthly_id", "file_key_name": "models.recurly__monthly_recurring_revenue", "attached_node": "model.recurly.recurly__monthly_recurring_revenue", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "account_monthly_id", "model": "{{ get_where_subquery(ref('recurly__monthly_recurring_revenue')) }}"}, "namespace": null}}, "test.recurly.unique_recurly__subscription_overview_subscription_key.f2dc9d95af": {"database": "postgres", "schema": "recurly_integrations_tests_dbt_test__audit", "name": "unique_recurly__subscription_overview_subscription_key", "resource_type": "test", "package_name": "recurly", "path": "unique_recurly__subscription_overview_subscription_key.sql", "original_file_path": "models/recurly.yml", "unique_id": "test.recurly.unique_recurly__subscription_overview_subscription_key.f2dc9d95af", "fqn": ["recurly", "unique_recurly__subscription_overview_subscription_key"], "alias": "unique_recurly__subscription_overview_subscription_key", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1722889775.8548899, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "recurly__subscription_overview", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery"], "nodes": ["model.recurly.recurly__subscription_overview"]}, "compiled_path": "target/compiled/recurly/models/recurly.yml/unique_recurly__subscription_overview_subscription_key.sql", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    subscription_key as unique_field,\n    count(*) as n_records\n\nfrom \"postgres\".\"recurly_integrations_tests_recurly\".\"recurly__subscription_overview\"\nwhere subscription_key is not null\ngroup by subscription_key\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "subscription_key", "file_key_name": "models.recurly__subscription_overview", "attached_node": "model.recurly.recurly__subscription_overview", "test_metadata": {"name": "unique", "kwargs": {"column_name": "subscription_key", "model": "{{ get_where_subquery(ref('recurly__subscription_overview')) }}"}, "namespace": null}}, "test.recurly.dbt_utils_unique_combination_of_columns_recurly__line_item_enhanced_header_id__line_item_id.7d90ceea61": {"database": "postgres", "schema": "recurly_integrations_tests_dbt_test__audit", "name": "dbt_utils_unique_combination_of_columns_recurly__line_item_enhanced_header_id__line_item_id", "resource_type": "test", "package_name": "recurly", "path": "dbt_utils_unique_combination_o_4b42df4678b21c31e8fadc3f2c54cfe6.sql", "original_file_path": "models/standardized_models/recurly__standardized_models.yml", "unique_id": "test.recurly.dbt_utils_unique_combination_of_columns_recurly__line_item_enhanced_header_id__line_item_id.7d90ceea61", "fqn": ["recurly", "standardized_models", "dbt_utils_unique_combination_of_columns_recurly__line_item_enhanced_header_id__line_item_id"], "alias": "dbt_utils_unique_combination_o_4b42df4678b21c31e8fadc3f2c54cfe6", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_utils_unique_combination_o_4b42df4678b21c31e8fadc3f2c54cfe6", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "dbt_utils_unique_combination_o_4b42df4678b21c31e8fadc3f2c54cfe6"}, "created_at": 1722889775.860802, "relation_name": null, "raw_code": "{{ dbt_utils.test_unique_combination_of_columns(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_unique_combination_o_4b42df4678b21c31e8fadc3f2c54cfe6\") }}", "language": "sql", "refs": [{"name": "recurly__line_item_enhanced", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.test_unique_combination_of_columns", "macro.dbt.get_where_subquery"], "nodes": ["model.recurly.recurly__line_item_enhanced"]}, "compiled_path": "target/compiled/recurly/models/standardized_models/recurly__standardized_models.yml/dbt_utils_unique_combination_o_4b42df4678b21c31e8fadc3f2c54cfe6.sql", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        header_id, line_item_id\n    from \"postgres\".\"recurly_integrations_tests_recurly\".\"recurly__line_item_enhanced\"\n    group by header_id, line_item_id\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": null, "file_key_name": "models.recurly__line_item_enhanced", "attached_node": "model.recurly.recurly__line_item_enhanced", "test_metadata": {"name": "unique_combination_of_columns", "kwargs": {"combination_of_columns": ["header_id", "line_item_id"], "model": "{{ get_where_subquery(ref('recurly__line_item_enhanced')) }}"}, "namespace": "dbt_utils"}}}, "sources": {"source.recurly_source.recurly.account_balance_history": {"database": "postgres", "schema": "recurly_integrations_tests", "name": "account_balance_history", "resource_type": "source", "package_name": "recurly_source", "path": "models/src_recurly.yml", "original_file_path": "models/src_recurly.yml", "unique_id": "source.recurly_source.recurly.account_balance_history", "fqn": ["recurly_source", "recurly", "account_balance_history"], "source_name": "recurly", "source_description": "", "loader": "fivetran", "identifier": "account_balance_history_data", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": "_fivetran_synced", "freshness": {"warn_after": {"count": 72, "period": "hour"}, "error_after": {"count": 168, "period": "hour"}, "filter": null}, "external": null, "description": "The customer account balance is made up of any open or past due invoices on the account alongside any charge or credit adjustments that are left uninvoiced and open on the account respectively.", "columns": {"account_id": {"name": "account_id", "description": "The account the balance update is associated with.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "account_updated_at": {"name": "account_updated_at", "description": "When the account balance was last changed.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "amount": {"name": "amount", "description": "The combined amount of charge or credit adjustments that are left uninvoiced and open on the account.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "currency": {"name": "currency", "description": "3-letter ISO 4217 currency code (USD for US Dollar)", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "past_due": {"name": "past_due", "description": "Is the existing amount of this balance due?", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"postgres\".\"recurly_integrations_tests\".\"account_balance_history_data\"", "created_at": 1722889775.864887}, "source.recurly_source.recurly.account_history": {"database": "postgres", "schema": "recurly_integrations_tests", "name": "account_history", "resource_type": "source", "package_name": "recurly_source", "path": "models/src_recurly.yml", "original_file_path": "models/src_recurly.yml", "unique_id": "source.recurly_source.recurly.account_history", "fqn": ["recurly_source", "recurly", "account_history"], "source_name": "recurly", "source_description": "", "loader": "fivetran", "identifier": "account_history_data", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": "_fivetran_synced", "freshness": {"warn_after": {"count": 72, "period": "hour"}, "error_after": {"count": 168, "period": "hour"}, "filter": null}, "external": null, "description": "The account object stores the entire Recurly history of your customer and  acts as the entry point for working with a customer's billing information, subscription data, transactions, invoices and more.  Once an account is created, all values (with the exception of the account code) may be updated.  The table holds the lineage of the account.\n", "columns": {"id": {"name": "id", "description": "Uniquely identifies your customers in Recurly. No two customers can share the same account id. Part of the PK", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "updated_at": {"name": "updated_at", "description": "When the account was last changed.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "account_city": {"name": "account_city", "description": "The city the account was registered in.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "account_country": {"name": "account_country", "description": "The country the account was registered in.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "account_first_name": {"name": "account_first_name", "description": "The first name for who registered the account.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "account_last_name": {"name": "account_last_name", "description": "The last name for who registered the account.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "account_phone": {"name": "account_phone", "description": "The contact phone number registered on the account.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "account_postal_code": {"name": "account_postal_code", "description": "The contact postal code registered on the account.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "account_region": {"name": "account_region", "description": "The region registered with the account, like state in the US or province in Canada.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "account_street_1": {"name": "account_street_1", "description": "The first street line registered with the account.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "account_street_2": {"name": "account_street_2", "description": "The second street line registered with the account.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "bill_to": {"name": "bill_to", "description": "An enumerable describing the billing behavior of the account,  specifically whether the account is self-paying or will rely on the parent account to pay.\n", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "cc_emails": {"name": "cc_emails", "description": "Additional email address that should receive account correspondence.  These should be separated only by commas.  These CC emails will receive all emails that the email field also receives.         \n", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "code": {"name": "code", "description": "The unique identifier of the account. This cannot be changed once the account is created. Provided during account creation.\n", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "company": {"name": "company", "description": "The company related with the account.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "created_at": {"name": "created_at", "description": "When the account was created.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "deleted_at": {"name": "deleted_at", "description": "If present, when the account was last marked inactive.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "email": {"name": "email", "description": "The email address used for communicating with this customer.  The customer will also use this email address to log into your hosted account management pages.  This value does not need to be unique.\n", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "exemption_certificate": {"name": "exemption_certificate", "description": "Exemption certificate to prove that the business is tax exempt.\n", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "first_name": {"name": "first_name", "description": "The first name of the customer related to the account.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "hosted_login_token": {"name": "hosted_login_token", "description": "Custom URL on your site that logs the user directly into their account", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "last_name": {"name": "last_name", "description": "The last name of the customer related to the account.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "preferred_locale": {"name": "preferred_locale", "description": "The language code and country code for this account, like en-US.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "state": {"name": "state", "description": "Accounts can be either active or inactive.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "tax_exempt": {"name": "tax_exempt", "description": "The tax status of the account. true exempts tax on the account, false applies tax on the account.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "username": {"name": "username", "description": "A secondary value for the account.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "vat_number": {"name": "vat_number", "description": "The VAT number of the account (to avoid having the VAT applied). This is only used for manually collected invoices.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"postgres\".\"recurly_integrations_tests\".\"account_history_data\"", "created_at": 1722889775.865633}, "source.recurly_source.recurly.account_note_history": {"database": "postgres", "schema": "recurly_integrations_tests", "name": "account_note_history", "resource_type": "source", "package_name": "recurly_source", "path": "models/src_recurly.yml", "original_file_path": "models/src_recurly.yml", "unique_id": "source.recurly_source.recurly.account_note_history", "fqn": ["recurly_source", "recurly", "account_note_history"], "source_name": "recurly", "source_description": "", "loader": "fivetran", "identifier": "account_note_history_data", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": "_fivetran_synced", "freshness": {"warn_after": {"count": 72, "period": "hour"}, "error_after": {"count": 168, "period": "hour"}, "filter": null}, "external": null, "description": "A history of notes your team can leave on an account to add context. Notes are internal and not exposed to customers.", "columns": {"id": {"name": "id", "description": "Uniquely identifies the account note created.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "account_id": {"name": "account_id", "description": "Account associated with the note created.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "account_updated_at": {"name": "account_updated_at", "description": "Last time the account note was updated.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "created_at": {"name": "created_at", "description": "Date/time When the note was created.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "message": {"name": "message", "description": "Contents of the note created.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "object": {"name": "object", "description": "Object type of account note.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "user_id": {"name": "user_id", "description": "Id associated with who created the note.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "user_email": {"name": "user_email", "description": "Email associated with who created the note.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"postgres\".\"recurly_integrations_tests\".\"account_note_history_data\"", "created_at": 1722889775.8657432}, "source.recurly_source.recurly.billing_info_history": {"database": "postgres", "schema": "recurly_integrations_tests", "name": "billing_info_history", "resource_type": "source", "package_name": "recurly_source", "path": "models/src_recurly.yml", "original_file_path": "models/src_recurly.yml", "unique_id": "source.recurly_source.recurly.billing_info_history", "fqn": ["recurly_source", "recurly", "billing_info_history"], "source_name": "recurly", "source_description": "", "loader": "fivetran", "identifier": "billing_info_history_data", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": "_fivetran_synced", "freshness": {"warn_after": {"count": 72, "period": "hour"}, "error_after": {"count": 168, "period": "hour"}, "filter": null}, "external": null, "description": "Stored payment information for an account. Filled out by the customer upon purchase or when they update information.", "columns": {"id": {"name": "id", "description": "Unique identifier for the billing info object.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "account_id": {"name": "account_id", "description": "Account identifier for the billing info.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "billing_city": {"name": "billing_city", "description": "Billing city of the card on file for the account.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "billing_country": {"name": "billing_country", "description": "Billing country of the card on file for the account.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "billing_first_name": {"name": "billing_first_name", "description": "First name at billing address on account.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "billing_last_name": {"name": "billing_last_name", "description": "Last name at billing address on account.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "billing_phone": {"name": "billing_phone", "description": "Phone number of the account.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "billing_postal_code": {"name": "billing_postal_code", "description": "Billing postal code of the card on file for the account.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "billing_region": {"name": "billing_region", "description": "Billing region of the card on file for the account, like state in the US or province in Canada.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "billing_street_1": {"name": "billing_street_1", "description": "First address line of the card on file for the account.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "billing_street_2": {"name": "billing_street_2", "description": "Second address line of the card on file for the account.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "company": {"name": "company", "description": "Company name of the account.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "created_at": {"name": "created_at", "description": "Date customer's billing information was added to the account.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "first_name": {"name": "first_name", "description": "First name of the cardholder for the account.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "fraud_decision": {"name": "fraud_decision", "description": "Decision made on whether billing info triggers a fraud alert.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "fraud_risk_rules_triggered": {"name": "fraud_risk_rules_triggered", "description": "The rules that are triggered for fraud if an alert is raised.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "fraud_score": {"name": "fraud_score", "description": "Fraud score on card based on risk inquiries.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "last_name": {"name": "last_name", "description": "Last name of the cardholder for the account.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "payment_method_card_type": {"name": "payment_method_card_type", "description": "Card type of payment method, like Visa or Mastercard.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "payment_method_exp_month": {"name": "payment_method_exp_month", "description": "Month the payment method is expected to expire.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "payment_method_exp_year": {"name": "payment_method_exp_year", "description": "Year the payment method is expected to expire.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "payment_method_first_six": {"name": "payment_method_first_six", "description": "First six numbers of the credit card used to process the transaction.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "payment_method_last_four": {"name": "payment_method_last_four", "description": "Last four digits of the credit card number stored on customer's account.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "payment_method_object": {"name": "payment_method_object", "description": "Object type of payment method, like credit card or debit card.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "updated_at": {"name": "updated_at", "description": "Date customer's billing information was last updated on the account.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "updated_by_country": {"name": "updated_by_country", "description": "Country from which latest billing info update came from.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "updated_by_ip": {"name": "updated_by_ip", "description": "IP address from which latest billing info update came from.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "valid": {"name": "valid", "description": "Is the card valid? Boolean object.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "vat_number": {"name": "vat_number", "description": "(for EU companies), VAT number provider by customer.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"postgres\".\"recurly_integrations_tests\".\"billing_info_history_data\"", "created_at": 1722889775.866025}, "source.recurly_source.recurly.coupon_discount": {"database": "postgres", "schema": "recurly_integrations_tests", "name": "coupon_discount", "resource_type": "source", "package_name": "recurly_source", "path": "models/src_recurly.yml", "original_file_path": "models/src_recurly.yml", "unique_id": "source.recurly_source.recurly.coupon_discount", "fqn": ["recurly_source", "recurly", "coupon_discount"], "source_name": "recurly", "source_description": "", "loader": "fivetran", "identifier": "coupon_discount_data", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": "_fivetran_synced", "freshness": {"warn_after": {"count": 72, "period": "hour"}, "error_after": {"count": 168, "period": "hour"}, "filter": null}, "external": null, "description": "Coupon details and the discounts set for customer purchases.", "columns": {"coupon_id": {"name": "coupon_id", "description": "Unique identifier for the coupon created.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "fivetran_id": {"name": "fivetran_id", "description": "Combined unique surrogate key for the model.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "amount": {"name": "amount", "description": "Fixed amount discount being applied, if applicable. Percentage would be null if amount exists.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "currency": {"name": "currency", "description": "3-letter ISO 4217 currency code (USD for US Dollar).", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "percentage": {"name": "percentage", "description": "Percentage discount being applied, if applicable. Amount would be null if percentage exists.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "trial_length": {"name": "trial_length", "description": "Period of time that coupon will discount eligible purchases by customer.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "trial_unit": {"name": "trial_unit", "description": "Unit of time associated with trial time ('day', 'week', 'month')", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "type": {"name": "type", "description": "Delineates between which type of discount is being applied ('fixed' for amount discount, 'percent' for percentage discount)", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"postgres\".\"recurly_integrations_tests\".\"coupon_discount_data\"", "created_at": 1722889775.866126}, "source.recurly_source.recurly.coupon_redemption_history": {"database": "postgres", "schema": "recurly_integrations_tests", "name": "coupon_redemption_history", "resource_type": "source", "package_name": "recurly_source", "path": "models/src_recurly.yml", "original_file_path": "models/src_recurly.yml", "unique_id": "source.recurly_source.recurly.coupon_redemption_history", "fqn": ["recurly_source", "recurly", "coupon_redemption_history"], "source_name": "recurly", "source_description": "", "loader": "fivetran", "identifier": "coupon_redemption_history_data", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": "_fivetran_synced", "freshness": {"warn_after": {"count": 72, "period": "hour"}, "error_after": {"count": 168, "period": "hour"}, "filter": null}, "external": null, "description": "History of coupons redeemed by accounts.", "columns": {"id": {"name": "id", "description": "Unique identifier for the coupon redemption created.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "account_id": {"name": "account_id", "description": "Account associated with the coupon being redeemed.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "coupon_id": {"name": "coupon_id", "description": "Coupon being redeemed.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "created_at": {"name": "created_at", "description": "Time coupon was being redeemed.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "currency": {"name": "currency", "description": "3-letter ISO 4217 currency code (USD for US Dollar).", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "discounted": {"name": "discounted", "description": "Amount discounted from coupon redemption.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "removed_at": {"name": "removed_at", "description": "If a coupon is removed from a customer, time of removal.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "state": {"name": "state", "description": "Current state of coupon redemption (usually active or inactive)", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "updated_at": {"name": "updated_at", "description": "Time coupon redemption last updated.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"postgres\".\"recurly_integrations_tests\".\"coupon_redemption_history_data\"", "created_at": 1722889775.8662221}, "source.recurly_source.recurly.credit_payment_history": {"database": "postgres", "schema": "recurly_integrations_tests", "name": "credit_payment_history", "resource_type": "source", "package_name": "recurly_source", "path": "models/src_recurly.yml", "original_file_path": "models/src_recurly.yml", "unique_id": "source.recurly_source.recurly.credit_payment_history", "fqn": ["recurly_source", "recurly", "credit_payment_history"], "source_name": "recurly", "source_description": "", "loader": "fivetran", "identifier": "credit_payment_history_data", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": "_fivetran_synced", "freshness": {"warn_after": {"count": 72, "period": "hour"}, "error_after": {"count": 168, "period": "hour"}, "filter": null}, "external": null, "description": "A history of outstanding credit balance to pay an invoice,  but does include the record of write-offs, credit balance removals,  and credit payments later refunded as cash transaction.\n", "columns": {"id": {"name": "id", "description": "Unique identifier for the credit payment.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "account_id": {"name": "account_id", "description": "The id of the account the credit payment is associated with.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "action": {"name": "action", "description": "The action that resulted in the credit payment being created. Enum: \"payment\", \"gift_card\", \"write_off\", \"reduction\", \"refund\" \n", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "amount": {"name": "amount", "description": "The amount of the credit payment, which will always be positive.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "applied_to_invoice_id": {"name": "applied_to_invoice_id", "description": "The invoice the credit payment was applied to.  If action is payment, gift_card, or write_off, this is a charge invoice.  If action is reduction or refund, this is a credit invoice.\n", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "created_at": {"name": "created_at", "description": "The date and time the credit payment was created.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "currency": {"name": "currency", "description": "3-letter ISO 4217 currency code (USD for US Dollar).", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "original_credit_payment_id": {"name": "original_credit_payment_id", "description": "The unique id of the credit payment the refund action credit payment is refunding.  Will only populate if the action on the row is \"refund\".\n", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "original_invoice_id": {"name": "original_invoice_id", "description": "The invoice of the credit invoice the credit payment came from.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "refund_transaction_id": {"name": "refund_transaction_id", "description": "The unique id of the new refund transaction the refund action credit payment is transferring value to.  Will only populate if the action on the row is \"refund\".\n", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "updated_at": {"name": "updated_at", "description": "Time credit payment last updated.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "uuid": {"name": "uuid", "description": "Unique id of credit payment.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "voided_at": {"name": "voided_at", "description": "Time when a credit payment is voided.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {"enabled": true}, "relation_name": "\"postgres\".\"recurly_integrations_tests\".\"credit_payment_history_data\"", "created_at": 1722889775.8663292}, "source.recurly_source.recurly.invoice_coupon_redemption_history": {"database": "postgres", "schema": "recurly_integrations_tests", "name": "invoice_coupon_redemption_history", "resource_type": "source", "package_name": "recurly_source", "path": "models/src_recurly.yml", "original_file_path": "models/src_recurly.yml", "unique_id": "source.recurly_source.recurly.invoice_coupon_redemption_history", "fqn": ["recurly_source", "recurly", "invoice_coupon_redemption_history"], "source_name": "recurly", "source_description": "", "loader": "fivetran", "identifier": "invoice_coupon_redemption_history_data", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": "_fivetran_synced", "freshness": {"warn_after": {"count": 72, "period": "hour"}, "error_after": {"count": 168, "period": "hour"}, "filter": null}, "external": null, "description": "History of coupons redeemed and applied to specific invoices.", "columns": {"coupon_redemption_id": {"name": "coupon_redemption_id", "description": "Unique identifier for the credit payment.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "invoice_id": {"name": "invoice_id", "description": "Invoice the coupon redemption is associated with.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "invoice_updated_at": {"name": "invoice_updated_at", "description": "Last time the invoice was updated.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"postgres\".\"recurly_integrations_tests\".\"invoice_coupon_redemption_history_data\"", "created_at": 1722889775.866414}, "source.recurly_source.recurly.invoice_history": {"database": "postgres", "schema": "recurly_integrations_tests", "name": "invoice_history", "resource_type": "source", "package_name": "recurly_source", "path": "models/src_recurly.yml", "original_file_path": "models/src_recurly.yml", "unique_id": "source.recurly_source.recurly.invoice_history", "fqn": ["recurly_source", "recurly", "invoice_history"], "source_name": "recurly", "source_description": "", "loader": "fivetran", "identifier": "invoice_history_data", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": "_fivetran_synced", "freshness": {"warn_after": {"count": 72, "period": "hour"}, "error_after": {"count": 168, "period": "hour"}, "filter": null}, "external": null, "description": "An invoice relates charges, credits, and payments together.  When a subscription is created or renewed or a charge is created on the account,  Recurly will sum the charges, discount or tax as appropriate, and send the invoice out for collection.  The table holds the lineage of the invoice.\n", "columns": {"id": {"name": "id", "description": "Unique identifier for the object.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "updated_at": {"name": "updated_at", "description": "When the invoice was updated.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "account_id": {"name": "account_id", "description": "The account this invoice belongs to.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "amount": {"name": "amount", "description": "Total after discounts and taxes (quantity * unit_amount) - (discount + tax).", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "balance": {"name": "balance", "description": "The outstanding balance remaining on this invoice.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "closed_at": {"name": "closed_at", "description": "Date invoice was marked paid or failed.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "collection_method": {"name": "collection_method", "description": "An automatic invoice means a corresponding transaction is run using the account's billing information  at the same time the invoice is created. Manual invoices are created without a corresponding transaction.  The merchant must enter a manual payment transaction or have the customer pay the invoice with an automatic method,  like credit card, PayPal, Amazon, or ACH bank payment. Default: \"automatic\" Enum: \"automatic\", \"manual\"\n", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "created_at": {"name": "created_at", "description": "When the invoice was created.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "currency": {"name": "currency", "description": "3-letter ISO 4217 currency code.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "customer_notes": {"name": "customer_notes", "description": "Notes section available for any details account wants to add.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "discount": {"name": "discount", "description": "Total discounts applied to this invoice.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "due_at": {"name": "due_at", "description": "Date invoice is due. This is the date the net terms are reached.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "invoice_city": {"name": "invoice_city", "description": "City of the customer's address on the invoice.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "invoice_country": {"name": "invoice_country", "description": "The 2 letter country code for the country of the customer's address on the invoice.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "invoice_first_name": {"name": "invoice_first_name", "description": "First name from account associated with that invoice.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "invoice_last_name": {"name": "invoice_last_name", "description": "Last name from account associated with that invoice.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "invoice_name_on_account": {"name": "invoice_name_on_account", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "invoice_phone": {"name": "invoice_phone", "description": "Phone number associated with that invoice.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "invoice_postal_code": {"name": "invoice_postal_code", "description": "Postal code of the customer's address on the invoice.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "invoice_region": {"name": "invoice_region", "description": "State or province of the customer's address on the invoice.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "invoice_street_1": {"name": "invoice_street_1", "description": "Address line 1 of the customer's address on the invoice.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "invoice_street_2": {"name": "invoice_street_2", "description": "Address line 2 of the customer's address on the invoice.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "net_terms": {"name": "net_terms", "description": "Integer representing the number of days after an invoice's creation that the invoice will become past due.  If an invoice's net terms are set to '0', it is due 'On Receipt' and will become past due 24 hours after it\u2019s created.  If an invoice is due net 30, it will become past due at 31 days exactly. Default: 0\n", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "number": {"name": "number", "description": "If VAT taxation and the Country Invoice Sequencing feature are enabled,  invoices will have country-specific invoice numbers for invoices billed to EU countries (e.g. FR1001).  Non-EU invoices will continue to use the site-level invoice number sequence.\n", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "origin": {"name": "origin", "description": "The event that created the invoice. Enum: \"credit\", \"gift_card\", \"immediate_change\", \"line_item_refund\", \"open_amount_refund\",  \"purchase\", \"renewal\", \"termination\", \"write_off\", \"prepayment\".\n", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "paid": {"name": "paid", "description": "The total amount of successful payments transaction on this invoice.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "po_number": {"name": "po_number", "description": "For manual invoicing, this identifies the PO number associated with the subscription.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "previous_invoice_id": {"name": "previous_invoice_id", "description": "On refund invoices, this value will exist and show the invoice ID of the purchase invoice the refund was created from.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "refundable_amount": {"name": "refundable_amount", "description": "The refundable amount on a charge invoice. It will be null for all other invoices.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "state": {"name": "state", "description": "The invoice state.  Enum: \"open\", \"pending\", \"processing\", \"past_due\", \"paid\", \"closed\", \"failed\", \"voided\"\n", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "subtotal": {"name": "subtotal", "description": "The summation of charges, discounts, and credits, before tax.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "tax": {"name": "tax", "description": "The total tax on this invoice.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "tax_rate": {"name": "tax_rate", "description": "The rate of the tax.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "tax_region": {"name": "tax_region", "description": "Provides the tax region applied on an invoice. For U.S. Sales Tax,  this will be the 2 letter state code.  For EU VAT this will be the 2 letter country code.  For all country level tax types, this will display the regional tax, like VAT, GST, or PST.\n", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "tax_type": {"name": "tax_type", "description": "Provides the tax type as \"vat\" for EU VAT, \"usst\" for U.S. Sales Tax,  or the 2 letter country code for country level tax types like Canada, Australia, New Zealand, Israel, and all non-EU European countries.\n", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "terms_and_conditions": {"name": "terms_and_conditions", "description": "A notes section available to you for any details you would like to add.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "total": {"name": "total", "description": "The final total on this invoice. The summation of invoice charges, discounts, credits, and tax. Alternative the summation of subtotal and tax.\n", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "type": {"name": "type", "description": "Invoices are either \"charge\", \"credit\", or \"legacy\" invoices.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "vat_reverse_charge_notes": {"name": "vat_reverse_charge_notes", "description": "Notes section if you are using Recurly's EU VAT feature for tax collection.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"postgres\".\"recurly_integrations_tests\".\"invoice_history_data\"", "created_at": 1722889775.86655}, "source.recurly_source.recurly.invoice_subscription_history": {"database": "postgres", "schema": "recurly_integrations_tests", "name": "invoice_subscription_history", "resource_type": "source", "package_name": "recurly_source", "path": "models/src_recurly.yml", "original_file_path": "models/src_recurly.yml", "unique_id": "source.recurly_source.recurly.invoice_subscription_history", "fqn": ["recurly_source", "recurly", "invoice_subscription_history"], "source_name": "recurly", "source_description": "", "loader": "fivetran", "identifier": "invoice_subscription_history_data", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": "_fivetran_synced", "freshness": {"warn_after": {"count": 72, "period": "hour"}, "error_after": {"count": 168, "period": "hour"}, "filter": null}, "external": null, "description": "The connection between invoices and subscription.  FK on invoice are both invoice_id and invoice_updated_at, and on subscription is subscription_id. The table holds the lineage of the invoice - subscription connection.\n", "columns": {"invoice_id": {"name": "invoice_id", "description": "The id of the invoice associated with the subscription.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "invoice_updated_at": {"name": "invoice_updated_at", "description": "When the invoice was updated.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "subscription_id": {"name": "subscription_id", "description": "The id of the subscription associated with the invoice.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"postgres\".\"recurly_integrations_tests\".\"invoice_subscription_history_data\"", "created_at": 1722889775.866636}, "source.recurly_source.recurly.line_item_history": {"database": "postgres", "schema": "recurly_integrations_tests", "name": "line_item_history", "resource_type": "source", "package_name": "recurly_source", "path": "models/src_recurly.yml", "original_file_path": "models/src_recurly.yml", "unique_id": "source.recurly_source.recurly.line_item_history", "fqn": ["recurly_source", "recurly", "line_item_history"], "source_name": "recurly", "source_description": "", "loader": "fivetran", "identifier": "line_item_history_data", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": "_fivetran_synced", "freshness": {"warn_after": {"count": 72, "period": "hour"}, "error_after": {"count": 168, "period": "hour"}, "filter": null}, "external": null, "description": "Line items are the charges and credits on your customer's invoices. The table holds the lineage of the line item.\n", "columns": {"id": {"name": "id", "description": "Unique identifier for the object.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "updated_at": {"name": "updated_at", "description": "When the line item was updated.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "account_id": {"name": "account_id", "description": "The account this line item belongs to.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "accounting_code": {"name": "accounting_code", "description": "Internal accounting code to help you reconcile your revenue to the correct ledger.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "add_on_code": {"name": "add_on_code", "description": "If the line item is a charge or credit for an add-on, this is its code.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "add_on_id": {"name": "add_on_id", "description": "If the line item is a charge or credit for an add-on this is its ID.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "amount": {"name": "amount", "description": "Total after discounts and taxes (quantity * unit_amount) - (discount + tax).", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "created_at": {"name": "created_at", "description": "When the line item was created.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "credit_applied": {"name": "credit_applied", "description": "The amount of credit from this line item that was applied to the invoice.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "credit_reason_code": {"name": "credit_reason_code", "description": "The reason the credit was given.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "currency": {"name": "currency", "description": "3-letter ISO 4217 currency code.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "description": {"name": "description", "description": "Description that appears on the invoice. For subscription related items this will be filled in automatically.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "discount": {"name": "discount", "description": "The discount applied to the line item.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "end_date": {"name": "end_date", "description": "If this date is provided, it indicates the end of a time range.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "invoice_id": {"name": "invoice_id", "description": "Once the line item has been invoiced this will be the invoice's ID.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "invoice_number": {"name": "invoice_number", "description": "Once the line item has been invoiced this will be the invoice's number.  If VAT taxation and the Country Invoice Sequencing feature are enabled,  invoices will have country-specific invoice numbers for invoices billed to EU countries (e.g. FR1001).  Non-EU invoices will continue to use the site-level invoice number sequence.\n", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "legacy_category": {"name": "legacy_category", "description": "Category to describe the role of a line item on a legacy invoice. \u201ccharges\u201d refers to charges being billed for on this invoice.\n", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "origin": {"name": "origin", "description": "A credit created from an original charge will have the value of the charge's origin. Enum: \"add_on\", \"add_on_trial\", \"carryforward\", \"coupon\", \"credit\", \"debit\", \"one_time\",  \"plan\", \"plan_trial\", \"setup_fee\", \"prepayment\"\n", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "original_line_item_invoice_id": {"name": "original_line_item_invoice_id", "description": "The invoice where the credit originated.  Will only have a value if the line item is a credit created from a previous credit,  or if the credit was created from a charge refund.\n", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "plan_code": {"name": "plan_code", "description": "If the line item is a charge or credit for a plan or add-on, this is the plan's code.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "plan_id": {"name": "plan_id", "description": "If the line item is a charge or credit for a plan or add-on, this is the plan's ID.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "previous_line_item_id": {"name": "previous_line_item_id", "description": "Will only have a value if the line item is a credit created from a previous credit,  or if the credit was created from a charge refund.\n", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "product_code": {"name": "product_code", "description": "For plan-related line items this will be the plan's code, for add-on related line items it will be the add-on's code.  For item-related line items it will be the item's external_sku.\n", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "proration_rate": {"name": "proration_rate", "description": "When a line item has been prorated, this is the rate of the proration.  Proration rates were made available for line items created after March 30, 2017.  For line items created prior to that date, the proration rate will be null, even if the line item was prorated.\n", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "quantity": {"name": "quantity", "description": "This number will be multiplied by the unit amount to compute the subtotal before any discounts or taxes. Default: 1\n", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "refund": {"name": "refund", "description": "true if the line item is refund, false if it is not.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "refunded_quantity": {"name": "refunded_quantity", "description": "For refund charges, the quantity being refunded. For non-refund charges, the total quantity refunded (possibly over multiple refunds).", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "start_date": {"name": "start_date", "description": "If an end date is present, this is value indicates the beginning of a billing time range.  If no end date is present it indicates billing for a specific date.\n", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "state": {"name": "state", "description": "Pending line items are charges or credits on an account that have not been applied to an invoice yet.  Invoiced line items will always have an invoice_id value. Enum: \"invoiced\", \"pending\"\n", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "subscription_id": {"name": "subscription_id", "description": "If the line item is a charge or credit for a subscription, this is its ID.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "subtotal": {"name": "subtotal", "description": "Total before discounts and taxes (quantity * unit_amount).", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "tax": {"name": "tax", "description": "The tax amount for the line item.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "tax_code": {"name": "tax_code", "description": "Used by Avalara, Vertex, and Recurly\u2019s EU VAT tax feature. The tax code values are specific to each tax system.  If you are using Recurly\u2019s EU VAT feature you can use unknown, physical, or digital.\n", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "tax_exempt": {"name": "tax_exempt", "description": "true exempts tax on charges, false applies tax on charges. If not defined, then defaults to the Plan and Site settings.  This attribute does not work for credits (negative line items). Credits are always applied post-tax.  Pre-tax discounts should use the Coupons feature.\n", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "tax_rate": {"name": "tax_rate", "description": "Tax rate", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "tax_region": {"name": "tax_region", "description": "Provides the tax region applied on an invoice.  For U.S. Sales Tax, this will be the 2 letter state code.  For EU VAT this will be the 2 letter country code.  For all country level tax types, this will display the regional tax, like VAT, GST, or PST.\n", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "tax_type": {"name": "tax_type", "description": "Provides the tax type as \"vat\" for EU VAT, \"usst\" for U.S. Sales Tax, or the 2 letter country code for country level tax types  like Canada, Australia, New Zealand, Israel, and all non-EU European countries.\n", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "taxable": {"name": "taxable", "description": "true if the line item is taxable, false if it is not.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "type": {"name": "type", "description": "Charges are positive line items that debit the account.  Credits are negative line items that credit the account. Enum: \"charge\", \"credit\"\n", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "unit_amount": {"name": "unit_amount", "description": "Positive amount for a charge, negative amount for a credit.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "uuid": {"name": "uuid", "description": "The UUID is useful for matching data with the CSV exports and building URLs into Recurly's UI. Used in HTB database.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"postgres\".\"recurly_integrations_tests\".\"line_item_history_data\"", "created_at": 1722889775.866774}, "source.recurly_source.recurly.plan_currency_history": {"database": "postgres", "schema": "recurly_integrations_tests", "name": "plan_currency_history", "resource_type": "source", "package_name": "recurly_source", "path": "models/src_recurly.yml", "original_file_path": "models/src_recurly.yml", "unique_id": "source.recurly_source.recurly.plan_currency_history", "fqn": ["recurly_source", "recurly", "plan_currency_history"], "source_name": "recurly", "source_description": "", "loader": "fivetran", "identifier": "plan_currency_history_data", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": "_fivetran_synced", "freshness": {"warn_after": {"count": 72, "period": "hour"}, "error_after": {"count": 168, "period": "hour"}, "filter": null}, "external": null, "description": "Plan prices", "columns": {"plan_id": {"name": "plan_id", "description": "The id of the plan.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "plan_updated_at": {"name": "plan_updated_at", "description": "Last time plan updated.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "currency": {"name": "currency", "description": "3-letter ISO 4217 currency code.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "setup_fees": {"name": "setup_fees", "description": "Fee automatically charged at the beginning of a subscription billing cycle.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "unit_amount": {"name": "unit_amount", "description": "Amount for one plan.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"postgres\".\"recurly_integrations_tests\".\"plan_currency_history_data\"", "created_at": 1722889775.866862}, "source.recurly_source.recurly.plan_history": {"database": "postgres", "schema": "recurly_integrations_tests", "name": "plan_history", "resource_type": "source", "package_name": "recurly_source", "path": "models/src_recurly.yml", "original_file_path": "models/src_recurly.yml", "unique_id": "source.recurly_source.recurly.plan_history", "fqn": ["recurly_source", "recurly", "plan_history"], "source_name": "recurly", "source_description": "", "loader": "fivetran", "identifier": "plan_history_data", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": "_fivetran_synced", "freshness": {"warn_after": {"count": 72, "period": "hour"}, "error_after": {"count": 168, "period": "hour"}, "filter": null}, "external": null, "description": "Plans define the base price, currency, and billing cycle for recurring purchases of products. The table holds the lineage of the plan.\n", "columns": {"id": {"name": "id", "description": "Unique identifier for the object.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "updated_at": {"name": "updated_at", "description": "When the plan was updated.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "accounting_code": {"name": "accounting_code", "description": "Accounting code for invoice line items for the plan. If no value is provided, it defaults to plan's code.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "auto_renew": {"name": "auto_renew", "description": "Subscriptions will automatically inherit this value once they are active.  If auto_renew is true, then a subscription will automatically renew its term at renewal.  If auto_renew is false, then a subscription will expire at the end of its term.  auto_renew can be overridden on the subscription record itself. Default: true\n", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "code": {"name": "code", "description": "Unique code to identify the plan. This is used in Hosted Payment Page URLs and in the invoice exports.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "created_at": {"name": "created_at", "description": "When the plan was created.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "deleted_at": {"name": "deleted_at", "description": "When the plan was deleted.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "description": {"name": "description", "description": "Optional description, not displayed.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "hosted_pages_bypass_confirmation": {"name": "hosted_pages_bypass_confirmation", "description": "Returns true if you use Recurly's Hosted Payment Pages and use custom return URL.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "hosted_pages_cancel_url": {"name": "hosted_pages_cancel_url", "description": "If customer cancels subscription via Hosted Page, Recurly redirects customer to specific URL.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "hosted_pages_display_quantity": {"name": "hosted_pages_display_quantity", "description": "Number of hosted pages under plan.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "hosted_pages_success_url": {"name": "hosted_pages_success_url", "description": "If customer successfully subscribes via Hosted Page, Recurly redirects customer to specific URL", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "interval_length": {"name": "interval_length", "description": "Length of the plan's billing interval in interval_unit. Default: 1\n", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "interval_unit": {"name": "interval_unit", "description": "Unit for the plan's billing interval. Default: \"months\" Enum: \"days\", \"months\"\n", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "name": {"name": "name", "description": "This name describes your plan and will appear on the Hosted Payment Page and the subscriber's invoice.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "setup_fee_accounting_code": {"name": "setup_fee_accounting_code", "description": "Accounting code for invoice line items for the plan's setup fee. If no value is provided, it defaults to plan's accounting code.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "state": {"name": "state", "description": "The current state of the plan. Enum: \"active\", \"inactive\"\n", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "tax_code": {"name": "tax_code", "description": "Used by Avalara, Vertex, and Recurly\u2019s EU VAT tax feature. The tax code values are specific to each tax system.  If you are using Recurly\u2019s EU VAT feature you can use unknown, physical, or digital.\n", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "tax_exempt": {"name": "tax_exempt", "description": "true exempts tax on the plan, false applies tax on the plan.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "total_billing_cycles": {"name": "total_billing_cycles", "description": "Automatically terminate subscriptions after a defined number of billing cycles.  Number of billing cycles before the plan automatically stops renewing, defaults to null for continuous, automatic renewal.\n", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "trial_length": {"name": "trial_length", "description": "Length of plan's trial period in trial_units. 0 means no trial. Default: 0\n", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "trial_unit": {"name": "trial_unit", "description": "Units for the plan's trial period. Default: \"months\" Enum: \"days\", \"months\"\n", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"postgres\".\"recurly_integrations_tests\".\"plan_history_data\"", "created_at": 1722889775.867007}, "source.recurly_source.recurly.subscription_add_on_history": {"database": "postgres", "schema": "recurly_integrations_tests", "name": "subscription_add_on_history", "resource_type": "source", "package_name": "recurly_source", "path": "models/src_recurly.yml", "original_file_path": "models/src_recurly.yml", "unique_id": "source.recurly_source.recurly.subscription_add_on_history", "fqn": ["recurly_source", "recurly", "subscription_add_on_history"], "source_name": "recurly", "source_description": "", "loader": "fivetran", "identifier": "subscription_add_on_history_data", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": "_fivetran_synced", "freshness": {"warn_after": {"count": 72, "period": "hour"}, "error_after": {"count": 168, "period": "hour"}, "filter": null}, "external": null, "description": "History of subscription add-ons to a particular plan.", "columns": {"id": {"name": "id", "description": "Unique identifier for subscription add-on.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "updated_at": {"name": "updated_at", "description": "The date/time the add-on was last modified.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "created_at": {"name": "created_at", "description": "The date/time the add-on was last created.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "expired_at": {"name": "expired_at", "description": "Date and time the subscription was/ will churn.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "object": {"name": "object", "description": "Object type of subscription add-on.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "plan_add_on_id": {"name": "plan_add_on_id", "description": "Plan add-on ID associated with subscription add-on ID.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "quantity": {"name": "quantity", "description": "Number of add-ons added to the subscription.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "subscription_id": {"name": "subscription_id", "description": "Subscription ID associated with add-on.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "unit_amount": {"name": "unit_amount", "description": "Amount of one unit of the add-on.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {"enabled": true}, "relation_name": "\"postgres\".\"recurly_integrations_tests\".\"subscription_add_on_history_data\"", "created_at": 1722889775.8671098}, "source.recurly_source.recurly.subscription_change_history": {"database": "postgres", "schema": "recurly_integrations_tests", "name": "subscription_change_history", "resource_type": "source", "package_name": "recurly_source", "path": "models/src_recurly.yml", "original_file_path": "models/src_recurly.yml", "unique_id": "source.recurly_source.recurly.subscription_change_history", "fqn": ["recurly_source", "recurly", "subscription_change_history"], "source_name": "recurly", "source_description": "", "loader": "fivetran", "identifier": "subscription_change_history_data", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": "_fivetran_synced", "freshness": {"warn_after": {"count": 72, "period": "hour"}, "error_after": {"count": 168, "period": "hour"}, "filter": null}, "external": null, "description": "History of subscription changes, particularly upgrades and downgrades, but also changes to how subscription is invoiced.", "columns": {"id": {"name": "id", "description": "Unique identifier for subscription change.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "activate_at": {"name": "activate_at", "description": "Date at which subscription changes.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "activated": {"name": "activated", "description": "Is the subscription change currently active?", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "created_at": {"name": "created_at", "description": "When the subscription was last created.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "deleted_at": {"name": "deleted_at", "description": "When subscription was rendered to be inactive.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "object": {"name": "object", "description": "Object type of subscription change.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "plan_id": {"name": "plan_id", "description": "Plan id associated with subscription change.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "quantity": {"name": "quantity", "description": "Quantity of subscriptions changed", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "subscription_id": {"name": "subscription_id", "description": "subscription ID associated with subscription change.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "unit_amount": {"name": "unit_amount", "description": "Amount of one unit subscription.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "updated_at": {"name": "updated_at", "description": "Last modification of subscription change.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {"enabled": true}, "relation_name": "\"postgres\".\"recurly_integrations_tests\".\"subscription_change_history_data\"", "created_at": 1722889775.86722}, "source.recurly_source.recurly.subscription_history": {"database": "postgres", "schema": "recurly_integrations_tests", "name": "subscription_history", "resource_type": "source", "package_name": "recurly_source", "path": "models/src_recurly.yml", "original_file_path": "models/src_recurly.yml", "unique_id": "source.recurly_source.recurly.subscription_history", "fqn": ["recurly_source", "recurly", "subscription_history"], "source_name": "recurly", "source_description": "", "loader": "fivetran", "identifier": "subscription_history_data", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": "_fivetran_synced", "freshness": {"warn_after": {"count": 72, "period": "hour"}, "error_after": {"count": 168, "period": "hour"}, "filter": null}, "external": null, "description": "Subscriptions are created when your customers subscribe to one of your plans.  The customer's subscription tells Recurly when and how much to bill the customer. The table holds the lineage of the subscription.\n", "columns": {"id": {"name": "id", "description": "Unique identifier for the object.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "updated_at": {"name": "updated_at", "description": "When the subscription was updated.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "account_id": {"name": "account_id", "description": "The account this subscription belongs to.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "activated_at": {"name": "activated_at", "description": "When the subscription was activated.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "add_ons_total": {"name": "add_ons_total", "description": "Total price of add-ons. Greater or equal to 0.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "auto_renew": {"name": "auto_renew", "description": "Whether the subscription renews at the end of its term. Default: true\n", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "bank_account_authorized_at": {"name": "bank_account_authorized_at", "description": "Merchants importing recurring subscriptions paid with ACH into Recurly can  backdate the subscription's authorization with this attribute using an ISO 8601 timestamp.  This timestamp is used for alerting customers to reauthorize in 3 years in accordance  with NACHA rules. If a subscription becomes inactive or the billing info is no longer  a bank account, this timestamp is cleared.\n", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "canceled_at": {"name": "canceled_at", "description": "When the subscription was canceled. Can take future dates", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "collection_method": {"name": "collection_method", "description": "Default: \"automatic\" Enum: \"automatic\", \"manual\"\n", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "created_at": {"name": "created_at", "description": "When the subscription was created.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "currency": {"name": "currency", "description": "3-letter ISO 4217 currency code.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "current_period_ends_at": {"name": "current_period_ends_at", "description": "Date/time current billing period ends at.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "current_period_started_at": {"name": "current_period_started_at", "description": "Date/time current billing period started at.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "current_term_ends_at": {"name": "current_term_ends_at", "description": "When the term ends. This is calculated by a plan's interval and total_billing_cycles in a term.  Subscription changes with a timeframe=renewal will be applied on this date.\n", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "current_term_started_at": {"name": "current_term_started_at", "description": "The start date of the term when the first billing period starts.  The subscription term is the length of time that a customer will be committed to a subscription.  A term can span multiple billing periods.\n", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "customer_notes": {"name": "customer_notes", "description": "This will default to the Customer Notes text specified on the Invoice Settings page. Custom notes will stay with a subscription on all renewals.\n", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "expiration_reason": {"name": "expiration_reason", "description": "Expiration reason", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "expires_at": {"name": "expires_at", "description": "When the subscription has expired. Can take future dates.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "net_terms": {"name": "net_terms", "description": "Identifies the agreement associated with the subscription.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "object": {"name": "object", "description": "The object type, in this case only \"subscription\"", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "paused_at": {"name": "paused_at", "description": "Null unless subscription is paused or will pause at the end of the current billing period.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "plan_id": {"name": "plan_id", "description": "The plan this subscription belongs to.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "po_number": {"name": "po_number", "description": "For manual invoicing, this identifies the PO number associated with the subscription.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "quantity": {"name": "quantity", "description": "Subscription quantity. Greater or equal to 0.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "remaining_billing_cycles": {"name": "remaining_billing_cycles", "description": "The remaining billing cycles in the current term.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "remaining_pause_cycles": {"name": "remaining_pause_cycles", "description": "Null unless subscription is paused or will pause at the end of the current billing period.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "renewal_billing_cycles": {"name": "renewal_billing_cycles", "description": "If auto_renew=true, when a term completes, total_billing_cycles takes this value as the length of subsequent terms.  Defaults to the plan's total_billing_cycles.\n", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "shipping_address_id": {"name": "shipping_address_id", "description": "Unique id assigned to shipping address.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "started_with_gift": {"name": "started_with_gift", "description": "Did the subscription start with a gift? Was it paid with at least one gift card credit?", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "state": {"name": "state", "description": "The current state of the subscription. Enum: \"active\", \"canceled\", \"expired\", \"failed\", \"future\", \"paused\"\n", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "subtotal": {"name": "subtotal", "description": "Estimated total, before tax.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "terms_and_conditions": {"name": "terms_and_conditions", "description": "Optional notes field.  This will default to the Terms and Conditions text specified on the Invoice Settings page.\n", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "total_billing_cycles": {"name": "total_billing_cycles", "description": "The number of cycles/billing periods in a term.  When remaining_billing_cycles=0, if auto_renew=true the subscription will renew and a new term will begin,  otherwise the subscription will expire.\n", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "trial_ends_at": {"name": "trial_ends_at", "description": "Trial period ends at", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "trial_started_at": {"name": "trial_started_at", "description": "Trial period started at", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "unit_amount": {"name": "unit_amount", "description": "Subscription unit price", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "uuid": {"name": "uuid", "description": "The UUID is useful for matching data with the CSV exports and building URLs into Recurly's UI.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"postgres\".\"recurly_integrations_tests\".\"subscription_history_data\"", "created_at": 1722889775.8673658}, "source.recurly_source.recurly.transaction_subscription": {"database": "postgres", "schema": "recurly_integrations_tests", "name": "transaction_subscription", "resource_type": "source", "package_name": "recurly_source", "path": "models/src_recurly.yml", "original_file_path": "models/src_recurly.yml", "unique_id": "source.recurly_source.recurly.transaction_subscription", "fqn": ["recurly_source", "recurly", "transaction_subscription"], "source_name": "recurly", "source_description": "", "loader": "fivetran", "identifier": "transaction_subscription_data", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": "_fivetran_synced", "freshness": {"warn_after": {"count": 72, "period": "hour"}, "error_after": {"count": 168, "period": "hour"}, "filter": null}, "external": null, "description": "The connection between transaction and subscription.  FK on transaction is transaction_id, and on subscription is subscription_id. The table holds the lineage of the transaction - subscription connection.\n", "columns": {"transaction_id": {"name": "transaction_id", "description": "The id of the transaction associated with the subscription.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "subscription_id": {"name": "subscription_id", "description": "The id of the subscription associated with the transaction.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"postgres\".\"recurly_integrations_tests\".\"transaction_subscription_data\"", "created_at": 1722889775.86745}, "source.recurly_source.recurly.transaction": {"database": "postgres", "schema": "recurly_integrations_tests", "name": "transaction", "resource_type": "source", "package_name": "recurly_source", "path": "models/src_recurly.yml", "original_file_path": "models/src_recurly.yml", "unique_id": "source.recurly_source.recurly.transaction", "fqn": ["recurly_source", "recurly", "transaction"], "source_name": "recurly", "source_description": "", "loader": "fivetran", "identifier": "transaction_data", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": "_fivetran_synced", "freshness": {"warn_after": {"count": 72, "period": "hour"}, "error_after": {"count": 168, "period": "hour"}, "filter": null}, "external": null, "description": "Purchasing information is sent to your payment gateway in an action called a transaction.  This includes the customer's billing information and the amount of money to be charged, voided, or refunded.\n", "columns": {"id": {"name": "id", "description": "Unique identifier for the object.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "account_id": {"name": "account_id", "description": "The account_id this transaction belongs to.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "amount": {"name": "amount", "description": "Total transaction amount sent to the payment gateway.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "avs_check": {"name": "avs_check", "description": "When processed, result from checking the overall AVS on the transaction. Enum: \"N\", \"P\", \"D\"\n", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "billing_city": {"name": "billing_city", "description": "Billing info - City", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "billing_country": {"name": "billing_country", "description": "Billing info - Country, 2-letter ISO code.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "billing_first_name": {"name": "billing_first_name", "description": "Billing info - First name", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "billing_last_name": {"name": "billing_last_name", "description": "Billing info - Last name", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "billing_phone": {"name": "billing_phone", "description": "Billing info - Phone", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "billing_postal_code": {"name": "billing_postal_code", "description": "Billing info - Zip or postal code.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "billing_region": {"name": "billing_region", "description": "Billing info - State or province.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "billing_street_1": {"name": "billing_street_1", "description": "Billing info - Address Street 1", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "billing_street_2": {"name": "billing_street_2", "description": "Billing info - Address Street 2", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "collected_at": {"name": "collected_at", "description": "When the transaction was collected.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "collection_method": {"name": "collection_method", "description": "The method by which the payment was collected. Enum: \"automatic\", \"manual\"\n", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "created_at": {"name": "created_at", "description": "When the transaction was created.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "currency": {"name": "currency", "description": "3-letter ISO 4217 currency code.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "customer_message": {"name": "customer_message", "description": "For declined (success=false) transactions, the message displayed to the customer.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "customer_message_locale": {"name": "customer_message_locale", "description": "Language code for the message", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "cvv_check": {"name": "cvv_check", "description": "When processed, result from checking the CVV/CVC value on the transaction. Enum: \"M\", \"N\"\n", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "gateway_approval_code": {"name": "gateway_approval_code", "description": "Transaction approval code from the payment gateway.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "gateway_message": {"name": "gateway_message", "description": "Transaction message from the payment gateway.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "gateway_reference": {"name": "gateway_reference", "description": "Transaction reference number from the payment gateway.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "gateway_response_code": {"name": "gateway_response_code", "description": "For declined transactions (`success=false`), this field lists the gateway error code.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "gateway_response_time": {"name": "gateway_response_time", "description": "Time, in seconds, for gateway to process the transaction.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "gateway_response_values": {"name": "gateway_response_values", "description": "The values in this field will vary from gateway to gateway.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "invoice_id": {"name": "invoice_id", "description": "The invoice_id this transaction belongs to.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "ip_address_country": {"name": "ip_address_country", "description": "When provided, the country associated with the IP address of customer's location when processing transaction.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "ip_address_v_4": {"name": "ip_address_v_4", "description": "When provided, the IP address when processing transaction.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "origin": {"name": "origin", "description": "Describes how the transaction was triggered. Enum: \"api\", \"chargeback\", \"force_collect\", \"hpp\", \"merchant\", \"recurly_admin\", \"recurlyjs\", \"recurring\", \"refunded_externally\", \"transparent\"\n", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "original_transaction_id": {"name": "original_transaction_id", "description": "If this transaction is a refund (type=refund), this will be the ID of the original transaction on the invoice being refunded.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "payment_gateway_id": {"name": "payment_gateway_id", "description": "Payment gateway id", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "payment_gateway_name": {"name": "payment_gateway_name", "description": "Payment gateway name", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "payment_gateway_type": {"name": "payment_gateway_type", "description": "Payment gateway type", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "payment_method_card_type": {"name": "payment_method_card_type", "description": "Card type of payment method.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "payment_method_exp_month": {"name": "payment_method_exp_month", "description": "Expiration month of payment method.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "payment_method_exp_year": {"name": "payment_method_exp_year", "description": "Expiration year of payment method.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "payment_method_first_six": {"name": "payment_method_first_six", "description": "First six numbers of payment method.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "payment_method_last_four": {"name": "payment_method_last_four", "description": "Last four digits of payment method.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "payment_method_object": {"name": "payment_method_object", "description": "Enum: \"amazon\", \"amazon_billing_agreement\", \"apple_pay\", \"bank_account_info\", \"check\", \"credit_card\", \"eft\",  \"gateway_token\", \"iban_bank_account\", \"money_order\", \"other\", \"paypal\", \"paypal_billing_agreement\", \"roku\",  \"sepadirectdebit\", \"wire_transfer\"\n", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "refunded": {"name": "refunded", "description": "Indicates if part or all of this transaction was refunded.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "status": {"name": "status", "description": "The current transaction status. Note that the status may change, e.g. a pending transaction may become declined or success may later become void. Enum: \"chargeback\", \"declined\", \"error\", \"pending\", \"processing\", \"scheduled\", \"success\", \"void\"\n", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "status_code": {"name": "status_code", "description": "Status code of the transaction", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "status_message": {"name": "status_message", "description": "For declined (success=false) transactions, the message displayed to the merchant.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "success": {"name": "success", "description": "Did this transaction complete successfully?", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "type": {"name": "type", "description": "Transaction types:\n  authorization - verifies billing information and places a hold on money in the customer's account.\n  capture - captures funds held by an authorization and completes a purchase.\n  purchase - combines the authorization and capture in one transaction.\n  refund - returns all or a portion of the money collected in a previous transaction to the customer.\n  verify - a $0 or $1 transaction used to verify billing information which is immediately voided.\nEnum: \"authorization\", \"capture\", \"purchase\", \"refund\", \"verify\"\n", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "uuid": {"name": "uuid", "description": "The UUID is useful for matching data with the CSV exports and building URLs into Recurly's UI.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "voided_at": {"name": "voided_at", "description": "When the transaction was voided.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "voided_by_invoice_id": {"name": "voided_by_invoice_id", "description": "The invoice_id this transaction was voided.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"postgres\".\"recurly_integrations_tests\".\"transaction_data\"", "created_at": 1722889775.8675961}}, "macros": {"macro.dbt_postgres.postgres__current_timestamp": {"name": "postgres__current_timestamp", "resource_type": "macro", "package_name": "dbt_postgres", "path": "macros/timestamps.sql", "original_file_path": "macros/timestamps.sql", "unique_id": "macro.dbt_postgres.postgres__current_timestamp", "macro_sql": "{% macro postgres__current_timestamp() -%}\n    now()\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722889774.2283719, "supported_languages": null}, "macro.dbt_postgres.postgres__snapshot_string_as_time": {"name": "postgres__snapshot_string_as_time", "resource_type": "macro", "package_name": "dbt_postgres", "path": "macros/timestamps.sql", "original_file_path": "macros/timestamps.sql", "unique_id": "macro.dbt_postgres.postgres__snapshot_string_as_time", "macro_sql": "{% macro postgres__snapshot_string_as_time(timestamp) -%}\n    {%- set result = \"'\" ~ timestamp ~ \"'::timestamp without time zone\" -%}\n    {{ return(result) }}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722889774.2285929, "supported_languages": null}, "macro.dbt_postgres.postgres__snapshot_get_time": {"name": "postgres__snapshot_get_time", "resource_type": "macro", "package_name": "dbt_postgres", "path": "macros/timestamps.sql", "original_file_path": "macros/timestamps.sql", "unique_id": "macro.dbt_postgres.postgres__snapshot_get_time", "macro_sql": "{% macro postgres__snapshot_get_time() -%}\n  {{ current_timestamp() }}::timestamp without time zone\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.current_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722889774.228703, "supported_languages": null}, "macro.dbt_postgres.postgres__current_timestamp_backcompat": {"name": "postgres__current_timestamp_backcompat", "resource_type": "macro", "package_name": "dbt_postgres", "path": "macros/timestamps.sql", "original_file_path": "macros/timestamps.sql", "unique_id": "macro.dbt_postgres.postgres__current_timestamp_backcompat", "macro_sql": "{% macro postgres__current_timestamp_backcompat() %}\n    current_timestamp::{{ type_timestamp() }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.type_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722889774.2288132, "supported_languages": null}, "macro.dbt_postgres.postgres__current_timestamp_in_utc_backcompat": {"name": "postgres__current_timestamp_in_utc_backcompat", "resource_type": "macro", "package_name": "dbt_postgres", "path": "macros/timestamps.sql", "original_file_path": "macros/timestamps.sql", "unique_id": "macro.dbt_postgres.postgres__current_timestamp_in_utc_backcompat", "macro_sql": "{% macro postgres__current_timestamp_in_utc_backcompat() %}\n    (current_timestamp at time zone 'utc')::{{ type_timestamp() }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.type_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722889774.228916, "supported_languages": null}, "macro.dbt_postgres.postgres__get_catalog_relations": {"name": "postgres__get_catalog_relations", "resource_type": "macro", "package_name": "dbt_postgres", "path": "macros/catalog.sql", "original_file_path": "macros/catalog.sql", "unique_id": "macro.dbt_postgres.postgres__get_catalog_relations", "macro_sql": "{% macro postgres__get_catalog_relations(information_schema, relations) -%}\n  {%- call statement('catalog', fetch_result=True) -%}\n\n    {#\n      If the user has multiple databases set and the first one is wrong, this will fail.\n      But we won't fail in the case where there are multiple quoting-difference-only dbs, which is better.\n    #}\n    {% set database = information_schema.database %}\n    {{ adapter.verify_database(database) }}\n\n    select\n        '{{ database }}' as table_database,\n        sch.nspname as table_schema,\n        tbl.relname as table_name,\n        case tbl.relkind\n            when 'v' then 'VIEW'\n            when 'm' then 'MATERIALIZED VIEW'\n            else 'BASE TABLE'\n        end as table_type,\n        tbl_desc.description as table_comment,\n        col.attname as column_name,\n        col.attnum as column_index,\n        pg_catalog.format_type(col.atttypid, col.atttypmod) as column_type,\n        col_desc.description as column_comment,\n        pg_get_userbyid(tbl.relowner) as table_owner\n\n    from pg_catalog.pg_namespace sch\n    join pg_catalog.pg_class tbl on tbl.relnamespace = sch.oid\n    join pg_catalog.pg_attribute col on col.attrelid = tbl.oid\n    left outer join pg_catalog.pg_description tbl_desc on (tbl_desc.objoid = tbl.oid and tbl_desc.objsubid = 0)\n    left outer join pg_catalog.pg_description col_desc on (col_desc.objoid = tbl.oid and col_desc.objsubid = col.attnum)\n    where (\n      {%- for relation in relations -%}\n        {%- if relation.identifier -%}\n          (upper(sch.nspname) = upper('{{ relation.schema }}') and\n           upper(tbl.relname) = upper('{{ relation.identifier }}'))\n        {%- else-%}\n          upper(sch.nspname) = upper('{{ relation.schema }}')\n        {%- endif -%}\n        {%- if not loop.last %} or {% endif -%}\n      {%- endfor -%}\n    )\n      and not pg_is_other_temp_schema(sch.oid) -- not a temporary schema belonging to another session\n      and tbl.relpersistence in ('p', 'u') -- [p]ermanent table or [u]nlogged table. Exclude [t]emporary tables\n      and tbl.relkind in ('r', 'v', 'f', 'p', 'm') -- o[r]dinary table, [v]iew, [f]oreign table, [p]artitioned table, [m]aterialized view. Other values are [i]ndex, [S]equence, [c]omposite type, [t]OAST table\n      and col.attnum > 0 -- negative numbers are used for system columns such as oid\n      and not col.attisdropped -- column as not been dropped\n\n    order by\n        sch.nspname,\n        tbl.relname,\n        col.attnum\n\n  {%- endcall -%}\n\n  {{ return(load_result('catalog').table) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722889774.230294, "supported_languages": null}, "macro.dbt_postgres.postgres__get_catalog": {"name": "postgres__get_catalog", "resource_type": "macro", "package_name": "dbt_postgres", "path": "macros/catalog.sql", "original_file_path": "macros/catalog.sql", "unique_id": "macro.dbt_postgres.postgres__get_catalog", "macro_sql": "{% macro postgres__get_catalog(information_schema, schemas) -%}\n  {%- set relations = [] -%}\n  {%- for schema in schemas -%}\n    {%- set dummy = relations.append({'schema': schema}) -%}\n  {%- endfor -%}\n  {{ return(postgres__get_catalog_relations(information_schema, relations)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_postgres.postgres__get_catalog_relations"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722889774.230627, "supported_languages": null}, "macro.dbt_postgres.postgres__get_relations": {"name": "postgres__get_relations", "resource_type": "macro", "package_name": "dbt_postgres", "path": "macros/relations.sql", "original_file_path": "macros/relations.sql", "unique_id": "macro.dbt_postgres.postgres__get_relations", "macro_sql": "{% macro postgres__get_relations() -%}\n\n  {#\n      -- in pg_depend, objid is the dependent, refobjid is the referenced object\n      --  > a pg_depend entry indicates that the referenced object cannot be\n      --  > dropped without also dropping the dependent object.\n  #}\n\n  {%- call statement('relations', fetch_result=True) -%}\n    with relation as (\n        select\n            pg_rewrite.ev_class as class,\n            pg_rewrite.oid as id\n        from pg_rewrite\n    ),\n    class as (\n        select\n            oid as id,\n            relname as name,\n            relnamespace as schema,\n            relkind as kind\n        from pg_class\n    ),\n    dependency as (\n        select distinct\n            pg_depend.objid as id,\n            pg_depend.refobjid as ref\n        from pg_depend\n    ),\n    schema as (\n        select\n            pg_namespace.oid as id,\n            pg_namespace.nspname as name\n        from pg_namespace\n        where nspname != 'information_schema' and nspname not like 'pg\\_%'\n    ),\n    referenced as (\n        select\n            relation.id AS id,\n            referenced_class.name ,\n            referenced_class.schema ,\n            referenced_class.kind\n        from relation\n        join class as referenced_class on relation.class=referenced_class.id\n        where referenced_class.kind in ('r', 'v', 'm')\n    ),\n    relationships as (\n        select\n            referenced.name as referenced_name,\n            referenced.schema as referenced_schema_id,\n            dependent_class.name as dependent_name,\n            dependent_class.schema as dependent_schema_id,\n            referenced.kind as kind\n        from referenced\n        join dependency on referenced.id=dependency.id\n        join class as dependent_class on dependency.ref=dependent_class.id\n        where\n            (referenced.name != dependent_class.name or\n             referenced.schema != dependent_class.schema)\n    )\n\n    select\n        referenced_schema.name as referenced_schema,\n        relationships.referenced_name as referenced_name,\n        dependent_schema.name as dependent_schema,\n        relationships.dependent_name as dependent_name\n    from relationships\n    join schema as dependent_schema on relationships.dependent_schema_id=dependent_schema.id\n    join schema as referenced_schema on relationships.referenced_schema_id=referenced_schema.id\n    group by referenced_schema, referenced_name, dependent_schema, dependent_name\n    order by referenced_schema, referenced_name, dependent_schema, dependent_name;\n\n  {%- endcall -%}\n\n  {{ return(load_result('relations').table) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722889774.2313988, "supported_languages": null}, "macro.dbt_postgres.postgres_get_relations": {"name": "postgres_get_relations", "resource_type": "macro", "package_name": "dbt_postgres", "path": "macros/relations.sql", "original_file_path": "macros/relations.sql", "unique_id": "macro.dbt_postgres.postgres_get_relations", "macro_sql": "{% macro postgres_get_relations() %}\n  {{ return(postgres__get_relations()) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_postgres.postgres__get_relations"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722889774.231528, "supported_languages": null}, "macro.dbt_postgres.postgres__create_table_as": {"name": "postgres__create_table_as", "resource_type": "macro", "package_name": "dbt_postgres", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_postgres.postgres__create_table_as", "macro_sql": "{% macro postgres__create_table_as(temporary, relation, sql) -%}\n  {%- set unlogged = config.get('unlogged', default=false) -%}\n  {%- set sql_header = config.get('sql_header', none) -%}\n\n  {{ sql_header if sql_header is not none }}\n\n  create {% if temporary -%}\n    temporary\n  {%- elif unlogged -%}\n    unlogged\n  {%- endif %} table {{ relation }}\n  {% set contract_config = config.get('contract') %}\n  {% if contract_config.enforced %}\n    {{ get_assert_columns_equivalent(sql) }}\n  {% endif -%}\n  {% if contract_config.enforced and (not temporary) -%}\n      {{ get_table_columns_and_constraints() }} ;\n    insert into {{ relation }} (\n      {{ adapter.dispatch('get_column_names', 'dbt')() }}\n    )\n    {%- set sql = get_select_subquery(sql) %}\n  {% else %}\n    as\n  {% endif %}\n  (\n    {{ sql }}\n  );\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.get_assert_columns_equivalent", "macro.dbt.get_table_columns_and_constraints", "macro.dbt.default__get_column_names", "macro.dbt.get_select_subquery"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722889774.239116, "supported_languages": null}, "macro.dbt_postgres.postgres__get_create_index_sql": {"name": "postgres__get_create_index_sql", "resource_type": "macro", "package_name": "dbt_postgres", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_postgres.postgres__get_create_index_sql", "macro_sql": "{% macro postgres__get_create_index_sql(relation, index_dict) -%}\n  {%- set index_config = adapter.parse_index(index_dict) -%}\n  {%- set comma_separated_columns = \", \".join(index_config.columns) -%}\n  {%- set index_name = index_config.render(relation) -%}\n\n  create {% if index_config.unique -%}\n    unique\n  {%- endif %} index if not exists\n  \"{{ index_name }}\"\n  on {{ relation }} {% if index_config.type -%}\n    using {{ index_config.type }}\n  {%- endif %}\n  ({{ comma_separated_columns }})\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722889774.239542, "supported_languages": null}, "macro.dbt_postgres.postgres__create_schema": {"name": "postgres__create_schema", "resource_type": "macro", "package_name": "dbt_postgres", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_postgres.postgres__create_schema", "macro_sql": "{% macro postgres__create_schema(relation) -%}\n  {% if relation.database -%}\n    {{ adapter.verify_database(relation.database) }}\n  {%- endif -%}\n  {%- call statement('create_schema') -%}\n    create schema if not exists {{ relation.without_identifier().include(database=False) }}\n  {%- endcall -%}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722889774.239827, "supported_languages": null}, "macro.dbt_postgres.postgres__drop_schema": {"name": "postgres__drop_schema", "resource_type": "macro", "package_name": "dbt_postgres", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_postgres.postgres__drop_schema", "macro_sql": "{% macro postgres__drop_schema(relation) -%}\n  {% if relation.database -%}\n    {{ adapter.verify_database(relation.database) }}\n  {%- endif -%}\n  {%- call statement('drop_schema') -%}\n    drop schema if exists {{ relation.without_identifier().include(database=False) }} cascade\n  {%- endcall -%}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722889774.240094, "supported_languages": null}, "macro.dbt_postgres.postgres__get_columns_in_relation": {"name": "postgres__get_columns_in_relation", "resource_type": "macro", "package_name": "dbt_postgres", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_postgres.postgres__get_columns_in_relation", "macro_sql": "{% macro postgres__get_columns_in_relation(relation) -%}\n  {% call statement('get_columns_in_relation', fetch_result=True) %}\n      select\n          column_name,\n          data_type,\n          character_maximum_length,\n          numeric_precision,\n          numeric_scale\n\n      from {{ relation.information_schema('columns') }}\n      where table_name = '{{ relation.identifier }}'\n        {% if relation.schema %}\n        and table_schema = '{{ relation.schema }}'\n        {% endif %}\n      order by ordinal_position\n\n  {% endcall %}\n  {% set table = load_result('get_columns_in_relation').table %}\n  {{ return(sql_convert_columns_in_relation(table)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement", "macro.dbt.sql_convert_columns_in_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722889774.240488, "supported_languages": null}, "macro.dbt_postgres.postgres__list_relations_without_caching": {"name": "postgres__list_relations_without_caching", "resource_type": "macro", "package_name": "dbt_postgres", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_postgres.postgres__list_relations_without_caching", "macro_sql": "{% macro postgres__list_relations_without_caching(schema_relation) %}\n  {% call statement('list_relations_without_caching', fetch_result=True) -%}\n    select\n      '{{ schema_relation.database }}' as database,\n      tablename as name,\n      schemaname as schema,\n      'table' as type\n    from pg_tables\n    where schemaname ilike '{{ schema_relation.schema }}'\n    union all\n    select\n      '{{ schema_relation.database }}' as database,\n      viewname as name,\n      schemaname as schema,\n      'view' as type\n    from pg_views\n    where schemaname ilike '{{ schema_relation.schema }}'\n    union all\n    select\n      '{{ schema_relation.database }}' as database,\n      matviewname as name,\n      schemaname as schema,\n      'materialized_view' as type\n    from pg_matviews\n    where schemaname ilike '{{ schema_relation.schema }}'\n  {% endcall %}\n  {{ return(load_result('list_relations_without_caching').table) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722889774.241062, "supported_languages": null}, "macro.dbt_postgres.postgres__information_schema_name": {"name": "postgres__information_schema_name", "resource_type": "macro", "package_name": "dbt_postgres", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_postgres.postgres__information_schema_name", "macro_sql": "{% macro postgres__information_schema_name(database) -%}\n  {% if database_name -%}\n    {{ adapter.verify_database(database_name) }}\n  {%- endif -%}\n  information_schema\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722889774.241281, "supported_languages": null}, "macro.dbt_postgres.postgres__list_schemas": {"name": "postgres__list_schemas", "resource_type": "macro", "package_name": "dbt_postgres", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_postgres.postgres__list_schemas", "macro_sql": "{% macro postgres__list_schemas(database) %}\n  {% if database -%}\n    {{ adapter.verify_database(database) }}\n  {%- endif -%}\n  {% call statement('list_schemas', fetch_result=True, auto_begin=False) %}\n    select distinct nspname from pg_namespace\n  {% endcall %}\n  {{ return(load_result('list_schemas').table) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722889774.2416189, "supported_languages": null}, "macro.dbt_postgres.postgres__check_schema_exists": {"name": "postgres__check_schema_exists", "resource_type": "macro", "package_name": "dbt_postgres", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_postgres.postgres__check_schema_exists", "macro_sql": "{% macro postgres__check_schema_exists(information_schema, schema) -%}\n  {% if information_schema.database -%}\n    {{ adapter.verify_database(information_schema.database) }}\n  {%- endif -%}\n  {% call statement('check_schema_exists', fetch_result=True, auto_begin=False) %}\n    select count(*) from pg_namespace where nspname = '{{ schema }}'\n  {% endcall %}\n  {{ return(load_result('check_schema_exists').table) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722889774.241972, "supported_languages": null}, "macro.dbt_postgres.postgres__make_relation_with_suffix": {"name": "postgres__make_relation_with_suffix", "resource_type": "macro", "package_name": "dbt_postgres", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_postgres.postgres__make_relation_with_suffix", "macro_sql": "{% macro postgres__make_relation_with_suffix(base_relation, suffix, dstring) %}\n    {% if dstring %}\n      {% set dt = modules.datetime.datetime.now() %}\n      {% set dtstring = dt.strftime(\"%H%M%S%f\") %}\n      {% set suffix = suffix ~ dtstring %}\n    {% endif %}\n    {% set suffix_length = suffix|length %}\n    {% set relation_max_name_length = base_relation.relation_max_name_length() %}\n    {% if suffix_length > relation_max_name_length %}\n        {% do exceptions.raise_compiler_error('Relation suffix is too long (' ~ suffix_length ~ ' characters). Maximum length is ' ~ relation_max_name_length ~ ' characters.') %}\n    {% endif %}\n    {% set identifier = base_relation.identifier[:relation_max_name_length - suffix_length] ~ suffix %}\n\n    {{ return(base_relation.incorporate(path={\"identifier\": identifier })) }}\n\n  {% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722889774.242743, "supported_languages": null}, "macro.dbt_postgres.postgres__make_intermediate_relation": {"name": "postgres__make_intermediate_relation", "resource_type": "macro", "package_name": "dbt_postgres", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_postgres.postgres__make_intermediate_relation", "macro_sql": "{% macro postgres__make_intermediate_relation(base_relation, suffix) %}\n    {{ return(postgres__make_relation_with_suffix(base_relation, suffix, dstring=False)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_postgres.postgres__make_relation_with_suffix"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722889774.242923, "supported_languages": null}, "macro.dbt_postgres.postgres__make_temp_relation": {"name": "postgres__make_temp_relation", "resource_type": "macro", "package_name": "dbt_postgres", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_postgres.postgres__make_temp_relation", "macro_sql": "{% macro postgres__make_temp_relation(base_relation, suffix) %}\n    {% set temp_relation = postgres__make_relation_with_suffix(base_relation, suffix, dstring=True) %}\n    {{ return(temp_relation.incorporate(path={\"schema\": none,\n                                              \"database\": none})) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_postgres.postgres__make_relation_with_suffix"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722889774.243204, "supported_languages": null}, "macro.dbt_postgres.postgres__make_backup_relation": {"name": "postgres__make_backup_relation", "resource_type": "macro", "package_name": "dbt_postgres", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_postgres.postgres__make_backup_relation", "macro_sql": "{% macro postgres__make_backup_relation(base_relation, backup_relation_type, suffix) %}\n    {% set backup_relation = postgres__make_relation_with_suffix(base_relation, suffix, dstring=False) %}\n    {{ return(backup_relation.incorporate(type=backup_relation_type)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_postgres.postgres__make_relation_with_suffix"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722889774.243436, "supported_languages": null}, "macro.dbt_postgres.postgres_escape_comment": {"name": "postgres_escape_comment", "resource_type": "macro", "package_name": "dbt_postgres", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_postgres.postgres_escape_comment", "macro_sql": "{% macro postgres_escape_comment(comment) -%}\n  {% if comment is not string %}\n    {% do exceptions.raise_compiler_error('cannot escape a non-string: ' ~ comment) %}\n  {% endif %}\n  {%- set magic = '$dbt_comment_literal_block$' -%}\n  {%- if magic in comment -%}\n    {%- do exceptions.raise_compiler_error('The string ' ~ magic ~ ' is not allowed in comments.') -%}\n  {%- endif -%}\n  {{ magic }}{{ comment }}{{ magic }}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722889774.2438028, "supported_languages": null}, "macro.dbt_postgres.postgres__alter_relation_comment": {"name": "postgres__alter_relation_comment", "resource_type": "macro", "package_name": "dbt_postgres", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_postgres.postgres__alter_relation_comment", "macro_sql": "{% macro postgres__alter_relation_comment(relation, comment) %}\n  {% set escaped_comment = postgres_escape_comment(comment) %}\n  comment on {{ relation.type }} {{ relation }} is {{ escaped_comment }};\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_postgres.postgres_escape_comment"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722889774.2439969, "supported_languages": null}, "macro.dbt_postgres.postgres__alter_column_comment": {"name": "postgres__alter_column_comment", "resource_type": "macro", "package_name": "dbt_postgres", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_postgres.postgres__alter_column_comment", "macro_sql": "{% macro postgres__alter_column_comment(relation, column_dict) %}\n  {% set existing_columns = adapter.get_columns_in_relation(relation) | map(attribute=\"name\") | list %}\n  {% for column_name in column_dict if (column_name in existing_columns) %}\n    {% set comment = column_dict[column_name]['description'] %}\n    {% set escaped_comment = postgres_escape_comment(comment) %}\n    comment on column {{ relation }}.{{ adapter.quote(column_name) if column_dict[column_name]['quote'] else column_name }} is {{ escaped_comment }};\n  {% endfor %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_postgres.postgres_escape_comment"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722889774.244513, "supported_languages": null}, "macro.dbt_postgres.postgres__get_show_grant_sql": {"name": "postgres__get_show_grant_sql", "resource_type": "macro", "package_name": "dbt_postgres", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_postgres.postgres__get_show_grant_sql", "macro_sql": "\n\n{%- macro postgres__get_show_grant_sql(relation) -%}\n  select grantee, privilege_type\n  from {{ relation.information_schema('role_table_grants') }}\n      where grantor = current_role\n        and grantee != current_role\n        and table_schema = '{{ relation.schema }}'\n        and table_name = '{{ relation.identifier }}'\n{%- endmacro -%}\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722889774.244697, "supported_languages": null}, "macro.dbt_postgres.postgres__copy_grants": {"name": "postgres__copy_grants", "resource_type": "macro", "package_name": "dbt_postgres", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_postgres.postgres__copy_grants", "macro_sql": "{% macro postgres__copy_grants() %}\n    {{ return(False) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722889774.2447958, "supported_languages": null}, "macro.dbt_postgres.postgres__get_show_indexes_sql": {"name": "postgres__get_show_indexes_sql", "resource_type": "macro", "package_name": "dbt_postgres", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_postgres.postgres__get_show_indexes_sql", "macro_sql": "{% macro postgres__get_show_indexes_sql(relation) %}\n    select\n        i.relname                                   as name,\n        m.amname                                    as method,\n        ix.indisunique                              as \"unique\",\n        array_to_string(array_agg(a.attname), ',')  as column_names\n    from pg_index ix\n    join pg_class i\n        on i.oid = ix.indexrelid\n    join pg_am m\n        on m.oid=i.relam\n    join pg_class t\n        on t.oid = ix.indrelid\n    join pg_namespace n\n        on n.oid = t.relnamespace\n    join pg_attribute a\n        on a.attrelid = t.oid\n        and a.attnum = ANY(ix.indkey)\n    where t.relname = '{{ relation.identifier }}'\n      and n.nspname = '{{ relation.schema }}'\n      and t.relkind in ('r', 'm')\n    group by 1, 2, 3\n    order by 1, 2, 3\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722889774.2449548, "supported_languages": null}, "macro.dbt_postgres.postgres__get_drop_index_sql": {"name": "postgres__get_drop_index_sql", "resource_type": "macro", "package_name": "dbt_postgres", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_postgres.postgres__get_drop_index_sql", "macro_sql": "\n\n\n{%- macro postgres__get_drop_index_sql(relation, index_name) -%}\n    drop index if exists \"{{ relation.schema }}\".\"{{ index_name }}\"\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722889774.24508, "supported_languages": null}, "macro.dbt_postgres.postgres__get_incremental_default_sql": {"name": "postgres__get_incremental_default_sql", "resource_type": "macro", "package_name": "dbt_postgres", "path": "macros/materializations/incremental_strategies.sql", "original_file_path": "macros/materializations/incremental_strategies.sql", "unique_id": "macro.dbt_postgres.postgres__get_incremental_default_sql", "macro_sql": "{% macro postgres__get_incremental_default_sql(arg_dict) %}\n\n  {% if arg_dict[\"unique_key\"] %}\n    {% do return(get_incremental_delete_insert_sql(arg_dict)) %}\n  {% else %}\n    {% do return(get_incremental_append_sql(arg_dict)) %}\n  {% endif %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_incremental_delete_insert_sql", "macro.dbt.get_incremental_append_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722889774.2454221, "supported_languages": null}, "macro.dbt_postgres.postgres__snapshot_merge_sql": {"name": "postgres__snapshot_merge_sql", "resource_type": "macro", "package_name": "dbt_postgres", "path": "macros/materializations/snapshot_merge.sql", "original_file_path": "macros/materializations/snapshot_merge.sql", "unique_id": "macro.dbt_postgres.postgres__snapshot_merge_sql", "macro_sql": "{% macro postgres__snapshot_merge_sql(target, source, insert_cols) -%}\n    {%- set insert_cols_csv = insert_cols | join(', ') -%}\n\n    update {{ target }}\n    set dbt_valid_to = DBT_INTERNAL_SOURCE.dbt_valid_to\n    from {{ source }} as DBT_INTERNAL_SOURCE\n    where DBT_INTERNAL_SOURCE.dbt_scd_id::text = {{ target }}.dbt_scd_id::text\n      and DBT_INTERNAL_SOURCE.dbt_change_type::text in ('update'::text, 'delete'::text)\n      and {{ target }}.dbt_valid_to is null;\n\n    insert into {{ target }} ({{ insert_cols_csv }})\n    select {% for column in insert_cols -%}\n        DBT_INTERNAL_SOURCE.{{ column }} {%- if not loop.last %}, {%- endif %}\n    {%- endfor %}\n    from {{ source }} as DBT_INTERNAL_SOURCE\n    where DBT_INTERNAL_SOURCE.dbt_change_type::text = 'insert'::text;\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722889774.2460558, "supported_languages": null}, "macro.dbt_postgres.postgres__drop_materialized_view": {"name": "postgres__drop_materialized_view", "resource_type": "macro", "package_name": "dbt_postgres", "path": "macros/relations/materialized_view/drop.sql", "original_file_path": "macros/relations/materialized_view/drop.sql", "unique_id": "macro.dbt_postgres.postgres__drop_materialized_view", "macro_sql": "{% macro postgres__drop_materialized_view(relation) -%}\n    drop materialized view if exists {{ relation }} cascade\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722889774.246182, "supported_languages": null}, "macro.dbt_postgres.postgres__describe_materialized_view": {"name": "postgres__describe_materialized_view", "resource_type": "macro", "package_name": "dbt_postgres", "path": "macros/relations/materialized_view/describe.sql", "original_file_path": "macros/relations/materialized_view/describe.sql", "unique_id": "macro.dbt_postgres.postgres__describe_materialized_view", "macro_sql": "{% macro postgres__describe_materialized_view(relation) %}\n    -- for now just get the indexes, we don't need the name or the query yet\n    {% set _indexes = run_query(get_show_indexes_sql(relation)) %}\n    {% do return({'indexes': _indexes}) %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.run_query", "macro.dbt.get_show_indexes_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722889774.2464461, "supported_languages": null}, "macro.dbt_postgres.postgres__refresh_materialized_view": {"name": "postgres__refresh_materialized_view", "resource_type": "macro", "package_name": "dbt_postgres", "path": "macros/relations/materialized_view/refresh.sql", "original_file_path": "macros/relations/materialized_view/refresh.sql", "unique_id": "macro.dbt_postgres.postgres__refresh_materialized_view", "macro_sql": "{% macro postgres__refresh_materialized_view(relation) %}\n    refresh materialized view {{ relation }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722889774.246575, "supported_languages": null}, "macro.dbt_postgres.postgres__get_rename_materialized_view_sql": {"name": "postgres__get_rename_materialized_view_sql", "resource_type": "macro", "package_name": "dbt_postgres", "path": "macros/relations/materialized_view/rename.sql", "original_file_path": "macros/relations/materialized_view/rename.sql", "unique_id": "macro.dbt_postgres.postgres__get_rename_materialized_view_sql", "macro_sql": "{% macro postgres__get_rename_materialized_view_sql(relation, new_name) %}\n    alter materialized view {{ relation }} rename to {{ new_name }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722889774.246733, "supported_languages": null}, "macro.dbt_postgres.postgres__get_alter_materialized_view_as_sql": {"name": "postgres__get_alter_materialized_view_as_sql", "resource_type": "macro", "package_name": "dbt_postgres", "path": "macros/relations/materialized_view/alter.sql", "original_file_path": "macros/relations/materialized_view/alter.sql", "unique_id": "macro.dbt_postgres.postgres__get_alter_materialized_view_as_sql", "macro_sql": "{% macro postgres__get_alter_materialized_view_as_sql(\n    relation,\n    configuration_changes,\n    sql,\n    existing_relation,\n    backup_relation,\n    intermediate_relation\n) %}\n\n    -- apply a full refresh immediately if needed\n    {% if configuration_changes.requires_full_refresh %}\n\n        {{ get_replace_sql(existing_relation, relation, sql) }}\n\n    -- otherwise apply individual changes as needed\n    {% else %}\n\n        {{ postgres__update_indexes_on_materialized_view(relation, configuration_changes.indexes) }}\n\n    {%- endif -%}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_replace_sql", "macro.dbt_postgres.postgres__update_indexes_on_materialized_view"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722889774.247605, "supported_languages": null}, "macro.dbt_postgres.postgres__update_indexes_on_materialized_view": {"name": "postgres__update_indexes_on_materialized_view", "resource_type": "macro", "package_name": "dbt_postgres", "path": "macros/relations/materialized_view/alter.sql", "original_file_path": "macros/relations/materialized_view/alter.sql", "unique_id": "macro.dbt_postgres.postgres__update_indexes_on_materialized_view", "macro_sql": "\n\n\n{%- macro postgres__update_indexes_on_materialized_view(relation, index_changes) -%}\n    {{- log(\"Applying UPDATE INDEXES to: \" ~ relation) -}}\n\n    {%- for _index_change in index_changes -%}\n        {%- set _index = _index_change.context -%}\n\n        {%- if _index_change.action == \"drop\" -%}\n\n            {{ postgres__get_drop_index_sql(relation, _index.name) }}\n\n        {%- elif _index_change.action == \"create\" -%}\n\n            {{ postgres__get_create_index_sql(relation, _index.as_node_config) }}\n\n        {%- endif -%}\n\t{{ ';' if not loop.last else \"\" }}\n\n    {%- endfor -%}\n\n{%- endmacro -%}\n\n\n", "depends_on": {"macros": ["macro.dbt_postgres.postgres__get_drop_index_sql", "macro.dbt_postgres.postgres__get_create_index_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722889774.248068, "supported_languages": null}, "macro.dbt_postgres.postgres__get_materialized_view_configuration_changes": {"name": "postgres__get_materialized_view_configuration_changes", "resource_type": "macro", "package_name": "dbt_postgres", "path": "macros/relations/materialized_view/alter.sql", "original_file_path": "macros/relations/materialized_view/alter.sql", "unique_id": "macro.dbt_postgres.postgres__get_materialized_view_configuration_changes", "macro_sql": "{% macro postgres__get_materialized_view_configuration_changes(existing_relation, new_config) %}\n    {% set _existing_materialized_view = postgres__describe_materialized_view(existing_relation) %}\n    {% set _configuration_changes = existing_relation.get_materialized_view_config_change_collection(_existing_materialized_view, new_config.model) %}\n    {% do return(_configuration_changes) %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_postgres.postgres__describe_materialized_view"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722889774.248328, "supported_languages": null}, "macro.dbt_postgres.postgres__get_create_materialized_view_as_sql": {"name": "postgres__get_create_materialized_view_as_sql", "resource_type": "macro", "package_name": "dbt_postgres", "path": "macros/relations/materialized_view/create.sql", "original_file_path": "macros/relations/materialized_view/create.sql", "unique_id": "macro.dbt_postgres.postgres__get_create_materialized_view_as_sql", "macro_sql": "{% macro postgres__get_create_materialized_view_as_sql(relation, sql) %}\n    create materialized view if not exists {{ relation }} as {{ sql }};\n\n    {% for _index_dict in config.get('indexes', []) -%}\n        {{- get_create_index_sql(relation, _index_dict) -}}{{ ';' if not loop.last else \"\" }}\n    {%- endfor -%}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_create_index_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722889774.248714, "supported_languages": null}, "macro.dbt_postgres.postgres__drop_table": {"name": "postgres__drop_table", "resource_type": "macro", "package_name": "dbt_postgres", "path": "macros/relations/table/drop.sql", "original_file_path": "macros/relations/table/drop.sql", "unique_id": "macro.dbt_postgres.postgres__drop_table", "macro_sql": "{% macro postgres__drop_table(relation) -%}\n    drop table if exists {{ relation }} cascade\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722889774.2488372, "supported_languages": null}, "macro.dbt_postgres.postgres__get_replace_table_sql": {"name": "postgres__get_replace_table_sql", "resource_type": "macro", "package_name": "dbt_postgres", "path": "macros/relations/table/replace.sql", "original_file_path": "macros/relations/table/replace.sql", "unique_id": "macro.dbt_postgres.postgres__get_replace_table_sql", "macro_sql": "{% macro postgres__get_replace_table_sql(relation, sql) -%}\n\n    {%- set sql_header = config.get('sql_header', none) -%}\n    {{ sql_header if sql_header is not none }}\n\n    create or replace table {{ relation }}\n        {% set contract_config = config.get('contract') %}\n        {% if contract_config.enforced %}\n            {{ get_assert_columns_equivalent(sql) }}\n            {{ get_table_columns_and_constraints() }}\n            {%- set sql = get_select_subquery(sql) %}\n        {% endif %}\n    as (\n        {{ sql }}\n    );\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.get_assert_columns_equivalent", "macro.dbt.get_table_columns_and_constraints", "macro.dbt.get_select_subquery"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722889774.249424, "supported_languages": null}, "macro.dbt_postgres.postgres__get_rename_table_sql": {"name": "postgres__get_rename_table_sql", "resource_type": "macro", "package_name": "dbt_postgres", "path": "macros/relations/table/rename.sql", "original_file_path": "macros/relations/table/rename.sql", "unique_id": "macro.dbt_postgres.postgres__get_rename_table_sql", "macro_sql": "{% macro postgres__get_rename_table_sql(relation, new_name) %}\n    alter table {{ relation }} rename to {{ new_name }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722889774.249574, "supported_languages": null}, "macro.dbt_postgres.postgres__drop_view": {"name": "postgres__drop_view", "resource_type": "macro", "package_name": "dbt_postgres", "path": "macros/relations/view/drop.sql", "original_file_path": "macros/relations/view/drop.sql", "unique_id": "macro.dbt_postgres.postgres__drop_view", "macro_sql": "{% macro postgres__drop_view(relation) -%}\n    drop view if exists {{ relation }} cascade\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722889774.249689, "supported_languages": null}, "macro.dbt_postgres.postgres__get_replace_view_sql": {"name": "postgres__get_replace_view_sql", "resource_type": "macro", "package_name": "dbt_postgres", "path": "macros/relations/view/replace.sql", "original_file_path": "macros/relations/view/replace.sql", "unique_id": "macro.dbt_postgres.postgres__get_replace_view_sql", "macro_sql": "{% macro postgres__get_replace_view_sql(relation, sql) -%}\n\n    {%- set sql_header = config.get('sql_header', none) -%}\n    {{ sql_header if sql_header is not none }}\n\n    create or replace view {{ relation }}\n        {% set contract_config = config.get('contract') %}\n        {% if contract_config.enforced %}\n            {{ get_assert_columns_equivalent(sql) }}\n        {%- endif %}\n    as (\n        {{ sql }}\n    );\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.get_assert_columns_equivalent"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722889774.2501628, "supported_languages": null}, "macro.dbt_postgres.postgres__get_rename_view_sql": {"name": "postgres__get_rename_view_sql", "resource_type": "macro", "package_name": "dbt_postgres", "path": "macros/relations/view/rename.sql", "original_file_path": "macros/relations/view/rename.sql", "unique_id": "macro.dbt_postgres.postgres__get_rename_view_sql", "macro_sql": "{% macro postgres__get_rename_view_sql(relation, new_name) %}\n    alter view {{ relation }} rename to {{ new_name }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722889774.250317, "supported_languages": null}, "macro.dbt_postgres.postgres__dateadd": {"name": "postgres__dateadd", "resource_type": "macro", "package_name": "dbt_postgres", "path": "macros/utils/dateadd.sql", "original_file_path": "macros/utils/dateadd.sql", "unique_id": "macro.dbt_postgres.postgres__dateadd", "macro_sql": "{% macro postgres__dateadd(datepart, interval, from_date_or_timestamp) %}\n\n    {{ from_date_or_timestamp }} + ((interval '1 {{ datepart }}') * ({{ interval }}))\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722889774.250505, "supported_languages": null}, "macro.dbt_postgres.postgres__listagg": {"name": "postgres__listagg", "resource_type": "macro", "package_name": "dbt_postgres", "path": "macros/utils/listagg.sql", "original_file_path": "macros/utils/listagg.sql", "unique_id": "macro.dbt_postgres.postgres__listagg", "macro_sql": "{% macro postgres__listagg(measure, delimiter_text, order_by_clause, limit_num) -%}\n\n    {% if limit_num -%}\n    array_to_string(\n        (array_agg(\n            {{ measure }}\n            {% if order_by_clause -%}\n            {{ order_by_clause }}\n            {%- endif %}\n        ))[1:{{ limit_num }}],\n        {{ delimiter_text }}\n        )\n    {%- else %}\n    string_agg(\n        {{ measure }},\n        {{ delimiter_text }}\n        {% if order_by_clause -%}\n        {{ order_by_clause }}\n        {%- endif %}\n        )\n    {%- endif %}\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722889774.251043, "supported_languages": null}, "macro.dbt_postgres.postgres__datediff": {"name": "postgres__datediff", "resource_type": "macro", "package_name": "dbt_postgres", "path": "macros/utils/datediff.sql", "original_file_path": "macros/utils/datediff.sql", "unique_id": "macro.dbt_postgres.postgres__datediff", "macro_sql": "{% macro postgres__datediff(first_date, second_date, datepart) -%}\n\n    {% if datepart == 'year' %}\n        (date_part('year', ({{second_date}})::date) - date_part('year', ({{first_date}})::date))\n    {% elif datepart == 'quarter' %}\n        ({{ datediff(first_date, second_date, 'year') }} * 4 + date_part('quarter', ({{second_date}})::date) - date_part('quarter', ({{first_date}})::date))\n    {% elif datepart == 'month' %}\n        ({{ datediff(first_date, second_date, 'year') }} * 12 + date_part('month', ({{second_date}})::date) - date_part('month', ({{first_date}})::date))\n    {% elif datepart == 'day' %}\n        (({{second_date}})::date - ({{first_date}})::date)\n    {% elif datepart == 'week' %}\n        ({{ datediff(first_date, second_date, 'day') }} / 7 + case\n            when date_part('dow', ({{first_date}})::timestamp) <= date_part('dow', ({{second_date}})::timestamp) then\n                case when {{first_date}} <= {{second_date}} then 0 else -1 end\n            else\n                case when {{first_date}} <= {{second_date}} then 1 else 0 end\n        end)\n    {% elif datepart == 'hour' %}\n        ({{ datediff(first_date, second_date, 'day') }} * 24 + date_part('hour', ({{second_date}})::timestamp) - date_part('hour', ({{first_date}})::timestamp))\n    {% elif datepart == 'minute' %}\n        ({{ datediff(first_date, second_date, 'hour') }} * 60 + date_part('minute', ({{second_date}})::timestamp) - date_part('minute', ({{first_date}})::timestamp))\n    {% elif datepart == 'second' %}\n        ({{ datediff(first_date, second_date, 'minute') }} * 60 + floor(date_part('second', ({{second_date}})::timestamp)) - floor(date_part('second', ({{first_date}})::timestamp)))\n    {% elif datepart == 'millisecond' %}\n        ({{ datediff(first_date, second_date, 'minute') }} * 60000 + floor(date_part('millisecond', ({{second_date}})::timestamp)) - floor(date_part('millisecond', ({{first_date}})::timestamp)))\n    {% elif datepart == 'microsecond' %}\n        ({{ datediff(first_date, second_date, 'minute') }} * 60000000 + floor(date_part('microsecond', ({{second_date}})::timestamp)) - floor(date_part('microsecond', ({{first_date}})::timestamp)))\n    {% else %}\n        {{ exceptions.raise_compiler_error(\"Unsupported datepart for macro datediff in postgres: {!r}\".format(datepart)) }}\n    {% endif %}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.datediff"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722889774.253865, "supported_languages": null}, "macro.dbt_postgres.postgres__any_value": {"name": "postgres__any_value", "resource_type": "macro", "package_name": "dbt_postgres", "path": "macros/utils/any_value.sql", "original_file_path": "macros/utils/any_value.sql", "unique_id": "macro.dbt_postgres.postgres__any_value", "macro_sql": "{% macro postgres__any_value(expression) -%}\n\n    min({{ expression }})\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722889774.2540102, "supported_languages": null}, "macro.dbt_postgres.postgres__last_day": {"name": "postgres__last_day", "resource_type": "macro", "package_name": "dbt_postgres", "path": "macros/utils/last_day.sql", "original_file_path": "macros/utils/last_day.sql", "unique_id": "macro.dbt_postgres.postgres__last_day", "macro_sql": "{% macro postgres__last_day(date, datepart) -%}\n\n    {%- if datepart == 'quarter' -%}\n    -- postgres dateadd does not support quarter interval.\n    cast(\n        {{dbt.dateadd('day', '-1',\n        dbt.dateadd('month', '3', dbt.date_trunc(datepart, date))\n        )}}\n        as date)\n    {%- else -%}\n    {{dbt.default_last_day(date, datepart)}}\n    {%- endif -%}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.dateadd", "macro.dbt.date_trunc", "macro.dbt.default_last_day"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722889774.254454, "supported_languages": null}, "macro.dbt_postgres.postgres__split_part": {"name": "postgres__split_part", "resource_type": "macro", "package_name": "dbt_postgres", "path": "macros/utils/split_part.sql", "original_file_path": "macros/utils/split_part.sql", "unique_id": "macro.dbt_postgres.postgres__split_part", "macro_sql": "{% macro postgres__split_part(string_text, delimiter_text, part_number) %}\n\n  {% if part_number >= 0 %}\n    {{ dbt.default__split_part(string_text, delimiter_text, part_number) }}\n  {% else %}\n    {{ dbt._split_part_negative(string_text, delimiter_text, part_number) }}\n  {% endif %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__split_part", "macro.dbt._split_part_negative"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722889774.254804, "supported_languages": null}, "macro.dbt.run_hooks": {"name": "run_hooks", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/hooks.sql", "original_file_path": "macros/materializations/hooks.sql", "unique_id": "macro.dbt.run_hooks", "macro_sql": "{% macro run_hooks(hooks, inside_transaction=True) %}\n  {% for hook in hooks | selectattr('transaction', 'equalto', inside_transaction)  %}\n    {% if not inside_transaction and loop.first %}\n      {% call statement(auto_begin=inside_transaction) %}\n        commit;\n      {% endcall %}\n    {% endif %}\n    {% set rendered = render(hook.get('sql')) | trim %}\n    {% if (rendered | length) > 0 %}\n      {% call statement(auto_begin=inside_transaction) %}\n        {{ rendered }}\n      {% endcall %}\n    {% endif %}\n  {% endfor %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722889774.255827, "supported_languages": null}, "macro.dbt.make_hook_config": {"name": "make_hook_config", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/hooks.sql", "original_file_path": "macros/materializations/hooks.sql", "unique_id": "macro.dbt.make_hook_config", "macro_sql": "{% macro make_hook_config(sql, inside_transaction) %}\n    {{ tojson({\"sql\": sql, \"transaction\": inside_transaction}) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722889774.2560089, "supported_languages": null}, "macro.dbt.before_begin": {"name": "before_begin", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/hooks.sql", "original_file_path": "macros/materializations/hooks.sql", "unique_id": "macro.dbt.before_begin", "macro_sql": "{% macro before_begin(sql) %}\n    {{ make_hook_config(sql, inside_transaction=False) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.make_hook_config"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722889774.2561479, "supported_languages": null}, "macro.dbt.in_transaction": {"name": "in_transaction", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/hooks.sql", "original_file_path": "macros/materializations/hooks.sql", "unique_id": "macro.dbt.in_transaction", "macro_sql": "{% macro in_transaction(sql) %}\n    {{ make_hook_config(sql, inside_transaction=True) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.make_hook_config"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722889774.256278, "supported_languages": null}, "macro.dbt.after_commit": {"name": "after_commit", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/hooks.sql", "original_file_path": "macros/materializations/hooks.sql", "unique_id": "macro.dbt.after_commit", "macro_sql": "{% macro after_commit(sql) %}\n    {{ make_hook_config(sql, inside_transaction=False) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.make_hook_config"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722889774.2564101, "supported_languages": null}, "macro.dbt.set_sql_header": {"name": "set_sql_header", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/configs.sql", "original_file_path": "macros/materializations/configs.sql", "unique_id": "macro.dbt.set_sql_header", "macro_sql": "{% macro set_sql_header(config) -%}\n  {{ config.set('sql_header', caller()) }}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722889774.2567449, "supported_languages": null}, "macro.dbt.should_full_refresh": {"name": "should_full_refresh", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/configs.sql", "original_file_path": "macros/materializations/configs.sql", "unique_id": "macro.dbt.should_full_refresh", "macro_sql": "{% macro should_full_refresh() %}\n  {% set config_full_refresh = config.get('full_refresh') %}\n  {% if config_full_refresh is none %}\n    {% set config_full_refresh = flags.FULL_REFRESH %}\n  {% endif %}\n  {% do return(config_full_refresh) %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722889774.25701, "supported_languages": null}, "macro.dbt.should_store_failures": {"name": "should_store_failures", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/configs.sql", "original_file_path": "macros/materializations/configs.sql", "unique_id": "macro.dbt.should_store_failures", "macro_sql": "{% macro should_store_failures() %}\n  {% set config_store_failures = config.get('store_failures') %}\n  {% if config_store_failures is none %}\n    {% set config_store_failures = flags.STORE_FAILURES %}\n  {% endif %}\n  {% do return(config_store_failures) %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722889774.25727, "supported_languages": null}, "macro.dbt.snapshot_merge_sql": {"name": "snapshot_merge_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/snapshot_merge.sql", "original_file_path": "macros/materializations/snapshots/snapshot_merge.sql", "unique_id": "macro.dbt.snapshot_merge_sql", "macro_sql": "{% macro snapshot_merge_sql(target, source, insert_cols) -%}\n  {{ adapter.dispatch('snapshot_merge_sql', 'dbt')(target, source, insert_cols) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_postgres.postgres__snapshot_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722889774.257664, "supported_languages": null}, "macro.dbt.default__snapshot_merge_sql": {"name": "default__snapshot_merge_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/snapshot_merge.sql", "original_file_path": "macros/materializations/snapshots/snapshot_merge.sql", "unique_id": "macro.dbt.default__snapshot_merge_sql", "macro_sql": "{% macro default__snapshot_merge_sql(target, source, insert_cols) -%}\n    {%- set insert_cols_csv = insert_cols | join(', ') -%}\n\n    merge into {{ target }} as DBT_INTERNAL_DEST\n    using {{ source }} as DBT_INTERNAL_SOURCE\n    on DBT_INTERNAL_SOURCE.dbt_scd_id = DBT_INTERNAL_DEST.dbt_scd_id\n\n    when matched\n     and DBT_INTERNAL_DEST.dbt_valid_to is null\n     and DBT_INTERNAL_SOURCE.dbt_change_type in ('update', 'delete')\n        then update\n        set dbt_valid_to = DBT_INTERNAL_SOURCE.dbt_valid_to\n\n    when not matched\n     and DBT_INTERNAL_SOURCE.dbt_change_type = 'insert'\n        then insert ({{ insert_cols_csv }})\n        values ({{ insert_cols_csv }})\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722889774.257911, "supported_languages": null}, "macro.dbt.strategy_dispatch": {"name": "strategy_dispatch", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/strategies.sql", "original_file_path": "macros/materializations/snapshots/strategies.sql", "unique_id": "macro.dbt.strategy_dispatch", "macro_sql": "{% macro strategy_dispatch(name) -%}\n{% set original_name = name %}\n  {% if '.' in name %}\n    {% set package_name, name = name.split(\".\", 1) %}\n  {% else %}\n    {% set package_name = none %}\n  {% endif %}\n\n  {% if package_name is none %}\n    {% set package_context = context %}\n  {% elif package_name in context %}\n    {% set package_context = context[package_name] %}\n  {% else %}\n    {% set error_msg %}\n        Could not find package '{{package_name}}', called with '{{original_name}}'\n    {% endset %}\n    {{ exceptions.raise_compiler_error(error_msg | trim) }}\n  {% endif %}\n\n  {%- set search_name = 'snapshot_' ~ name ~ '_strategy' -%}\n\n  {% if search_name not in package_context %}\n    {% set error_msg %}\n        The specified strategy macro '{{name}}' was not found in package '{{ package_name }}'\n    {% endset %}\n    {{ exceptions.raise_compiler_error(error_msg | trim) }}\n  {% endif %}\n  {{ return(package_context[search_name]) }}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722889774.26109, "supported_languages": null}, "macro.dbt.snapshot_hash_arguments": {"name": "snapshot_hash_arguments", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/strategies.sql", "original_file_path": "macros/materializations/snapshots/strategies.sql", "unique_id": "macro.dbt.snapshot_hash_arguments", "macro_sql": "{% macro snapshot_hash_arguments(args) -%}\n  {{ adapter.dispatch('snapshot_hash_arguments', 'dbt')(args) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__snapshot_hash_arguments"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722889774.261259, "supported_languages": null}, "macro.dbt.default__snapshot_hash_arguments": {"name": "default__snapshot_hash_arguments", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/strategies.sql", "original_file_path": "macros/materializations/snapshots/strategies.sql", "unique_id": "macro.dbt.default__snapshot_hash_arguments", "macro_sql": "{% macro default__snapshot_hash_arguments(args) -%}\n    md5({%- for arg in args -%}\n        coalesce(cast({{ arg }} as varchar ), '')\n        {% if not loop.last %} || '|' || {% endif %}\n    {%- endfor -%})\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722889774.261461, "supported_languages": null}, "macro.dbt.snapshot_timestamp_strategy": {"name": "snapshot_timestamp_strategy", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/strategies.sql", "original_file_path": "macros/materializations/snapshots/strategies.sql", "unique_id": "macro.dbt.snapshot_timestamp_strategy", "macro_sql": "{% macro snapshot_timestamp_strategy(node, snapshotted_rel, current_rel, config, target_exists) %}\n    {% set primary_key = config['unique_key'] %}\n    {% set updated_at = config['updated_at'] %}\n    {% set invalidate_hard_deletes = config.get('invalidate_hard_deletes', false) %}\n\n    {#/*\n        The snapshot relation might not have an {{ updated_at }} value if the\n        snapshot strategy is changed from `check` to `timestamp`. We\n        should use a dbt-created column for the comparison in the snapshot\n        table instead of assuming that the user-supplied {{ updated_at }}\n        will be present in the historical data.\n\n        See https://github.com/dbt-labs/dbt-core/issues/2350\n    */ #}\n    {% set row_changed_expr -%}\n        ({{ snapshotted_rel }}.dbt_valid_from < {{ current_rel }}.{{ updated_at }})\n    {%- endset %}\n\n    {% set scd_id_expr = snapshot_hash_arguments([primary_key, updated_at]) %}\n\n    {% do return({\n        \"unique_key\": primary_key,\n        \"updated_at\": updated_at,\n        \"row_changed\": row_changed_expr,\n        \"scd_id\": scd_id_expr,\n        \"invalidate_hard_deletes\": invalidate_hard_deletes\n    }) %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.snapshot_hash_arguments"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722889774.26209, "supported_languages": null}, "macro.dbt.snapshot_string_as_time": {"name": "snapshot_string_as_time", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/strategies.sql", "original_file_path": "macros/materializations/snapshots/strategies.sql", "unique_id": "macro.dbt.snapshot_string_as_time", "macro_sql": "{% macro snapshot_string_as_time(timestamp) -%}\n    {{ adapter.dispatch('snapshot_string_as_time', 'dbt')(timestamp) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_postgres.postgres__snapshot_string_as_time"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722889774.2622411, "supported_languages": null}, "macro.dbt.default__snapshot_string_as_time": {"name": "default__snapshot_string_as_time", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/strategies.sql", "original_file_path": "macros/materializations/snapshots/strategies.sql", "unique_id": "macro.dbt.default__snapshot_string_as_time", "macro_sql": "{% macro default__snapshot_string_as_time(timestamp) %}\n    {% do exceptions.raise_not_implemented(\n        'snapshot_string_as_time macro not implemented for adapter '+adapter.type()\n    ) %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722889774.262393, "supported_languages": null}, "macro.dbt.snapshot_check_all_get_existing_columns": {"name": "snapshot_check_all_get_existing_columns", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/strategies.sql", "original_file_path": "macros/materializations/snapshots/strategies.sql", "unique_id": "macro.dbt.snapshot_check_all_get_existing_columns", "macro_sql": "{% macro snapshot_check_all_get_existing_columns(node, target_exists, check_cols_config) -%}\n    {%- if not target_exists -%}\n        {#-- no table yet -> return whatever the query does --#}\n        {{ return((false, query_columns)) }}\n    {%- endif -%}\n\n    {#-- handle any schema changes --#}\n    {%- set target_relation = adapter.get_relation(database=node.database, schema=node.schema, identifier=node.alias) -%}\n\n    {% if check_cols_config == 'all' %}\n        {%- set query_columns = get_columns_in_query(node['compiled_code']) -%}\n\n    {% elif check_cols_config is iterable and (check_cols_config | length) > 0 %}\n        {#-- query for proper casing/quoting, to support comparison below --#}\n        {%- set select_check_cols_from_target -%}\n            {#-- N.B. The whitespace below is necessary to avoid edge case issue with comments --#}\n            {#-- See: https://github.com/dbt-labs/dbt-core/issues/6781 --#}\n            select {{ check_cols_config | join(', ') }} from (\n                {{ node['compiled_code'] }}\n            ) subq\n        {%- endset -%}\n        {% set query_columns = get_columns_in_query(select_check_cols_from_target) %}\n\n    {% else %}\n        {% do exceptions.raise_compiler_error(\"Invalid value for 'check_cols': \" ~ check_cols_config) %}\n    {% endif %}\n\n    {%- set existing_cols = adapter.get_columns_in_relation(target_relation) | map(attribute = 'name') | list -%}\n    {%- set ns = namespace() -%} {#-- handle for-loop scoping with a namespace --#}\n    {%- set ns.column_added = false -%}\n\n    {%- set intersection = [] -%}\n    {%- for col in query_columns -%}\n        {%- if col in existing_cols -%}\n            {%- do intersection.append(adapter.quote(col)) -%}\n        {%- else -%}\n            {% set ns.column_added = true %}\n        {%- endif -%}\n    {%- endfor -%}\n    {{ return((ns.column_added, intersection)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.get_columns_in_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722889774.263595, "supported_languages": null}, "macro.dbt.snapshot_check_strategy": {"name": "snapshot_check_strategy", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/strategies.sql", "original_file_path": "macros/materializations/snapshots/strategies.sql", "unique_id": "macro.dbt.snapshot_check_strategy", "macro_sql": "{% macro snapshot_check_strategy(node, snapshotted_rel, current_rel, config, target_exists) %}\n    {% set check_cols_config = config['check_cols'] %}\n    {% set primary_key = config['unique_key'] %}\n    {% set invalidate_hard_deletes = config.get('invalidate_hard_deletes', false) %}\n    {% set updated_at = config.get('updated_at', snapshot_get_time()) %}\n\n    {% set column_added = false %}\n\n    {% set column_added, check_cols = snapshot_check_all_get_existing_columns(node, target_exists, check_cols_config) %}\n\n    {%- set row_changed_expr -%}\n    (\n    {%- if column_added -%}\n        {{ get_true_sql() }}\n    {%- else -%}\n    {%- for col in check_cols -%}\n        {{ snapshotted_rel }}.{{ col }} != {{ current_rel }}.{{ col }}\n        or\n        (\n            (({{ snapshotted_rel }}.{{ col }} is null) and not ({{ current_rel }}.{{ col }} is null))\n            or\n            ((not {{ snapshotted_rel }}.{{ col }} is null) and ({{ current_rel }}.{{ col }} is null))\n        )\n        {%- if not loop.last %} or {% endif -%}\n    {%- endfor -%}\n    {%- endif -%}\n    )\n    {%- endset %}\n\n    {% set scd_id_expr = snapshot_hash_arguments([primary_key, updated_at]) %}\n\n    {% do return({\n        \"unique_key\": primary_key,\n        \"updated_at\": updated_at,\n        \"row_changed\": row_changed_expr,\n        \"scd_id\": scd_id_expr,\n        \"invalidate_hard_deletes\": invalidate_hard_deletes\n    }) %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.snapshot_get_time", "macro.dbt.snapshot_check_all_get_existing_columns", "macro.dbt.get_true_sql", "macro.dbt.snapshot_hash_arguments"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722889774.264768, "supported_languages": null}, "macro.dbt.create_columns": {"name": "create_columns", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "unique_id": "macro.dbt.create_columns", "macro_sql": "{% macro create_columns(relation, columns) %}\n  {{ adapter.dispatch('create_columns', 'dbt')(relation, columns) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__create_columns"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722889774.268267, "supported_languages": null}, "macro.dbt.default__create_columns": {"name": "default__create_columns", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "unique_id": "macro.dbt.default__create_columns", "macro_sql": "{% macro default__create_columns(relation, columns) %}\n  {% for column in columns %}\n    {% call statement() %}\n      alter table {{ relation }} add column \"{{ column.name }}\" {{ column.data_type }};\n    {% endcall %}\n  {% endfor %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722889774.268516, "supported_languages": null}, "macro.dbt.post_snapshot": {"name": "post_snapshot", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "unique_id": "macro.dbt.post_snapshot", "macro_sql": "{% macro post_snapshot(staging_relation) %}\n  {{ adapter.dispatch('post_snapshot', 'dbt')(staging_relation) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__post_snapshot"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722889774.2686698, "supported_languages": null}, "macro.dbt.default__post_snapshot": {"name": "default__post_snapshot", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "unique_id": "macro.dbt.default__post_snapshot", "macro_sql": "{% macro default__post_snapshot(staging_relation) %}\n    {# no-op #}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722889774.2687511, "supported_languages": null}, "macro.dbt.get_true_sql": {"name": "get_true_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "unique_id": "macro.dbt.get_true_sql", "macro_sql": "{% macro get_true_sql() %}\n  {{ adapter.dispatch('get_true_sql', 'dbt')() }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_true_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722889774.268885, "supported_languages": null}, "macro.dbt.default__get_true_sql": {"name": "default__get_true_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "unique_id": "macro.dbt.default__get_true_sql", "macro_sql": "{% macro default__get_true_sql() %}\n    {{ return('TRUE') }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722889774.268988, "supported_languages": null}, "macro.dbt.snapshot_staging_table": {"name": "snapshot_staging_table", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "unique_id": "macro.dbt.snapshot_staging_table", "macro_sql": "{% macro snapshot_staging_table(strategy, source_sql, target_relation) -%}\n  {{ adapter.dispatch('snapshot_staging_table', 'dbt')(strategy, source_sql, target_relation) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__snapshot_staging_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722889774.269165, "supported_languages": null}, "macro.dbt.default__snapshot_staging_table": {"name": "default__snapshot_staging_table", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "unique_id": "macro.dbt.default__snapshot_staging_table", "macro_sql": "{% macro default__snapshot_staging_table(strategy, source_sql, target_relation) -%}\n\n    with snapshot_query as (\n\n        {{ source_sql }}\n\n    ),\n\n    snapshotted_data as (\n\n        select *,\n            {{ strategy.unique_key }} as dbt_unique_key\n\n        from {{ target_relation }}\n        where dbt_valid_to is null\n\n    ),\n\n    insertions_source_data as (\n\n        select\n            *,\n            {{ strategy.unique_key }} as dbt_unique_key,\n            {{ strategy.updated_at }} as dbt_updated_at,\n            {{ strategy.updated_at }} as dbt_valid_from,\n            nullif({{ strategy.updated_at }}, {{ strategy.updated_at }}) as dbt_valid_to,\n            {{ strategy.scd_id }} as dbt_scd_id\n\n        from snapshot_query\n    ),\n\n    updates_source_data as (\n\n        select\n            *,\n            {{ strategy.unique_key }} as dbt_unique_key,\n            {{ strategy.updated_at }} as dbt_updated_at,\n            {{ strategy.updated_at }} as dbt_valid_from,\n            {{ strategy.updated_at }} as dbt_valid_to\n\n        from snapshot_query\n    ),\n\n    {%- if strategy.invalidate_hard_deletes %}\n\n    deletes_source_data as (\n\n        select\n            *,\n            {{ strategy.unique_key }} as dbt_unique_key\n        from snapshot_query\n    ),\n    {% endif %}\n\n    insertions as (\n\n        select\n            'insert' as dbt_change_type,\n            source_data.*\n\n        from insertions_source_data as source_data\n        left outer join snapshotted_data on snapshotted_data.dbt_unique_key = source_data.dbt_unique_key\n        where snapshotted_data.dbt_unique_key is null\n           or (\n                snapshotted_data.dbt_unique_key is not null\n            and (\n                {{ strategy.row_changed }}\n            )\n        )\n\n    ),\n\n    updates as (\n\n        select\n            'update' as dbt_change_type,\n            source_data.*,\n            snapshotted_data.dbt_scd_id\n\n        from updates_source_data as source_data\n        join snapshotted_data on snapshotted_data.dbt_unique_key = source_data.dbt_unique_key\n        where (\n            {{ strategy.row_changed }}\n        )\n    )\n\n    {%- if strategy.invalidate_hard_deletes -%}\n    ,\n\n    deletes as (\n\n        select\n            'delete' as dbt_change_type,\n            source_data.*,\n            {{ snapshot_get_time() }} as dbt_valid_from,\n            {{ snapshot_get_time() }} as dbt_updated_at,\n            {{ snapshot_get_time() }} as dbt_valid_to,\n            snapshotted_data.dbt_scd_id\n\n        from snapshotted_data\n        left join deletes_source_data as source_data on snapshotted_data.dbt_unique_key = source_data.dbt_unique_key\n        where source_data.dbt_unique_key is null\n    )\n    {%- endif %}\n\n    select * from insertions\n    union all\n    select * from updates\n    {%- if strategy.invalidate_hard_deletes %}\n    union all\n    select * from deletes\n    {%- endif %}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.snapshot_get_time"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722889774.269917, "supported_languages": null}, "macro.dbt.build_snapshot_table": {"name": "build_snapshot_table", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "unique_id": "macro.dbt.build_snapshot_table", "macro_sql": "{% macro build_snapshot_table(strategy, sql) -%}\n  {{ adapter.dispatch('build_snapshot_table', 'dbt')(strategy, sql) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__build_snapshot_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722889774.270088, "supported_languages": null}, "macro.dbt.default__build_snapshot_table": {"name": "default__build_snapshot_table", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "unique_id": "macro.dbt.default__build_snapshot_table", "macro_sql": "{% macro default__build_snapshot_table(strategy, sql) %}\n\n    select *,\n        {{ strategy.scd_id }} as dbt_scd_id,\n        {{ strategy.updated_at }} as dbt_updated_at,\n        {{ strategy.updated_at }} as dbt_valid_from,\n        nullif({{ strategy.updated_at }}, {{ strategy.updated_at }}) as dbt_valid_to\n    from (\n        {{ sql }}\n    ) sbq\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722889774.270308, "supported_languages": null}, "macro.dbt.build_snapshot_staging_table": {"name": "build_snapshot_staging_table", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "unique_id": "macro.dbt.build_snapshot_staging_table", "macro_sql": "{% macro build_snapshot_staging_table(strategy, sql, target_relation) %}\n    {% set temp_relation = make_temp_relation(target_relation) %}\n\n    {% set select = snapshot_staging_table(strategy, sql, target_relation) %}\n\n    {% call statement('build_snapshot_staging_relation') %}\n        {{ create_table_as(True, temp_relation, select) }}\n    {% endcall %}\n\n    {% do return(temp_relation) %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.make_temp_relation", "macro.dbt.snapshot_staging_table", "macro.dbt.statement", "macro.dbt.create_table_as"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722889774.2706828, "supported_languages": null}, "macro.dbt.materialization_snapshot_default": {"name": "materialization_snapshot_default", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/snapshot.sql", "original_file_path": "macros/materializations/snapshots/snapshot.sql", "unique_id": "macro.dbt.materialization_snapshot_default", "macro_sql": "{% materialization snapshot, default %}\n  {%- set config = model['config'] -%}\n\n  {%- set target_table = model.get('alias', model.get('name')) -%}\n\n  {%- set strategy_name = config.get('strategy') -%}\n  {%- set unique_key = config.get('unique_key') %}\n  -- grab current tables grants config for comparision later on\n  {%- set grant_config = config.get('grants') -%}\n\n  {% set target_relation_exists, target_relation = get_or_create_relation(\n          database=model.database,\n          schema=model.schema,\n          identifier=target_table,\n          type='table') -%}\n\n  {%- if not target_relation.is_table -%}\n    {% do exceptions.relation_wrong_type(target_relation, 'table') %}\n  {%- endif -%}\n\n\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  {% set strategy_macro = strategy_dispatch(strategy_name) %}\n  {% set strategy = strategy_macro(model, \"snapshotted_data\", \"source_data\", config, target_relation_exists) %}\n\n  {% if not target_relation_exists %}\n\n      {% set build_sql = build_snapshot_table(strategy, model['compiled_code']) %}\n      {% set final_sql = create_table_as(False, target_relation, build_sql) %}\n\n  {% else %}\n\n      {{ adapter.valid_snapshot_target(target_relation) }}\n\n      {% set staging_table = build_snapshot_staging_table(strategy, sql, target_relation) %}\n\n      -- this may no-op if the database does not require column expansion\n      {% do adapter.expand_target_column_types(from_relation=staging_table,\n                                               to_relation=target_relation) %}\n\n      {% set missing_columns = adapter.get_missing_columns(staging_table, target_relation)\n                                   | rejectattr('name', 'equalto', 'dbt_change_type')\n                                   | rejectattr('name', 'equalto', 'DBT_CHANGE_TYPE')\n                                   | rejectattr('name', 'equalto', 'dbt_unique_key')\n                                   | rejectattr('name', 'equalto', 'DBT_UNIQUE_KEY')\n                                   | list %}\n\n      {% do create_columns(target_relation, missing_columns) %}\n\n      {% set source_columns = adapter.get_columns_in_relation(staging_table)\n                                   | rejectattr('name', 'equalto', 'dbt_change_type')\n                                   | rejectattr('name', 'equalto', 'DBT_CHANGE_TYPE')\n                                   | rejectattr('name', 'equalto', 'dbt_unique_key')\n                                   | rejectattr('name', 'equalto', 'DBT_UNIQUE_KEY')\n                                   | list %}\n\n      {% set quoted_source_columns = [] %}\n      {% for column in source_columns %}\n        {% do quoted_source_columns.append(adapter.quote(column.name)) %}\n      {% endfor %}\n\n      {% set final_sql = snapshot_merge_sql(\n            target = target_relation,\n            source = staging_table,\n            insert_cols = quoted_source_columns\n         )\n      %}\n\n  {% endif %}\n\n  {% call statement('main') %}\n      {{ final_sql }}\n  {% endcall %}\n\n  {% set should_revoke = should_revoke(target_relation_exists, full_refresh_mode=False) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n\n  {% do persist_docs(target_relation, model) %}\n\n  {% if not target_relation_exists %}\n    {% do create_indexes(target_relation) %}\n  {% endif %}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  {{ adapter.commit() }}\n\n  {% if staging_table is defined %}\n      {% do post_snapshot(staging_table) %}\n  {% endif %}\n\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{% endmaterialization %}", "depends_on": {"macros": ["macro.dbt.get_or_create_relation", "macro.dbt.run_hooks", "macro.dbt.strategy_dispatch", "macro.dbt.build_snapshot_table", "macro.dbt.create_table_as", "macro.dbt.build_snapshot_staging_table", "macro.dbt.create_columns", "macro.dbt.snapshot_merge_sql", "macro.dbt.statement", "macro.dbt.should_revoke", "macro.dbt.apply_grants", "macro.dbt.persist_docs", "macro.dbt.create_indexes", "macro.dbt.post_snapshot"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722889774.275929, "supported_languages": ["sql"]}, "macro.dbt.materialization_test_default": {"name": "materialization_test_default", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/tests/test.sql", "original_file_path": "macros/materializations/tests/test.sql", "unique_id": "macro.dbt.materialization_test_default", "macro_sql": "{%- materialization test, default -%}\n\n  {% set relations = [] %}\n\n  {% if should_store_failures() %}\n\n    {% set identifier = model['alias'] %}\n    {% set old_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) %}\n\n    {% set store_failures_as = config.get('store_failures_as') %}\n    -- if `--store-failures` is invoked via command line and `store_failures_as` is not set,\n    -- config.get('store_failures_as', 'table') returns None, not 'table'\n    {% if store_failures_as == none %}{% set store_failures_as = 'table' %}{% endif %}\n    {% if store_failures_as not in ['table', 'view'] %}\n        {{ exceptions.raise_compiler_error(\n            \"'\" ~ store_failures_as ~ \"' is not a valid value for `store_failures_as`. \"\n            \"Accepted values are: ['ephemeral', 'table', 'view']\"\n        ) }}\n    {% endif %}\n\n    {% set target_relation = api.Relation.create(\n        identifier=identifier, schema=schema, database=database, type=store_failures_as) -%} %}\n\n    {% if old_relation %}\n        {% do adapter.drop_relation(old_relation) %}\n    {% endif %}\n\n    {% call statement(auto_begin=True) %}\n        {{ get_create_sql(target_relation, sql) }}\n    {% endcall %}\n\n    {% do relations.append(target_relation) %}\n\n    {% set main_sql %}\n        select *\n        from {{ target_relation }}\n    {% endset %}\n\n    {{ adapter.commit() }}\n\n  {% else %}\n\n      {% set main_sql = sql %}\n\n  {% endif %}\n\n  {% set limit = config.get('limit') %}\n  {% set fail_calc = config.get('fail_calc') %}\n  {% set warn_if = config.get('warn_if') %}\n  {% set error_if = config.get('error_if') %}\n\n  {% call statement('main', fetch_result=True) -%}\n\n    {{ get_test_sql(main_sql, fail_calc, warn_if, error_if, limit)}}\n\n  {%- endcall %}\n\n  {{ return({'relations': relations}) }}\n\n{%- endmaterialization -%}", "depends_on": {"macros": ["macro.dbt.should_store_failures", "macro.dbt.statement", "macro.dbt.get_create_sql", "macro.dbt.get_test_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722889774.2782972, "supported_languages": ["sql"]}, "macro.dbt.get_test_sql": {"name": "get_test_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/tests/helpers.sql", "original_file_path": "macros/materializations/tests/helpers.sql", "unique_id": "macro.dbt.get_test_sql", "macro_sql": "{% macro get_test_sql(main_sql, fail_calc, warn_if, error_if, limit) -%}\n  {{ adapter.dispatch('get_test_sql', 'dbt')(main_sql, fail_calc, warn_if, error_if, limit) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_test_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722889774.279296, "supported_languages": null}, "macro.dbt.default__get_test_sql": {"name": "default__get_test_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/tests/helpers.sql", "original_file_path": "macros/materializations/tests/helpers.sql", "unique_id": "macro.dbt.default__get_test_sql", "macro_sql": "{% macro default__get_test_sql(main_sql, fail_calc, warn_if, error_if, limit) -%}\n    select\n      {{ fail_calc }} as failures,\n      {{ fail_calc }} {{ warn_if }} as should_warn,\n      {{ fail_calc }} {{ error_if }} as should_error\n    from (\n      {{ main_sql }}\n      {{ \"limit \" ~ limit if limit != none }}\n    ) dbt_internal_test\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722889774.2795599, "supported_languages": null}, "macro.dbt.get_unit_test_sql": {"name": "get_unit_test_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/tests/helpers.sql", "original_file_path": "macros/materializations/tests/helpers.sql", "unique_id": "macro.dbt.get_unit_test_sql", "macro_sql": "{% macro get_unit_test_sql(main_sql, expected_fixture_sql, expected_column_names) -%}\n  {{ adapter.dispatch('get_unit_test_sql', 'dbt')(main_sql, expected_fixture_sql, expected_column_names) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_unit_test_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722889774.2797399, "supported_languages": null}, "macro.dbt.default__get_unit_test_sql": {"name": "default__get_unit_test_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/tests/helpers.sql", "original_file_path": "macros/materializations/tests/helpers.sql", "unique_id": "macro.dbt.default__get_unit_test_sql", "macro_sql": "{% macro default__get_unit_test_sql(main_sql, expected_fixture_sql, expected_column_names) -%}\n-- Build actual result given inputs\nwith dbt_internal_unit_test_actual as (\n  select\n    {% for expected_column_name in expected_column_names %}{{expected_column_name}}{% if not loop.last -%},{% endif %}{%- endfor -%}, {{ dbt.string_literal(\"actual\") }} as {{ adapter.quote(\"actual_or_expected\") }}\n  from (\n    {{ main_sql }}\n  ) _dbt_internal_unit_test_actual\n),\n-- Build expected result\ndbt_internal_unit_test_expected as (\n  select\n    {% for expected_column_name in expected_column_names %}{{expected_column_name}}{% if not loop.last -%}, {% endif %}{%- endfor -%}, {{ dbt.string_literal(\"expected\") }} as {{ adapter.quote(\"actual_or_expected\") }}\n  from (\n    {{ expected_fixture_sql }}\n  ) _dbt_internal_unit_test_expected\n)\n-- Union actual and expected results\nselect * from dbt_internal_unit_test_actual\nunion all\nselect * from dbt_internal_unit_test_expected\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.string_literal"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722889774.280262, "supported_languages": null}, "macro.dbt.get_where_subquery": {"name": "get_where_subquery", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/tests/where_subquery.sql", "original_file_path": "macros/materializations/tests/where_subquery.sql", "unique_id": "macro.dbt.get_where_subquery", "macro_sql": "{% macro get_where_subquery(relation) -%}\n    {% do return(adapter.dispatch('get_where_subquery', 'dbt')(relation)) %}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_where_subquery"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722889774.2805939, "supported_languages": null}, "macro.dbt.default__get_where_subquery": {"name": "default__get_where_subquery", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/tests/where_subquery.sql", "original_file_path": "macros/materializations/tests/where_subquery.sql", "unique_id": "macro.dbt.default__get_where_subquery", "macro_sql": "{% macro default__get_where_subquery(relation) -%}\n    {% set where = config.get('where', '') %}\n    {% if where %}\n        {%- set filtered -%}\n            (select * from {{ relation }} where {{ where }}) dbt_subquery\n        {%- endset -%}\n        {% do return(filtered) %}\n    {%- else -%}\n        {% do return(relation) %}\n    {%- endif -%}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722889774.280923, "supported_languages": null}, "macro.dbt.materialization_unit_default": {"name": "materialization_unit_default", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/tests/unit.sql", "original_file_path": "macros/materializations/tests/unit.sql", "unique_id": "macro.dbt.materialization_unit_default", "macro_sql": "{%- materialization unit, default -%}\n\n  {% set relations = [] %}\n\n  {% set expected_rows = config.get('expected_rows') %}\n  {% set expected_sql = config.get('expected_sql') %}\n  {% set tested_expected_column_names = expected_rows[0].keys() if (expected_rows | length ) > 0 else get_columns_in_query(sql) %} %}\n\n  {%- set target_relation = this.incorporate(type='table') -%}\n  {%- set temp_relation = make_temp_relation(target_relation)-%}\n  {% do run_query(get_create_table_as_sql(True, temp_relation, get_empty_subquery_sql(sql))) %}\n  {%- set columns_in_relation = adapter.get_columns_in_relation(temp_relation) -%}\n  {%- set column_name_to_data_types = {} -%}\n  {%- for column in columns_in_relation -%}\n  {%-   do column_name_to_data_types.update({column.name|lower: column.data_type}) -%}\n  {%- endfor -%}\n\n  {% if not expected_sql %}\n  {%   set expected_sql = get_expected_sql(expected_rows, column_name_to_data_types) %}\n  {% endif %}\n  {% set unit_test_sql = get_unit_test_sql(sql, expected_sql, tested_expected_column_names) %}\n\n  {% call statement('main', fetch_result=True) -%}\n\n    {{ unit_test_sql }}\n\n  {%- endcall %}\n\n  {% do adapter.drop_relation(temp_relation) %}\n\n  {{ return({'relations': relations}) }}\n\n{%- endmaterialization -%}", "depends_on": {"macros": ["macro.dbt.get_columns_in_query", "macro.dbt.make_temp_relation", "macro.dbt.run_query", "macro.dbt.get_create_table_as_sql", "macro.dbt.get_empty_subquery_sql", "macro.dbt.get_expected_sql", "macro.dbt.get_unit_test_sql", "macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722889774.282454, "supported_languages": ["sql"]}, "macro.dbt.materialization_materialized_view_default": {"name": "materialization_materialized_view_default", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/materialized_view.sql", "original_file_path": "macros/materializations/models/materialized_view.sql", "unique_id": "macro.dbt.materialization_materialized_view_default", "macro_sql": "{% materialization materialized_view, default %}\n    {% set existing_relation = load_cached_relation(this) %}\n    {% set target_relation = this.incorporate(type=this.MaterializedView) %}\n    {% set intermediate_relation = make_intermediate_relation(target_relation) %}\n    {% set backup_relation_type = target_relation.MaterializedView if existing_relation is none else existing_relation.type %}\n    {% set backup_relation = make_backup_relation(target_relation, backup_relation_type) %}\n\n    {{ materialized_view_setup(backup_relation, intermediate_relation, pre_hooks) }}\n\n        {% set build_sql = materialized_view_get_build_sql(existing_relation, target_relation, backup_relation, intermediate_relation) %}\n\n        {% if build_sql == '' %}\n            {{ materialized_view_execute_no_op(target_relation) }}\n        {% else %}\n            {{ materialized_view_execute_build_sql(build_sql, existing_relation, target_relation, post_hooks) }}\n        {% endif %}\n\n    {{ materialized_view_teardown(backup_relation, intermediate_relation, post_hooks) }}\n\n    {{ return({'relations': [target_relation]}) }}\n\n{% endmaterialization %}", "depends_on": {"macros": ["macro.dbt.load_cached_relation", "macro.dbt.make_intermediate_relation", "macro.dbt.make_backup_relation", "macro.dbt.materialized_view_setup", "macro.dbt.materialized_view_get_build_sql", "macro.dbt.materialized_view_execute_no_op", "macro.dbt.materialized_view_execute_build_sql", "macro.dbt.materialized_view_teardown"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722889774.2866912, "supported_languages": ["sql"]}, "macro.dbt.materialized_view_setup": {"name": "materialized_view_setup", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/materialized_view.sql", "original_file_path": "macros/materializations/models/materialized_view.sql", "unique_id": "macro.dbt.materialized_view_setup", "macro_sql": "{% macro materialized_view_setup(backup_relation, intermediate_relation, pre_hooks) %}\n\n    -- backup_relation and intermediate_relation should not already exist in the database\n    -- it's possible these exist because of a previous run that exited unexpectedly\n    {% set preexisting_backup_relation = load_cached_relation(backup_relation) %}\n    {% set preexisting_intermediate_relation = load_cached_relation(intermediate_relation) %}\n\n    -- drop the temp relations if they exist already in the database\n    {{ drop_relation_if_exists(preexisting_backup_relation) }}\n    {{ drop_relation_if_exists(preexisting_intermediate_relation) }}\n\n    {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.load_cached_relation", "macro.dbt.drop_relation_if_exists", "macro.dbt.run_hooks"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722889774.2870882, "supported_languages": null}, "macro.dbt.materialized_view_teardown": {"name": "materialized_view_teardown", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/materialized_view.sql", "original_file_path": "macros/materializations/models/materialized_view.sql", "unique_id": "macro.dbt.materialized_view_teardown", "macro_sql": "{% macro materialized_view_teardown(backup_relation, intermediate_relation, post_hooks) %}\n\n    -- drop the temp relations if they exist to leave the database clean for the next run\n    {{ drop_relation_if_exists(backup_relation) }}\n    {{ drop_relation_if_exists(intermediate_relation) }}\n\n    {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.drop_relation_if_exists", "macro.dbt.run_hooks"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722889774.287323, "supported_languages": null}, "macro.dbt.materialized_view_get_build_sql": {"name": "materialized_view_get_build_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/materialized_view.sql", "original_file_path": "macros/materializations/models/materialized_view.sql", "unique_id": "macro.dbt.materialized_view_get_build_sql", "macro_sql": "{% macro materialized_view_get_build_sql(existing_relation, target_relation, backup_relation, intermediate_relation) %}\n\n    {% set full_refresh_mode = should_full_refresh() %}\n\n    -- determine the scenario we're in: create, full_refresh, alter, refresh data\n    {% if existing_relation is none %}\n        {% set build_sql = get_create_materialized_view_as_sql(target_relation, sql) %}\n    {% elif full_refresh_mode or not existing_relation.is_materialized_view %}\n        {% set build_sql = get_replace_sql(existing_relation, target_relation, sql) %}\n    {% else %}\n\n        -- get config options\n        {% set on_configuration_change = config.get('on_configuration_change') %}\n        {% set configuration_changes = get_materialized_view_configuration_changes(existing_relation, config) %}\n\n        {% if configuration_changes is none %}\n            {% set build_sql = refresh_materialized_view(target_relation) %}\n\n        {% elif on_configuration_change == 'apply' %}\n            {% set build_sql = get_alter_materialized_view_as_sql(target_relation, configuration_changes, sql, existing_relation, backup_relation, intermediate_relation) %}\n        {% elif on_configuration_change == 'continue' %}\n            {% set build_sql = '' %}\n            {{ exceptions.warn(\"Configuration changes were identified and `on_configuration_change` was set to `continue` for `\" ~ target_relation ~ \"`\") }}\n        {% elif on_configuration_change == 'fail' %}\n            {{ exceptions.raise_fail_fast_error(\"Configuration changes were identified and `on_configuration_change` was set to `fail` for `\" ~ target_relation ~ \"`\") }}\n\n        {% else %}\n            -- this only happens if the user provides a value other than `apply`, 'skip', 'fail'\n            {{ exceptions.raise_compiler_error(\"Unexpected configuration scenario\") }}\n\n        {% endif %}\n\n    {% endif %}\n\n    {% do return(build_sql) %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.should_full_refresh", "macro.dbt.get_create_materialized_view_as_sql", "macro.dbt.get_replace_sql", "macro.dbt.get_materialized_view_configuration_changes", "macro.dbt.refresh_materialized_view", "macro.dbt.get_alter_materialized_view_as_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722889774.2886121, "supported_languages": null}, "macro.dbt.materialized_view_execute_no_op": {"name": "materialized_view_execute_no_op", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/materialized_view.sql", "original_file_path": "macros/materializations/models/materialized_view.sql", "unique_id": "macro.dbt.materialized_view_execute_no_op", "macro_sql": "{% macro materialized_view_execute_no_op(target_relation) %}\n    {% do store_raw_result(\n        name=\"main\",\n        message=\"skip \" ~ target_relation,\n        code=\"skip\",\n        rows_affected=\"-1\"\n    ) %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722889774.288813, "supported_languages": null}, "macro.dbt.materialized_view_execute_build_sql": {"name": "materialized_view_execute_build_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/materialized_view.sql", "original_file_path": "macros/materializations/models/materialized_view.sql", "unique_id": "macro.dbt.materialized_view_execute_build_sql", "macro_sql": "{% macro materialized_view_execute_build_sql(build_sql, existing_relation, target_relation, post_hooks) %}\n\n    -- `BEGIN` happens here:\n    {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n    {% set grant_config = config.get('grants') %}\n\n    {% call statement(name=\"main\") %}\n        {{ build_sql }}\n    {% endcall %}\n\n    {% set should_revoke = should_revoke(existing_relation, full_refresh_mode=True) %}\n    {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n\n    {% do persist_docs(target_relation, model) %}\n\n    {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n    {{ adapter.commit() }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.run_hooks", "macro.dbt.statement", "macro.dbt.should_revoke", "macro.dbt.apply_grants", "macro.dbt.persist_docs"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722889774.289363, "supported_languages": null}, "macro.dbt.materialization_view_default": {"name": "materialization_view_default", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/view.sql", "original_file_path": "macros/materializations/models/view.sql", "unique_id": "macro.dbt.materialization_view_default", "macro_sql": "{%- materialization view, default -%}\n\n  {%- set existing_relation = load_cached_relation(this) -%}\n  {%- set target_relation = this.incorporate(type='view') -%}\n  {%- set intermediate_relation =  make_intermediate_relation(target_relation) -%}\n\n  -- the intermediate_relation should not already exist in the database; get_relation\n  -- will return None in that case. Otherwise, we get a relation that we can drop\n  -- later, before we try to use this name for the current operation\n  {%- set preexisting_intermediate_relation = load_cached_relation(intermediate_relation) -%}\n  /*\n     This relation (probably) doesn't exist yet. If it does exist, it's a leftover from\n     a previous run, and we're going to try to drop it immediately. At the end of this\n     materialization, we're going to rename the \"existing_relation\" to this identifier,\n     and then we're going to drop it. In order to make sure we run the correct one of:\n       - drop view ...\n       - drop table ...\n\n     We need to set the type of this relation to be the type of the existing_relation, if it exists,\n     or else \"view\" as a sane default if it does not. Note that if the existing_relation does not\n     exist, then there is nothing to move out of the way and subsequentally drop. In that case,\n     this relation will be effectively unused.\n  */\n  {%- set backup_relation_type = 'view' if existing_relation is none else existing_relation.type -%}\n  {%- set backup_relation = make_backup_relation(target_relation, backup_relation_type) -%}\n  -- as above, the backup_relation should not already exist\n  {%- set preexisting_backup_relation = load_cached_relation(backup_relation) -%}\n  -- grab current tables grants config for comparision later on\n  {% set grant_config = config.get('grants') %}\n\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n  -- drop the temp relations if they exist already in the database\n  {{ drop_relation_if_exists(preexisting_intermediate_relation) }}\n  {{ drop_relation_if_exists(preexisting_backup_relation) }}\n\n  -- `BEGIN` happens here:\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  -- build model\n  {% call statement('main') -%}\n    {{ get_create_view_as_sql(intermediate_relation, sql) }}\n  {%- endcall %}\n\n  -- cleanup\n  -- move the existing view out of the way\n  {% if existing_relation is not none %}\n     /* Do the equivalent of rename_if_exists. 'existing_relation' could have been dropped\n        since the variable was first set. */\n    {% set existing_relation = load_cached_relation(existing_relation) %}\n    {% if existing_relation is not none %}\n        {{ adapter.rename_relation(existing_relation, backup_relation) }}\n    {% endif %}\n  {% endif %}\n  {{ adapter.rename_relation(intermediate_relation, target_relation) }}\n\n  {% set should_revoke = should_revoke(existing_relation, full_refresh_mode=True) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n\n  {% do persist_docs(target_relation, model) %}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  {{ adapter.commit() }}\n\n  {{ drop_relation_if_exists(backup_relation) }}\n\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{%- endmaterialization -%}", "depends_on": {"macros": ["macro.dbt.load_cached_relation", "macro.dbt.make_intermediate_relation", "macro.dbt.make_backup_relation", "macro.dbt.run_hooks", "macro.dbt.drop_relation_if_exists", "macro.dbt.statement", "macro.dbt.get_create_view_as_sql", "macro.dbt.should_revoke", "macro.dbt.apply_grants", "macro.dbt.persist_docs"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722889774.2918432, "supported_languages": ["sql"]}, "macro.dbt.materialization_table_default": {"name": "materialization_table_default", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/table.sql", "original_file_path": "macros/materializations/models/table.sql", "unique_id": "macro.dbt.materialization_table_default", "macro_sql": "{% materialization table, default %}\n\n  {%- set existing_relation = load_cached_relation(this) -%}\n  {%- set target_relation = this.incorporate(type='table') %}\n  {%- set intermediate_relation =  make_intermediate_relation(target_relation) -%}\n  -- the intermediate_relation should not already exist in the database; get_relation\n  -- will return None in that case. Otherwise, we get a relation that we can drop\n  -- later, before we try to use this name for the current operation\n  {%- set preexisting_intermediate_relation = load_cached_relation(intermediate_relation) -%}\n  /*\n      See ../view/view.sql for more information about this relation.\n  */\n  {%- set backup_relation_type = 'table' if existing_relation is none else existing_relation.type -%}\n  {%- set backup_relation = make_backup_relation(target_relation, backup_relation_type) -%}\n  -- as above, the backup_relation should not already exist\n  {%- set preexisting_backup_relation = load_cached_relation(backup_relation) -%}\n  -- grab current tables grants config for comparision later on\n  {% set grant_config = config.get('grants') %}\n\n  -- drop the temp relations if they exist already in the database\n  {{ drop_relation_if_exists(preexisting_intermediate_relation) }}\n  {{ drop_relation_if_exists(preexisting_backup_relation) }}\n\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n  -- `BEGIN` happens here:\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  -- build model\n  {% call statement('main') -%}\n    {{ get_create_table_as_sql(False, intermediate_relation, sql) }}\n  {%- endcall %}\n\n  -- cleanup\n  {% if existing_relation is not none %}\n     /* Do the equivalent of rename_if_exists. 'existing_relation' could have been dropped\n        since the variable was first set. */\n    {% set existing_relation = load_cached_relation(existing_relation) %}\n    {% if existing_relation is not none %}\n        {{ adapter.rename_relation(existing_relation, backup_relation) }}\n    {% endif %}\n  {% endif %}\n\n  {{ adapter.rename_relation(intermediate_relation, target_relation) }}\n\n  {% do create_indexes(target_relation) %}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  {% set should_revoke = should_revoke(existing_relation, full_refresh_mode=True) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n\n  {% do persist_docs(target_relation, model) %}\n\n  -- `COMMIT` happens here\n  {{ adapter.commit() }}\n\n  -- finally, drop the existing/backup relation after the commit\n  {{ drop_relation_if_exists(backup_relation) }}\n\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n  {{ return({'relations': [target_relation]}) }}\n{% endmaterialization %}", "depends_on": {"macros": ["macro.dbt.load_cached_relation", "macro.dbt.make_intermediate_relation", "macro.dbt.make_backup_relation", "macro.dbt.drop_relation_if_exists", "macro.dbt.run_hooks", "macro.dbt.statement", "macro.dbt.get_create_table_as_sql", "macro.dbt.create_indexes", "macro.dbt.should_revoke", "macro.dbt.apply_grants", "macro.dbt.persist_docs"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722889774.2943192, "supported_languages": ["sql"]}, "macro.dbt.get_quoted_csv": {"name": "get_quoted_csv", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/column_helpers.sql", "original_file_path": "macros/materializations/models/incremental/column_helpers.sql", "unique_id": "macro.dbt.get_quoted_csv", "macro_sql": "{% macro get_quoted_csv(column_names) %}\n\n    {% set quoted = [] %}\n    {% for col in column_names -%}\n        {%- do quoted.append(adapter.quote(col)) -%}\n    {%- endfor %}\n\n    {%- set dest_cols_csv = quoted | join(', ') -%}\n    {{ return(dest_cols_csv) }}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722889774.2957199, "supported_languages": null}, "macro.dbt.diff_columns": {"name": "diff_columns", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/column_helpers.sql", "original_file_path": "macros/materializations/models/incremental/column_helpers.sql", "unique_id": "macro.dbt.diff_columns", "macro_sql": "{% macro diff_columns(source_columns, target_columns) %}\n\n  {% set result = [] %}\n  {% set source_names = source_columns | map(attribute = 'column') | list %}\n  {% set target_names = target_columns | map(attribute = 'column') | list %}\n\n   {# --check whether the name attribute exists in the target - this does not perform a data type check #}\n   {% for sc in source_columns %}\n     {% if sc.name not in target_names %}\n        {{ result.append(sc) }}\n     {% endif %}\n   {% endfor %}\n\n  {{ return(result) }}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722889774.296192, "supported_languages": null}, "macro.dbt.diff_column_data_types": {"name": "diff_column_data_types", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/column_helpers.sql", "original_file_path": "macros/materializations/models/incremental/column_helpers.sql", "unique_id": "macro.dbt.diff_column_data_types", "macro_sql": "{% macro diff_column_data_types(source_columns, target_columns) %}\n\n  {% set result = [] %}\n  {% for sc in source_columns %}\n    {% set tc = target_columns | selectattr(\"name\", \"equalto\", sc.name) | list | first %}\n    {% if tc %}\n      {% if sc.data_type != tc.data_type and not sc.can_expand_to(other_column=tc) %}\n        {{ result.append( { 'column_name': tc.name, 'new_type': sc.data_type } ) }}\n      {% endif %}\n    {% endif %}\n  {% endfor %}\n\n  {{ return(result) }}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722889774.2967591, "supported_languages": null}, "macro.dbt.get_merge_update_columns": {"name": "get_merge_update_columns", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/column_helpers.sql", "original_file_path": "macros/materializations/models/incremental/column_helpers.sql", "unique_id": "macro.dbt.get_merge_update_columns", "macro_sql": "{% macro get_merge_update_columns(merge_update_columns, merge_exclude_columns, dest_columns) %}\n  {{ return(adapter.dispatch('get_merge_update_columns', 'dbt')(merge_update_columns, merge_exclude_columns, dest_columns)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_merge_update_columns"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722889774.2969642, "supported_languages": null}, "macro.dbt.default__get_merge_update_columns": {"name": "default__get_merge_update_columns", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/column_helpers.sql", "original_file_path": "macros/materializations/models/incremental/column_helpers.sql", "unique_id": "macro.dbt.default__get_merge_update_columns", "macro_sql": "{% macro default__get_merge_update_columns(merge_update_columns, merge_exclude_columns, dest_columns) %}\n  {%- set default_cols = dest_columns | map(attribute=\"quoted\") | list -%}\n\n  {%- if merge_update_columns and merge_exclude_columns -%}\n    {{ exceptions.raise_compiler_error(\n        'Model cannot specify merge_update_columns and merge_exclude_columns. Please update model to use only one config'\n    )}}\n  {%- elif merge_update_columns -%}\n    {%- set update_columns = merge_update_columns -%}\n  {%- elif merge_exclude_columns -%}\n    {%- set update_columns = [] -%}\n    {%- for column in dest_columns -%}\n      {% if column.column | lower not in merge_exclude_columns | map(\"lower\") | list %}\n        {%- do update_columns.append(column.quoted) -%}\n      {% endif %}\n    {%- endfor -%}\n  {%- else -%}\n    {%- set update_columns = default_cols -%}\n  {%- endif -%}\n\n  {{ return(update_columns) }}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722889774.29757, "supported_languages": null}, "macro.dbt.get_merge_sql": {"name": "get_merge_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/merge.sql", "original_file_path": "macros/materializations/models/incremental/merge.sql", "unique_id": "macro.dbt.get_merge_sql", "macro_sql": "{% macro get_merge_sql(target, source, unique_key, dest_columns, incremental_predicates=none) -%}\n   -- back compat for old kwarg name\n  {% set incremental_predicates = kwargs.get('predicates', incremental_predicates) %}\n  {{ adapter.dispatch('get_merge_sql', 'dbt')(target, source, unique_key, dest_columns, incremental_predicates) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722889774.3030279, "supported_languages": null}, "macro.dbt.default__get_merge_sql": {"name": "default__get_merge_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/merge.sql", "original_file_path": "macros/materializations/models/incremental/merge.sql", "unique_id": "macro.dbt.default__get_merge_sql", "macro_sql": "{% macro default__get_merge_sql(target, source, unique_key, dest_columns, incremental_predicates=none) -%}\n    {%- set predicates = [] if incremental_predicates is none else [] + incremental_predicates -%}\n    {%- set dest_cols_csv = get_quoted_csv(dest_columns | map(attribute=\"name\")) -%}\n    {%- set merge_update_columns = config.get('merge_update_columns') -%}\n    {%- set merge_exclude_columns = config.get('merge_exclude_columns') -%}\n    {%- set update_columns = get_merge_update_columns(merge_update_columns, merge_exclude_columns, dest_columns) -%}\n    {%- set sql_header = config.get('sql_header', none) -%}\n\n    {% if unique_key %}\n        {% if unique_key is sequence and unique_key is not mapping and unique_key is not string %}\n            {% for key in unique_key %}\n                {% set this_key_match %}\n                    DBT_INTERNAL_SOURCE.{{ key }} = DBT_INTERNAL_DEST.{{ key }}\n                {% endset %}\n                {% do predicates.append(this_key_match) %}\n            {% endfor %}\n        {% else %}\n            {% set unique_key_match %}\n                DBT_INTERNAL_SOURCE.{{ unique_key }} = DBT_INTERNAL_DEST.{{ unique_key }}\n            {% endset %}\n            {% do predicates.append(unique_key_match) %}\n        {% endif %}\n    {% else %}\n        {% do predicates.append('FALSE') %}\n    {% endif %}\n\n    {{ sql_header if sql_header is not none }}\n\n    merge into {{ target }} as DBT_INTERNAL_DEST\n        using {{ source }} as DBT_INTERNAL_SOURCE\n        on {{\"(\" ~ predicates | join(\") and (\") ~ \")\"}}\n\n    {% if unique_key %}\n    when matched then update set\n        {% for column_name in update_columns -%}\n            {{ column_name }} = DBT_INTERNAL_SOURCE.{{ column_name }}\n            {%- if not loop.last %}, {%- endif %}\n        {%- endfor %}\n    {% endif %}\n\n    when not matched then insert\n        ({{ dest_cols_csv }})\n    values\n        ({{ dest_cols_csv }})\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_quoted_csv", "macro.dbt.get_merge_update_columns"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722889774.304487, "supported_languages": null}, "macro.dbt.get_delete_insert_merge_sql": {"name": "get_delete_insert_merge_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/merge.sql", "original_file_path": "macros/materializations/models/incremental/merge.sql", "unique_id": "macro.dbt.get_delete_insert_merge_sql", "macro_sql": "{% macro get_delete_insert_merge_sql(target, source, unique_key, dest_columns, incremental_predicates) -%}\n  {{ adapter.dispatch('get_delete_insert_merge_sql', 'dbt')(target, source, unique_key, dest_columns, incremental_predicates) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_delete_insert_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722889774.304725, "supported_languages": null}, "macro.dbt.default__get_delete_insert_merge_sql": {"name": "default__get_delete_insert_merge_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/merge.sql", "original_file_path": "macros/materializations/models/incremental/merge.sql", "unique_id": "macro.dbt.default__get_delete_insert_merge_sql", "macro_sql": "{% macro default__get_delete_insert_merge_sql(target, source, unique_key, dest_columns, incremental_predicates) -%}\n\n    {%- set dest_cols_csv = get_quoted_csv(dest_columns | map(attribute=\"name\")) -%}\n\n    {% if unique_key %}\n        {% if unique_key is sequence and unique_key is not string %}\n            delete from {{target }}\n            using {{ source }}\n            where (\n                {% for key in unique_key %}\n                    {{ source }}.{{ key }} = {{ target }}.{{ key }}\n                    {{ \"and \" if not loop.last}}\n                {% endfor %}\n                {% if incremental_predicates %}\n                    {% for predicate in incremental_predicates %}\n                        and {{ predicate }}\n                    {% endfor %}\n                {% endif %}\n            );\n        {% else %}\n            delete from {{ target }}\n            where (\n                {{ unique_key }}) in (\n                select ({{ unique_key }})\n                from {{ source }}\n            )\n            {%- if incremental_predicates %}\n                {% for predicate in incremental_predicates %}\n                    and {{ predicate }}\n                {% endfor %}\n            {%- endif -%};\n\n        {% endif %}\n    {% endif %}\n\n    insert into {{ target }} ({{ dest_cols_csv }})\n    (\n        select {{ dest_cols_csv }}\n        from {{ source }}\n    )\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.get_quoted_csv"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722889774.3055859, "supported_languages": null}, "macro.dbt.get_insert_overwrite_merge_sql": {"name": "get_insert_overwrite_merge_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/merge.sql", "original_file_path": "macros/materializations/models/incremental/merge.sql", "unique_id": "macro.dbt.get_insert_overwrite_merge_sql", "macro_sql": "{% macro get_insert_overwrite_merge_sql(target, source, dest_columns, predicates, include_sql_header=false) -%}\n  {{ adapter.dispatch('get_insert_overwrite_merge_sql', 'dbt')(target, source, dest_columns, predicates, include_sql_header) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_insert_overwrite_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722889774.3058188, "supported_languages": null}, "macro.dbt.default__get_insert_overwrite_merge_sql": {"name": "default__get_insert_overwrite_merge_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/merge.sql", "original_file_path": "macros/materializations/models/incremental/merge.sql", "unique_id": "macro.dbt.default__get_insert_overwrite_merge_sql", "macro_sql": "{% macro default__get_insert_overwrite_merge_sql(target, source, dest_columns, predicates, include_sql_header) -%}\n    {#-- The only time include_sql_header is True: --#}\n    {#-- BigQuery + insert_overwrite strategy + \"static\" partitions config --#}\n    {#-- We should consider including the sql header at the materialization level instead --#}\n\n    {%- set predicates = [] if predicates is none else [] + predicates -%}\n    {%- set dest_cols_csv = get_quoted_csv(dest_columns | map(attribute=\"name\")) -%}\n    {%- set sql_header = config.get('sql_header', none) -%}\n\n    {{ sql_header if sql_header is not none and include_sql_header }}\n\n    merge into {{ target }} as DBT_INTERNAL_DEST\n        using {{ source }} as DBT_INTERNAL_SOURCE\n        on FALSE\n\n    when not matched by source\n        {% if predicates %} and {{ predicates | join(' and ') }} {% endif %}\n        then delete\n\n    when not matched then insert\n        ({{ dest_cols_csv }})\n    values\n        ({{ dest_cols_csv }})\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_quoted_csv"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722889774.306391, "supported_languages": null}, "macro.dbt.is_incremental": {"name": "is_incremental", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/is_incremental.sql", "original_file_path": "macros/materializations/models/incremental/is_incremental.sql", "unique_id": "macro.dbt.is_incremental", "macro_sql": "{% macro is_incremental() %}\n    {#-- do not run introspective queries in parsing #}\n    {% if not execute %}\n        {{ return(False) }}\n    {% else %}\n        {% set relation = adapter.get_relation(this.database, this.schema, this.table) %}\n        {{ return(relation is not none\n                  and relation.type == 'table'\n                  and model.config.materialized == 'incremental'\n                  and not should_full_refresh()) }}\n    {% endif %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.should_full_refresh"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722889774.306946, "supported_languages": null}, "macro.dbt.get_incremental_append_sql": {"name": "get_incremental_append_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/strategies.sql", "original_file_path": "macros/materializations/models/incremental/strategies.sql", "unique_id": "macro.dbt.get_incremental_append_sql", "macro_sql": "{% macro get_incremental_append_sql(arg_dict) %}\n\n  {{ return(adapter.dispatch('get_incremental_append_sql', 'dbt')(arg_dict)) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_incremental_append_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722889774.307745, "supported_languages": null}, "macro.dbt.default__get_incremental_append_sql": {"name": "default__get_incremental_append_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/strategies.sql", "original_file_path": "macros/materializations/models/incremental/strategies.sql", "unique_id": "macro.dbt.default__get_incremental_append_sql", "macro_sql": "{% macro default__get_incremental_append_sql(arg_dict) %}\n\n  {% do return(get_insert_into_sql(arg_dict[\"target_relation\"], arg_dict[\"temp_relation\"], arg_dict[\"dest_columns\"])) %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_insert_into_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722889774.307963, "supported_languages": null}, "macro.dbt.get_incremental_delete_insert_sql": {"name": "get_incremental_delete_insert_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/strategies.sql", "original_file_path": "macros/materializations/models/incremental/strategies.sql", "unique_id": "macro.dbt.get_incremental_delete_insert_sql", "macro_sql": "{% macro get_incremental_delete_insert_sql(arg_dict) %}\n\n  {{ return(adapter.dispatch('get_incremental_delete_insert_sql', 'dbt')(arg_dict)) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_incremental_delete_insert_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722889774.308137, "supported_languages": null}, "macro.dbt.default__get_incremental_delete_insert_sql": {"name": "default__get_incremental_delete_insert_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/strategies.sql", "original_file_path": "macros/materializations/models/incremental/strategies.sql", "unique_id": "macro.dbt.default__get_incremental_delete_insert_sql", "macro_sql": "{% macro default__get_incremental_delete_insert_sql(arg_dict) %}\n\n  {% do return(get_delete_insert_merge_sql(arg_dict[\"target_relation\"], arg_dict[\"temp_relation\"], arg_dict[\"unique_key\"], arg_dict[\"dest_columns\"], arg_dict[\"incremental_predicates\"])) %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_delete_insert_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722889774.308413, "supported_languages": null}, "macro.dbt.get_incremental_merge_sql": {"name": "get_incremental_merge_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/strategies.sql", "original_file_path": "macros/materializations/models/incremental/strategies.sql", "unique_id": "macro.dbt.get_incremental_merge_sql", "macro_sql": "{% macro get_incremental_merge_sql(arg_dict) %}\n\n  {{ return(adapter.dispatch('get_incremental_merge_sql', 'dbt')(arg_dict)) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_incremental_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722889774.308581, "supported_languages": null}, "macro.dbt.default__get_incremental_merge_sql": {"name": "default__get_incremental_merge_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/strategies.sql", "original_file_path": "macros/materializations/models/incremental/strategies.sql", "unique_id": "macro.dbt.default__get_incremental_merge_sql", "macro_sql": "{% macro default__get_incremental_merge_sql(arg_dict) %}\n\n  {% do return(get_merge_sql(arg_dict[\"target_relation\"], arg_dict[\"temp_relation\"], arg_dict[\"unique_key\"], arg_dict[\"dest_columns\"], arg_dict[\"incremental_predicates\"])) %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722889774.3088388, "supported_languages": null}, "macro.dbt.get_incremental_insert_overwrite_sql": {"name": "get_incremental_insert_overwrite_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/strategies.sql", "original_file_path": "macros/materializations/models/incremental/strategies.sql", "unique_id": "macro.dbt.get_incremental_insert_overwrite_sql", "macro_sql": "{% macro get_incremental_insert_overwrite_sql(arg_dict) %}\n\n  {{ return(adapter.dispatch('get_incremental_insert_overwrite_sql', 'dbt')(arg_dict)) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_incremental_insert_overwrite_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722889774.309002, "supported_languages": null}, "macro.dbt.default__get_incremental_insert_overwrite_sql": {"name": "default__get_incremental_insert_overwrite_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/strategies.sql", "original_file_path": "macros/materializations/models/incremental/strategies.sql", "unique_id": "macro.dbt.default__get_incremental_insert_overwrite_sql", "macro_sql": "{% macro default__get_incremental_insert_overwrite_sql(arg_dict) %}\n\n  {% do return(get_insert_overwrite_merge_sql(arg_dict[\"target_relation\"], arg_dict[\"temp_relation\"], arg_dict[\"dest_columns\"], arg_dict[\"incremental_predicates\"])) %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_insert_overwrite_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722889774.3092322, "supported_languages": null}, "macro.dbt.get_incremental_default_sql": {"name": "get_incremental_default_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/strategies.sql", "original_file_path": "macros/materializations/models/incremental/strategies.sql", "unique_id": "macro.dbt.get_incremental_default_sql", "macro_sql": "{% macro get_incremental_default_sql(arg_dict) %}\n\n  {{ return(adapter.dispatch('get_incremental_default_sql', 'dbt')(arg_dict)) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_postgres.postgres__get_incremental_default_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722889774.3093991, "supported_languages": null}, "macro.dbt.default__get_incremental_default_sql": {"name": "default__get_incremental_default_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/strategies.sql", "original_file_path": "macros/materializations/models/incremental/strategies.sql", "unique_id": "macro.dbt.default__get_incremental_default_sql", "macro_sql": "{% macro default__get_incremental_default_sql(arg_dict) %}\n\n  {% do return(get_incremental_append_sql(arg_dict)) %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_incremental_append_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722889774.3095338, "supported_languages": null}, "macro.dbt.get_insert_into_sql": {"name": "get_insert_into_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/strategies.sql", "original_file_path": "macros/materializations/models/incremental/strategies.sql", "unique_id": "macro.dbt.get_insert_into_sql", "macro_sql": "{% macro get_insert_into_sql(target_relation, temp_relation, dest_columns) %}\n\n    {%- set dest_cols_csv = get_quoted_csv(dest_columns | map(attribute=\"name\")) -%}\n\n    insert into {{ target_relation }} ({{ dest_cols_csv }})\n    (\n        select {{ dest_cols_csv }}\n        from {{ temp_relation }}\n    )\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_quoted_csv"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722889774.309771, "supported_languages": null}, "macro.dbt.materialization_incremental_default": {"name": "materialization_incremental_default", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/incremental.sql", "original_file_path": "macros/materializations/models/incremental/incremental.sql", "unique_id": "macro.dbt.materialization_incremental_default", "macro_sql": "{% materialization incremental, default -%}\n\n  -- relations\n  {%- set existing_relation = load_cached_relation(this) -%}\n  {%- set target_relation = this.incorporate(type='table') -%}\n  {%- set temp_relation = make_temp_relation(target_relation)-%}\n  {%- set intermediate_relation = make_intermediate_relation(target_relation)-%}\n  {%- set backup_relation_type = 'table' if existing_relation is none else existing_relation.type -%}\n  {%- set backup_relation = make_backup_relation(target_relation, backup_relation_type) -%}\n\n  -- configs\n  {%- set unique_key = config.get('unique_key') -%}\n  {%- set full_refresh_mode = (should_full_refresh()  or existing_relation.is_view) -%}\n  {%- set on_schema_change = incremental_validate_on_schema_change(config.get('on_schema_change'), default='ignore') -%}\n\n  -- the temp_ and backup_ relations should not already exist in the database; get_relation\n  -- will return None in that case. Otherwise, we get a relation that we can drop\n  -- later, before we try to use this name for the current operation. This has to happen before\n  -- BEGIN, in a separate transaction\n  {%- set preexisting_intermediate_relation = load_cached_relation(intermediate_relation)-%}\n  {%- set preexisting_backup_relation = load_cached_relation(backup_relation) -%}\n   -- grab current tables grants config for comparision later on\n  {% set grant_config = config.get('grants') %}\n  {{ drop_relation_if_exists(preexisting_intermediate_relation) }}\n  {{ drop_relation_if_exists(preexisting_backup_relation) }}\n\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n  -- `BEGIN` happens here:\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  {% set to_drop = [] %}\n\n  {% if existing_relation is none %}\n      {% set build_sql = get_create_table_as_sql(False, target_relation, sql) %}\n  {% elif full_refresh_mode %}\n      {% set build_sql = get_create_table_as_sql(False, intermediate_relation, sql) %}\n      {% set need_swap = true %}\n  {% else %}\n    {% do run_query(get_create_table_as_sql(True, temp_relation, sql)) %}\n    {% do adapter.expand_target_column_types(\n             from_relation=temp_relation,\n             to_relation=target_relation) %}\n    {#-- Process schema changes. Returns dict of changes if successful. Use source columns for upserting/merging --#}\n    {% set dest_columns = process_schema_changes(on_schema_change, temp_relation, existing_relation) %}\n    {% if not dest_columns %}\n      {% set dest_columns = adapter.get_columns_in_relation(existing_relation) %}\n    {% endif %}\n\n    {#-- Get the incremental_strategy, the macro to use for the strategy, and build the sql --#}\n    {% set incremental_strategy = config.get('incremental_strategy') or 'default' %}\n    {% set incremental_predicates = config.get('predicates', none) or config.get('incremental_predicates', none) %}\n    {% set strategy_sql_macro_func = adapter.get_incremental_strategy_macro(context, incremental_strategy) %}\n    {% set strategy_arg_dict = ({'target_relation': target_relation, 'temp_relation': temp_relation, 'unique_key': unique_key, 'dest_columns': dest_columns, 'incremental_predicates': incremental_predicates }) %}\n    {% set build_sql = strategy_sql_macro_func(strategy_arg_dict) %}\n\n  {% endif %}\n\n  {% call statement(\"main\") %}\n      {{ build_sql }}\n  {% endcall %}\n\n  {% if need_swap %}\n      {% do adapter.rename_relation(target_relation, backup_relation) %}\n      {% do adapter.rename_relation(intermediate_relation, target_relation) %}\n      {% do to_drop.append(backup_relation) %}\n  {% endif %}\n\n  {% set should_revoke = should_revoke(existing_relation, full_refresh_mode) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n\n  {% do persist_docs(target_relation, model) %}\n\n  {% if existing_relation is none or existing_relation.is_view or should_full_refresh() %}\n    {% do create_indexes(target_relation) %}\n  {% endif %}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  -- `COMMIT` happens here\n  {% do adapter.commit() %}\n\n  {% for rel in to_drop %}\n      {% do adapter.drop_relation(rel) %}\n  {% endfor %}\n\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{%- endmaterialization %}", "depends_on": {"macros": ["macro.dbt.load_cached_relation", "macro.dbt.make_temp_relation", "macro.dbt.make_intermediate_relation", "macro.dbt.make_backup_relation", "macro.dbt.should_full_refresh", "macro.dbt.incremental_validate_on_schema_change", "macro.dbt.drop_relation_if_exists", "macro.dbt.run_hooks", "macro.dbt.get_create_table_as_sql", "macro.dbt.run_query", "macro.dbt.process_schema_changes", "macro.dbt.statement", "macro.dbt.should_revoke", "macro.dbt.apply_grants", "macro.dbt.persist_docs", "macro.dbt.create_indexes"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722889774.3140469, "supported_languages": ["sql"]}, "macro.dbt.incremental_validate_on_schema_change": {"name": "incremental_validate_on_schema_change", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/on_schema_change.sql", "original_file_path": "macros/materializations/models/incremental/on_schema_change.sql", "unique_id": "macro.dbt.incremental_validate_on_schema_change", "macro_sql": "{% macro incremental_validate_on_schema_change(on_schema_change, default='ignore') %}\n\n   {% if on_schema_change not in ['sync_all_columns', 'append_new_columns', 'fail', 'ignore'] %}\n\n     {% set log_message = 'Invalid value for on_schema_change (%s) specified. Setting default value of %s.' % (on_schema_change, default) %}\n     {% do log(log_message) %}\n\n     {{ return(default) }}\n\n   {% else %}\n\n     {{ return(on_schema_change) }}\n\n   {% endif %}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722889774.318796, "supported_languages": null}, "macro.dbt.check_for_schema_changes": {"name": "check_for_schema_changes", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/on_schema_change.sql", "original_file_path": "macros/materializations/models/incremental/on_schema_change.sql", "unique_id": "macro.dbt.check_for_schema_changes", "macro_sql": "{% macro check_for_schema_changes(source_relation, target_relation) %}\n\n  {% set schema_changed = False %}\n\n  {%- set source_columns = adapter.get_columns_in_relation(source_relation) -%}\n  {%- set target_columns = adapter.get_columns_in_relation(target_relation) -%}\n  {%- set source_not_in_target = diff_columns(source_columns, target_columns) -%}\n  {%- set target_not_in_source = diff_columns(target_columns, source_columns) -%}\n\n  {% set new_target_types = diff_column_data_types(source_columns, target_columns) %}\n\n  {% if source_not_in_target != [] %}\n    {% set schema_changed = True %}\n  {% elif target_not_in_source != [] or new_target_types != [] %}\n    {% set schema_changed = True %}\n  {% elif new_target_types != [] %}\n    {% set schema_changed = True %}\n  {% endif %}\n\n  {% set changes_dict = {\n    'schema_changed': schema_changed,\n    'source_not_in_target': source_not_in_target,\n    'target_not_in_source': target_not_in_source,\n    'source_columns': source_columns,\n    'target_columns': target_columns,\n    'new_target_types': new_target_types\n  } %}\n\n  {% set msg %}\n    In {{ target_relation }}:\n        Schema changed: {{ schema_changed }}\n        Source columns not in target: {{ source_not_in_target }}\n        Target columns not in source: {{ target_not_in_source }}\n        New column types: {{ new_target_types }}\n  {% endset %}\n\n  {% do log(msg) %}\n\n  {{ return(changes_dict) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.diff_columns", "macro.dbt.diff_column_data_types"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722889774.319846, "supported_languages": null}, "macro.dbt.sync_column_schemas": {"name": "sync_column_schemas", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/on_schema_change.sql", "original_file_path": "macros/materializations/models/incremental/on_schema_change.sql", "unique_id": "macro.dbt.sync_column_schemas", "macro_sql": "{% macro sync_column_schemas(on_schema_change, target_relation, schema_changes_dict) %}\n\n  {%- set add_to_target_arr = schema_changes_dict['source_not_in_target'] -%}\n\n  {%- if on_schema_change == 'append_new_columns'-%}\n     {%- if add_to_target_arr | length > 0 -%}\n       {%- do alter_relation_add_remove_columns(target_relation, add_to_target_arr, none) -%}\n     {%- endif -%}\n\n  {% elif on_schema_change == 'sync_all_columns' %}\n     {%- set remove_from_target_arr = schema_changes_dict['target_not_in_source'] -%}\n     {%- set new_target_types = schema_changes_dict['new_target_types'] -%}\n\n     {% if add_to_target_arr | length > 0 or remove_from_target_arr | length > 0 %}\n       {%- do alter_relation_add_remove_columns(target_relation, add_to_target_arr, remove_from_target_arr) -%}\n     {% endif %}\n\n     {% if new_target_types != [] %}\n       {% for ntt in new_target_types %}\n         {% set column_name = ntt['column_name'] %}\n         {% set new_type = ntt['new_type'] %}\n         {% do alter_column_type(target_relation, column_name, new_type) %}\n       {% endfor %}\n     {% endif %}\n\n  {% endif %}\n\n  {% set schema_change_message %}\n    In {{ target_relation }}:\n        Schema change approach: {{ on_schema_change }}\n        Columns added: {{ add_to_target_arr }}\n        Columns removed: {{ remove_from_target_arr }}\n        Data types changed: {{ new_target_types }}\n  {% endset %}\n\n  {% do log(schema_change_message) %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.alter_relation_add_remove_columns", "macro.dbt.alter_column_type"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722889774.32087, "supported_languages": null}, "macro.dbt.process_schema_changes": {"name": "process_schema_changes", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/on_schema_change.sql", "original_file_path": "macros/materializations/models/incremental/on_schema_change.sql", "unique_id": "macro.dbt.process_schema_changes", "macro_sql": "{% macro process_schema_changes(on_schema_change, source_relation, target_relation) %}\n\n    {% if on_schema_change == 'ignore' %}\n\n     {{ return({}) }}\n\n    {% else %}\n\n      {% set schema_changes_dict = check_for_schema_changes(source_relation, target_relation) %}\n\n      {% if schema_changes_dict['schema_changed'] %}\n\n        {% if on_schema_change == 'fail' %}\n\n          {% set fail_msg %}\n              The source and target schemas on this incremental model are out of sync!\n              They can be reconciled in several ways:\n                - set the `on_schema_change` config to either append_new_columns or sync_all_columns, depending on your situation.\n                - Re-run the incremental model with `full_refresh: True` to update the target schema.\n                - update the schema manually and re-run the process.\n\n              Additional troubleshooting context:\n                 Source columns not in target: {{ schema_changes_dict['source_not_in_target'] }}\n                 Target columns not in source: {{ schema_changes_dict['target_not_in_source'] }}\n                 New column types: {{ schema_changes_dict['new_target_types'] }}\n          {% endset %}\n\n          {% do exceptions.raise_compiler_error(fail_msg) %}\n\n        {# -- unless we ignore, run the sync operation per the config #}\n        {% else %}\n\n          {% do sync_column_schemas(on_schema_change, target_relation, schema_changes_dict) %}\n\n        {% endif %}\n\n      {% endif %}\n\n      {{ return(schema_changes_dict['source_columns']) }}\n\n    {% endif %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.check_for_schema_changes", "macro.dbt.sync_column_schemas"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722889774.321588, "supported_languages": null}, "macro.dbt.can_clone_table": {"name": "can_clone_table", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/clone/can_clone_table.sql", "original_file_path": "macros/materializations/models/clone/can_clone_table.sql", "unique_id": "macro.dbt.can_clone_table", "macro_sql": "{% macro can_clone_table() %}\n    {{ return(adapter.dispatch('can_clone_table', 'dbt')()) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__can_clone_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722889774.321804, "supported_languages": null}, "macro.dbt.default__can_clone_table": {"name": "default__can_clone_table", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/clone/can_clone_table.sql", "original_file_path": "macros/materializations/models/clone/can_clone_table.sql", "unique_id": "macro.dbt.default__can_clone_table", "macro_sql": "{% macro default__can_clone_table() %}\n    {{ return(False) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722889774.321909, "supported_languages": null}, "macro.dbt.create_or_replace_clone": {"name": "create_or_replace_clone", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/clone/create_or_replace_clone.sql", "original_file_path": "macros/materializations/models/clone/create_or_replace_clone.sql", "unique_id": "macro.dbt.create_or_replace_clone", "macro_sql": "{% macro create_or_replace_clone(this_relation, defer_relation) %}\n    {{ return(adapter.dispatch('create_or_replace_clone', 'dbt')(this_relation, defer_relation)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__create_or_replace_clone"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722889774.322168, "supported_languages": null}, "macro.dbt.default__create_or_replace_clone": {"name": "default__create_or_replace_clone", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/clone/create_or_replace_clone.sql", "original_file_path": "macros/materializations/models/clone/create_or_replace_clone.sql", "unique_id": "macro.dbt.default__create_or_replace_clone", "macro_sql": "{% macro default__create_or_replace_clone(this_relation, defer_relation) %}\n    create or replace table {{ this_relation }} clone {{ defer_relation }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722889774.322285, "supported_languages": null}, "macro.dbt.materialization_clone_default": {"name": "materialization_clone_default", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/clone/clone.sql", "original_file_path": "macros/materializations/models/clone/clone.sql", "unique_id": "macro.dbt.materialization_clone_default", "macro_sql": "{%- materialization clone, default -%}\n\n  {%- set relations = {'relations': []} -%}\n\n  {%- if not defer_relation -%}\n      -- nothing to do\n      {{ log(\"No relation found in state manifest for \" ~ model.unique_id, info=True) }}\n      {{ return(relations) }}\n  {%- endif -%}\n\n  {%- set existing_relation = load_cached_relation(this) -%}\n\n  {%- if existing_relation and not flags.FULL_REFRESH -%}\n      -- noop!\n      {{ log(\"Relation \" ~ existing_relation ~ \" already exists\", info=True) }}\n      {{ return(relations) }}\n  {%- endif -%}\n\n  {%- set other_existing_relation = load_cached_relation(defer_relation) -%}\n\n  -- If this is a database that can do zero-copy cloning of tables, and the other relation is a table, then this will be a table\n  -- Otherwise, this will be a view\n\n  {% set can_clone_table = can_clone_table() %}\n\n  {%- if other_existing_relation and other_existing_relation.type == 'table' and can_clone_table -%}\n\n      {%- set target_relation = this.incorporate(type='table') -%}\n      {% if existing_relation is not none and not existing_relation.is_table %}\n        {{ log(\"Dropping relation \" ~ existing_relation ~ \" because it is of type \" ~ existing_relation.type) }}\n        {{ drop_relation_if_exists(existing_relation) }}\n      {% endif %}\n\n      -- as a general rule, data platforms that can clone tables can also do atomic 'create or replace'\n      {% call statement('main') %}\n          {% if target_relation and defer_relation and target_relation == defer_relation %}\n              {{ log(\"Target relation and defer relation are the same, skipping clone for relation: \" ~ target_relation) }}\n          {% else %}\n              {{ create_or_replace_clone(target_relation, defer_relation) }}\n          {% endif %}\n\n      {% endcall %}\n\n      {% set should_revoke = should_revoke(existing_relation, full_refresh_mode=True) %}\n      {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n      {% do persist_docs(target_relation, model) %}\n\n      {{ return({'relations': [target_relation]}) }}\n\n  {%- else -%}\n\n      {%- set target_relation = this.incorporate(type='view') -%}\n\n      -- reuse the view materialization\n      -- TODO: support actual dispatch for materialization macros\n      -- Tracking ticket: https://github.com/dbt-labs/dbt-core/issues/7799\n      {% set search_name = \"materialization_view_\" ~ adapter.type() %}\n      {% if not search_name in context %}\n          {% set search_name = \"materialization_view_default\" %}\n      {% endif %}\n      {% set materialization_macro = context[search_name] %}\n      {% set relations = materialization_macro() %}\n      {{ return(relations) }}\n\n  {%- endif -%}\n\n{%- endmaterialization -%}", "depends_on": {"macros": ["macro.dbt.load_cached_relation", "macro.dbt.can_clone_table", "macro.dbt.drop_relation_if_exists", "macro.dbt.statement", "macro.dbt.create_or_replace_clone", "macro.dbt.should_revoke", "macro.dbt.apply_grants", "macro.dbt.persist_docs"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722889774.325405, "supported_languages": ["sql"]}, "macro.dbt.materialization_seed_default": {"name": "materialization_seed_default", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/seeds/seed.sql", "original_file_path": "macros/materializations/seeds/seed.sql", "unique_id": "macro.dbt.materialization_seed_default", "macro_sql": "{% materialization seed, default %}\n\n  {%- set identifier = model['alias'] -%}\n  {%- set full_refresh_mode = (should_full_refresh()) -%}\n\n  {%- set old_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) -%}\n\n  {%- set exists_as_table = (old_relation is not none and old_relation.is_table) -%}\n  {%- set exists_as_view = (old_relation is not none and old_relation.is_view) -%}\n\n  {%- set grant_config = config.get('grants') -%}\n  {%- set agate_table = load_agate_table() -%}\n  -- grab current tables grants config for comparison later on\n\n  {%- do store_result('agate_table', response='OK', agate_table=agate_table) -%}\n\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n  -- `BEGIN` happens here:\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  -- build model\n  {% set create_table_sql = \"\" %}\n  {% if exists_as_view %}\n    {{ exceptions.raise_compiler_error(\"Cannot seed to '{}', it is a view\".format(old_relation)) }}\n  {% elif exists_as_table %}\n    {% set create_table_sql = reset_csv_table(model, full_refresh_mode, old_relation, agate_table) %}\n  {% else %}\n    {% set create_table_sql = create_csv_table(model, agate_table) %}\n  {% endif %}\n\n  {% set code = 'CREATE' if full_refresh_mode else 'INSERT' %}\n  {% set rows_affected = (agate_table.rows | length) %}\n  {% set sql = load_csv_rows(model, agate_table) %}\n\n  {% call noop_statement('main', code ~ ' ' ~ rows_affected, code, rows_affected) %}\n    {{ get_csv_sql(create_table_sql, sql) }};\n  {% endcall %}\n\n  {% set target_relation = this.incorporate(type='table') %}\n\n  {% set should_revoke = should_revoke(old_relation, full_refresh_mode) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n\n  {% do persist_docs(target_relation, model) %}\n\n  {% if full_refresh_mode or not exists_as_table %}\n    {% do create_indexes(target_relation) %}\n  {% endif %}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  -- `COMMIT` happens here\n  {{ adapter.commit() }}\n\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{% endmaterialization %}", "depends_on": {"macros": ["macro.dbt.should_full_refresh", "macro.dbt.run_hooks", "macro.dbt.reset_csv_table", "macro.dbt.create_csv_table", "macro.dbt.load_csv_rows", "macro.dbt.noop_statement", "macro.dbt.get_csv_sql", "macro.dbt.should_revoke", "macro.dbt.apply_grants", "macro.dbt.persist_docs", "macro.dbt.create_indexes"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722889774.328185, "supported_languages": ["sql"]}, "macro.dbt.create_csv_table": {"name": "create_csv_table", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "unique_id": "macro.dbt.create_csv_table", "macro_sql": "{% macro create_csv_table(model, agate_table) -%}\n  {{ adapter.dispatch('create_csv_table', 'dbt')(model, agate_table) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__create_csv_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722889774.332496, "supported_languages": null}, "macro.dbt.default__create_csv_table": {"name": "default__create_csv_table", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "unique_id": "macro.dbt.default__create_csv_table", "macro_sql": "{% macro default__create_csv_table(model, agate_table) %}\n  {%- set column_override = model['config'].get('column_types', {}) -%}\n  {%- set quote_seed_column = model['config'].get('quote_columns', None) -%}\n\n  {% set sql %}\n    create table {{ this.render() }} (\n        {%- for col_name in agate_table.column_names -%}\n            {%- set inferred_type = adapter.convert_type(agate_table, loop.index0) -%}\n            {%- set type = column_override.get(col_name, inferred_type) -%}\n            {%- set column_name = (col_name | string) -%}\n            {{ adapter.quote_seed_column(column_name, quote_seed_column) }} {{ type }} {%- if not loop.last -%}, {%- endif -%}\n        {%- endfor -%}\n    )\n  {% endset %}\n\n  {% call statement('_') -%}\n    {{ sql }}\n  {%- endcall %}\n\n  {{ return(sql) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722889774.333272, "supported_languages": null}, "macro.dbt.reset_csv_table": {"name": "reset_csv_table", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "unique_id": "macro.dbt.reset_csv_table", "macro_sql": "{% macro reset_csv_table(model, full_refresh, old_relation, agate_table) -%}\n  {{ adapter.dispatch('reset_csv_table', 'dbt')(model, full_refresh, old_relation, agate_table) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__reset_csv_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722889774.333479, "supported_languages": null}, "macro.dbt.default__reset_csv_table": {"name": "default__reset_csv_table", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "unique_id": "macro.dbt.default__reset_csv_table", "macro_sql": "{% macro default__reset_csv_table(model, full_refresh, old_relation, agate_table) %}\n    {% set sql = \"\" %}\n    {% if full_refresh %}\n        {{ adapter.drop_relation(old_relation) }}\n        {% set sql = create_csv_table(model, agate_table) %}\n    {% else %}\n        {{ adapter.truncate_relation(old_relation) }}\n        {% set sql = \"truncate table \" ~ old_relation %}\n    {% endif %}\n\n    {{ return(sql) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.create_csv_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722889774.333895, "supported_languages": null}, "macro.dbt.get_csv_sql": {"name": "get_csv_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "unique_id": "macro.dbt.get_csv_sql", "macro_sql": "{% macro get_csv_sql(create_or_truncate_sql, insert_sql) %}\n    {{ adapter.dispatch('get_csv_sql', 'dbt')(create_or_truncate_sql, insert_sql) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_csv_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722889774.334062, "supported_languages": null}, "macro.dbt.default__get_csv_sql": {"name": "default__get_csv_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "unique_id": "macro.dbt.default__get_csv_sql", "macro_sql": "{% macro default__get_csv_sql(create_or_truncate_sql, insert_sql) %}\n    {{ create_or_truncate_sql }};\n    -- dbt seed --\n    {{ insert_sql }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722889774.334176, "supported_languages": null}, "macro.dbt.get_binding_char": {"name": "get_binding_char", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "unique_id": "macro.dbt.get_binding_char", "macro_sql": "{% macro get_binding_char() -%}\n  {{ adapter.dispatch('get_binding_char', 'dbt')() }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_binding_char"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722889774.334303, "supported_languages": null}, "macro.dbt.default__get_binding_char": {"name": "default__get_binding_char", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "unique_id": "macro.dbt.default__get_binding_char", "macro_sql": "{% macro default__get_binding_char() %}\n  {{ return('%s') }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722889774.334406, "supported_languages": null}, "macro.dbt.get_batch_size": {"name": "get_batch_size", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "unique_id": "macro.dbt.get_batch_size", "macro_sql": "{% macro get_batch_size() -%}\n  {{ return(adapter.dispatch('get_batch_size', 'dbt')()) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_batch_size"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722889774.334549, "supported_languages": null}, "macro.dbt.default__get_batch_size": {"name": "default__get_batch_size", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "unique_id": "macro.dbt.default__get_batch_size", "macro_sql": "{% macro default__get_batch_size() %}\n  {{ return(10000) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722889774.334657, "supported_languages": null}, "macro.dbt.get_seed_column_quoted_csv": {"name": "get_seed_column_quoted_csv", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "unique_id": "macro.dbt.get_seed_column_quoted_csv", "macro_sql": "{% macro get_seed_column_quoted_csv(model, column_names) %}\n  {%- set quote_seed_column = model['config'].get('quote_columns', None) -%}\n    {% set quoted = [] %}\n    {% for col in column_names -%}\n        {%- do quoted.append(adapter.quote_seed_column(col, quote_seed_column)) -%}\n    {%- endfor %}\n\n    {%- set dest_cols_csv = quoted | join(', ') -%}\n    {{ return(dest_cols_csv) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722889774.3350668, "supported_languages": null}, "macro.dbt.load_csv_rows": {"name": "load_csv_rows", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "unique_id": "macro.dbt.load_csv_rows", "macro_sql": "{% macro load_csv_rows(model, agate_table) -%}\n  {{ adapter.dispatch('load_csv_rows', 'dbt')(model, agate_table) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__load_csv_rows"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722889774.335229, "supported_languages": null}, "macro.dbt.default__load_csv_rows": {"name": "default__load_csv_rows", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "unique_id": "macro.dbt.default__load_csv_rows", "macro_sql": "{% macro default__load_csv_rows(model, agate_table) %}\n\n  {% set batch_size = get_batch_size() %}\n\n  {% set cols_sql = get_seed_column_quoted_csv(model, agate_table.column_names) %}\n  {% set bindings = [] %}\n\n  {% set statements = [] %}\n\n  {% for chunk in agate_table.rows | batch(batch_size) %}\n      {% set bindings = [] %}\n\n      {% for row in chunk %}\n          {% do bindings.extend(row) %}\n      {% endfor %}\n\n      {% set sql %}\n          insert into {{ this.render() }} ({{ cols_sql }}) values\n          {% for row in chunk -%}\n              ({%- for column in agate_table.column_names -%}\n                  {{ get_binding_char() }}\n                  {%- if not loop.last%},{%- endif %}\n              {%- endfor -%})\n              {%- if not loop.last%},{%- endif %}\n          {%- endfor %}\n      {% endset %}\n\n      {% do adapter.add_query(sql, bindings=bindings, abridge_sql_log=True) %}\n\n      {% if loop.index0 == 0 %}\n          {% do statements.append(sql) %}\n      {% endif %}\n  {% endfor %}\n\n  {# Return SQL so we can render it out into the compiled files #}\n  {{ return(statements[0]) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_batch_size", "macro.dbt.get_seed_column_quoted_csv", "macro.dbt.get_binding_char"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722889774.3363252, "supported_languages": null}, "macro.dbt.generate_alias_name": {"name": "generate_alias_name", "resource_type": "macro", "package_name": "dbt", "path": "macros/get_custom_name/get_custom_alias.sql", "original_file_path": "macros/get_custom_name/get_custom_alias.sql", "unique_id": "macro.dbt.generate_alias_name", "macro_sql": "{% macro generate_alias_name(custom_alias_name=none, node=none) -%}\n    {% do return(adapter.dispatch('generate_alias_name', 'dbt')(custom_alias_name, node)) %}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__generate_alias_name"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722889774.336711, "supported_languages": null}, "macro.dbt.default__generate_alias_name": {"name": "default__generate_alias_name", "resource_type": "macro", "package_name": "dbt", "path": "macros/get_custom_name/get_custom_alias.sql", "original_file_path": "macros/get_custom_name/get_custom_alias.sql", "unique_id": "macro.dbt.default__generate_alias_name", "macro_sql": "{% macro default__generate_alias_name(custom_alias_name=none, node=none) -%}\n\n    {%- if custom_alias_name -%}\n\n        {{ custom_alias_name | trim }}\n\n    {%- elif node.version -%}\n\n        {{ return(node.name ~ \"_v\" ~ (node.version | replace(\".\", \"_\"))) }}\n\n    {%- else -%}\n\n        {{ node.name }}\n\n    {%- endif -%}\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722889774.33703, "supported_languages": null}, "macro.dbt.generate_schema_name": {"name": "generate_schema_name", "resource_type": "macro", "package_name": "dbt", "path": "macros/get_custom_name/get_custom_schema.sql", "original_file_path": "macros/get_custom_name/get_custom_schema.sql", "unique_id": "macro.dbt.generate_schema_name", "macro_sql": "{% macro generate_schema_name(custom_schema_name=none, node=none) -%}\n    {{ return(adapter.dispatch('generate_schema_name', 'dbt')(custom_schema_name, node)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__generate_schema_name"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722889774.337499, "supported_languages": null}, "macro.dbt.default__generate_schema_name": {"name": "default__generate_schema_name", "resource_type": "macro", "package_name": "dbt", "path": "macros/get_custom_name/get_custom_schema.sql", "original_file_path": "macros/get_custom_name/get_custom_schema.sql", "unique_id": "macro.dbt.default__generate_schema_name", "macro_sql": "{% macro default__generate_schema_name(custom_schema_name, node) -%}\n\n    {%- set default_schema = target.schema -%}\n    {%- if custom_schema_name is none -%}\n\n        {{ default_schema }}\n\n    {%- else -%}\n\n        {{ default_schema }}_{{ custom_schema_name | trim }}\n\n    {%- endif -%}\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722889774.3377202, "supported_languages": null}, "macro.dbt.generate_schema_name_for_env": {"name": "generate_schema_name_for_env", "resource_type": "macro", "package_name": "dbt", "path": "macros/get_custom_name/get_custom_schema.sql", "original_file_path": "macros/get_custom_name/get_custom_schema.sql", "unique_id": "macro.dbt.generate_schema_name_for_env", "macro_sql": "{% macro generate_schema_name_for_env(custom_schema_name, node) -%}\n\n    {%- set default_schema = target.schema -%}\n    {%- if target.name == 'prod' and custom_schema_name is not none -%}\n\n        {{ custom_schema_name | trim }}\n\n    {%- else -%}\n\n        {{ default_schema }}\n\n    {%- endif -%}\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722889774.337963, "supported_languages": null}, "macro.dbt.generate_database_name": {"name": "generate_database_name", "resource_type": "macro", "package_name": "dbt", "path": "macros/get_custom_name/get_custom_database.sql", "original_file_path": "macros/get_custom_name/get_custom_database.sql", "unique_id": "macro.dbt.generate_database_name", "macro_sql": "{% macro generate_database_name(custom_database_name=none, node=none) -%}\n    {% do return(adapter.dispatch('generate_database_name', 'dbt')(custom_database_name, node)) %}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__generate_database_name"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722889774.338298, "supported_languages": null}, "macro.dbt.default__generate_database_name": {"name": "default__generate_database_name", "resource_type": "macro", "package_name": "dbt", "path": "macros/get_custom_name/get_custom_database.sql", "original_file_path": "macros/get_custom_name/get_custom_database.sql", "unique_id": "macro.dbt.default__generate_database_name", "macro_sql": "{% macro default__generate_database_name(custom_database_name=none, node=none) -%}\n    {%- set default_database = target.database -%}\n    {%- if custom_database_name is none -%}\n\n        {{ default_database }}\n\n    {%- else -%}\n\n        {{ custom_database_name }}\n\n    {%- endif -%}\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722889774.338515, "supported_languages": null}, "macro.dbt.get_drop_sql": {"name": "get_drop_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/drop.sql", "original_file_path": "macros/relations/drop.sql", "unique_id": "macro.dbt.get_drop_sql", "macro_sql": "{%- macro get_drop_sql(relation) -%}\n    {{- log('Applying DROP to: ' ~ relation) -}}\n    {{- adapter.dispatch('get_drop_sql', 'dbt')(relation) -}}\n{%- endmacro -%}\n\n\n", "depends_on": {"macros": ["macro.dbt.default__get_drop_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722889774.339123, "supported_languages": null}, "macro.dbt.default__get_drop_sql": {"name": "default__get_drop_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/drop.sql", "original_file_path": "macros/relations/drop.sql", "unique_id": "macro.dbt.default__get_drop_sql", "macro_sql": "{%- macro default__get_drop_sql(relation) -%}\n\n    {%- if relation.is_view -%}\n        {{ drop_view(relation) }}\n\n    {%- elif relation.is_table -%}\n        {{ drop_table(relation) }}\n\n    {%- elif relation.is_materialized_view -%}\n        {{ drop_materialized_view(relation) }}\n\n    {%- else -%}\n        drop {{ relation.type }} if exists {{ relation }} cascade\n\n    {%- endif -%}\n\n{%- endmacro -%}\n\n\n", "depends_on": {"macros": ["macro.dbt.drop_view", "macro.dbt.drop_table", "macro.dbt.drop_materialized_view"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722889774.339506, "supported_languages": null}, "macro.dbt.drop_relation": {"name": "drop_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/drop.sql", "original_file_path": "macros/relations/drop.sql", "unique_id": "macro.dbt.drop_relation", "macro_sql": "{% macro drop_relation(relation) -%}\n    {{ return(adapter.dispatch('drop_relation', 'dbt')(relation)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__drop_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722889774.339694, "supported_languages": null}, "macro.dbt.default__drop_relation": {"name": "default__drop_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/drop.sql", "original_file_path": "macros/relations/drop.sql", "unique_id": "macro.dbt.default__drop_relation", "macro_sql": "{% macro default__drop_relation(relation) -%}\n    {% call statement('drop_relation', auto_begin=False) -%}\n        {{ get_drop_sql(relation) }}\n    {%- endcall %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement", "macro.dbt.get_drop_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722889774.339884, "supported_languages": null}, "macro.dbt.drop_relation_if_exists": {"name": "drop_relation_if_exists", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/drop.sql", "original_file_path": "macros/relations/drop.sql", "unique_id": "macro.dbt.drop_relation_if_exists", "macro_sql": "{% macro drop_relation_if_exists(relation) %}\n  {% if relation is not none %}\n    {{ adapter.drop_relation(relation) }}\n  {% endif %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722889774.340064, "supported_languages": null}, "macro.dbt.get_replace_sql": {"name": "get_replace_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/replace.sql", "original_file_path": "macros/relations/replace.sql", "unique_id": "macro.dbt.get_replace_sql", "macro_sql": "{% macro get_replace_sql(existing_relation, target_relation, sql) %}\n    {{- log('Applying REPLACE to: ' ~ existing_relation) -}}\n    {{- adapter.dispatch('get_replace_sql', 'dbt')(existing_relation, target_relation, sql) -}}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_replace_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722889774.340836, "supported_languages": null}, "macro.dbt.default__get_replace_sql": {"name": "default__get_replace_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/replace.sql", "original_file_path": "macros/relations/replace.sql", "unique_id": "macro.dbt.default__get_replace_sql", "macro_sql": "{% macro default__get_replace_sql(existing_relation, target_relation, sql) %}\n\n    {# /* use a create or replace statement if possible */ #}\n\n    {% set is_replaceable = existing_relation.type == target_relation_type and existing_relation.can_be_replaced %}\n\n    {% if is_replaceable and existing_relation.is_view %}\n        {{ get_replace_view_sql(target_relation, sql) }}\n\n    {% elif is_replaceable and existing_relation.is_table %}\n        {{ get_replace_table_sql(target_relation, sql) }}\n\n    {% elif is_replaceable and existing_relation.is_materialized_view %}\n        {{ get_replace_materialized_view_sql(target_relation, sql) }}\n\n    {# /* a create or replace statement is not possible, so try to stage and/or backup to be safe */ #}\n\n    {# /* create target_relation as an intermediate relation, then swap it out with the existing one using a backup */ #}\n    {%- elif target_relation.can_be_renamed and existing_relation.can_be_renamed -%}\n        {{ get_create_intermediate_sql(target_relation, sql) }};\n        {{ get_create_backup_sql(existing_relation) }};\n        {{ get_rename_intermediate_sql(target_relation) }};\n        {{ get_drop_backup_sql(existing_relation) }}\n\n    {# /* create target_relation as an intermediate relation, then swap it out with the existing one without using a backup */ #}\n    {%- elif target_relation.can_be_renamed -%}\n        {{ get_create_intermediate_sql(target_relation, sql) }};\n        {{ get_drop_sql(existing_relation) }};\n        {{ get_rename_intermediate_sql(target_relation) }}\n\n    {# /* create target_relation in place by first backing up the existing relation */ #}\n    {%- elif existing_relation.can_be_renamed -%}\n        {{ get_create_backup_sql(existing_relation) }};\n        {{ get_create_sql(target_relation, sql) }};\n        {{ get_drop_backup_sql(existing_relation) }}\n\n    {# /* no renaming is allowed, so just drop and create */ #}\n    {%- else -%}\n        {{ get_drop_sql(existing_relation) }};\n        {{ get_create_sql(target_relation, sql) }}\n\n    {%- endif -%}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_replace_view_sql", "macro.dbt.get_replace_table_sql", "macro.dbt.get_replace_materialized_view_sql", "macro.dbt.get_create_intermediate_sql", "macro.dbt.get_create_backup_sql", "macro.dbt.get_rename_intermediate_sql", "macro.dbt.get_drop_backup_sql", "macro.dbt.get_drop_sql", "macro.dbt.get_create_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722889774.3419678, "supported_languages": null}, "macro.dbt.get_create_intermediate_sql": {"name": "get_create_intermediate_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/create_intermediate.sql", "original_file_path": "macros/relations/create_intermediate.sql", "unique_id": "macro.dbt.get_create_intermediate_sql", "macro_sql": "{%- macro get_create_intermediate_sql(relation, sql) -%}\n    {{- log('Applying CREATE INTERMEDIATE to: ' ~ relation) -}}\n    {{- adapter.dispatch('get_create_intermediate_sql', 'dbt')(relation, sql) -}}\n{%- endmacro -%}\n\n\n", "depends_on": {"macros": ["macro.dbt.default__get_create_intermediate_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722889774.342321, "supported_languages": null}, "macro.dbt.default__get_create_intermediate_sql": {"name": "default__get_create_intermediate_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/create_intermediate.sql", "original_file_path": "macros/relations/create_intermediate.sql", "unique_id": "macro.dbt.default__get_create_intermediate_sql", "macro_sql": "{%- macro default__get_create_intermediate_sql(relation, sql) -%}\n\n    -- get the standard intermediate name\n    {% set intermediate_relation = make_intermediate_relation(relation) %}\n\n    -- drop any pre-existing intermediate\n    {{ get_drop_sql(intermediate_relation) }};\n\n    {{ get_create_sql(intermediate_relation, sql) }}\n\n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbt.make_intermediate_relation", "macro.dbt.get_drop_sql", "macro.dbt.get_create_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722889774.342551, "supported_languages": null}, "macro.dbt.drop_schema_named": {"name": "drop_schema_named", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/schema.sql", "original_file_path": "macros/relations/schema.sql", "unique_id": "macro.dbt.drop_schema_named", "macro_sql": "{% macro drop_schema_named(schema_name) %}\n    {{ return(adapter.dispatch('drop_schema_named', 'dbt') (schema_name)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__drop_schema_named"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722889774.342798, "supported_languages": null}, "macro.dbt.default__drop_schema_named": {"name": "default__drop_schema_named", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/schema.sql", "original_file_path": "macros/relations/schema.sql", "unique_id": "macro.dbt.default__drop_schema_named", "macro_sql": "{% macro default__drop_schema_named(schema_name) %}\n  {% set schema_relation = api.Relation.create(schema=schema_name) %}\n  {{ adapter.drop_schema(schema_relation) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722889774.3429928, "supported_languages": null}, "macro.dbt.get_drop_backup_sql": {"name": "get_drop_backup_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/drop_backup.sql", "original_file_path": "macros/relations/drop_backup.sql", "unique_id": "macro.dbt.get_drop_backup_sql", "macro_sql": "{%- macro get_drop_backup_sql(relation) -%}\n    {{- log('Applying DROP BACKUP to: ' ~ relation) -}}\n    {{- adapter.dispatch('get_drop_backup_sql', 'dbt')(relation) -}}\n{%- endmacro -%}\n\n\n", "depends_on": {"macros": ["macro.dbt.default__get_drop_backup_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722889774.34329, "supported_languages": null}, "macro.dbt.default__get_drop_backup_sql": {"name": "default__get_drop_backup_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/drop_backup.sql", "original_file_path": "macros/relations/drop_backup.sql", "unique_id": "macro.dbt.default__get_drop_backup_sql", "macro_sql": "{%- macro default__get_drop_backup_sql(relation) -%}\n\n    -- get the standard backup name\n    {% set backup_relation = make_backup_relation(relation, relation.type) %}\n\n    {{ get_drop_sql(backup_relation) }}\n\n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbt.make_backup_relation", "macro.dbt.get_drop_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722889774.3434792, "supported_languages": null}, "macro.dbt.get_rename_sql": {"name": "get_rename_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/rename.sql", "original_file_path": "macros/relations/rename.sql", "unique_id": "macro.dbt.get_rename_sql", "macro_sql": "{%- macro get_rename_sql(relation, new_name) -%}\n    {{- log('Applying RENAME to: ' ~ relation) -}}\n    {{- adapter.dispatch('get_rename_sql', 'dbt')(relation, new_name) -}}\n{%- endmacro -%}\n\n\n", "depends_on": {"macros": ["macro.dbt.default__get_rename_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722889774.344192, "supported_languages": null}, "macro.dbt.default__get_rename_sql": {"name": "default__get_rename_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/rename.sql", "original_file_path": "macros/relations/rename.sql", "unique_id": "macro.dbt.default__get_rename_sql", "macro_sql": "{%- macro default__get_rename_sql(relation, new_name) -%}\n\n    {%- if relation.is_view -%}\n        {{ get_rename_view_sql(relation, new_name) }}\n\n    {%- elif relation.is_table -%}\n        {{ get_rename_table_sql(relation, new_name) }}\n\n    {%- elif relation.is_materialized_view -%}\n        {{ get_rename_materialized_view_sql(relation, new_name) }}\n\n    {%- else -%}\n        {{- exceptions.raise_compiler_error(\"`get_rename_sql` has not been implemented for: \" ~ relation.type ) -}}\n\n    {%- endif -%}\n\n{%- endmacro -%}\n\n\n", "depends_on": {"macros": ["macro.dbt.get_rename_view_sql", "macro.dbt.get_rename_table_sql", "macro.dbt.get_rename_materialized_view_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722889774.344613, "supported_languages": null}, "macro.dbt.rename_relation": {"name": "rename_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/rename.sql", "original_file_path": "macros/relations/rename.sql", "unique_id": "macro.dbt.rename_relation", "macro_sql": "{% macro rename_relation(from_relation, to_relation) -%}\n  {{ return(adapter.dispatch('rename_relation', 'dbt')(from_relation, to_relation)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__rename_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722889774.3448162, "supported_languages": null}, "macro.dbt.default__rename_relation": {"name": "default__rename_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/rename.sql", "original_file_path": "macros/relations/rename.sql", "unique_id": "macro.dbt.default__rename_relation", "macro_sql": "{% macro default__rename_relation(from_relation, to_relation) -%}\n  {% set target_name = adapter.quote_as_configured(to_relation.identifier, 'identifier') %}\n  {% call statement('rename_relation') -%}\n    alter table {{ from_relation }} rename to {{ target_name }}\n  {%- endcall %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722889774.345081, "supported_languages": null}, "macro.dbt.get_create_backup_sql": {"name": "get_create_backup_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/create_backup.sql", "original_file_path": "macros/relations/create_backup.sql", "unique_id": "macro.dbt.get_create_backup_sql", "macro_sql": "{%- macro get_create_backup_sql(relation) -%}\n    {{- log('Applying CREATE BACKUP to: ' ~ relation) -}}\n    {{- adapter.dispatch('get_create_backup_sql', 'dbt')(relation) -}}\n{%- endmacro -%}\n\n\n", "depends_on": {"macros": ["macro.dbt.default__get_create_backup_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722889774.34543, "supported_languages": null}, "macro.dbt.default__get_create_backup_sql": {"name": "default__get_create_backup_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/create_backup.sql", "original_file_path": "macros/relations/create_backup.sql", "unique_id": "macro.dbt.default__get_create_backup_sql", "macro_sql": "{%- macro default__get_create_backup_sql(relation) -%}\n\n    -- get the standard backup name\n    {% set backup_relation = make_backup_relation(relation, relation.type) %}\n\n    -- drop any pre-existing backup\n    {{ get_drop_sql(backup_relation) }};\n\n    {{ get_rename_sql(relation, backup_relation.identifier) }}\n\n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbt.make_backup_relation", "macro.dbt.get_drop_sql", "macro.dbt.get_rename_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722889774.345694, "supported_languages": null}, "macro.dbt.get_create_sql": {"name": "get_create_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/create.sql", "original_file_path": "macros/relations/create.sql", "unique_id": "macro.dbt.get_create_sql", "macro_sql": "{%- macro get_create_sql(relation, sql) -%}\n    {{- log('Applying CREATE to: ' ~ relation) -}}\n    {{- adapter.dispatch('get_create_sql', 'dbt')(relation, sql) -}}\n{%- endmacro -%}\n\n\n", "depends_on": {"macros": ["macro.dbt.default__get_create_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722889774.346143, "supported_languages": null}, "macro.dbt.default__get_create_sql": {"name": "default__get_create_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/create.sql", "original_file_path": "macros/relations/create.sql", "unique_id": "macro.dbt.default__get_create_sql", "macro_sql": "{%- macro default__get_create_sql(relation, sql) -%}\n\n    {%- if relation.is_view -%}\n        {{ get_create_view_as_sql(relation, sql) }}\n\n    {%- elif relation.is_table -%}\n        {{ get_create_table_as_sql(False, relation, sql) }}\n\n    {%- elif relation.is_materialized_view -%}\n        {{ get_create_materialized_view_as_sql(relation, sql) }}\n\n    {%- else -%}\n        {{- exceptions.raise_compiler_error(\"`get_create_sql` has not been implemented for: \" ~ relation.type ) -}}\n\n    {%- endif -%}\n\n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbt.get_create_view_as_sql", "macro.dbt.get_create_table_as_sql", "macro.dbt.get_create_materialized_view_as_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722889774.34656, "supported_languages": null}, "macro.dbt.get_rename_intermediate_sql": {"name": "get_rename_intermediate_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/rename_intermediate.sql", "original_file_path": "macros/relations/rename_intermediate.sql", "unique_id": "macro.dbt.get_rename_intermediate_sql", "macro_sql": "{%- macro get_rename_intermediate_sql(relation) -%}\n    {{- log('Applying RENAME INTERMEDIATE to: ' ~ relation) -}}\n    {{- adapter.dispatch('get_rename_intermediate_sql', 'dbt')(relation) -}}\n{%- endmacro -%}\n\n\n", "depends_on": {"macros": ["macro.dbt.default__get_rename_intermediate_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722889774.34687, "supported_languages": null}, "macro.dbt.default__get_rename_intermediate_sql": {"name": "default__get_rename_intermediate_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/rename_intermediate.sql", "original_file_path": "macros/relations/rename_intermediate.sql", "unique_id": "macro.dbt.default__get_rename_intermediate_sql", "macro_sql": "{%- macro default__get_rename_intermediate_sql(relation) -%}\n\n    -- get the standard intermediate name\n    {% set intermediate_relation = make_intermediate_relation(relation) %}\n\n    {{ get_rename_sql(intermediate_relation, relation.identifier) }}\n\n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbt.make_intermediate_relation", "macro.dbt.get_rename_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722889774.347063, "supported_languages": null}, "macro.dbt.drop_materialized_view": {"name": "drop_materialized_view", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/materialized_view/drop.sql", "original_file_path": "macros/relations/materialized_view/drop.sql", "unique_id": "macro.dbt.drop_materialized_view", "macro_sql": "{% macro drop_materialized_view(relation) -%}\n    {{- adapter.dispatch('drop_materialized_view', 'dbt')(relation) -}}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_postgres.postgres__drop_materialized_view"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722889774.347404, "supported_languages": null}, "macro.dbt.default__drop_materialized_view": {"name": "default__drop_materialized_view", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/materialized_view/drop.sql", "original_file_path": "macros/relations/materialized_view/drop.sql", "unique_id": "macro.dbt.default__drop_materialized_view", "macro_sql": "{% macro default__drop_materialized_view(relation) -%}\n    drop materialized view if exists {{ relation }} cascade\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722889774.34752, "supported_languages": null}, "macro.dbt.get_replace_materialized_view_sql": {"name": "get_replace_materialized_view_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/materialized_view/replace.sql", "original_file_path": "macros/relations/materialized_view/replace.sql", "unique_id": "macro.dbt.get_replace_materialized_view_sql", "macro_sql": "{% macro get_replace_materialized_view_sql(relation, sql) %}\n    {{- adapter.dispatch('get_replace_materialized_view_sql', 'dbt')(relation, sql) -}}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_replace_materialized_view_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722889774.3477829, "supported_languages": null}, "macro.dbt.default__get_replace_materialized_view_sql": {"name": "default__get_replace_materialized_view_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/materialized_view/replace.sql", "original_file_path": "macros/relations/materialized_view/replace.sql", "unique_id": "macro.dbt.default__get_replace_materialized_view_sql", "macro_sql": "{% macro default__get_replace_materialized_view_sql(relation, sql) %}\n    {{ exceptions.raise_compiler_error(\n        \"`get_replace_materialized_view_sql` has not been implemented for this adapter.\"\n    ) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722889774.348043, "supported_languages": null}, "macro.dbt.refresh_materialized_view": {"name": "refresh_materialized_view", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/materialized_view/refresh.sql", "original_file_path": "macros/relations/materialized_view/refresh.sql", "unique_id": "macro.dbt.refresh_materialized_view", "macro_sql": "{% macro refresh_materialized_view(relation) %}\n    {{- log('Applying REFRESH to: ' ~ relation) -}}\n    {{- adapter.dispatch('refresh_materialized_view', 'dbt')(relation) -}}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_postgres.postgres__refresh_materialized_view"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722889774.348366, "supported_languages": null}, "macro.dbt.default__refresh_materialized_view": {"name": "default__refresh_materialized_view", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/materialized_view/refresh.sql", "original_file_path": "macros/relations/materialized_view/refresh.sql", "unique_id": "macro.dbt.default__refresh_materialized_view", "macro_sql": "{% macro default__refresh_materialized_view(relation) %}\n    {{ exceptions.raise_compiler_error(\"`refresh_materialized_view` has not been implemented for this adapter.\") }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722889774.34862, "supported_languages": null}, "macro.dbt.get_rename_materialized_view_sql": {"name": "get_rename_materialized_view_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/materialized_view/rename.sql", "original_file_path": "macros/relations/materialized_view/rename.sql", "unique_id": "macro.dbt.get_rename_materialized_view_sql", "macro_sql": "{% macro get_rename_materialized_view_sql(relation, new_name) %}\n    {{- adapter.dispatch('get_rename_materialized_view_sql', 'dbt')(relation, new_name) -}}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_postgres.postgres__get_rename_materialized_view_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722889774.3489122, "supported_languages": null}, "macro.dbt.default__get_rename_materialized_view_sql": {"name": "default__get_rename_materialized_view_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/materialized_view/rename.sql", "original_file_path": "macros/relations/materialized_view/rename.sql", "unique_id": "macro.dbt.default__get_rename_materialized_view_sql", "macro_sql": "{% macro default__get_rename_materialized_view_sql(relation, new_name) %}\n    {{ exceptions.raise_compiler_error(\n        \"`get_rename_materialized_view_sql` has not been implemented for this adapter.\"\n    ) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722889774.349051, "supported_languages": null}, "macro.dbt.get_alter_materialized_view_as_sql": {"name": "get_alter_materialized_view_as_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/materialized_view/alter.sql", "original_file_path": "macros/relations/materialized_view/alter.sql", "unique_id": "macro.dbt.get_alter_materialized_view_as_sql", "macro_sql": "{% macro get_alter_materialized_view_as_sql(\n    relation,\n    configuration_changes,\n    sql,\n    existing_relation,\n    backup_relation,\n    intermediate_relation\n) %}\n    {{- log('Applying ALTER to: ' ~ relation) -}}\n    {{- adapter.dispatch('get_alter_materialized_view_as_sql', 'dbt')(\n        relation,\n        configuration_changes,\n        sql,\n        existing_relation,\n        backup_relation,\n        intermediate_relation\n    ) -}}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_postgres.postgres__get_alter_materialized_view_as_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722889774.349609, "supported_languages": null}, "macro.dbt.default__get_alter_materialized_view_as_sql": {"name": "default__get_alter_materialized_view_as_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/materialized_view/alter.sql", "original_file_path": "macros/relations/materialized_view/alter.sql", "unique_id": "macro.dbt.default__get_alter_materialized_view_as_sql", "macro_sql": "{% macro default__get_alter_materialized_view_as_sql(\n    relation,\n    configuration_changes,\n    sql,\n    existing_relation,\n    backup_relation,\n    intermediate_relation\n) %}\n    {{ exceptions.raise_compiler_error(\"Materialized views have not been implemented for this adapter.\") }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722889774.3497732, "supported_languages": null}, "macro.dbt.get_materialized_view_configuration_changes": {"name": "get_materialized_view_configuration_changes", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/materialized_view/alter.sql", "original_file_path": "macros/relations/materialized_view/alter.sql", "unique_id": "macro.dbt.get_materialized_view_configuration_changes", "macro_sql": "{% macro get_materialized_view_configuration_changes(existing_relation, new_config) %}\n    /* {#\n    It's recommended that configuration changes be formatted as follows:\n    {\"<change_category>\": [{\"action\": \"<name>\", \"context\": ...}]}\n\n    For example:\n    {\n        \"indexes\": [\n            {\"action\": \"drop\", \"context\": \"index_abc\"},\n            {\"action\": \"create\", \"context\": {\"columns\": [\"column_1\", \"column_2\"], \"type\": \"hash\", \"unique\": True}},\n        ],\n    }\n\n    Either way, `get_materialized_view_configuration_changes` needs to align with `get_alter_materialized_view_as_sql`.\n    #} */\n    {{- log('Determining configuration changes on: ' ~ existing_relation) -}}\n    {%- do return(adapter.dispatch('get_materialized_view_configuration_changes', 'dbt')(existing_relation, new_config)) -%}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_postgres.postgres__get_materialized_view_configuration_changes"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722889774.350027, "supported_languages": null}, "macro.dbt.default__get_materialized_view_configuration_changes": {"name": "default__get_materialized_view_configuration_changes", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/materialized_view/alter.sql", "original_file_path": "macros/relations/materialized_view/alter.sql", "unique_id": "macro.dbt.default__get_materialized_view_configuration_changes", "macro_sql": "{% macro default__get_materialized_view_configuration_changes(existing_relation, new_config) %}\n    {{ exceptions.raise_compiler_error(\"Materialized views have not been implemented for this adapter.\") }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722889774.350153, "supported_languages": null}, "macro.dbt.get_create_materialized_view_as_sql": {"name": "get_create_materialized_view_as_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/materialized_view/create.sql", "original_file_path": "macros/relations/materialized_view/create.sql", "unique_id": "macro.dbt.get_create_materialized_view_as_sql", "macro_sql": "{% macro get_create_materialized_view_as_sql(relation, sql) -%}\n    {{- adapter.dispatch('get_create_materialized_view_as_sql', 'dbt')(relation, sql) -}}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_postgres.postgres__get_create_materialized_view_as_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722889774.350388, "supported_languages": null}, "macro.dbt.default__get_create_materialized_view_as_sql": {"name": "default__get_create_materialized_view_as_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/materialized_view/create.sql", "original_file_path": "macros/relations/materialized_view/create.sql", "unique_id": "macro.dbt.default__get_create_materialized_view_as_sql", "macro_sql": "{% macro default__get_create_materialized_view_as_sql(relation, sql) -%}\n    {{ exceptions.raise_compiler_error(\n        \"`get_create_materialized_view_as_sql` has not been implemented for this adapter.\"\n    ) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722889774.3505092, "supported_languages": null}, "macro.dbt.get_table_columns_and_constraints": {"name": "get_table_columns_and_constraints", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/column/columns_spec_ddl.sql", "original_file_path": "macros/relations/column/columns_spec_ddl.sql", "unique_id": "macro.dbt.get_table_columns_and_constraints", "macro_sql": "{%- macro get_table_columns_and_constraints() -%}\n  {{ adapter.dispatch('get_table_columns_and_constraints', 'dbt')() }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.default__get_table_columns_and_constraints"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722889774.351368, "supported_languages": null}, "macro.dbt.default__get_table_columns_and_constraints": {"name": "default__get_table_columns_and_constraints", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/column/columns_spec_ddl.sql", "original_file_path": "macros/relations/column/columns_spec_ddl.sql", "unique_id": "macro.dbt.default__get_table_columns_and_constraints", "macro_sql": "{% macro default__get_table_columns_and_constraints() -%}\n  {{ return(table_columns_and_constraints()) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.table_columns_and_constraints"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722889774.3514721, "supported_languages": null}, "macro.dbt.table_columns_and_constraints": {"name": "table_columns_and_constraints", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/column/columns_spec_ddl.sql", "original_file_path": "macros/relations/column/columns_spec_ddl.sql", "unique_id": "macro.dbt.table_columns_and_constraints", "macro_sql": "{% macro table_columns_and_constraints() %}\n  {# loop through user_provided_columns to create DDL with data types and constraints #}\n    {%- set raw_column_constraints = adapter.render_raw_columns_constraints(raw_columns=model['columns']) -%}\n    {%- set raw_model_constraints = adapter.render_raw_model_constraints(raw_constraints=model['constraints']) -%}\n    (\n    {% for c in raw_column_constraints -%}\n      {{ c }}{{ \",\" if not loop.last or raw_model_constraints }}\n    {% endfor %}\n    {% for c in raw_model_constraints -%}\n        {{ c }}{{ \",\" if not loop.last }}\n    {% endfor -%}\n    )\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722889774.351927, "supported_languages": null}, "macro.dbt.get_assert_columns_equivalent": {"name": "get_assert_columns_equivalent", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/column/columns_spec_ddl.sql", "original_file_path": "macros/relations/column/columns_spec_ddl.sql", "unique_id": "macro.dbt.get_assert_columns_equivalent", "macro_sql": "\n\n{%- macro get_assert_columns_equivalent(sql) -%}\n  {{ adapter.dispatch('get_assert_columns_equivalent', 'dbt')(sql) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.default__get_assert_columns_equivalent"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722889774.352078, "supported_languages": null}, "macro.dbt.default__get_assert_columns_equivalent": {"name": "default__get_assert_columns_equivalent", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/column/columns_spec_ddl.sql", "original_file_path": "macros/relations/column/columns_spec_ddl.sql", "unique_id": "macro.dbt.default__get_assert_columns_equivalent", "macro_sql": "{% macro default__get_assert_columns_equivalent(sql) -%}\n  {{ return(assert_columns_equivalent(sql)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.assert_columns_equivalent"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722889774.352198, "supported_languages": null}, "macro.dbt.assert_columns_equivalent": {"name": "assert_columns_equivalent", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/column/columns_spec_ddl.sql", "original_file_path": "macros/relations/column/columns_spec_ddl.sql", "unique_id": "macro.dbt.assert_columns_equivalent", "macro_sql": "{% macro assert_columns_equivalent(sql) %}\n\n  {#-- First ensure the user has defined 'columns' in yaml specification --#}\n  {%- set user_defined_columns = model['columns'] -%}\n  {%- if not user_defined_columns -%}\n      {{ exceptions.raise_contract_error([], []) }}\n  {%- endif -%}\n\n  {#-- Obtain the column schema provided by sql file. #}\n  {%- set sql_file_provided_columns = get_column_schema_from_query(sql, config.get('sql_header', none)) -%}\n  {#--Obtain the column schema provided by the schema file by generating an 'empty schema' query from the model's columns. #}\n  {%- set schema_file_provided_columns = get_column_schema_from_query(get_empty_schema_sql(user_defined_columns)) -%}\n\n  {#-- create dictionaries with name and formatted data type and strings for exception #}\n  {%- set sql_columns = format_columns(sql_file_provided_columns) -%}\n  {%- set yaml_columns = format_columns(schema_file_provided_columns)  -%}\n\n  {%- if sql_columns|length != yaml_columns|length -%}\n    {%- do exceptions.raise_contract_error(yaml_columns, sql_columns) -%}\n  {%- endif -%}\n\n  {%- for sql_col in sql_columns -%}\n    {%- set yaml_col = [] -%}\n    {%- for this_col in yaml_columns -%}\n      {%- if this_col['name'] == sql_col['name'] -%}\n        {%- do yaml_col.append(this_col) -%}\n        {%- break -%}\n      {%- endif -%}\n    {%- endfor -%}\n    {%- if not yaml_col -%}\n      {#-- Column with name not found in yaml #}\n      {%- do exceptions.raise_contract_error(yaml_columns, sql_columns) -%}\n    {%- endif -%}\n    {%- if sql_col['formatted'] != yaml_col[0]['formatted'] -%}\n      {#-- Column data types don't match #}\n      {%- do exceptions.raise_contract_error(yaml_columns, sql_columns) -%}\n    {%- endif -%}\n  {%- endfor -%}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_column_schema_from_query", "macro.dbt.get_empty_schema_sql", "macro.dbt.format_columns"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722889774.3533282, "supported_languages": null}, "macro.dbt.format_columns": {"name": "format_columns", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/column/columns_spec_ddl.sql", "original_file_path": "macros/relations/column/columns_spec_ddl.sql", "unique_id": "macro.dbt.format_columns", "macro_sql": "{% macro format_columns(columns) %}\n  {% set formatted_columns = [] %}\n  {% for column in columns %}\n    {%- set formatted_column = adapter.dispatch('format_column', 'dbt')(column) -%}\n    {%- do formatted_columns.append(formatted_column) -%}\n  {% endfor %}\n  {{ return(formatted_columns) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__format_column"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722889774.3536482, "supported_languages": null}, "macro.dbt.default__format_column": {"name": "default__format_column", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/column/columns_spec_ddl.sql", "original_file_path": "macros/relations/column/columns_spec_ddl.sql", "unique_id": "macro.dbt.default__format_column", "macro_sql": "{% macro default__format_column(column) -%}\n  {% set data_type = column.dtype %}\n  {% set formatted = column.column.lower() ~ \" \" ~ data_type %}\n  {{ return({'name': column.name, 'data_type': data_type, 'formatted': formatted}) }}\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722889774.353936, "supported_languages": null}, "macro.dbt.drop_table": {"name": "drop_table", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/table/drop.sql", "original_file_path": "macros/relations/table/drop.sql", "unique_id": "macro.dbt.drop_table", "macro_sql": "{% macro drop_table(relation) -%}\n    {{- adapter.dispatch('drop_table', 'dbt')(relation) -}}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_postgres.postgres__drop_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722889774.354283, "supported_languages": null}, "macro.dbt.default__drop_table": {"name": "default__drop_table", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/table/drop.sql", "original_file_path": "macros/relations/table/drop.sql", "unique_id": "macro.dbt.default__drop_table", "macro_sql": "{% macro default__drop_table(relation) -%}\n    drop table if exists {{ relation }} cascade\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722889774.354388, "supported_languages": null}, "macro.dbt.get_replace_table_sql": {"name": "get_replace_table_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/table/replace.sql", "original_file_path": "macros/relations/table/replace.sql", "unique_id": "macro.dbt.get_replace_table_sql", "macro_sql": "{% macro get_replace_table_sql(relation, sql) %}\n    {{- adapter.dispatch('get_replace_table_sql', 'dbt')(relation, sql) -}}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_postgres.postgres__get_replace_table_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722889774.3546371, "supported_languages": null}, "macro.dbt.default__get_replace_table_sql": {"name": "default__get_replace_table_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/table/replace.sql", "original_file_path": "macros/relations/table/replace.sql", "unique_id": "macro.dbt.default__get_replace_table_sql", "macro_sql": "{% macro default__get_replace_table_sql(relation, sql) %}\n    {{ exceptions.raise_compiler_error(\n        \"`get_replace_table_sql` has not been implemented for this adapter.\"\n    ) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722889774.354767, "supported_languages": null}, "macro.dbt.get_rename_table_sql": {"name": "get_rename_table_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/table/rename.sql", "original_file_path": "macros/relations/table/rename.sql", "unique_id": "macro.dbt.get_rename_table_sql", "macro_sql": "{% macro get_rename_table_sql(relation, new_name) %}\n    {{- adapter.dispatch('get_rename_table_sql', 'dbt')(relation, new_name) -}}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_postgres.postgres__get_rename_table_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722889774.355005, "supported_languages": null}, "macro.dbt.default__get_rename_table_sql": {"name": "default__get_rename_table_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/table/rename.sql", "original_file_path": "macros/relations/table/rename.sql", "unique_id": "macro.dbt.default__get_rename_table_sql", "macro_sql": "{% macro default__get_rename_table_sql(relation, new_name) %}\n    {{ exceptions.raise_compiler_error(\n        \"`get_rename_table_sql` has not been implemented for this adapter.\"\n    ) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722889774.355144, "supported_languages": null}, "macro.dbt.get_create_table_as_sql": {"name": "get_create_table_as_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/table/create.sql", "original_file_path": "macros/relations/table/create.sql", "unique_id": "macro.dbt.get_create_table_as_sql", "macro_sql": "{% macro get_create_table_as_sql(temporary, relation, sql) -%}\n  {{ adapter.dispatch('get_create_table_as_sql', 'dbt')(temporary, relation, sql) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_create_table_as_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722889774.3559098, "supported_languages": null}, "macro.dbt.default__get_create_table_as_sql": {"name": "default__get_create_table_as_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/table/create.sql", "original_file_path": "macros/relations/table/create.sql", "unique_id": "macro.dbt.default__get_create_table_as_sql", "macro_sql": "{% macro default__get_create_table_as_sql(temporary, relation, sql) -%}\n  {{ return(create_table_as(temporary, relation, sql)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.create_table_as"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722889774.356087, "supported_languages": null}, "macro.dbt.create_table_as": {"name": "create_table_as", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/table/create.sql", "original_file_path": "macros/relations/table/create.sql", "unique_id": "macro.dbt.create_table_as", "macro_sql": "{% macro create_table_as(temporary, relation, compiled_code, language='sql') -%}\n  {# backward compatibility for create_table_as that does not support language #}\n  {% if language == \"sql\" %}\n    {{ adapter.dispatch('create_table_as', 'dbt')(temporary, relation, compiled_code)}}\n  {% else %}\n    {{ adapter.dispatch('create_table_as', 'dbt')(temporary, relation, compiled_code, language) }}\n  {% endif %}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_postgres.postgres__create_table_as"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722889774.3564842, "supported_languages": null}, "macro.dbt.default__create_table_as": {"name": "default__create_table_as", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/table/create.sql", "original_file_path": "macros/relations/table/create.sql", "unique_id": "macro.dbt.default__create_table_as", "macro_sql": "{% macro default__create_table_as(temporary, relation, sql) -%}\n  {%- set sql_header = config.get('sql_header', none) -%}\n\n  {{ sql_header if sql_header is not none }}\n\n  create {% if temporary: -%}temporary{%- endif %} table\n    {{ relation.include(database=(not temporary), schema=(not temporary)) }}\n  {% set contract_config = config.get('contract') %}\n  {% if contract_config.enforced and (not temporary) %}\n    {{ get_assert_columns_equivalent(sql) }}\n    {{ get_table_columns_and_constraints() }}\n    {%- set sql = get_select_subquery(sql) %}\n  {% endif %}\n  as (\n    {{ sql }}\n  );\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.get_assert_columns_equivalent", "macro.dbt.get_table_columns_and_constraints", "macro.dbt.get_select_subquery"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722889774.357087, "supported_languages": null}, "macro.dbt.default__get_column_names": {"name": "default__get_column_names", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/table/create.sql", "original_file_path": "macros/relations/table/create.sql", "unique_id": "macro.dbt.default__get_column_names", "macro_sql": "{% macro default__get_column_names() %}\n  {#- loop through user_provided_columns to get column names -#}\n    {%- set user_provided_columns = model['columns'] -%}\n    {%- for i in user_provided_columns %}\n      {%- set col = user_provided_columns[i] -%}\n      {%- set col_name = adapter.quote(col['name']) if col.get('quote') else col['name'] -%}\n      {{ col_name }}{{ \", \" if not loop.last }}\n    {%- endfor -%}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722889774.3574998, "supported_languages": null}, "macro.dbt.get_select_subquery": {"name": "get_select_subquery", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/table/create.sql", "original_file_path": "macros/relations/table/create.sql", "unique_id": "macro.dbt.get_select_subquery", "macro_sql": "{% macro get_select_subquery(sql) %}\n  {{ return(adapter.dispatch('get_select_subquery', 'dbt')(sql)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_select_subquery"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722889774.357669, "supported_languages": null}, "macro.dbt.default__get_select_subquery": {"name": "default__get_select_subquery", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/table/create.sql", "original_file_path": "macros/relations/table/create.sql", "unique_id": "macro.dbt.default__get_select_subquery", "macro_sql": "{% macro default__get_select_subquery(sql) %}\n    select {{ adapter.dispatch('get_column_names', 'dbt')() }}\n    from (\n        {{ sql }}\n    ) as model_subq\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_column_names"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722889774.3578281, "supported_languages": null}, "macro.dbt.drop_view": {"name": "drop_view", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/view/drop.sql", "original_file_path": "macros/relations/view/drop.sql", "unique_id": "macro.dbt.drop_view", "macro_sql": "{% macro drop_view(relation) -%}\n    {{- adapter.dispatch('drop_view', 'dbt')(relation) -}}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_postgres.postgres__drop_view"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722889774.358065, "supported_languages": null}, "macro.dbt.default__drop_view": {"name": "default__drop_view", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/view/drop.sql", "original_file_path": "macros/relations/view/drop.sql", "unique_id": "macro.dbt.default__drop_view", "macro_sql": "{% macro default__drop_view(relation) -%}\n    drop view if exists {{ relation }} cascade\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722889774.358161, "supported_languages": null}, "macro.dbt.get_replace_view_sql": {"name": "get_replace_view_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/view/replace.sql", "original_file_path": "macros/relations/view/replace.sql", "unique_id": "macro.dbt.get_replace_view_sql", "macro_sql": "{% macro get_replace_view_sql(relation, sql) %}\n    {{- adapter.dispatch('get_replace_view_sql', 'dbt')(relation, sql) -}}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_postgres.postgres__get_replace_view_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722889774.358948, "supported_languages": null}, "macro.dbt.default__get_replace_view_sql": {"name": "default__get_replace_view_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/view/replace.sql", "original_file_path": "macros/relations/view/replace.sql", "unique_id": "macro.dbt.default__get_replace_view_sql", "macro_sql": "{% macro default__get_replace_view_sql(relation, sql) %}\n    {{ exceptions.raise_compiler_error(\n        \"`get_replace_view_sql` has not been implemented for this adapter.\"\n    ) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722889774.3590772, "supported_languages": null}, "macro.dbt.create_or_replace_view": {"name": "create_or_replace_view", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/view/replace.sql", "original_file_path": "macros/relations/view/replace.sql", "unique_id": "macro.dbt.create_or_replace_view", "macro_sql": "{% macro create_or_replace_view() %}\n  {%- set identifier = model['alias'] -%}\n\n  {%- set old_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) -%}\n  {%- set exists_as_view = (old_relation is not none and old_relation.is_view) -%}\n\n  {%- set target_relation = api.Relation.create(\n      identifier=identifier, schema=schema, database=database,\n      type='view') -%}\n  {% set grant_config = config.get('grants') %}\n\n  {{ run_hooks(pre_hooks) }}\n\n  -- If there's a table with the same name and we weren't told to full refresh,\n  -- that's an error. If we were told to full refresh, drop it. This behavior differs\n  -- for Snowflake and BigQuery, so multiple dispatch is used.\n  {%- if old_relation is not none and old_relation.is_table -%}\n    {{ handle_existing_table(should_full_refresh(), old_relation) }}\n  {%- endif -%}\n\n  -- build model\n  {% call statement('main') -%}\n    {{ get_create_view_as_sql(target_relation, sql) }}\n  {%- endcall %}\n\n  {% set should_revoke = should_revoke(exists_as_view, full_refresh_mode=True) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n\n  {{ run_hooks(post_hooks) }}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.run_hooks", "macro.dbt.handle_existing_table", "macro.dbt.should_full_refresh", "macro.dbt.statement", "macro.dbt.get_create_view_as_sql", "macro.dbt.should_revoke", "macro.dbt.apply_grants"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722889774.360189, "supported_languages": null}, "macro.dbt.handle_existing_table": {"name": "handle_existing_table", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/view/replace.sql", "original_file_path": "macros/relations/view/replace.sql", "unique_id": "macro.dbt.handle_existing_table", "macro_sql": "{% macro handle_existing_table(full_refresh, old_relation) %}\n    {{ adapter.dispatch('handle_existing_table', 'dbt')(full_refresh, old_relation) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__handle_existing_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722889774.360377, "supported_languages": null}, "macro.dbt.default__handle_existing_table": {"name": "default__handle_existing_table", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/view/replace.sql", "original_file_path": "macros/relations/view/replace.sql", "unique_id": "macro.dbt.default__handle_existing_table", "macro_sql": "{% macro default__handle_existing_table(full_refresh, old_relation) %}\n    {{ log(\"Dropping relation \" ~ old_relation ~ \" because it is of type \" ~ old_relation.type) }}\n    {{ adapter.drop_relation(old_relation) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722889774.360575, "supported_languages": null}, "macro.dbt.get_rename_view_sql": {"name": "get_rename_view_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/view/rename.sql", "original_file_path": "macros/relations/view/rename.sql", "unique_id": "macro.dbt.get_rename_view_sql", "macro_sql": "{% macro get_rename_view_sql(relation, new_name) %}\n    {{- adapter.dispatch('get_rename_view_sql', 'dbt')(relation, new_name) -}}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_postgres.postgres__get_rename_view_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722889774.3608372, "supported_languages": null}, "macro.dbt.default__get_rename_view_sql": {"name": "default__get_rename_view_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/view/rename.sql", "original_file_path": "macros/relations/view/rename.sql", "unique_id": "macro.dbt.default__get_rename_view_sql", "macro_sql": "{% macro default__get_rename_view_sql(relation, new_name) %}\n    {{ exceptions.raise_compiler_error(\n        \"`get_rename_view_sql` has not been implemented for this adapter.\"\n    ) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722889774.360966, "supported_languages": null}, "macro.dbt.get_create_view_as_sql": {"name": "get_create_view_as_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/view/create.sql", "original_file_path": "macros/relations/view/create.sql", "unique_id": "macro.dbt.get_create_view_as_sql", "macro_sql": "{% macro get_create_view_as_sql(relation, sql) -%}\n  {{ adapter.dispatch('get_create_view_as_sql', 'dbt')(relation, sql) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_create_view_as_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722889774.361331, "supported_languages": null}, "macro.dbt.default__get_create_view_as_sql": {"name": "default__get_create_view_as_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/view/create.sql", "original_file_path": "macros/relations/view/create.sql", "unique_id": "macro.dbt.default__get_create_view_as_sql", "macro_sql": "{% macro default__get_create_view_as_sql(relation, sql) -%}\n  {{ return(create_view_as(relation, sql)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.create_view_as"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722889774.3614662, "supported_languages": null}, "macro.dbt.create_view_as": {"name": "create_view_as", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/view/create.sql", "original_file_path": "macros/relations/view/create.sql", "unique_id": "macro.dbt.create_view_as", "macro_sql": "{% macro create_view_as(relation, sql) -%}\n  {{ adapter.dispatch('create_view_as', 'dbt')(relation, sql) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__create_view_as"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722889774.3616278, "supported_languages": null}, "macro.dbt.default__create_view_as": {"name": "default__create_view_as", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/view/create.sql", "original_file_path": "macros/relations/view/create.sql", "unique_id": "macro.dbt.default__create_view_as", "macro_sql": "{% macro default__create_view_as(relation, sql) -%}\n  {%- set sql_header = config.get('sql_header', none) -%}\n\n  {{ sql_header if sql_header is not none }}\n  create view {{ relation }}\n    {% set contract_config = config.get('contract') %}\n    {% if contract_config.enforced %}\n      {{ get_assert_columns_equivalent(sql) }}\n    {%- endif %}\n  as (\n    {{ sql }}\n  );\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.get_assert_columns_equivalent"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722889774.361974, "supported_languages": null}, "macro.dbt.default__test_relationships": {"name": "default__test_relationships", "resource_type": "macro", "package_name": "dbt", "path": "macros/generic_test_sql/relationships.sql", "original_file_path": "macros/generic_test_sql/relationships.sql", "unique_id": "macro.dbt.default__test_relationships", "macro_sql": "{% macro default__test_relationships(model, column_name, to, field) %}\n\nwith child as (\n    select {{ column_name }} as from_field\n    from {{ model }}\n    where {{ column_name }} is not null\n),\n\nparent as (\n    select {{ field }} as to_field\n    from {{ to }}\n)\n\nselect\n    from_field\n\nfrom child\nleft join parent\n    on child.from_field = parent.to_field\n\nwhere parent.to_field is null\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722889774.36228, "supported_languages": null}, "macro.dbt.default__test_not_null": {"name": "default__test_not_null", "resource_type": "macro", "package_name": "dbt", "path": "macros/generic_test_sql/not_null.sql", "original_file_path": "macros/generic_test_sql/not_null.sql", "unique_id": "macro.dbt.default__test_not_null", "macro_sql": "{% macro default__test_not_null(model, column_name) %}\n\n{% set column_list = '*' if should_store_failures() else column_name %}\n\nselect {{ column_list }}\nfrom {{ model }}\nwhere {{ column_name }} is null\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.should_store_failures"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722889774.362538, "supported_languages": null}, "macro.dbt.default__test_unique": {"name": "default__test_unique", "resource_type": "macro", "package_name": "dbt", "path": "macros/generic_test_sql/unique.sql", "original_file_path": "macros/generic_test_sql/unique.sql", "unique_id": "macro.dbt.default__test_unique", "macro_sql": "{% macro default__test_unique(model, column_name) %}\n\nselect\n    {{ column_name }} as unique_field,\n    count(*) as n_records\n\nfrom {{ model }}\nwhere {{ column_name }} is not null\ngroup by {{ column_name }}\nhaving count(*) > 1\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722889774.362755, "supported_languages": null}, "macro.dbt.default__test_accepted_values": {"name": "default__test_accepted_values", "resource_type": "macro", "package_name": "dbt", "path": "macros/generic_test_sql/accepted_values.sql", "original_file_path": "macros/generic_test_sql/accepted_values.sql", "unique_id": "macro.dbt.default__test_accepted_values", "macro_sql": "{% macro default__test_accepted_values(model, column_name, values, quote=True) %}\n\nwith all_values as (\n\n    select\n        {{ column_name }} as value_field,\n        count(*) as n_records\n\n    from {{ model }}\n    group by {{ column_name }}\n\n)\n\nselect *\nfrom all_values\nwhere value_field not in (\n    {% for value in values -%}\n        {% if quote -%}\n        '{{ value }}'\n        {%- else -%}\n        {{ value }}\n        {%- endif -%}\n        {%- if not loop.last -%},{%- endif %}\n    {%- endfor %}\n)\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722889774.3632581, "supported_languages": null}, "macro.dbt.statement": {"name": "statement", "resource_type": "macro", "package_name": "dbt", "path": "macros/etc/statement.sql", "original_file_path": "macros/etc/statement.sql", "unique_id": "macro.dbt.statement", "macro_sql": "\n{%- macro statement(name=None, fetch_result=False, auto_begin=True, language='sql') -%}\n  {%- if execute: -%}\n    {%- set compiled_code = caller() -%}\n\n    {%- if name == 'main' -%}\n      {{ log('Writing runtime {} for node \"{}\"'.format(language, model['unique_id'])) }}\n      {{ write(compiled_code) }}\n    {%- endif -%}\n    {%- if language == 'sql'-%}\n      {%- set res, table = adapter.execute(compiled_code, auto_begin=auto_begin, fetch=fetch_result) -%}\n    {%- elif language == 'python' -%}\n      {%- set res = submit_python_job(model, compiled_code) -%}\n      {#-- TODO: What should table be for python models? --#}\n      {%- set table = None -%}\n    {%- else -%}\n      {% do exceptions.raise_compiler_error(\"statement macro didn't get supported language\") %}\n    {%- endif -%}\n\n    {%- if name is not none -%}\n      {{ store_result(name, response=res, agate_table=table) }}\n    {%- endif -%}\n\n  {%- endif -%}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722889774.364544, "supported_languages": null}, "macro.dbt.noop_statement": {"name": "noop_statement", "resource_type": "macro", "package_name": "dbt", "path": "macros/etc/statement.sql", "original_file_path": "macros/etc/statement.sql", "unique_id": "macro.dbt.noop_statement", "macro_sql": "{% macro noop_statement(name=None, message=None, code=None, rows_affected=None, res=None) -%}\n  {%- set sql = caller() -%}\n\n  {%- if name == 'main' -%}\n    {{ log('Writing runtime SQL for node \"{}\"'.format(model['unique_id'])) }}\n    {{ write(sql) }}\n  {%- endif -%}\n\n  {%- if name is not none -%}\n    {{ store_raw_result(name, message=message, code=code, rows_affected=rows_affected, agate_table=res) }}\n  {%- endif -%}\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722889774.365108, "supported_languages": null}, "macro.dbt.run_query": {"name": "run_query", "resource_type": "macro", "package_name": "dbt", "path": "macros/etc/statement.sql", "original_file_path": "macros/etc/statement.sql", "unique_id": "macro.dbt.run_query", "macro_sql": "{% macro run_query(sql) %}\n  {% call statement(\"run_query_statement\", fetch_result=true, auto_begin=false) %}\n    {{ sql }}\n  {% endcall %}\n\n  {% do return(load_result(\"run_query_statement\").table) %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722889774.365367, "supported_languages": null}, "macro.dbt.convert_datetime": {"name": "convert_datetime", "resource_type": "macro", "package_name": "dbt", "path": "macros/etc/datetime.sql", "original_file_path": "macros/etc/datetime.sql", "unique_id": "macro.dbt.convert_datetime", "macro_sql": "{% macro convert_datetime(date_str, date_fmt) %}\n\n  {% set error_msg -%}\n      The provided partition date '{{ date_str }}' does not match the expected format '{{ date_fmt }}'\n  {%- endset %}\n\n  {% set res = try_or_compiler_error(error_msg, modules.datetime.datetime.strptime, date_str.strip(), date_fmt) %}\n  {{ return(res) }}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722889774.366915, "supported_languages": null}, "macro.dbt.dates_in_range": {"name": "dates_in_range", "resource_type": "macro", "package_name": "dbt", "path": "macros/etc/datetime.sql", "original_file_path": "macros/etc/datetime.sql", "unique_id": "macro.dbt.dates_in_range", "macro_sql": "{% macro dates_in_range(start_date_str, end_date_str=none, in_fmt=\"%Y%m%d\", out_fmt=\"%Y%m%d\") %}\n    {% set end_date_str = start_date_str if end_date_str is none else end_date_str %}\n\n    {% set start_date = convert_datetime(start_date_str, in_fmt) %}\n    {% set end_date = convert_datetime(end_date_str, in_fmt) %}\n\n    {% set day_count = (end_date - start_date).days %}\n    {% if day_count < 0 %}\n        {% set msg -%}\n            Partition start date is after the end date ({{ start_date }}, {{ end_date }})\n        {%- endset %}\n\n        {{ exceptions.raise_compiler_error(msg, model) }}\n    {% endif %}\n\n    {% set date_list = [] %}\n    {% for i in range(0, day_count + 1) %}\n        {% set the_date = (modules.datetime.timedelta(days=i) + start_date) %}\n        {% if not out_fmt %}\n            {% set _ = date_list.append(the_date) %}\n        {% else %}\n            {% set _ = date_list.append(the_date.strftime(out_fmt)) %}\n        {% endif %}\n    {% endfor %}\n\n    {{ return(date_list) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.convert_datetime"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722889774.3679879, "supported_languages": null}, "macro.dbt.partition_range": {"name": "partition_range", "resource_type": "macro", "package_name": "dbt", "path": "macros/etc/datetime.sql", "original_file_path": "macros/etc/datetime.sql", "unique_id": "macro.dbt.partition_range", "macro_sql": "{% macro partition_range(raw_partition_date, date_fmt='%Y%m%d') %}\n    {% set partition_range = (raw_partition_date | string).split(\",\") %}\n\n    {% if (partition_range | length) == 1 %}\n      {% set start_date = partition_range[0] %}\n      {% set end_date = none %}\n    {% elif (partition_range | length) == 2 %}\n      {% set start_date = partition_range[0] %}\n      {% set end_date = partition_range[1] %}\n    {% else %}\n      {{ exceptions.raise_compiler_error(\"Invalid partition time. Expected format: {Start Date}[,{End Date}]. Got: \" ~ raw_partition_date) }}\n    {% endif %}\n\n    {{ return(dates_in_range(start_date, end_date, in_fmt=date_fmt)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.dates_in_range"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722889774.3686342, "supported_languages": null}, "macro.dbt.py_current_timestring": {"name": "py_current_timestring", "resource_type": "macro", "package_name": "dbt", "path": "macros/etc/datetime.sql", "original_file_path": "macros/etc/datetime.sql", "unique_id": "macro.dbt.py_current_timestring", "macro_sql": "{% macro py_current_timestring() %}\n    {% set dt = modules.datetime.datetime.now() %}\n    {% do return(dt.strftime(\"%Y%m%d%H%M%S%f\")) %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722889774.368837, "supported_languages": null}, "macro.dbt.except": {"name": "except", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/except.sql", "original_file_path": "macros/utils/except.sql", "unique_id": "macro.dbt.except", "macro_sql": "{% macro except() %}\n  {{ return(adapter.dispatch('except', 'dbt')()) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__except"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722889774.36905, "supported_languages": null}, "macro.dbt.default__except": {"name": "default__except", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/except.sql", "original_file_path": "macros/utils/except.sql", "unique_id": "macro.dbt.default__except", "macro_sql": "{% macro default__except() %}\n\n    except\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722889774.369118, "supported_languages": null}, "macro.dbt.get_intervals_between": {"name": "get_intervals_between", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/date_spine.sql", "original_file_path": "macros/utils/date_spine.sql", "unique_id": "macro.dbt.get_intervals_between", "macro_sql": "{% macro get_intervals_between(start_date, end_date, datepart) -%}\n    {{ return(adapter.dispatch('get_intervals_between', 'dbt')(start_date, end_date, datepart)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_intervals_between"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722889774.369762, "supported_languages": null}, "macro.dbt.default__get_intervals_between": {"name": "default__get_intervals_between", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/date_spine.sql", "original_file_path": "macros/utils/date_spine.sql", "unique_id": "macro.dbt.default__get_intervals_between", "macro_sql": "{% macro default__get_intervals_between(start_date, end_date, datepart) -%}\n    {%- call statement('get_intervals_between', fetch_result=True) %}\n\n        select {{ dbt.datediff(start_date, end_date, datepart) }}\n\n    {%- endcall -%}\n\n    {%- set value_list = load_result('get_intervals_between') -%}\n\n    {%- if value_list and value_list['data'] -%}\n        {%- set values = value_list['data'] | map(attribute=0) | list %}\n        {{ return(values[0]) }}\n    {%- else -%}\n        {{ return(1) }}\n    {%- endif -%}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.statement", "macro.dbt.datediff"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722889774.3702831, "supported_languages": null}, "macro.dbt.date_spine": {"name": "date_spine", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/date_spine.sql", "original_file_path": "macros/utils/date_spine.sql", "unique_id": "macro.dbt.date_spine", "macro_sql": "{% macro date_spine(datepart, start_date, end_date) %}\n    {{ return(adapter.dispatch('date_spine', 'dbt')(datepart, start_date, end_date)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__date_spine"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722889774.3704882, "supported_languages": null}, "macro.dbt.default__date_spine": {"name": "default__date_spine", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/date_spine.sql", "original_file_path": "macros/utils/date_spine.sql", "unique_id": "macro.dbt.default__date_spine", "macro_sql": "{% macro default__date_spine(datepart, start_date, end_date) %}\n\n\n    {# call as follows:\n\n    date_spine(\n        \"day\",\n        \"to_date('01/01/2016', 'mm/dd/yyyy')\",\n        \"dbt.dateadd(week, 1, current_date)\"\n    ) #}\n\n\n    with rawdata as (\n\n        {{dbt.generate_series(\n            dbt.get_intervals_between(start_date, end_date, datepart)\n        )}}\n\n    ),\n\n    all_periods as (\n\n        select (\n            {{\n                dbt.dateadd(\n                    datepart,\n                    \"row_number() over (order by 1) - 1\",\n                    start_date\n                )\n            }}\n        ) as date_{{datepart}}\n        from rawdata\n\n    ),\n\n    filtered as (\n\n        select *\n        from all_periods\n        where date_{{datepart}} <= {{ end_date }}\n\n    )\n\n    select * from filtered\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.generate_series", "macro.dbt.get_intervals_between", "macro.dbt.dateadd"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722889774.3708029, "supported_languages": null}, "macro.dbt.date": {"name": "date", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/date.sql", "original_file_path": "macros/utils/date.sql", "unique_id": "macro.dbt.date", "macro_sql": "{% macro date(year, month, day) %}\n  {{ return(adapter.dispatch('date', 'dbt') (year, month, day)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__date"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722889774.371089, "supported_languages": null}, "macro.dbt.default__date": {"name": "default__date", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/date.sql", "original_file_path": "macros/utils/date.sql", "unique_id": "macro.dbt.default__date", "macro_sql": "{% macro default__date(year, month, day) -%}\n    {%- set dt = modules.datetime.date(year, month, day) -%}\n    {%- set iso_8601_formatted_date = dt.strftime('%Y-%m-%d') -%}\n    to_date('{{ iso_8601_formatted_date }}', 'YYYY-MM-DD')\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722889774.371335, "supported_languages": null}, "macro.dbt.replace": {"name": "replace", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/replace.sql", "original_file_path": "macros/utils/replace.sql", "unique_id": "macro.dbt.replace", "macro_sql": "{% macro replace(field, old_chars, new_chars) -%}\n    {{ return(adapter.dispatch('replace', 'dbt') (field, old_chars, new_chars)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__replace"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722889774.3716328, "supported_languages": null}, "macro.dbt.default__replace": {"name": "default__replace", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/replace.sql", "original_file_path": "macros/utils/replace.sql", "unique_id": "macro.dbt.default__replace", "macro_sql": "{% macro default__replace(field, old_chars, new_chars) %}\n\n    replace(\n        {{ field }},\n        {{ old_chars }},\n        {{ new_chars }}\n    )\n\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722889774.371785, "supported_languages": null}, "macro.dbt.concat": {"name": "concat", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/concat.sql", "original_file_path": "macros/utils/concat.sql", "unique_id": "macro.dbt.concat", "macro_sql": "{% macro concat(fields) -%}\n  {{ return(adapter.dispatch('concat', 'dbt')(fields)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__concat"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722889774.3719978, "supported_languages": null}, "macro.dbt.default__concat": {"name": "default__concat", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/concat.sql", "original_file_path": "macros/utils/concat.sql", "unique_id": "macro.dbt.default__concat", "macro_sql": "{% macro default__concat(fields) -%}\n    {{ fields|join(' || ') }}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722889774.372104, "supported_languages": null}, "macro.dbt.get_powers_of_two": {"name": "get_powers_of_two", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/generate_series.sql", "original_file_path": "macros/utils/generate_series.sql", "unique_id": "macro.dbt.get_powers_of_two", "macro_sql": "{% macro get_powers_of_two(upper_bound) %}\n    {{ return(adapter.dispatch('get_powers_of_two', 'dbt')(upper_bound)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_powers_of_two"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722889774.372809, "supported_languages": null}, "macro.dbt.default__get_powers_of_two": {"name": "default__get_powers_of_two", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/generate_series.sql", "original_file_path": "macros/utils/generate_series.sql", "unique_id": "macro.dbt.default__get_powers_of_two", "macro_sql": "{% macro default__get_powers_of_two(upper_bound) %}\n\n    {% if upper_bound <= 0 %}\n    {{ exceptions.raise_compiler_error(\"upper bound must be positive\") }}\n    {% endif %}\n\n    {% for _ in range(1, 100) %}\n       {% if upper_bound <= 2 ** loop.index %}{{ return(loop.index) }}{% endif %}\n    {% endfor %}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722889774.373249, "supported_languages": null}, "macro.dbt.generate_series": {"name": "generate_series", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/generate_series.sql", "original_file_path": "macros/utils/generate_series.sql", "unique_id": "macro.dbt.generate_series", "macro_sql": "{% macro generate_series(upper_bound) %}\n    {{ return(adapter.dispatch('generate_series', 'dbt')(upper_bound)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__generate_series"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722889774.373416, "supported_languages": null}, "macro.dbt.default__generate_series": {"name": "default__generate_series", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/generate_series.sql", "original_file_path": "macros/utils/generate_series.sql", "unique_id": "macro.dbt.default__generate_series", "macro_sql": "{% macro default__generate_series(upper_bound) %}\n\n    {% set n = dbt.get_powers_of_two(upper_bound) %}\n\n    with p as (\n        select 0 as generated_number union all select 1\n    ), unioned as (\n\n    select\n\n    {% for i in range(n) %}\n    p{{i}}.generated_number * power(2, {{i}})\n    {% if not loop.last %} + {% endif %}\n    {% endfor %}\n    + 1\n    as generated_number\n\n    from\n\n    {% for i in range(n) %}\n    p as p{{i}}\n    {% if not loop.last %} cross join {% endif %}\n    {% endfor %}\n\n    )\n\n    select *\n    from unioned\n    where generated_number <= {{upper_bound}}\n    order by generated_number\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_powers_of_two"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722889774.373847, "supported_languages": null}, "macro.dbt.length": {"name": "length", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/length.sql", "original_file_path": "macros/utils/length.sql", "unique_id": "macro.dbt.length", "macro_sql": "{% macro length(expression) -%}\n    {{ return(adapter.dispatch('length', 'dbt') (expression)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__length"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722889774.374063, "supported_languages": null}, "macro.dbt.default__length": {"name": "default__length", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/length.sql", "original_file_path": "macros/utils/length.sql", "unique_id": "macro.dbt.default__length", "macro_sql": "{% macro default__length(expression) %}\n\n    length(\n        {{ expression }}\n    )\n\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722889774.3741581, "supported_languages": null}, "macro.dbt.dateadd": {"name": "dateadd", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/dateadd.sql", "original_file_path": "macros/utils/dateadd.sql", "unique_id": "macro.dbt.dateadd", "macro_sql": "{% macro dateadd(datepart, interval, from_date_or_timestamp) %}\n  {{ return(adapter.dispatch('dateadd', 'dbt')(datepart, interval, from_date_or_timestamp)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_postgres.postgres__dateadd"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722889774.37444, "supported_languages": null}, "macro.dbt.default__dateadd": {"name": "default__dateadd", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/dateadd.sql", "original_file_path": "macros/utils/dateadd.sql", "unique_id": "macro.dbt.default__dateadd", "macro_sql": "{% macro default__dateadd(datepart, interval, from_date_or_timestamp) %}\n\n    dateadd(\n        {{ datepart }},\n        {{ interval }},\n        {{ from_date_or_timestamp }}\n        )\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722889774.374583, "supported_languages": null}, "macro.dbt.intersect": {"name": "intersect", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/intersect.sql", "original_file_path": "macros/utils/intersect.sql", "unique_id": "macro.dbt.intersect", "macro_sql": "{% macro intersect() %}\n  {{ return(adapter.dispatch('intersect', 'dbt')()) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__intersect"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722889774.374774, "supported_languages": null}, "macro.dbt.default__intersect": {"name": "default__intersect", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/intersect.sql", "original_file_path": "macros/utils/intersect.sql", "unique_id": "macro.dbt.default__intersect", "macro_sql": "{% macro default__intersect() %}\n\n    intersect\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722889774.374838, "supported_languages": null}, "macro.dbt.escape_single_quotes": {"name": "escape_single_quotes", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/escape_single_quotes.sql", "original_file_path": "macros/utils/escape_single_quotes.sql", "unique_id": "macro.dbt.escape_single_quotes", "macro_sql": "{% macro escape_single_quotes(expression) %}\n      {{ return(adapter.dispatch('escape_single_quotes', 'dbt') (expression)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__escape_single_quotes"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722889774.375063, "supported_languages": null}, "macro.dbt.default__escape_single_quotes": {"name": "default__escape_single_quotes", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/escape_single_quotes.sql", "original_file_path": "macros/utils/escape_single_quotes.sql", "unique_id": "macro.dbt.default__escape_single_quotes", "macro_sql": "{% macro default__escape_single_quotes(expression) -%}\n{{ expression | replace(\"'\",\"''\") }}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722889774.375181, "supported_languages": null}, "macro.dbt.right": {"name": "right", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/right.sql", "original_file_path": "macros/utils/right.sql", "unique_id": "macro.dbt.right", "macro_sql": "{% macro right(string_text, length_expression) -%}\n    {{ return(adapter.dispatch('right', 'dbt') (string_text, length_expression)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__right"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722889774.375433, "supported_languages": null}, "macro.dbt.default__right": {"name": "default__right", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/right.sql", "original_file_path": "macros/utils/right.sql", "unique_id": "macro.dbt.default__right", "macro_sql": "{% macro default__right(string_text, length_expression) %}\n\n    right(\n        {{ string_text }},\n        {{ length_expression }}\n    )\n\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722889774.375555, "supported_languages": null}, "macro.dbt.listagg": {"name": "listagg", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/listagg.sql", "original_file_path": "macros/utils/listagg.sql", "unique_id": "macro.dbt.listagg", "macro_sql": "{% macro listagg(measure, delimiter_text=\"','\", order_by_clause=none, limit_num=none) -%}\n    {{ return(adapter.dispatch('listagg', 'dbt') (measure, delimiter_text, order_by_clause, limit_num)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_postgres.postgres__listagg"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722889774.376092, "supported_languages": null}, "macro.dbt.default__listagg": {"name": "default__listagg", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/listagg.sql", "original_file_path": "macros/utils/listagg.sql", "unique_id": "macro.dbt.default__listagg", "macro_sql": "{% macro default__listagg(measure, delimiter_text, order_by_clause, limit_num) -%}\n\n    {% if limit_num -%}\n    array_to_string(\n        array_slice(\n            array_agg(\n                {{ measure }}\n            ){% if order_by_clause -%}\n            within group ({{ order_by_clause }})\n            {%- endif %}\n            ,0\n            ,{{ limit_num }}\n        ),\n        {{ delimiter_text }}\n        )\n    {%- else %}\n    listagg(\n        {{ measure }},\n        {{ delimiter_text }}\n        )\n        {% if order_by_clause -%}\n        within group ({{ order_by_clause }})\n        {%- endif %}\n    {%- endif %}\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722889774.376448, "supported_languages": null}, "macro.dbt.datediff": {"name": "datediff", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/datediff.sql", "original_file_path": "macros/utils/datediff.sql", "unique_id": "macro.dbt.datediff", "macro_sql": "{% macro datediff(first_date, second_date, datepart) %}\n  {{ return(adapter.dispatch('datediff', 'dbt')(first_date, second_date, datepart)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_postgres.postgres__datediff"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722889774.3767538, "supported_languages": null}, "macro.dbt.default__datediff": {"name": "default__datediff", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/datediff.sql", "original_file_path": "macros/utils/datediff.sql", "unique_id": "macro.dbt.default__datediff", "macro_sql": "{% macro default__datediff(first_date, second_date, datepart) -%}\n\n    datediff(\n        {{ datepart }},\n        {{ first_date }},\n        {{ second_date }}\n        )\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722889774.376905, "supported_languages": null}, "macro.dbt.safe_cast": {"name": "safe_cast", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/safe_cast.sql", "original_file_path": "macros/utils/safe_cast.sql", "unique_id": "macro.dbt.safe_cast", "macro_sql": "{% macro safe_cast(field, type) %}\n  {{ return(adapter.dispatch('safe_cast', 'dbt') (field, type)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__safe_cast"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722889774.377169, "supported_languages": null}, "macro.dbt.default__safe_cast": {"name": "default__safe_cast", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/safe_cast.sql", "original_file_path": "macros/utils/safe_cast.sql", "unique_id": "macro.dbt.default__safe_cast", "macro_sql": "{% macro default__safe_cast(field, type) %}\n    {# most databases don't support this function yet\n    so we just need to use cast #}\n    cast({{field}} as {{type}})\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722889774.3772988, "supported_languages": null}, "macro.dbt.hash": {"name": "hash", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/hash.sql", "original_file_path": "macros/utils/hash.sql", "unique_id": "macro.dbt.hash", "macro_sql": "{% macro hash(field) -%}\n  {{ return(adapter.dispatch('hash', 'dbt') (field)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__hash"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722889774.377526, "supported_languages": null}, "macro.dbt.default__hash": {"name": "default__hash", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/hash.sql", "original_file_path": "macros/utils/hash.sql", "unique_id": "macro.dbt.default__hash", "macro_sql": "{% macro default__hash(field) -%}\n    md5(cast({{ field }} as {{ api.Column.translate_type('string') }}))\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722889774.3776681, "supported_languages": null}, "macro.dbt.cast_bool_to_text": {"name": "cast_bool_to_text", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/cast_bool_to_text.sql", "original_file_path": "macros/utils/cast_bool_to_text.sql", "unique_id": "macro.dbt.cast_bool_to_text", "macro_sql": "{% macro cast_bool_to_text(field) %}\n  {{ adapter.dispatch('cast_bool_to_text', 'dbt') (field) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__cast_bool_to_text"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722889774.377978, "supported_languages": null}, "macro.dbt.default__cast_bool_to_text": {"name": "default__cast_bool_to_text", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/cast_bool_to_text.sql", "original_file_path": "macros/utils/cast_bool_to_text.sql", "unique_id": "macro.dbt.default__cast_bool_to_text", "macro_sql": "{% macro default__cast_bool_to_text(field) %}\n    cast({{ field }} as {{ api.Column.translate_type('string') }})\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722889774.378122, "supported_languages": null}, "macro.dbt.cast": {"name": "cast", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/cast.sql", "original_file_path": "macros/utils/cast.sql", "unique_id": "macro.dbt.cast", "macro_sql": "{% macro cast(field, type) %}\n  {{ return(adapter.dispatch('cast', 'dbt') (field, type)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__cast"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722889774.378368, "supported_languages": null}, "macro.dbt.default__cast": {"name": "default__cast", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/cast.sql", "original_file_path": "macros/utils/cast.sql", "unique_id": "macro.dbt.default__cast", "macro_sql": "{% macro default__cast(field, type) %}\n    cast({{field}} as {{type}})\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722889774.378483, "supported_languages": null}, "macro.dbt.any_value": {"name": "any_value", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/any_value.sql", "original_file_path": "macros/utils/any_value.sql", "unique_id": "macro.dbt.any_value", "macro_sql": "{% macro any_value(expression) -%}\n    {{ return(adapter.dispatch('any_value', 'dbt') (expression)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_postgres.postgres__any_value"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722889774.3787, "supported_languages": null}, "macro.dbt.default__any_value": {"name": "default__any_value", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/any_value.sql", "original_file_path": "macros/utils/any_value.sql", "unique_id": "macro.dbt.default__any_value", "macro_sql": "{% macro default__any_value(expression) -%}\n\n    any_value({{ expression }})\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722889774.378792, "supported_languages": null}, "macro.dbt.position": {"name": "position", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/position.sql", "original_file_path": "macros/utils/position.sql", "unique_id": "macro.dbt.position", "macro_sql": "{% macro position(substring_text, string_text) -%}\n    {{ return(adapter.dispatch('position', 'dbt') (substring_text, string_text)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__position"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722889774.379039, "supported_languages": null}, "macro.dbt.default__position": {"name": "default__position", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/position.sql", "original_file_path": "macros/utils/position.sql", "unique_id": "macro.dbt.default__position", "macro_sql": "{% macro default__position(substring_text, string_text) %}\n\n    position(\n        {{ substring_text }} in {{ string_text }}\n    )\n\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722889774.379167, "supported_languages": null}, "macro.dbt.string_literal": {"name": "string_literal", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/literal.sql", "original_file_path": "macros/utils/literal.sql", "unique_id": "macro.dbt.string_literal", "macro_sql": "{%- macro string_literal(value) -%}\n  {{ return(adapter.dispatch('string_literal', 'dbt') (value)) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.default__string_literal"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722889774.379384, "supported_languages": null}, "macro.dbt.default__string_literal": {"name": "default__string_literal", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/literal.sql", "original_file_path": "macros/utils/literal.sql", "unique_id": "macro.dbt.default__string_literal", "macro_sql": "{% macro default__string_literal(value) -%}\n    '{{ value }}'\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722889774.379477, "supported_languages": null}, "macro.dbt.type_string": {"name": "type_string", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "unique_id": "macro.dbt.type_string", "macro_sql": "\n\n{%- macro type_string() -%}\n  {{ return(adapter.dispatch('type_string', 'dbt')()) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.default__type_string"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722889774.380533, "supported_languages": null}, "macro.dbt.default__type_string": {"name": "default__type_string", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "unique_id": "macro.dbt.default__type_string", "macro_sql": "{% macro default__type_string() %}\n    {{ return(api.Column.translate_type(\"string\")) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722889774.3807218, "supported_languages": null}, "macro.dbt.type_timestamp": {"name": "type_timestamp", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "unique_id": "macro.dbt.type_timestamp", "macro_sql": "\n\n{%- macro type_timestamp() -%}\n  {{ return(adapter.dispatch('type_timestamp', 'dbt')()) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.default__type_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722889774.3808808, "supported_languages": null}, "macro.dbt.default__type_timestamp": {"name": "default__type_timestamp", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "unique_id": "macro.dbt.default__type_timestamp", "macro_sql": "{% macro default__type_timestamp() %}\n    {{ return(api.Column.translate_type(\"timestamp\")) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722889774.381017, "supported_languages": null}, "macro.dbt.type_float": {"name": "type_float", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "unique_id": "macro.dbt.type_float", "macro_sql": "\n\n{%- macro type_float() -%}\n  {{ return(adapter.dispatch('type_float', 'dbt')()) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.default__type_float"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722889774.3811631, "supported_languages": null}, "macro.dbt.default__type_float": {"name": "default__type_float", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "unique_id": "macro.dbt.default__type_float", "macro_sql": "{% macro default__type_float() %}\n    {{ return(api.Column.translate_type(\"float\")) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722889774.3812952, "supported_languages": null}, "macro.dbt.type_numeric": {"name": "type_numeric", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "unique_id": "macro.dbt.type_numeric", "macro_sql": "\n\n{%- macro type_numeric() -%}\n  {{ return(adapter.dispatch('type_numeric', 'dbt')()) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.default__type_numeric"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722889774.381435, "supported_languages": null}, "macro.dbt.default__type_numeric": {"name": "default__type_numeric", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "unique_id": "macro.dbt.default__type_numeric", "macro_sql": "{% macro default__type_numeric() %}\n    {{ return(api.Column.numeric_type(\"numeric\", 28, 6)) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722889774.3815942, "supported_languages": null}, "macro.dbt.type_bigint": {"name": "type_bigint", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "unique_id": "macro.dbt.type_bigint", "macro_sql": "\n\n{%- macro type_bigint() -%}\n  {{ return(adapter.dispatch('type_bigint', 'dbt')()) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.default__type_bigint"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722889774.381742, "supported_languages": null}, "macro.dbt.default__type_bigint": {"name": "default__type_bigint", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "unique_id": "macro.dbt.default__type_bigint", "macro_sql": "{% macro default__type_bigint() %}\n    {{ return(api.Column.translate_type(\"bigint\")) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722889774.3821812, "supported_languages": null}, "macro.dbt.type_int": {"name": "type_int", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "unique_id": "macro.dbt.type_int", "macro_sql": "\n\n{%- macro type_int() -%}\n  {{ return(adapter.dispatch('type_int', 'dbt')()) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.default__type_int"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722889774.382325, "supported_languages": null}, "macro.dbt.default__type_int": {"name": "default__type_int", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "unique_id": "macro.dbt.default__type_int", "macro_sql": "{%- macro default__type_int() -%}\n  {{ return(api.Column.translate_type(\"integer\")) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722889774.382454, "supported_languages": null}, "macro.dbt.type_boolean": {"name": "type_boolean", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "unique_id": "macro.dbt.type_boolean", "macro_sql": "\n\n{%- macro type_boolean() -%}\n  {{ return(adapter.dispatch('type_boolean', 'dbt')()) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.default__type_boolean"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722889774.382594, "supported_languages": null}, "macro.dbt.default__type_boolean": {"name": "default__type_boolean", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "unique_id": "macro.dbt.default__type_boolean", "macro_sql": "{%- macro default__type_boolean() -%}\n  {{ return(api.Column.translate_type(\"boolean\")) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722889774.382717, "supported_languages": null}, "macro.dbt.array_concat": {"name": "array_concat", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/array_concat.sql", "original_file_path": "macros/utils/array_concat.sql", "unique_id": "macro.dbt.array_concat", "macro_sql": "{% macro array_concat(array_1, array_2) -%}\n  {{ return(adapter.dispatch('array_concat', 'dbt')(array_1, array_2)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__array_concat"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722889774.382984, "supported_languages": null}, "macro.dbt.default__array_concat": {"name": "default__array_concat", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/array_concat.sql", "original_file_path": "macros/utils/array_concat.sql", "unique_id": "macro.dbt.default__array_concat", "macro_sql": "{% macro default__array_concat(array_1, array_2) -%}\n    array_cat({{ array_1 }}, {{ array_2 }})\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722889774.383104, "supported_languages": null}, "macro.dbt.bool_or": {"name": "bool_or", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/bool_or.sql", "original_file_path": "macros/utils/bool_or.sql", "unique_id": "macro.dbt.bool_or", "macro_sql": "{% macro bool_or(expression) -%}\n    {{ return(adapter.dispatch('bool_or', 'dbt') (expression)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__bool_or"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722889774.3833191, "supported_languages": null}, "macro.dbt.default__bool_or": {"name": "default__bool_or", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/bool_or.sql", "original_file_path": "macros/utils/bool_or.sql", "unique_id": "macro.dbt.default__bool_or", "macro_sql": "{% macro default__bool_or(expression) -%}\n\n    bool_or({{ expression }})\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722889774.383414, "supported_languages": null}, "macro.dbt.last_day": {"name": "last_day", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/last_day.sql", "original_file_path": "macros/utils/last_day.sql", "unique_id": "macro.dbt.last_day", "macro_sql": "{% macro last_day(date, datepart) %}\n  {{ return(adapter.dispatch('last_day', 'dbt') (date, datepart)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_postgres.postgres__last_day"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722889774.3837178, "supported_languages": null}, "macro.dbt.default_last_day": {"name": "default_last_day", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/last_day.sql", "original_file_path": "macros/utils/last_day.sql", "unique_id": "macro.dbt.default_last_day", "macro_sql": "\n\n{%- macro default_last_day(date, datepart) -%}\n    cast(\n        {{dbt.dateadd('day', '-1',\n        dbt.dateadd(datepart, '1', dbt.date_trunc(datepart, date))\n        )}}\n        as date)\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.dateadd", "macro.dbt.date_trunc"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722889774.383956, "supported_languages": null}, "macro.dbt.default__last_day": {"name": "default__last_day", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/last_day.sql", "original_file_path": "macros/utils/last_day.sql", "unique_id": "macro.dbt.default__last_day", "macro_sql": "{% macro default__last_day(date, datepart) -%}\n    {{dbt.default_last_day(date, datepart)}}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default_last_day"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722889774.384087, "supported_languages": null}, "macro.dbt.split_part": {"name": "split_part", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/split_part.sql", "original_file_path": "macros/utils/split_part.sql", "unique_id": "macro.dbt.split_part", "macro_sql": "{% macro split_part(string_text, delimiter_text, part_number) %}\n  {{ return(adapter.dispatch('split_part', 'dbt') (string_text, delimiter_text, part_number)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_postgres.postgres__split_part"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722889774.3845508, "supported_languages": null}, "macro.dbt.default__split_part": {"name": "default__split_part", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/split_part.sql", "original_file_path": "macros/utils/split_part.sql", "unique_id": "macro.dbt.default__split_part", "macro_sql": "{% macro default__split_part(string_text, delimiter_text, part_number) %}\n\n    split_part(\n        {{ string_text }},\n        {{ delimiter_text }},\n        {{ part_number }}\n        )\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722889774.384695, "supported_languages": null}, "macro.dbt._split_part_negative": {"name": "_split_part_negative", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/split_part.sql", "original_file_path": "macros/utils/split_part.sql", "unique_id": "macro.dbt._split_part_negative", "macro_sql": "{% macro _split_part_negative(string_text, delimiter_text, part_number) %}\n\n    split_part(\n        {{ string_text }},\n        {{ delimiter_text }},\n          length({{ string_text }})\n          - length(\n              replace({{ string_text }},  {{ delimiter_text }}, '')\n          ) + 2 + {{ part_number }}\n        )\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722889774.3848891, "supported_languages": null}, "macro.dbt.date_trunc": {"name": "date_trunc", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/date_trunc.sql", "original_file_path": "macros/utils/date_trunc.sql", "unique_id": "macro.dbt.date_trunc", "macro_sql": "{% macro date_trunc(datepart, date) -%}\n  {{ return(adapter.dispatch('date_trunc', 'dbt') (datepart, date)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__date_trunc"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722889774.3851259, "supported_languages": null}, "macro.dbt.default__date_trunc": {"name": "default__date_trunc", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/date_trunc.sql", "original_file_path": "macros/utils/date_trunc.sql", "unique_id": "macro.dbt.default__date_trunc", "macro_sql": "{% macro default__date_trunc(datepart, date) -%}\n    date_trunc('{{datepart}}', {{date}})\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722889774.385243, "supported_languages": null}, "macro.dbt.array_construct": {"name": "array_construct", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/array_construct.sql", "original_file_path": "macros/utils/array_construct.sql", "unique_id": "macro.dbt.array_construct", "macro_sql": "{% macro array_construct(inputs=[], data_type=api.Column.translate_type('integer')) -%}\n  {{ return(adapter.dispatch('array_construct', 'dbt')(inputs, data_type)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__array_construct"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722889774.385566, "supported_languages": null}, "macro.dbt.default__array_construct": {"name": "default__array_construct", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/array_construct.sql", "original_file_path": "macros/utils/array_construct.sql", "unique_id": "macro.dbt.default__array_construct", "macro_sql": "{% macro default__array_construct(inputs, data_type) -%}\n    {% if inputs|length > 0 %}\n    array[ {{ inputs|join(' , ') }} ]\n    {% else %}\n    array[]::{{data_type}}[]\n    {% endif %}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722889774.3857868, "supported_languages": null}, "macro.dbt.array_append": {"name": "array_append", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/array_append.sql", "original_file_path": "macros/utils/array_append.sql", "unique_id": "macro.dbt.array_append", "macro_sql": "{% macro array_append(array, new_element) -%}\n  {{ return(adapter.dispatch('array_append', 'dbt')(array, new_element)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__array_append"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722889774.3860328, "supported_languages": null}, "macro.dbt.default__array_append": {"name": "default__array_append", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/array_append.sql", "original_file_path": "macros/utils/array_append.sql", "unique_id": "macro.dbt.default__array_append", "macro_sql": "{% macro default__array_append(array, new_element) -%}\n    array_append({{ array }}, {{ new_element }})\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722889774.38622, "supported_languages": null}, "macro.dbt.create_schema": {"name": "create_schema", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/schema.sql", "original_file_path": "macros/adapters/schema.sql", "unique_id": "macro.dbt.create_schema", "macro_sql": "{% macro create_schema(relation) -%}\n  {{ adapter.dispatch('create_schema', 'dbt')(relation) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_postgres.postgres__create_schema"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722889774.386555, "supported_languages": null}, "macro.dbt.default__create_schema": {"name": "default__create_schema", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/schema.sql", "original_file_path": "macros/adapters/schema.sql", "unique_id": "macro.dbt.default__create_schema", "macro_sql": "{% macro default__create_schema(relation) -%}\n  {%- call statement('create_schema') -%}\n    create schema if not exists {{ relation.without_identifier() }}\n  {% endcall %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722889774.3867111, "supported_languages": null}, "macro.dbt.drop_schema": {"name": "drop_schema", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/schema.sql", "original_file_path": "macros/adapters/schema.sql", "unique_id": "macro.dbt.drop_schema", "macro_sql": "{% macro drop_schema(relation) -%}\n  {{ adapter.dispatch('drop_schema', 'dbt')(relation) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_postgres.postgres__drop_schema"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722889774.38685, "supported_languages": null}, "macro.dbt.default__drop_schema": {"name": "default__drop_schema", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/schema.sql", "original_file_path": "macros/adapters/schema.sql", "unique_id": "macro.dbt.default__drop_schema", "macro_sql": "{% macro default__drop_schema(relation) -%}\n  {%- call statement('drop_schema') -%}\n    drop schema if exists {{ relation.without_identifier() }} cascade\n  {% endcall %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722889774.387, "supported_languages": null}, "macro.dbt.current_timestamp": {"name": "current_timestamp", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/timestamps.sql", "original_file_path": "macros/adapters/timestamps.sql", "unique_id": "macro.dbt.current_timestamp", "macro_sql": "{%- macro current_timestamp() -%}\n    {{ adapter.dispatch('current_timestamp', 'dbt')() }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt_postgres.postgres__current_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722889774.3874292, "supported_languages": null}, "macro.dbt.default__current_timestamp": {"name": "default__current_timestamp", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/timestamps.sql", "original_file_path": "macros/adapters/timestamps.sql", "unique_id": "macro.dbt.default__current_timestamp", "macro_sql": "{% macro default__current_timestamp() -%}\n  {{ exceptions.raise_not_implemented(\n    'current_timestamp macro not implemented for adapter ' + adapter.type()) }}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722889774.387558, "supported_languages": null}, "macro.dbt.snapshot_get_time": {"name": "snapshot_get_time", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/timestamps.sql", "original_file_path": "macros/adapters/timestamps.sql", "unique_id": "macro.dbt.snapshot_get_time", "macro_sql": "\n\n{%- macro snapshot_get_time() -%}\n    {{ adapter.dispatch('snapshot_get_time', 'dbt')() }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt_postgres.postgres__snapshot_get_time"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722889774.387681, "supported_languages": null}, "macro.dbt.default__snapshot_get_time": {"name": "default__snapshot_get_time", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/timestamps.sql", "original_file_path": "macros/adapters/timestamps.sql", "unique_id": "macro.dbt.default__snapshot_get_time", "macro_sql": "{% macro default__snapshot_get_time() %}\n    {{ current_timestamp() }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.current_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722889774.3877702, "supported_languages": null}, "macro.dbt.current_timestamp_backcompat": {"name": "current_timestamp_backcompat", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/timestamps.sql", "original_file_path": "macros/adapters/timestamps.sql", "unique_id": "macro.dbt.current_timestamp_backcompat", "macro_sql": "{% macro current_timestamp_backcompat() %}\n    {{ return(adapter.dispatch('current_timestamp_backcompat', 'dbt')()) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_postgres.postgres__current_timestamp_backcompat"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722889774.38791, "supported_languages": null}, "macro.dbt.default__current_timestamp_backcompat": {"name": "default__current_timestamp_backcompat", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/timestamps.sql", "original_file_path": "macros/adapters/timestamps.sql", "unique_id": "macro.dbt.default__current_timestamp_backcompat", "macro_sql": "{% macro default__current_timestamp_backcompat() %}\n    current_timestamp::timestamp\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722889774.3879738, "supported_languages": null}, "macro.dbt.current_timestamp_in_utc_backcompat": {"name": "current_timestamp_in_utc_backcompat", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/timestamps.sql", "original_file_path": "macros/adapters/timestamps.sql", "unique_id": "macro.dbt.current_timestamp_in_utc_backcompat", "macro_sql": "{% macro current_timestamp_in_utc_backcompat() %}\n    {{ return(adapter.dispatch('current_timestamp_in_utc_backcompat', 'dbt')()) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_postgres.postgres__current_timestamp_in_utc_backcompat"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722889774.3881102, "supported_languages": null}, "macro.dbt.default__current_timestamp_in_utc_backcompat": {"name": "default__current_timestamp_in_utc_backcompat", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/timestamps.sql", "original_file_path": "macros/adapters/timestamps.sql", "unique_id": "macro.dbt.default__current_timestamp_in_utc_backcompat", "macro_sql": "{% macro default__current_timestamp_in_utc_backcompat() %}\n    {{ return(adapter.dispatch('current_timestamp_backcompat', 'dbt')()) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.current_timestamp_backcompat", "macro.dbt_postgres.postgres__current_timestamp_backcompat"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722889774.3882508, "supported_languages": null}, "macro.dbt.get_create_index_sql": {"name": "get_create_index_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/indexes.sql", "original_file_path": "macros/adapters/indexes.sql", "unique_id": "macro.dbt.get_create_index_sql", "macro_sql": "{% macro get_create_index_sql(relation, index_dict) -%}\n  {{ return(adapter.dispatch('get_create_index_sql', 'dbt')(relation, index_dict)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_postgres.postgres__get_create_index_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722889774.388968, "supported_languages": null}, "macro.dbt.default__get_create_index_sql": {"name": "default__get_create_index_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/indexes.sql", "original_file_path": "macros/adapters/indexes.sql", "unique_id": "macro.dbt.default__get_create_index_sql", "macro_sql": "{% macro default__get_create_index_sql(relation, index_dict) -%}\n  {% do return(None) %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722889774.389088, "supported_languages": null}, "macro.dbt.create_indexes": {"name": "create_indexes", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/indexes.sql", "original_file_path": "macros/adapters/indexes.sql", "unique_id": "macro.dbt.create_indexes", "macro_sql": "{% macro create_indexes(relation) -%}\n  {{ adapter.dispatch('create_indexes', 'dbt')(relation) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__create_indexes"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722889774.3892212, "supported_languages": null}, "macro.dbt.default__create_indexes": {"name": "default__create_indexes", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/indexes.sql", "original_file_path": "macros/adapters/indexes.sql", "unique_id": "macro.dbt.default__create_indexes", "macro_sql": "{% macro default__create_indexes(relation) -%}\n  {%- set _indexes = config.get('indexes', default=[]) -%}\n\n  {% for _index_dict in _indexes %}\n    {% set create_index_sql = get_create_index_sql(relation, _index_dict) %}\n    {% if create_index_sql %}\n      {% do run_query(create_index_sql) %}\n    {% endif %}\n  {% endfor %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_create_index_sql", "macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722889774.389559, "supported_languages": null}, "macro.dbt.get_drop_index_sql": {"name": "get_drop_index_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/indexes.sql", "original_file_path": "macros/adapters/indexes.sql", "unique_id": "macro.dbt.get_drop_index_sql", "macro_sql": "{% macro get_drop_index_sql(relation, index_name) -%}\n    {{ adapter.dispatch('get_drop_index_sql', 'dbt')(relation, index_name) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_postgres.postgres__get_drop_index_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722889774.389778, "supported_languages": null}, "macro.dbt.default__get_drop_index_sql": {"name": "default__get_drop_index_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/indexes.sql", "original_file_path": "macros/adapters/indexes.sql", "unique_id": "macro.dbt.default__get_drop_index_sql", "macro_sql": "{% macro default__get_drop_index_sql(relation, index_name) -%}\n    {{ exceptions.raise_compiler_error(\"`get_drop_index_sql has not been implemented for this adapter.\") }}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722889774.389898, "supported_languages": null}, "macro.dbt.get_show_indexes_sql": {"name": "get_show_indexes_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/indexes.sql", "original_file_path": "macros/adapters/indexes.sql", "unique_id": "macro.dbt.get_show_indexes_sql", "macro_sql": "{% macro get_show_indexes_sql(relation) -%}\n    {{ adapter.dispatch('get_show_indexes_sql', 'dbt')(relation) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_postgres.postgres__get_show_indexes_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722889774.390031, "supported_languages": null}, "macro.dbt.default__get_show_indexes_sql": {"name": "default__get_show_indexes_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/indexes.sql", "original_file_path": "macros/adapters/indexes.sql", "unique_id": "macro.dbt.default__get_show_indexes_sql", "macro_sql": "{% macro default__get_show_indexes_sql(relation) -%}\n    {{ exceptions.raise_compiler_error(\"`get_show_indexes_sql has not been implemented for this adapter.\") }}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722889774.390239, "supported_languages": null}, "macro.dbt.make_intermediate_relation": {"name": "make_intermediate_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "unique_id": "macro.dbt.make_intermediate_relation", "macro_sql": "{% macro make_intermediate_relation(base_relation, suffix='__dbt_tmp') %}\n  {{ return(adapter.dispatch('make_intermediate_relation', 'dbt')(base_relation, suffix)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_postgres.postgres__make_intermediate_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722889774.392145, "supported_languages": null}, "macro.dbt.default__make_intermediate_relation": {"name": "default__make_intermediate_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "unique_id": "macro.dbt.default__make_intermediate_relation", "macro_sql": "{% macro default__make_intermediate_relation(base_relation, suffix) %}\n    {{ return(default__make_temp_relation(base_relation, suffix)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__make_temp_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722889774.392364, "supported_languages": null}, "macro.dbt.make_temp_relation": {"name": "make_temp_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "unique_id": "macro.dbt.make_temp_relation", "macro_sql": "{% macro make_temp_relation(base_relation, suffix='__dbt_tmp') %}\n  {{ return(adapter.dispatch('make_temp_relation', 'dbt')(base_relation, suffix)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_postgres.postgres__make_temp_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722889774.392577, "supported_languages": null}, "macro.dbt.default__make_temp_relation": {"name": "default__make_temp_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "unique_id": "macro.dbt.default__make_temp_relation", "macro_sql": "{% macro default__make_temp_relation(base_relation, suffix) %}\n    {%- set temp_identifier = base_relation.identifier ~ suffix -%}\n    {%- set temp_relation = base_relation.incorporate(\n                                path={\"identifier\": temp_identifier}) -%}\n\n    {{ return(temp_relation) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722889774.3928409, "supported_languages": null}, "macro.dbt.make_backup_relation": {"name": "make_backup_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "unique_id": "macro.dbt.make_backup_relation", "macro_sql": "{% macro make_backup_relation(base_relation, backup_relation_type, suffix='__dbt_backup') %}\n    {{ return(adapter.dispatch('make_backup_relation', 'dbt')(base_relation, backup_relation_type, suffix)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_postgres.postgres__make_backup_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722889774.3930612, "supported_languages": null}, "macro.dbt.default__make_backup_relation": {"name": "default__make_backup_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "unique_id": "macro.dbt.default__make_backup_relation", "macro_sql": "{% macro default__make_backup_relation(base_relation, backup_relation_type, suffix) %}\n    {%- set backup_identifier = base_relation.identifier ~ suffix -%}\n    {%- set backup_relation = base_relation.incorporate(\n                                  path={\"identifier\": backup_identifier},\n                                  type=backup_relation_type\n    ) -%}\n    {{ return(backup_relation) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722889774.393342, "supported_languages": null}, "macro.dbt.truncate_relation": {"name": "truncate_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "unique_id": "macro.dbt.truncate_relation", "macro_sql": "{% macro truncate_relation(relation) -%}\n  {{ return(adapter.dispatch('truncate_relation', 'dbt')(relation)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__truncate_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722889774.393503, "supported_languages": null}, "macro.dbt.default__truncate_relation": {"name": "default__truncate_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "unique_id": "macro.dbt.default__truncate_relation", "macro_sql": "{% macro default__truncate_relation(relation) -%}\n  {% call statement('truncate_relation') -%}\n    truncate table {{ relation }}\n  {%- endcall %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722889774.393643, "supported_languages": null}, "macro.dbt.get_or_create_relation": {"name": "get_or_create_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "unique_id": "macro.dbt.get_or_create_relation", "macro_sql": "{% macro get_or_create_relation(database, schema, identifier, type) -%}\n  {{ return(adapter.dispatch('get_or_create_relation', 'dbt')(database, schema, identifier, type)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_or_create_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722889774.3938508, "supported_languages": null}, "macro.dbt.default__get_or_create_relation": {"name": "default__get_or_create_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "unique_id": "macro.dbt.default__get_or_create_relation", "macro_sql": "{% macro default__get_or_create_relation(database, schema, identifier, type) %}\n  {%- set target_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) %}\n\n  {% if target_relation %}\n    {% do return([true, target_relation]) %}\n  {% endif %}\n\n  {%- set new_relation = api.Relation.create(\n      database=database,\n      schema=schema,\n      identifier=identifier,\n      type=type\n  ) -%}\n  {% do return([false, new_relation]) %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722889774.3943381, "supported_languages": null}, "macro.dbt.load_cached_relation": {"name": "load_cached_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "unique_id": "macro.dbt.load_cached_relation", "macro_sql": "{% macro load_cached_relation(relation) %}\n  {% do return(adapter.get_relation(\n    database=relation.database,\n    schema=relation.schema,\n    identifier=relation.identifier\n  )) -%}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722889774.3945348, "supported_languages": null}, "macro.dbt.load_relation": {"name": "load_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "unique_id": "macro.dbt.load_relation", "macro_sql": "{% macro load_relation(relation) %}\n    {{ return(load_cached_relation(relation)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.load_cached_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722889774.394658, "supported_languages": null}, "macro.dbt.collect_freshness": {"name": "collect_freshness", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/freshness.sql", "original_file_path": "macros/adapters/freshness.sql", "unique_id": "macro.dbt.collect_freshness", "macro_sql": "{% macro collect_freshness(source, loaded_at_field, filter) %}\n  {{ return(adapter.dispatch('collect_freshness', 'dbt')(source, loaded_at_field, filter))}}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__collect_freshness"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722889774.395042, "supported_languages": null}, "macro.dbt.default__collect_freshness": {"name": "default__collect_freshness", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/freshness.sql", "original_file_path": "macros/adapters/freshness.sql", "unique_id": "macro.dbt.default__collect_freshness", "macro_sql": "{% macro default__collect_freshness(source, loaded_at_field, filter) %}\n  {% call statement('collect_freshness', fetch_result=True, auto_begin=False) -%}\n    select\n      max({{ loaded_at_field }}) as max_loaded_at,\n      {{ current_timestamp() }} as snapshotted_at\n    from {{ source }}\n    {% if filter %}\n    where {{ filter }}\n    {% endif %}\n  {% endcall %}\n  {{ return(load_result('collect_freshness')) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement", "macro.dbt.current_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722889774.3953972, "supported_languages": null}, "macro.dbt.validate_sql": {"name": "validate_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/validate_sql.sql", "original_file_path": "macros/adapters/validate_sql.sql", "unique_id": "macro.dbt.validate_sql", "macro_sql": "{% macro validate_sql(sql) -%}\n  {{ return(adapter.dispatch('validate_sql', 'dbt')(sql)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__validate_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722889774.395645, "supported_languages": null}, "macro.dbt.default__validate_sql": {"name": "default__validate_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/validate_sql.sql", "original_file_path": "macros/adapters/validate_sql.sql", "unique_id": "macro.dbt.default__validate_sql", "macro_sql": "{% macro default__validate_sql(sql) -%}\n  {% call statement('validate_sql') -%}\n    explain {{ sql }}\n  {% endcall %}\n  {{ return(load_result('validate_sql')) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722889774.395927, "supported_languages": null}, "macro.dbt.copy_grants": {"name": "copy_grants", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.copy_grants", "macro_sql": "{% macro copy_grants() %}\n    {{ return(adapter.dispatch('copy_grants', 'dbt')()) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_postgres.postgres__copy_grants"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722889774.397425, "supported_languages": null}, "macro.dbt.default__copy_grants": {"name": "default__copy_grants", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.default__copy_grants", "macro_sql": "{% macro default__copy_grants() %}\n    {{ return(True) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722889774.397525, "supported_languages": null}, "macro.dbt.support_multiple_grantees_per_dcl_statement": {"name": "support_multiple_grantees_per_dcl_statement", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.support_multiple_grantees_per_dcl_statement", "macro_sql": "{% macro support_multiple_grantees_per_dcl_statement() %}\n    {{ return(adapter.dispatch('support_multiple_grantees_per_dcl_statement', 'dbt')()) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__support_multiple_grantees_per_dcl_statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722889774.397666, "supported_languages": null}, "macro.dbt.default__support_multiple_grantees_per_dcl_statement": {"name": "default__support_multiple_grantees_per_dcl_statement", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.default__support_multiple_grantees_per_dcl_statement", "macro_sql": "\n\n{%- macro default__support_multiple_grantees_per_dcl_statement() -%}\n    {{ return(True) }}\n{%- endmacro -%}\n\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722889774.397763, "supported_languages": null}, "macro.dbt.should_revoke": {"name": "should_revoke", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.should_revoke", "macro_sql": "{% macro should_revoke(existing_relation, full_refresh_mode=True) %}\n\n    {% if not existing_relation %}\n        {#-- The table doesn't already exist, so no grants to copy over --#}\n        {{ return(False) }}\n    {% elif full_refresh_mode %}\n        {#-- The object is being REPLACED -- whether grants are copied over depends on the value of user config --#}\n        {{ return(copy_grants()) }}\n    {% else %}\n        {#-- The table is being merged/upserted/inserted -- grants will be carried over --#}\n        {{ return(True) }}\n    {% endif %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.copy_grants"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722889774.39806, "supported_languages": null}, "macro.dbt.get_show_grant_sql": {"name": "get_show_grant_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.get_show_grant_sql", "macro_sql": "{% macro get_show_grant_sql(relation) %}\n    {{ return(adapter.dispatch(\"get_show_grant_sql\", \"dbt\")(relation)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_postgres.postgres__get_show_grant_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722889774.3982248, "supported_languages": null}, "macro.dbt.default__get_show_grant_sql": {"name": "default__get_show_grant_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.default__get_show_grant_sql", "macro_sql": "{% macro default__get_show_grant_sql(relation) %}\n    show grants on {{ relation }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722889774.398314, "supported_languages": null}, "macro.dbt.get_grant_sql": {"name": "get_grant_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.get_grant_sql", "macro_sql": "{% macro get_grant_sql(relation, privilege, grantees) %}\n    {{ return(adapter.dispatch('get_grant_sql', 'dbt')(relation, privilege, grantees)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_grant_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722889774.398507, "supported_languages": null}, "macro.dbt.default__get_grant_sql": {"name": "default__get_grant_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.default__get_grant_sql", "macro_sql": "\n\n{%- macro default__get_grant_sql(relation, privilege, grantees) -%}\n    grant {{ privilege }} on {{ relation }} to {{ grantees | join(', ') }}\n{%- endmacro -%}\n\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722889774.3986712, "supported_languages": null}, "macro.dbt.get_revoke_sql": {"name": "get_revoke_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.get_revoke_sql", "macro_sql": "{% macro get_revoke_sql(relation, privilege, grantees) %}\n    {{ return(adapter.dispatch('get_revoke_sql', 'dbt')(relation, privilege, grantees)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_revoke_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722889774.39887, "supported_languages": null}, "macro.dbt.default__get_revoke_sql": {"name": "default__get_revoke_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.default__get_revoke_sql", "macro_sql": "\n\n{%- macro default__get_revoke_sql(relation, privilege, grantees) -%}\n    revoke {{ privilege }} on {{ relation }} from {{ grantees | join(', ') }}\n{%- endmacro -%}\n\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722889774.399031, "supported_languages": null}, "macro.dbt.get_dcl_statement_list": {"name": "get_dcl_statement_list", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.get_dcl_statement_list", "macro_sql": "{% macro get_dcl_statement_list(relation, grant_config, get_dcl_macro) %}\n    {{ return(adapter.dispatch('get_dcl_statement_list', 'dbt')(relation, grant_config, get_dcl_macro)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_dcl_statement_list"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722889774.399225, "supported_languages": null}, "macro.dbt.default__get_dcl_statement_list": {"name": "default__get_dcl_statement_list", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.default__get_dcl_statement_list", "macro_sql": "\n\n{%- macro default__get_dcl_statement_list(relation, grant_config, get_dcl_macro) -%}\n    {#\n      -- Unpack grant_config into specific privileges and the set of users who need them granted/revoked.\n      -- Depending on whether this database supports multiple grantees per statement, pass in the list of\n      -- all grantees per privilege, or (if not) template one statement per privilege-grantee pair.\n      -- `get_dcl_macro` will be either `get_grant_sql` or `get_revoke_sql`\n    #}\n    {%- set dcl_statements = [] -%}\n    {%- for privilege, grantees in grant_config.items() %}\n        {%- if support_multiple_grantees_per_dcl_statement() and grantees -%}\n          {%- set dcl = get_dcl_macro(relation, privilege, grantees) -%}\n          {%- do dcl_statements.append(dcl) -%}\n        {%- else -%}\n          {%- for grantee in grantees -%}\n              {% set dcl = get_dcl_macro(relation, privilege, [grantee]) %}\n              {%- do dcl_statements.append(dcl) -%}\n          {% endfor -%}\n        {%- endif -%}\n    {%- endfor -%}\n    {{ return(dcl_statements) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.support_multiple_grantees_per_dcl_statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722889774.399791, "supported_languages": null}, "macro.dbt.call_dcl_statements": {"name": "call_dcl_statements", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.call_dcl_statements", "macro_sql": "{% macro call_dcl_statements(dcl_statement_list) %}\n    {{ return(adapter.dispatch(\"call_dcl_statements\", \"dbt\")(dcl_statement_list)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__call_dcl_statements"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722889774.399955, "supported_languages": null}, "macro.dbt.default__call_dcl_statements": {"name": "default__call_dcl_statements", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.default__call_dcl_statements", "macro_sql": "{% macro default__call_dcl_statements(dcl_statement_list) %}\n    {#\n      -- By default, supply all grant + revoke statements in a single semicolon-separated block,\n      -- so that they're all processed together.\n\n      -- Some databases do not support this. Those adapters will need to override this macro\n      -- to run each statement individually.\n    #}\n    {% call statement('grants') %}\n        {% for dcl_statement in dcl_statement_list %}\n            {{ dcl_statement }};\n        {% endfor %}\n    {% endcall %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722889774.4002812, "supported_languages": null}, "macro.dbt.apply_grants": {"name": "apply_grants", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.apply_grants", "macro_sql": "{% macro apply_grants(relation, grant_config, should_revoke) %}\n    {{ return(adapter.dispatch(\"apply_grants\", \"dbt\")(relation, grant_config, should_revoke)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__apply_grants"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722889774.400564, "supported_languages": null}, "macro.dbt.default__apply_grants": {"name": "default__apply_grants", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.default__apply_grants", "macro_sql": "{% macro default__apply_grants(relation, grant_config, should_revoke=True) %}\n    {#-- If grant_config is {} or None, this is a no-op --#}\n    {% if grant_config %}\n        {% if should_revoke %}\n            {#-- We think previous grants may have carried over --#}\n            {#-- Show current grants and calculate diffs --#}\n            {% set current_grants_table = run_query(get_show_grant_sql(relation)) %}\n            {% set current_grants_dict = adapter.standardize_grants_dict(current_grants_table) %}\n            {% set needs_granting = diff_of_two_dicts(grant_config, current_grants_dict) %}\n            {% set needs_revoking = diff_of_two_dicts(current_grants_dict, grant_config) %}\n            {% if not (needs_granting or needs_revoking) %}\n                {{ log('On ' ~ relation ~': All grants are in place, no revocation or granting needed.')}}\n            {% endif %}\n        {% else %}\n            {#-- We don't think there's any chance of previous grants having carried over. --#}\n            {#-- Jump straight to granting what the user has configured. --#}\n            {% set needs_revoking = {} %}\n            {% set needs_granting = grant_config %}\n        {% endif %}\n        {% if needs_granting or needs_revoking %}\n            {% set revoke_statement_list = get_dcl_statement_list(relation, needs_revoking, get_revoke_sql) %}\n            {% set grant_statement_list = get_dcl_statement_list(relation, needs_granting, get_grant_sql) %}\n            {% set dcl_statement_list = revoke_statement_list + grant_statement_list %}\n            {% if dcl_statement_list %}\n                {{ call_dcl_statements(dcl_statement_list) }}\n            {% endif %}\n        {% endif %}\n    {% endif %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.run_query", "macro.dbt.get_show_grant_sql", "macro.dbt.get_dcl_statement_list", "macro.dbt.call_dcl_statements"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722889774.4017322, "supported_languages": null}, "macro.dbt.get_show_sql": {"name": "get_show_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/show.sql", "original_file_path": "macros/adapters/show.sql", "unique_id": "macro.dbt.get_show_sql", "macro_sql": "{% macro get_show_sql(compiled_code, sql_header, limit) -%}\n  {%- if sql_header -%}\n  {{ sql_header }}\n  {%- endif -%}\n  {%- if limit is not none -%}\n  {{ get_limit_subquery_sql(compiled_code, limit) }}\n  {%- else -%}\n  {{ compiled_code }}\n  {%- endif -%}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_limit_subquery_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722889774.40226, "supported_languages": null}, "macro.dbt.get_limit_subquery_sql": {"name": "get_limit_subquery_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/show.sql", "original_file_path": "macros/adapters/show.sql", "unique_id": "macro.dbt.get_limit_subquery_sql", "macro_sql": "{% macro get_limit_subquery_sql(sql, limit) %}\n  {{ adapter.dispatch('get_limit_subquery_sql', 'dbt')(sql, limit) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_limit_subquery_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722889774.402431, "supported_languages": null}, "macro.dbt.default__get_limit_subquery_sql": {"name": "default__get_limit_subquery_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/show.sql", "original_file_path": "macros/adapters/show.sql", "unique_id": "macro.dbt.default__get_limit_subquery_sql", "macro_sql": "{% macro default__get_limit_subquery_sql(sql, limit) %}\n    select *\n    from (\n        {{ sql }}\n    ) as model_limit_subq\n    limit {{ limit }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722889774.40255, "supported_languages": null}, "macro.dbt.alter_column_comment": {"name": "alter_column_comment", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/persist_docs.sql", "original_file_path": "macros/adapters/persist_docs.sql", "unique_id": "macro.dbt.alter_column_comment", "macro_sql": "{% macro alter_column_comment(relation, column_dict) -%}\n  {{ return(adapter.dispatch('alter_column_comment', 'dbt')(relation, column_dict)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_postgres.postgres__alter_column_comment"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722889774.403148, "supported_languages": null}, "macro.dbt.default__alter_column_comment": {"name": "default__alter_column_comment", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/persist_docs.sql", "original_file_path": "macros/adapters/persist_docs.sql", "unique_id": "macro.dbt.default__alter_column_comment", "macro_sql": "{% macro default__alter_column_comment(relation, column_dict) -%}\n  {{ exceptions.raise_not_implemented(\n    'alter_column_comment macro not implemented for adapter '+adapter.type()) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722889774.403296, "supported_languages": null}, "macro.dbt.alter_relation_comment": {"name": "alter_relation_comment", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/persist_docs.sql", "original_file_path": "macros/adapters/persist_docs.sql", "unique_id": "macro.dbt.alter_relation_comment", "macro_sql": "{% macro alter_relation_comment(relation, relation_comment) -%}\n  {{ return(adapter.dispatch('alter_relation_comment', 'dbt')(relation, relation_comment)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_postgres.postgres__alter_relation_comment"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722889774.403467, "supported_languages": null}, "macro.dbt.default__alter_relation_comment": {"name": "default__alter_relation_comment", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/persist_docs.sql", "original_file_path": "macros/adapters/persist_docs.sql", "unique_id": "macro.dbt.default__alter_relation_comment", "macro_sql": "{% macro default__alter_relation_comment(relation, relation_comment) -%}\n  {{ exceptions.raise_not_implemented(\n    'alter_relation_comment macro not implemented for adapter '+adapter.type()) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722889774.403605, "supported_languages": null}, "macro.dbt.persist_docs": {"name": "persist_docs", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/persist_docs.sql", "original_file_path": "macros/adapters/persist_docs.sql", "unique_id": "macro.dbt.persist_docs", "macro_sql": "{% macro persist_docs(relation, model, for_relation=true, for_columns=true) -%}\n  {{ return(adapter.dispatch('persist_docs', 'dbt')(relation, model, for_relation, for_columns)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__persist_docs"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722889774.4038348, "supported_languages": null}, "macro.dbt.default__persist_docs": {"name": "default__persist_docs", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/persist_docs.sql", "original_file_path": "macros/adapters/persist_docs.sql", "unique_id": "macro.dbt.default__persist_docs", "macro_sql": "{% macro default__persist_docs(relation, model, for_relation, for_columns) -%}\n  {% if for_relation and config.persist_relation_docs() and model.description %}\n    {% do run_query(alter_relation_comment(relation, model.description)) %}\n  {% endif %}\n\n  {% if for_columns and config.persist_column_docs() and model.columns %}\n    {% do run_query(alter_column_comment(relation, model.columns)) %}\n  {% endif %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.run_query", "macro.dbt.alter_relation_comment", "macro.dbt.alter_column_comment"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722889774.404253, "supported_languages": null}, "macro.dbt.get_catalog_relations": {"name": "get_catalog_relations", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "unique_id": "macro.dbt.get_catalog_relations", "macro_sql": "{% macro get_catalog_relations(information_schema, relations) -%}\n  {{ return(adapter.dispatch('get_catalog_relations', 'dbt')(information_schema, relations)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_postgres.postgres__get_catalog_relations"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722889774.406686, "supported_languages": null}, "macro.dbt.default__get_catalog_relations": {"name": "default__get_catalog_relations", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "unique_id": "macro.dbt.default__get_catalog_relations", "macro_sql": "{% macro default__get_catalog_relations(information_schema, relations) -%}\n  {% set typename = adapter.type() %}\n  {% set msg -%}\n    get_catalog_relations not implemented for {{ typename }}\n  {%- endset %}\n\n  {{ exceptions.raise_compiler_error(msg) }}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722889774.406904, "supported_languages": null}, "macro.dbt.get_catalog": {"name": "get_catalog", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "unique_id": "macro.dbt.get_catalog", "macro_sql": "{% macro get_catalog(information_schema, schemas) -%}\n  {{ return(adapter.dispatch('get_catalog', 'dbt')(information_schema, schemas)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_postgres.postgres__get_catalog"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722889774.407072, "supported_languages": null}, "macro.dbt.default__get_catalog": {"name": "default__get_catalog", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "unique_id": "macro.dbt.default__get_catalog", "macro_sql": "{% macro default__get_catalog(information_schema, schemas) -%}\n\n  {% set typename = adapter.type() %}\n  {% set msg -%}\n    get_catalog not implemented for {{ typename }}\n  {%- endset %}\n\n  {{ exceptions.raise_compiler_error(msg) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722889774.407285, "supported_languages": null}, "macro.dbt.information_schema_name": {"name": "information_schema_name", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "unique_id": "macro.dbt.information_schema_name", "macro_sql": "{% macro information_schema_name(database) %}\n  {{ return(adapter.dispatch('information_schema_name', 'dbt')(database)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_postgres.postgres__information_schema_name"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722889774.407439, "supported_languages": null}, "macro.dbt.default__information_schema_name": {"name": "default__information_schema_name", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "unique_id": "macro.dbt.default__information_schema_name", "macro_sql": "{% macro default__information_schema_name(database) -%}\n  {%- if database -%}\n    {{ database }}.INFORMATION_SCHEMA\n  {%- else -%}\n    INFORMATION_SCHEMA\n  {%- endif -%}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722889774.407569, "supported_languages": null}, "macro.dbt.list_schemas": {"name": "list_schemas", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "unique_id": "macro.dbt.list_schemas", "macro_sql": "{% macro list_schemas(database) -%}\n  {{ return(adapter.dispatch('list_schemas', 'dbt')(database)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_postgres.postgres__list_schemas"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722889774.407718, "supported_languages": null}, "macro.dbt.default__list_schemas": {"name": "default__list_schemas", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "unique_id": "macro.dbt.default__list_schemas", "macro_sql": "{% macro default__list_schemas(database) -%}\n  {% set sql %}\n    select distinct schema_name\n    from {{ information_schema_name(database) }}.SCHEMATA\n    where catalog_name ilike '{{ database }}'\n  {% endset %}\n  {{ return(run_query(sql)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.information_schema_name", "macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722889774.407924, "supported_languages": null}, "macro.dbt.check_schema_exists": {"name": "check_schema_exists", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "unique_id": "macro.dbt.check_schema_exists", "macro_sql": "{% macro check_schema_exists(information_schema, schema) -%}\n  {{ return(adapter.dispatch('check_schema_exists', 'dbt')(information_schema, schema)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_postgres.postgres__check_schema_exists"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722889774.408169, "supported_languages": null}, "macro.dbt.default__check_schema_exists": {"name": "default__check_schema_exists", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "unique_id": "macro.dbt.default__check_schema_exists", "macro_sql": "{% macro default__check_schema_exists(information_schema, schema) -%}\n  {% set sql -%}\n        select count(*)\n        from {{ information_schema.replace(information_schema_view='SCHEMATA') }}\n        where catalog_name='{{ information_schema.database }}'\n          and schema_name='{{ schema }}'\n  {%- endset %}\n  {{ return(run_query(sql)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.replace", "macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722889774.408442, "supported_languages": null}, "macro.dbt.list_relations_without_caching": {"name": "list_relations_without_caching", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "unique_id": "macro.dbt.list_relations_without_caching", "macro_sql": "{% macro list_relations_without_caching(schema_relation) %}\n  {{ return(adapter.dispatch('list_relations_without_caching', 'dbt')(schema_relation)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_postgres.postgres__list_relations_without_caching"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722889774.408607, "supported_languages": null}, "macro.dbt.default__list_relations_without_caching": {"name": "default__list_relations_without_caching", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "unique_id": "macro.dbt.default__list_relations_without_caching", "macro_sql": "{% macro default__list_relations_without_caching(schema_relation) %}\n  {{ exceptions.raise_not_implemented(\n    'list_relations_without_caching macro not implemented for adapter '+adapter.type()) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722889774.40875, "supported_languages": null}, "macro.dbt.get_relations": {"name": "get_relations", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "unique_id": "macro.dbt.get_relations", "macro_sql": "{% macro get_relations() %}\n  {{ return(adapter.dispatch('get_relations', 'dbt')()) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_postgres.postgres__get_relations"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722889774.408891, "supported_languages": null}, "macro.dbt.default__get_relations": {"name": "default__get_relations", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "unique_id": "macro.dbt.default__get_relations", "macro_sql": "{% macro default__get_relations() %}\n  {{ exceptions.raise_not_implemented(\n    'get_relations macro not implemented for adapter '+adapter.type()) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722889774.409019, "supported_languages": null}, "macro.dbt.get_relation_last_modified": {"name": "get_relation_last_modified", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "unique_id": "macro.dbt.get_relation_last_modified", "macro_sql": "{% macro get_relation_last_modified(information_schema, relations) %}\n  {{ return(adapter.dispatch('get_relation_last_modified', 'dbt')(information_schema, relations)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_relation_last_modified"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722889774.4091892, "supported_languages": null}, "macro.dbt.default__get_relation_last_modified": {"name": "default__get_relation_last_modified", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "unique_id": "macro.dbt.default__get_relation_last_modified", "macro_sql": "{% macro default__get_relation_last_modified(information_schema, relations) %}\n  {{ exceptions.raise_not_implemented(\n    'get_relation_last_modified macro not implemented for adapter ' + adapter.type()) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722889774.409339, "supported_languages": null}, "macro.dbt.get_columns_in_relation": {"name": "get_columns_in_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "unique_id": "macro.dbt.get_columns_in_relation", "macro_sql": "{% macro get_columns_in_relation(relation) -%}\n  {{ return(adapter.dispatch('get_columns_in_relation', 'dbt')(relation)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_postgres.postgres__get_columns_in_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722889774.411277, "supported_languages": null}, "macro.dbt.default__get_columns_in_relation": {"name": "default__get_columns_in_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "unique_id": "macro.dbt.default__get_columns_in_relation", "macro_sql": "{% macro default__get_columns_in_relation(relation) -%}\n  {{ exceptions.raise_not_implemented(\n    'get_columns_in_relation macro not implemented for adapter '+adapter.type()) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722889774.411409, "supported_languages": null}, "macro.dbt.sql_convert_columns_in_relation": {"name": "sql_convert_columns_in_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "unique_id": "macro.dbt.sql_convert_columns_in_relation", "macro_sql": "{% macro sql_convert_columns_in_relation(table) -%}\n  {% set columns = [] %}\n  {% for row in table %}\n    {% do columns.append(api.Column(*row)) %}\n  {% endfor %}\n  {{ return(columns) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722889774.411671, "supported_languages": null}, "macro.dbt.get_empty_subquery_sql": {"name": "get_empty_subquery_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "unique_id": "macro.dbt.get_empty_subquery_sql", "macro_sql": "{% macro get_empty_subquery_sql(select_sql, select_sql_header=none) -%}\n  {{ return(adapter.dispatch('get_empty_subquery_sql', 'dbt')(select_sql, select_sql_header)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_empty_subquery_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722889774.411856, "supported_languages": null}, "macro.dbt.default__get_empty_subquery_sql": {"name": "default__get_empty_subquery_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "unique_id": "macro.dbt.default__get_empty_subquery_sql", "macro_sql": "{% macro default__get_empty_subquery_sql(select_sql, select_sql_header=none) %}\n    {%- if select_sql_header is not none -%}\n    {{ select_sql_header }}\n    {%- endif -%}\n    select * from (\n        {{ select_sql }}\n    ) as __dbt_sbq\n    where false\n    limit 0\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722889774.412024, "supported_languages": null}, "macro.dbt.get_empty_schema_sql": {"name": "get_empty_schema_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "unique_id": "macro.dbt.get_empty_schema_sql", "macro_sql": "{% macro get_empty_schema_sql(columns) -%}\n  {{ return(adapter.dispatch('get_empty_schema_sql', 'dbt')(columns)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_empty_schema_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722889774.412182, "supported_languages": null}, "macro.dbt.default__get_empty_schema_sql": {"name": "default__get_empty_schema_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "unique_id": "macro.dbt.default__get_empty_schema_sql", "macro_sql": "{% macro default__get_empty_schema_sql(columns) %}\n    {%- set col_err = [] -%}\n    {%- set col_naked_numeric = [] -%}\n    select\n    {% for i in columns %}\n      {%- set col = columns[i] -%}\n      {%- if col['data_type'] is not defined -%}\n        {%- do col_err.append(col['name']) -%}\n      {#-- If this column's type is just 'numeric' then it is missing precision/scale, raise a warning --#}\n      {%- elif col['data_type'].strip().lower() in ('numeric', 'decimal', 'number') -%}\n        {%- do col_naked_numeric.append(col['name']) -%}\n      {%- endif -%}\n      {% set col_name = adapter.quote(col['name']) if col.get('quote') else col['name'] %}\n      {{ cast('null', col['data_type']) }} as {{ col_name }}{{ \", \" if not loop.last }}\n    {%- endfor -%}\n    {%- if (col_err | length) > 0 -%}\n      {{ exceptions.column_type_missing(column_names=col_err) }}\n    {%- elif (col_naked_numeric | length) > 0 -%}\n      {{ exceptions.warn(\"Detected columns with numeric type and unspecified precision/scale, this can lead to unintended rounding: \" ~ col_naked_numeric ~ \"`\") }}\n    {%- endif -%}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.cast"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722889774.413249, "supported_languages": null}, "macro.dbt.get_column_schema_from_query": {"name": "get_column_schema_from_query", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "unique_id": "macro.dbt.get_column_schema_from_query", "macro_sql": "{% macro get_column_schema_from_query(select_sql, select_sql_header=none) -%}\n    {% set columns = [] %}\n    {# -- Using an 'empty subquery' here to get the same schema as the given select_sql statement, without necessitating a data scan.#}\n    {% set sql = get_empty_subquery_sql(select_sql, select_sql_header) %}\n    {% set column_schema = adapter.get_column_schema_from_query(sql) %}\n    {{ return(column_schema) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_empty_subquery_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722889774.413546, "supported_languages": null}, "macro.dbt.get_columns_in_query": {"name": "get_columns_in_query", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "unique_id": "macro.dbt.get_columns_in_query", "macro_sql": "{% macro get_columns_in_query(select_sql) -%}\n  {{ return(adapter.dispatch('get_columns_in_query', 'dbt')(select_sql)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_columns_in_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722889774.413725, "supported_languages": null}, "macro.dbt.default__get_columns_in_query": {"name": "default__get_columns_in_query", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "unique_id": "macro.dbt.default__get_columns_in_query", "macro_sql": "{% macro default__get_columns_in_query(select_sql) %}\n    {% call statement('get_columns_in_query', fetch_result=True, auto_begin=False) -%}\n        {{ get_empty_subquery_sql(select_sql) }}\n    {% endcall %}\n    {{ return(load_result('get_columns_in_query').table.columns | map(attribute='name') | list) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement", "macro.dbt.get_empty_subquery_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722889774.414038, "supported_languages": null}, "macro.dbt.alter_column_type": {"name": "alter_column_type", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "unique_id": "macro.dbt.alter_column_type", "macro_sql": "{% macro alter_column_type(relation, column_name, new_column_type) -%}\n  {{ return(adapter.dispatch('alter_column_type', 'dbt')(relation, column_name, new_column_type)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__alter_column_type"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722889774.4142468, "supported_languages": null}, "macro.dbt.default__alter_column_type": {"name": "default__alter_column_type", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "unique_id": "macro.dbt.default__alter_column_type", "macro_sql": "{% macro default__alter_column_type(relation, column_name, new_column_type) -%}\n  {#\n    1. Create a new column (w/ temp name and correct type)\n    2. Copy data over to it\n    3. Drop the existing column (cascade!)\n    4. Rename the new column to existing column\n  #}\n  {%- set tmp_column = column_name + \"__dbt_alter\" -%}\n\n  {% call statement('alter_column_type') %}\n    alter table {{ relation }} add column {{ adapter.quote(tmp_column) }} {{ new_column_type }};\n    update {{ relation }} set {{ adapter.quote(tmp_column) }} = {{ adapter.quote(column_name) }};\n    alter table {{ relation }} drop column {{ adapter.quote(column_name) }} cascade;\n    alter table {{ relation }} rename column {{ adapter.quote(tmp_column) }} to {{ adapter.quote(column_name) }}\n  {% endcall %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722889774.4147651, "supported_languages": null}, "macro.dbt.alter_relation_add_remove_columns": {"name": "alter_relation_add_remove_columns", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "unique_id": "macro.dbt.alter_relation_add_remove_columns", "macro_sql": "{% macro alter_relation_add_remove_columns(relation, add_columns = none, remove_columns = none) -%}\n  {{ return(adapter.dispatch('alter_relation_add_remove_columns', 'dbt')(relation, add_columns, remove_columns)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__alter_relation_add_remove_columns"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722889774.414979, "supported_languages": null}, "macro.dbt.default__alter_relation_add_remove_columns": {"name": "default__alter_relation_add_remove_columns", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "unique_id": "macro.dbt.default__alter_relation_add_remove_columns", "macro_sql": "{% macro default__alter_relation_add_remove_columns(relation, add_columns, remove_columns) %}\n\n  {% if add_columns is none %}\n    {% set add_columns = [] %}\n  {% endif %}\n  {% if remove_columns is none %}\n    {% set remove_columns = [] %}\n  {% endif %}\n\n  {% set sql -%}\n\n     alter {{ relation.type }} {{ relation }}\n\n            {% for column in add_columns %}\n               add column {{ column.name }} {{ column.data_type }}{{ ',' if not loop.last }}\n            {% endfor %}{{ ',' if add_columns and remove_columns }}\n\n            {% for column in remove_columns %}\n                drop column {{ column.name }}{{ ',' if not loop.last }}\n            {% endfor %}\n\n  {%- endset -%}\n\n  {% do run_query(sql) %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722889774.415621, "supported_languages": null}, "macro.dbt.get_fixture_sql": {"name": "get_fixture_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/unit_test_sql/get_fixture_sql.sql", "original_file_path": "macros/unit_test_sql/get_fixture_sql.sql", "unique_id": "macro.dbt.get_fixture_sql", "macro_sql": "{% macro get_fixture_sql(rows, column_name_to_data_types) %}\n-- Fixture for {{ model.name }}\n{% set default_row = {} %}\n\n{%- if not column_name_to_data_types -%}\n{#-- Use defer_relation IFF it is available in the manifest and 'this' is missing from the database --#}\n{%-   set this_or_defer_relation = defer_relation if (defer_relation and not load_relation(this)) else this -%}\n{%-   set columns_in_relation = adapter.get_columns_in_relation(this_or_defer_relation) -%}\n\n{%-   set column_name_to_data_types = {} -%}\n{%-   for column in columns_in_relation -%}\n{#-- This needs to be a case-insensitive comparison --#}\n{%-     do column_name_to_data_types.update({column.name|lower: column.data_type}) -%}\n{%-   endfor -%}\n{%- endif -%}\n\n{%- if not column_name_to_data_types -%}\n    {{ exceptions.raise_compiler_error(\"Not able to get columns for unit test '\" ~ model.name ~ \"' from relation \" ~ this ~ \" because the relation doesn't exist\") }}\n{%- endif -%}\n\n{%- for column_name, column_type in column_name_to_data_types.items() -%}\n    {%- do default_row.update({column_name: (safe_cast(\"null\", column_type) | trim )}) -%}\n{%- endfor -%}\n\n\n{%- for row in rows -%}\n{%-   set formatted_row = format_row(row, column_name_to_data_types) -%}\n{%-   set default_row_copy = default_row.copy() -%}\n{%-   do default_row_copy.update(formatted_row) -%}\nselect\n{%-   for column_name, column_value in default_row_copy.items() %} {{ column_value }} as {{ column_name }}{% if not loop.last -%}, {%- endif %}\n{%-   endfor %}\n{%-   if not loop.last %}\nunion all\n{%    endif %}\n{%- endfor -%}\n\n{%- if (rows | length) == 0 -%}\n    select\n    {%- for column_name, column_value in default_row.items() %} {{ column_value }} as {{ column_name }}{% if not loop.last -%},{%- endif %}\n    {%- endfor %}\n    limit 0\n{%- endif -%}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.load_relation", "macro.dbt.safe_cast", "macro.dbt.format_row"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722889774.41847, "supported_languages": null}, "macro.dbt.get_expected_sql": {"name": "get_expected_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/unit_test_sql/get_fixture_sql.sql", "original_file_path": "macros/unit_test_sql/get_fixture_sql.sql", "unique_id": "macro.dbt.get_expected_sql", "macro_sql": "{% macro get_expected_sql(rows, column_name_to_data_types) %}\n\n{%- if (rows | length) == 0 -%}\n    select * from dbt_internal_unit_test_actual\n    limit 0\n{%- else -%}\n{%- for row in rows -%}\n{%- set formatted_row = format_row(row, column_name_to_data_types) -%}\nselect\n{%- for column_name, column_value in formatted_row.items() %} {{ column_value }} as {{ column_name }}{% if not loop.last -%}, {%- endif %}\n{%- endfor %}\n{%- if not loop.last %}\nunion all\n{% endif %}\n{%- endfor -%}\n{%- endif -%}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.format_row"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722889774.419085, "supported_languages": null}, "macro.dbt.format_row": {"name": "format_row", "resource_type": "macro", "package_name": "dbt", "path": "macros/unit_test_sql/get_fixture_sql.sql", "original_file_path": "macros/unit_test_sql/get_fixture_sql.sql", "unique_id": "macro.dbt.format_row", "macro_sql": "\n\n{%- macro format_row(row, column_name_to_data_types) -%}\n    {#-- generate case-insensitive formatted row --#}\n    {% set formatted_row = {} %}\n    {%- for column_name, column_value in row.items() -%}\n        {% set column_name = column_name|lower %}\n\n        {%- if column_name not in column_name_to_data_types %}\n            {#-- if user-provided row contains column name that relation does not contain, raise an error --#}\n            {% set fixture_name = \"expected output\" if model.resource_type == 'unit_test' else (\"'\" ~ model.name ~ \"'\") %}\n            {{ exceptions.raise_compiler_error(\n                \"Invalid column name: '\" ~ column_name ~ \"' in unit test fixture for \" ~ fixture_name ~ \".\"\n                \"\\nAccepted columns for \" ~ fixture_name ~ \" are: \" ~ (column_name_to_data_types.keys()|list)\n            ) }}\n        {%- endif -%}\n\n        {%- set column_type = column_name_to_data_types[column_name] %}\n\n        {#-- sanitize column_value: wrap yaml strings in quotes, apply cast --#}\n        {%- set column_value_clean = column_value -%}\n        {%- if column_value is string -%}\n            {%- set column_value_clean = dbt.string_literal(dbt.escape_single_quotes(column_value)) -%}\n        {%- elif column_value is none -%}\n            {%- set column_value_clean = 'null' -%}\n        {%- endif -%}\n\n        {%- set row_update = {column_name: safe_cast(column_value_clean, column_type) } -%}\n        {%- do formatted_row.update(row_update) -%}\n    {%- endfor -%}\n    {{ return(formatted_row) }}\n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbt.string_literal", "macro.dbt.escape_single_quotes", "macro.dbt.safe_cast"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722889774.4201548, "supported_languages": null}, "macro.dbt.resolve_model_name": {"name": "resolve_model_name", "resource_type": "macro", "package_name": "dbt", "path": "macros/python_model/python.sql", "original_file_path": "macros/python_model/python.sql", "unique_id": "macro.dbt.resolve_model_name", "macro_sql": "{% macro resolve_model_name(input_model_name) %}\n    {{ return(adapter.dispatch('resolve_model_name', 'dbt')(input_model_name)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__resolve_model_name"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722889774.421655, "supported_languages": null}, "macro.dbt.default__resolve_model_name": {"name": "default__resolve_model_name", "resource_type": "macro", "package_name": "dbt", "path": "macros/python_model/python.sql", "original_file_path": "macros/python_model/python.sql", "unique_id": "macro.dbt.default__resolve_model_name", "macro_sql": "\n\n{%- macro default__resolve_model_name(input_model_name) -%}\n    {{  input_model_name | string | replace('\"', '\\\"') }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722889774.4217951, "supported_languages": null}, "macro.dbt.build_ref_function": {"name": "build_ref_function", "resource_type": "macro", "package_name": "dbt", "path": "macros/python_model/python.sql", "original_file_path": "macros/python_model/python.sql", "unique_id": "macro.dbt.build_ref_function", "macro_sql": "{% macro build_ref_function(model) %}\n\n    {%- set ref_dict = {} -%}\n    {%- for _ref in model.refs -%}\n        {% set _ref_args = [_ref.get('package'), _ref['name']] if _ref.get('package') else [_ref['name'],] %}\n        {%- set resolved = ref(*_ref_args, v=_ref.get('version')) -%}\n        {%- if _ref.get('version') -%}\n            {% do _ref_args.extend([\"v\" ~ _ref['version']]) %}\n        {%- endif -%}\n       {%- do ref_dict.update({_ref_args | join('.'): resolve_model_name(resolved)}) -%}\n    {%- endfor -%}\n\ndef ref(*args, **kwargs):\n    refs = {{ ref_dict | tojson }}\n    key = '.'.join(args)\n    version = kwargs.get(\"v\") or kwargs.get(\"version\")\n    if version:\n        key += f\".v{version}\"\n    dbt_load_df_function = kwargs.get(\"dbt_load_df_function\")\n    return dbt_load_df_function(refs[key])\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.resolve_model_name"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722889774.4224849, "supported_languages": null}, "macro.dbt.build_source_function": {"name": "build_source_function", "resource_type": "macro", "package_name": "dbt", "path": "macros/python_model/python.sql", "original_file_path": "macros/python_model/python.sql", "unique_id": "macro.dbt.build_source_function", "macro_sql": "{% macro build_source_function(model) %}\n\n    {%- set source_dict = {} -%}\n    {%- for _source in model.sources -%}\n        {%- set resolved = source(*_source) -%}\n        {%- do source_dict.update({_source | join('.'): resolve_model_name(resolved)}) -%}\n    {%- endfor -%}\n\ndef source(*args, dbt_load_df_function):\n    sources = {{ source_dict | tojson }}\n    key = '.'.join(args)\n    return dbt_load_df_function(sources[key])\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.resolve_model_name"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722889774.422831, "supported_languages": null}, "macro.dbt.build_config_dict": {"name": "build_config_dict", "resource_type": "macro", "package_name": "dbt", "path": "macros/python_model/python.sql", "original_file_path": "macros/python_model/python.sql", "unique_id": "macro.dbt.build_config_dict", "macro_sql": "{% macro build_config_dict(model) %}\n    {%- set config_dict = {} -%}\n    {% set config_dbt_used = zip(model.config.config_keys_used, model.config.config_keys_defaults) | list %}\n    {%- for key, default in config_dbt_used -%}\n        {# weird type testing with enum, would be much easier to write this logic in Python! #}\n        {%- if key == \"language\" -%}\n          {%- set value = \"python\" -%}\n        {%- endif -%}\n        {%- set value = model.config.get(key, default) -%}\n        {%- do config_dict.update({key: value}) -%}\n    {%- endfor -%}\nconfig_dict = {{ config_dict }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722889774.423311, "supported_languages": null}, "macro.dbt.py_script_postfix": {"name": "py_script_postfix", "resource_type": "macro", "package_name": "dbt", "path": "macros/python_model/python.sql", "original_file_path": "macros/python_model/python.sql", "unique_id": "macro.dbt.py_script_postfix", "macro_sql": "{% macro py_script_postfix(model) %}\n# This part is user provided model code\n# you will need to copy the next section to run the code\n# COMMAND ----------\n# this part is dbt logic for get ref work, do not modify\n\n{{ build_ref_function(model ) }}\n{{ build_source_function(model ) }}\n{{ build_config_dict(model) }}\n\nclass config:\n    def __init__(self, *args, **kwargs):\n        pass\n\n    @staticmethod\n    def get(key, default=None):\n        return config_dict.get(key, default)\n\nclass this:\n    \"\"\"dbt.this() or dbt.this.identifier\"\"\"\n    database = \"{{ this.database }}\"\n    schema = \"{{ this.schema }}\"\n    identifier = \"{{ this.identifier }}\"\n    {% set this_relation_name = resolve_model_name(this) %}\n    def __repr__(self):\n        return '{{ this_relation_name  }}'\n\n\nclass dbtObj:\n    def __init__(self, load_df_function) -> None:\n        self.source = lambda *args: source(*args, dbt_load_df_function=load_df_function)\n        self.ref = lambda *args, **kwargs: ref(*args, **kwargs, dbt_load_df_function=load_df_function)\n        self.config = config\n        self.this = this()\n        self.is_incremental = {{ is_incremental() }}\n\n# COMMAND ----------\n{{py_script_comment()}}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.build_ref_function", "macro.dbt.build_source_function", "macro.dbt.build_config_dict", "macro.dbt.resolve_model_name", "macro.dbt.is_incremental", "macro.dbt.py_script_comment"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722889774.4237068, "supported_languages": null}, "macro.dbt.py_script_comment": {"name": "py_script_comment", "resource_type": "macro", "package_name": "dbt", "path": "macros/python_model/python.sql", "original_file_path": "macros/python_model/python.sql", "unique_id": "macro.dbt.py_script_comment", "macro_sql": "{%macro py_script_comment()%}\n{%endmacro%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722889774.423774, "supported_languages": null}, "macro.dbt.test_unique": {"name": "test_unique", "resource_type": "macro", "package_name": "dbt", "path": "tests/generic/builtin.sql", "original_file_path": "tests/generic/builtin.sql", "unique_id": "macro.dbt.test_unique", "macro_sql": "{% test unique(model, column_name) %}\n    {% set macro = adapter.dispatch('test_unique', 'dbt') %}\n    {{ macro(model, column_name) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt.default__test_unique"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722889774.424221, "supported_languages": null}, "macro.dbt.test_not_null": {"name": "test_not_null", "resource_type": "macro", "package_name": "dbt", "path": "tests/generic/builtin.sql", "original_file_path": "tests/generic/builtin.sql", "unique_id": "macro.dbt.test_not_null", "macro_sql": "{% test not_null(model, column_name) %}\n    {% set macro = adapter.dispatch('test_not_null', 'dbt') %}\n    {{ macro(model, column_name) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt.default__test_not_null"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722889774.424438, "supported_languages": null}, "macro.dbt.test_accepted_values": {"name": "test_accepted_values", "resource_type": "macro", "package_name": "dbt", "path": "tests/generic/builtin.sql", "original_file_path": "tests/generic/builtin.sql", "unique_id": "macro.dbt.test_accepted_values", "macro_sql": "{% test accepted_values(model, column_name, values, quote=True) %}\n    {% set macro = adapter.dispatch('test_accepted_values', 'dbt') %}\n    {{ macro(model, column_name, values, quote) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt.default__test_accepted_values"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722889774.424706, "supported_languages": null}, "macro.dbt.test_relationships": {"name": "test_relationships", "resource_type": "macro", "package_name": "dbt", "path": "tests/generic/builtin.sql", "original_file_path": "tests/generic/builtin.sql", "unique_id": "macro.dbt.test_relationships", "macro_sql": "{% test relationships(model, column_name, to, field) %}\n    {% set macro = adapter.dispatch('test_relationships', 'dbt') %}\n    {{ macro(model, column_name, to, field) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt.default__test_relationships"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722889774.4250581, "supported_languages": null}, "macro.dbt_utils.get_url_host": {"name": "get_url_host", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/web/get_url_host.sql", "original_file_path": "macros/web/get_url_host.sql", "unique_id": "macro.dbt_utils.get_url_host", "macro_sql": "{% macro get_url_host(field) -%}\n    {{ return(adapter.dispatch('get_url_host', 'dbt_utils')(field)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__get_url_host"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722889774.425367, "supported_languages": null}, "macro.dbt_utils.default__get_url_host": {"name": "default__get_url_host", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/web/get_url_host.sql", "original_file_path": "macros/web/get_url_host.sql", "unique_id": "macro.dbt_utils.default__get_url_host", "macro_sql": "{% macro default__get_url_host(field) -%}\n\n{%- set parsed =\n    dbt.split_part(\n        dbt.split_part(\n            dbt.replace(\n                dbt.replace(\n                    dbt.replace(field, \"'android-app://'\", \"''\"\n                    ), \"'http://'\", \"''\"\n                ), \"'https://'\", \"''\"\n            ), \"'/'\", 1\n        ), \"'?'\", 1\n    )\n\n-%}\n\n\n    {{ dbt.safe_cast(\n        parsed,\n        dbt.type_string()\n        )}}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.split_part", "macro.dbt.replace", "macro.dbt.safe_cast", "macro.dbt.type_string"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722889774.425778, "supported_languages": null}, "macro.dbt_utils.get_url_path": {"name": "get_url_path", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/web/get_url_path.sql", "original_file_path": "macros/web/get_url_path.sql", "unique_id": "macro.dbt_utils.get_url_path", "macro_sql": "{% macro get_url_path(field) -%}\n    {{ return(adapter.dispatch('get_url_path', 'dbt_utils')(field)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__get_url_path"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722889774.426185, "supported_languages": null}, "macro.dbt_utils.default__get_url_path": {"name": "default__get_url_path", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/web/get_url_path.sql", "original_file_path": "macros/web/get_url_path.sql", "unique_id": "macro.dbt_utils.default__get_url_path", "macro_sql": "{% macro default__get_url_path(field) -%}\n\n    {%- set stripped_url =\n        dbt.replace(\n            dbt.replace(field, \"'http://'\", \"''\"), \"'https://'\", \"''\")\n    -%}\n\n    {%- set first_slash_pos -%}\n        coalesce(\n            nullif({{ dbt.position(\"'/'\", stripped_url) }}, 0),\n            {{ dbt.position(\"'?'\", stripped_url) }} - 1\n            )\n    {%- endset -%}\n\n    {%- set parsed_path =\n        dbt.split_part(\n            dbt.right(\n                stripped_url,\n                dbt.length(stripped_url) ~ \"-\" ~ first_slash_pos\n                ),\n            \"'?'\", 1\n            )\n    -%}\n\n    {{ dbt.safe_cast(\n        parsed_path,\n        dbt.type_string()\n    )}}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.replace", "macro.dbt.position", "macro.dbt.split_part", "macro.dbt.right", "macro.dbt.length", "macro.dbt.safe_cast", "macro.dbt.type_string"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722889774.426759, "supported_languages": null}, "macro.dbt_utils.get_url_parameter": {"name": "get_url_parameter", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/web/get_url_parameter.sql", "original_file_path": "macros/web/get_url_parameter.sql", "unique_id": "macro.dbt_utils.get_url_parameter", "macro_sql": "{% macro get_url_parameter(field, url_parameter) -%}\n    {{ return(adapter.dispatch('get_url_parameter', 'dbt_utils')(field, url_parameter)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__get_url_parameter"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722889774.427041, "supported_languages": null}, "macro.dbt_utils.default__get_url_parameter": {"name": "default__get_url_parameter", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/web/get_url_parameter.sql", "original_file_path": "macros/web/get_url_parameter.sql", "unique_id": "macro.dbt_utils.default__get_url_parameter", "macro_sql": "{% macro default__get_url_parameter(field, url_parameter) -%}\n\n{%- set formatted_url_parameter = \"'\" + url_parameter + \"='\" -%}\n\n{%- set split = dbt.split_part(dbt.split_part(field, formatted_url_parameter, 2), \"'&'\", 1) -%}\n\nnullif({{ split }},'')\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.split_part"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722889774.427335, "supported_languages": null}, "macro.dbt_utils.test_fewer_rows_than": {"name": "test_fewer_rows_than", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/fewer_rows_than.sql", "original_file_path": "macros/generic_tests/fewer_rows_than.sql", "unique_id": "macro.dbt_utils.test_fewer_rows_than", "macro_sql": "{% test fewer_rows_than(model, compare_model, group_by_columns = []) %}\n  {{ return(adapter.dispatch('test_fewer_rows_than', 'dbt_utils')(model, compare_model, group_by_columns)) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_utils.default__test_fewer_rows_than"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722889774.4283872, "supported_languages": null}, "macro.dbt_utils.default__test_fewer_rows_than": {"name": "default__test_fewer_rows_than", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/fewer_rows_than.sql", "original_file_path": "macros/generic_tests/fewer_rows_than.sql", "unique_id": "macro.dbt_utils.default__test_fewer_rows_than", "macro_sql": "{% macro default__test_fewer_rows_than(model, compare_model, group_by_columns) %}\n\n{{ config(fail_calc = 'sum(coalesce(row_count_delta, 0))') }}\n\n{% if group_by_columns|length() > 0 %}\n  {% set select_gb_cols = group_by_columns|join(' ,') + ', ' %}\n  {% set join_gb_cols %}\n    {% for c in group_by_columns %}\n      and a.{{c}} = b.{{c}}\n    {% endfor %}\n  {% endset %}\n  {% set groupby_gb_cols = 'group by ' + group_by_columns|join(',') %}\n{% endif %}\n\n{#-- We must add a fake join key in case additional grouping variables are not provided --#}\n{#-- Redshift does not allow for dynamically created join conditions (e.g. full join on 1 = 1 --#}\n{#-- The same logic is used in equal_rowcount. In case of changes, maintain consistent logic --#}\n{% set group_by_columns = ['id_dbtutils_test_fewer_rows_than'] + group_by_columns %}\n{% set groupby_gb_cols = 'group by ' + group_by_columns|join(',') %}\n\n\nwith a as (\n\n    select \n      {{select_gb_cols}}\n      1 as id_dbtutils_test_fewer_rows_than,\n      count(*) as count_our_model \n    from {{ model }}\n    {{ groupby_gb_cols }}\n\n),\nb as (\n\n    select \n      {{select_gb_cols}}\n      1 as id_dbtutils_test_fewer_rows_than,\n      count(*) as count_comparison_model \n    from {{ compare_model }}\n    {{ groupby_gb_cols }}\n\n),\ncounts as (\n\n    select\n\n        {% for c in group_by_columns -%}\n          a.{{c}} as {{c}}_a,\n          b.{{c}} as {{c}}_b,\n        {% endfor %}\n\n        count_our_model,\n        count_comparison_model\n    from a\n    full join b on \n    a.id_dbtutils_test_fewer_rows_than = b.id_dbtutils_test_fewer_rows_than\n    {{ join_gb_cols }}\n\n),\nfinal as (\n\n    select *,\n        case\n            -- fail the test if we have more rows than the reference model and return the row count delta\n            when count_our_model > count_comparison_model then (count_our_model - count_comparison_model)\n            -- fail the test if they are the same number\n            when count_our_model = count_comparison_model then 1\n            -- pass the test if the delta is positive (i.e. return the number 0)\n            else 0\n    end as row_count_delta\n    from counts\n\n)\n\nselect * from final\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722889774.429447, "supported_languages": null}, "macro.dbt_utils.test_equal_rowcount": {"name": "test_equal_rowcount", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/equal_rowcount.sql", "original_file_path": "macros/generic_tests/equal_rowcount.sql", "unique_id": "macro.dbt_utils.test_equal_rowcount", "macro_sql": "{% test equal_rowcount(model, compare_model, group_by_columns = []) %}\n  {{ return(adapter.dispatch('test_equal_rowcount', 'dbt_utils')(model, compare_model, group_by_columns)) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_utils.default__test_equal_rowcount"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722889774.43036, "supported_languages": null}, "macro.dbt_utils.default__test_equal_rowcount": {"name": "default__test_equal_rowcount", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/equal_rowcount.sql", "original_file_path": "macros/generic_tests/equal_rowcount.sql", "unique_id": "macro.dbt_utils.default__test_equal_rowcount", "macro_sql": "{% macro default__test_equal_rowcount(model, compare_model, group_by_columns) %}\n\n{#-- Needs to be set at parse time, before we return '' below --#}\n{{ config(fail_calc = 'sum(coalesce(diff_count, 0))') }}\n\n{#-- Prevent querying of db in parsing mode. This works because this macro does not create any new refs. #}\n{%- if not execute -%}\n    {{ return('') }}\n{% endif %}\n\n{% if group_by_columns|length() > 0 %}\n  {% set select_gb_cols = group_by_columns|join(', ') + ', ' %}\n  {% set join_gb_cols %}\n    {% for c in group_by_columns %}\n      and a.{{c}} = b.{{c}}\n    {% endfor %}\n  {% endset %}\n  {% set groupby_gb_cols = 'group by ' + group_by_columns|join(',') %}\n{% endif %}\n\n{#-- We must add a fake join key in case additional grouping variables are not provided --#}\n{#-- Redshift does not allow for dynamically created join conditions (e.g. full join on 1 = 1 --#}\n{#-- The same logic is used in fewer_rows_than. In case of changes, maintain consistent logic --#}\n{% set group_by_columns = ['id_dbtutils_test_equal_rowcount'] + group_by_columns %}\n{% set groupby_gb_cols = 'group by ' + group_by_columns|join(',') %}\n\nwith a as (\n\n    select \n      {{select_gb_cols}}\n      1 as id_dbtutils_test_equal_rowcount,\n      count(*) as count_a \n    from {{ model }}\n    {{groupby_gb_cols}}\n\n\n),\nb as (\n\n    select \n      {{select_gb_cols}}\n      1 as id_dbtutils_test_equal_rowcount,\n      count(*) as count_b \n    from {{ compare_model }}\n    {{groupby_gb_cols}}\n\n),\nfinal as (\n\n    select\n    \n        {% for c in group_by_columns -%}\n          a.{{c}} as {{c}}_a,\n          b.{{c}} as {{c}}_b,\n        {% endfor %}\n\n        count_a,\n        count_b,\n        abs(count_a - count_b) as diff_count\n\n    from a\n    full join b\n    on\n    a.id_dbtutils_test_equal_rowcount = b.id_dbtutils_test_equal_rowcount\n    {{join_gb_cols}}\n\n\n)\n\nselect * from final\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722889774.431378, "supported_languages": null}, "macro.dbt_utils.test_relationships_where": {"name": "test_relationships_where", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/relationships_where.sql", "original_file_path": "macros/generic_tests/relationships_where.sql", "unique_id": "macro.dbt_utils.test_relationships_where", "macro_sql": "{% test relationships_where(model, column_name, to, field, from_condition=\"1=1\", to_condition=\"1=1\") %}\n  {{ return(adapter.dispatch('test_relationships_where', 'dbt_utils')(model, column_name, to, field, from_condition, to_condition)) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_utils.default__test_relationships_where"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722889774.432006, "supported_languages": null}, "macro.dbt_utils.default__test_relationships_where": {"name": "default__test_relationships_where", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/relationships_where.sql", "original_file_path": "macros/generic_tests/relationships_where.sql", "unique_id": "macro.dbt_utils.default__test_relationships_where", "macro_sql": "{% macro default__test_relationships_where(model, column_name, to, field, from_condition=\"1=1\", to_condition=\"1=1\") %}\n\n{# T-SQL has no boolean data type so we use 1=1 which returns TRUE #}\n{# ref https://stackoverflow.com/a/7170753/3842610 #}\n\nwith left_table as (\n\n  select\n    {{column_name}} as id\n\n  from {{model}}\n\n  where {{column_name}} is not null\n    and {{from_condition}}\n\n),\n\nright_table as (\n\n  select\n    {{field}} as id\n\n  from {{to}}\n\n  where {{field}} is not null\n    and {{to_condition}}\n\n),\n\nexceptions as (\n\n  select\n    left_table.id,\n    right_table.id as right_id\n\n  from left_table\n\n  left join right_table\n         on left_table.id = right_table.id\n\n  where right_table.id is null\n\n)\n\nselect * from exceptions\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722889774.43232, "supported_languages": null}, "macro.dbt_utils.test_recency": {"name": "test_recency", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/recency.sql", "original_file_path": "macros/generic_tests/recency.sql", "unique_id": "macro.dbt_utils.test_recency", "macro_sql": "{% test recency(model, field, datepart, interval, ignore_time_component=False, group_by_columns = []) %}\n  {{ return(adapter.dispatch('test_recency', 'dbt_utils')(model, field, datepart, interval, ignore_time_component, group_by_columns)) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_utils.default__test_recency"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722889774.432966, "supported_languages": null}, "macro.dbt_utils.default__test_recency": {"name": "default__test_recency", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/recency.sql", "original_file_path": "macros/generic_tests/recency.sql", "unique_id": "macro.dbt_utils.default__test_recency", "macro_sql": "{% macro default__test_recency(model, field, datepart, interval, ignore_time_component, group_by_columns) %}\n\n{% set threshold = 'cast(' ~ dbt.dateadd(datepart, interval * -1, dbt.current_timestamp()) ~ ' as ' ~ ('date' if ignore_time_component else dbt.type_timestamp()) ~ ')'  %}\n\n{% if group_by_columns|length() > 0 %}\n  {% set select_gb_cols = group_by_columns|join(' ,') + ', ' %}\n  {% set groupby_gb_cols = 'group by ' + group_by_columns|join(',') %}\n{% endif %}\n\n\nwith recency as (\n\n    select \n\n      {{ select_gb_cols }}\n      {% if ignore_time_component %}\n        cast(max({{ field }}) as date) as most_recent\n      {%- else %}\n        max({{ field }}) as most_recent\n      {%- endif %}\n\n    from {{ model }}\n\n    {{ groupby_gb_cols }}\n\n)\n\nselect\n\n    {{ select_gb_cols }}\n    most_recent,\n    {{ threshold }} as threshold\n\nfrom recency\nwhere most_recent < {{ threshold }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.dateadd", "macro.dbt.current_timestamp", "macro.dbt.type_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722889774.4338188, "supported_languages": null}, "macro.dbt_utils.test_not_constant": {"name": "test_not_constant", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/not_constant.sql", "original_file_path": "macros/generic_tests/not_constant.sql", "unique_id": "macro.dbt_utils.test_not_constant", "macro_sql": "{% test not_constant(model, column_name, group_by_columns = []) %}\n  {{ return(adapter.dispatch('test_not_constant', 'dbt_utils')(model, column_name, group_by_columns)) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_utils.default__test_not_constant"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722889774.434231, "supported_languages": null}, "macro.dbt_utils.default__test_not_constant": {"name": "default__test_not_constant", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/not_constant.sql", "original_file_path": "macros/generic_tests/not_constant.sql", "unique_id": "macro.dbt_utils.default__test_not_constant", "macro_sql": "{% macro default__test_not_constant(model, column_name, group_by_columns) %}\n\n{% if group_by_columns|length() > 0 %}\n  {% set select_gb_cols = group_by_columns|join(' ,') + ', ' %}\n  {% set groupby_gb_cols = 'group by ' + group_by_columns|join(',') %}\n{% endif %}\n\n\nselect\n    {# In TSQL, subquery aggregate columns need aliases #}\n    {# thus: a filler col name, 'filler_column' #}\n    {{select_gb_cols}}\n    count(distinct {{ column_name }}) as filler_column\n\nfrom {{ model }}\n\n  {{groupby_gb_cols}}\n\nhaving count(distinct {{ column_name }}) = 1\n\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722889774.434638, "supported_languages": null}, "macro.dbt_utils.test_accepted_range": {"name": "test_accepted_range", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/accepted_range.sql", "original_file_path": "macros/generic_tests/accepted_range.sql", "unique_id": "macro.dbt_utils.test_accepted_range", "macro_sql": "{% test accepted_range(model, column_name, min_value=none, max_value=none, inclusive=true) %}\n  {{ return(adapter.dispatch('test_accepted_range', 'dbt_utils')(model, column_name, min_value, max_value, inclusive)) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_utils.default__test_accepted_range"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722889774.4351912, "supported_languages": null}, "macro.dbt_utils.default__test_accepted_range": {"name": "default__test_accepted_range", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/accepted_range.sql", "original_file_path": "macros/generic_tests/accepted_range.sql", "unique_id": "macro.dbt_utils.default__test_accepted_range", "macro_sql": "{% macro default__test_accepted_range(model, column_name, min_value=none, max_value=none, inclusive=true) %}\n\nwith meet_condition as(\n  select *\n  from {{ model }}\n),\n\nvalidation_errors as (\n  select *\n  from meet_condition\n  where\n    -- never true, defaults to an empty result set. Exists to ensure any combo of the `or` clauses below succeeds\n    1 = 2\n\n  {%- if min_value is not none %}\n    -- records with a value >= min_value are permitted. The `not` flips this to find records that don't meet the rule.\n    or not {{ column_name }} > {{- \"=\" if inclusive }} {{ min_value }}\n  {%- endif %}\n\n  {%- if max_value is not none %}\n    -- records with a value <= max_value are permitted. The `not` flips this to find records that don't meet the rule.\n    or not {{ column_name }} < {{- \"=\" if inclusive }} {{ max_value }}\n  {%- endif %}\n)\n\nselect *\nfrom validation_errors\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722889774.435605, "supported_languages": null}, "macro.dbt_utils.test_not_accepted_values": {"name": "test_not_accepted_values", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/not_accepted_values.sql", "original_file_path": "macros/generic_tests/not_accepted_values.sql", "unique_id": "macro.dbt_utils.test_not_accepted_values", "macro_sql": "{% test not_accepted_values(model, column_name, values, quote=True) %}\n  {{ return(adapter.dispatch('test_not_accepted_values', 'dbt_utils')(model, column_name, values, quote)) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_utils.default__test_not_accepted_values"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722889774.4360871, "supported_languages": null}, "macro.dbt_utils.default__test_not_accepted_values": {"name": "default__test_not_accepted_values", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/not_accepted_values.sql", "original_file_path": "macros/generic_tests/not_accepted_values.sql", "unique_id": "macro.dbt_utils.default__test_not_accepted_values", "macro_sql": "{% macro default__test_not_accepted_values(model, column_name, values, quote=True) %}\nwith all_values as (\n\n    select distinct\n        {{ column_name }} as value_field\n\n    from {{ model }}\n\n),\n\nvalidation_errors as (\n\n    select\n        value_field\n\n    from all_values\n    where value_field in (\n        {% for value in values -%}\n            {% if quote -%}\n            '{{ value }}'\n            {%- else -%}\n            {{ value }}\n            {%- endif -%}\n            {%- if not loop.last -%},{%- endif %}\n        {%- endfor %}\n        )\n\n)\n\nselect *\nfrom validation_errors\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722889774.436432, "supported_languages": null}, "macro.dbt_utils.test_at_least_one": {"name": "test_at_least_one", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/at_least_one.sql", "original_file_path": "macros/generic_tests/at_least_one.sql", "unique_id": "macro.dbt_utils.test_at_least_one", "macro_sql": "{% test at_least_one(model, column_name, group_by_columns = []) %}\n  {{ return(adapter.dispatch('test_at_least_one', 'dbt_utils')(model, column_name, group_by_columns)) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_utils.default__test_at_least_one"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722889774.4370172, "supported_languages": null}, "macro.dbt_utils.default__test_at_least_one": {"name": "default__test_at_least_one", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/at_least_one.sql", "original_file_path": "macros/generic_tests/at_least_one.sql", "unique_id": "macro.dbt_utils.default__test_at_least_one", "macro_sql": "{% macro default__test_at_least_one(model, column_name, group_by_columns) %}\n\n{% set pruned_cols = [column_name] %}\n\n{% if group_by_columns|length() > 0 %}\n\n  {% set select_gb_cols = group_by_columns|join(' ,') + ', ' %}\n  {% set groupby_gb_cols = 'group by ' + group_by_columns|join(',') %}\n  {% set pruned_cols = group_by_columns %}\n\n  {% if column_name not in pruned_cols %}\n    {% do pruned_cols.append(column_name) %}\n  {% endif %}\n\n{% endif %}\n\n{% set select_pruned_cols = pruned_cols|join(' ,') %}\n\nselect *\nfrom (\n    with pruned_rows as (\n      select\n        {{ select_pruned_cols }}\n      from {{ model }}\n      where {{ column_name }} is not null\n      limit 1\n    )\n    select\n        {# In TSQL, subquery aggregate columns need aliases #}\n        {# thus: a filler col name, 'filler_column' #}\n      {{select_gb_cols}}\n      count({{ column_name }}) as filler_column\n\n    from pruned_rows\n\n    {{groupby_gb_cols}}\n\n    having count({{ column_name }}) = 0\n\n) validation_errors\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722889774.437696, "supported_languages": null}, "macro.dbt_utils.test_unique_combination_of_columns": {"name": "test_unique_combination_of_columns", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/unique_combination_of_columns.sql", "original_file_path": "macros/generic_tests/unique_combination_of_columns.sql", "unique_id": "macro.dbt_utils.test_unique_combination_of_columns", "macro_sql": "{% test unique_combination_of_columns(model, combination_of_columns, quote_columns=false) %}\n  {{ return(adapter.dispatch('test_unique_combination_of_columns', 'dbt_utils')(model, combination_of_columns, quote_columns)) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_utils.default__test_unique_combination_of_columns"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722889774.438241, "supported_languages": null}, "macro.dbt_utils.default__test_unique_combination_of_columns": {"name": "default__test_unique_combination_of_columns", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/unique_combination_of_columns.sql", "original_file_path": "macros/generic_tests/unique_combination_of_columns.sql", "unique_id": "macro.dbt_utils.default__test_unique_combination_of_columns", "macro_sql": "{% macro default__test_unique_combination_of_columns(model, combination_of_columns, quote_columns=false) %}\n\n{% if not quote_columns %}\n    {%- set column_list=combination_of_columns %}\n{% elif quote_columns %}\n    {%- set column_list=[] %}\n        {% for column in combination_of_columns -%}\n            {% set column_list = column_list.append( adapter.quote(column) ) %}\n        {%- endfor %}\n{% else %}\n    {{ exceptions.raise_compiler_error(\n        \"`quote_columns` argument for unique_combination_of_columns test must be one of [True, False] Got: '\" ~ quote ~\"'.'\"\n    ) }}\n{% endif %}\n\n{%- set columns_csv=column_list | join(', ') %}\n\n\nwith validation_errors as (\n\n    select\n        {{ columns_csv }}\n    from {{ model }}\n    group by {{ columns_csv }}\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722889774.4387908, "supported_languages": null}, "macro.dbt_utils.test_cardinality_equality": {"name": "test_cardinality_equality", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/cardinality_equality.sql", "original_file_path": "macros/generic_tests/cardinality_equality.sql", "unique_id": "macro.dbt_utils.test_cardinality_equality", "macro_sql": "{% test cardinality_equality(model, column_name, to, field) %}\n    {{ return(adapter.dispatch('test_cardinality_equality', 'dbt_utils')(model, column_name, to, field)) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_utils.default__test_cardinality_equality"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722889774.439301, "supported_languages": null}, "macro.dbt_utils.default__test_cardinality_equality": {"name": "default__test_cardinality_equality", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/cardinality_equality.sql", "original_file_path": "macros/generic_tests/cardinality_equality.sql", "unique_id": "macro.dbt_utils.default__test_cardinality_equality", "macro_sql": "{% macro default__test_cardinality_equality(model, column_name, to, field) %}\n\n{# T-SQL does not let you use numbers as aliases for columns #}\n{# Thus, no \"GROUP BY 1\" #}\n\nwith table_a as (\nselect\n  {{ column_name }},\n  count(*) as num_rows\nfrom {{ model }}\ngroup by {{ column_name }}\n),\n\ntable_b as (\nselect\n  {{ field }},\n  count(*) as num_rows\nfrom {{ to }}\ngroup by {{ field }}\n),\n\nexcept_a as (\n  select *\n  from table_a\n  {{ dbt.except() }}\n  select *\n  from table_b\n),\n\nexcept_b as (\n  select *\n  from table_b\n  {{ dbt.except() }}\n  select *\n  from table_a\n),\n\nunioned as (\n  select *\n  from except_a\n  union all\n  select *\n  from except_b\n)\n\nselect *\nfrom unioned\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.except"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722889774.4396002, "supported_languages": null}, "macro.dbt_utils.test_expression_is_true": {"name": "test_expression_is_true", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/expression_is_true.sql", "original_file_path": "macros/generic_tests/expression_is_true.sql", "unique_id": "macro.dbt_utils.test_expression_is_true", "macro_sql": "{% test expression_is_true(model, expression, column_name=None) %}\n  {{ return(adapter.dispatch('test_expression_is_true', 'dbt_utils')(model, expression, column_name)) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_utils.default__test_expression_is_true"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722889774.439947, "supported_languages": null}, "macro.dbt_utils.default__test_expression_is_true": {"name": "default__test_expression_is_true", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/expression_is_true.sql", "original_file_path": "macros/generic_tests/expression_is_true.sql", "unique_id": "macro.dbt_utils.default__test_expression_is_true", "macro_sql": "{% macro default__test_expression_is_true(model, expression, column_name) %}\n\n{% set column_list = '*' if should_store_failures() else \"1\" %}\n\nselect\n    {{ column_list }}\nfrom {{ model }}\n{% if column_name is none %}\nwhere not({{ expression }})\n{%- else %}\nwhere not({{ column_name }} {{ expression }})\n{%- endif %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.should_store_failures"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722889774.4402628, "supported_languages": null}, "macro.dbt_utils.test_not_null_proportion": {"name": "test_not_null_proportion", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/not_null_proportion.sql", "original_file_path": "macros/generic_tests/not_null_proportion.sql", "unique_id": "macro.dbt_utils.test_not_null_proportion", "macro_sql": "{% macro test_not_null_proportion(model, group_by_columns = []) %}\n  {{ return(adapter.dispatch('test_not_null_proportion', 'dbt_utils')(model, group_by_columns, **kwargs)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__test_not_null_proportion"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722889774.4408529, "supported_languages": null}, "macro.dbt_utils.default__test_not_null_proportion": {"name": "default__test_not_null_proportion", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/not_null_proportion.sql", "original_file_path": "macros/generic_tests/not_null_proportion.sql", "unique_id": "macro.dbt_utils.default__test_not_null_proportion", "macro_sql": "{% macro default__test_not_null_proportion(model, group_by_columns) %}\n\n{% set column_name = kwargs.get('column_name', kwargs.get('arg')) %}\n{% set at_least = kwargs.get('at_least', kwargs.get('arg')) %}\n{% set at_most = kwargs.get('at_most', kwargs.get('arg', 1)) %}\n\n{% if group_by_columns|length() > 0 %}\n  {% set select_gb_cols = group_by_columns|join(' ,') + ', ' %}\n  {% set groupby_gb_cols = 'group by ' + group_by_columns|join(',') %}\n{% endif %}\n\nwith validation as (\n  select\n    {{select_gb_cols}}\n    sum(case when {{ column_name }} is null then 0 else 1 end) / cast(count(*) as numeric) as not_null_proportion\n  from {{ model }}\n  {{groupby_gb_cols}}\n),\nvalidation_errors as (\n  select\n    {{select_gb_cols}}\n    not_null_proportion\n  from validation\n  where not_null_proportion < {{ at_least }} or not_null_proportion > {{ at_most }}\n)\nselect\n  *\nfrom validation_errors\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722889774.441631, "supported_languages": null}, "macro.dbt_utils.test_sequential_values": {"name": "test_sequential_values", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/sequential_values.sql", "original_file_path": "macros/generic_tests/sequential_values.sql", "unique_id": "macro.dbt_utils.test_sequential_values", "macro_sql": "{% test sequential_values(model, column_name, interval=1, datepart=None, group_by_columns = []) %}\n\n  {{ return(adapter.dispatch('test_sequential_values', 'dbt_utils')(model, column_name, interval, datepart, group_by_columns)) }}\n\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_utils.default__test_sequential_values"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722889774.4424288, "supported_languages": null}, "macro.dbt_utils.default__test_sequential_values": {"name": "default__test_sequential_values", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/sequential_values.sql", "original_file_path": "macros/generic_tests/sequential_values.sql", "unique_id": "macro.dbt_utils.default__test_sequential_values", "macro_sql": "{% macro default__test_sequential_values(model, column_name, interval=1, datepart=None, group_by_columns = []) %}\n\n{% set previous_column_name = \"previous_\" ~ dbt_utils.slugify(column_name) %}\n\n{% if group_by_columns|length() > 0 %}\n  {% set select_gb_cols = group_by_columns|join(',') + ', ' %}\n  {% set partition_gb_cols = 'partition by ' + group_by_columns|join(',') %}\n{% endif %}\n\nwith windowed as (\n\n    select\n        {{ select_gb_cols }}\n        {{ column_name }},\n        lag({{ column_name }}) over (\n            {{partition_gb_cols}}\n            order by {{ column_name }}\n        ) as {{ previous_column_name }}\n    from {{ model }}\n),\n\nvalidation_errors as (\n    select\n        *\n    from windowed\n    {% if datepart %}\n    where not(cast({{ column_name }} as {{ dbt.type_timestamp() }})= cast({{ dbt.dateadd(datepart, interval, previous_column_name) }} as {{ dbt.type_timestamp() }}))\n    {% else %}\n    where not({{ column_name }} = {{ previous_column_name }} + {{ interval }})\n    {% endif %}\n)\n\nselect *\nfrom validation_errors\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.slugify", "macro.dbt.type_timestamp", "macro.dbt.dateadd"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722889774.4432561, "supported_languages": null}, "macro.dbt_utils.test_equality": {"name": "test_equality", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/equality.sql", "original_file_path": "macros/generic_tests/equality.sql", "unique_id": "macro.dbt_utils.test_equality", "macro_sql": "{% test equality(model, compare_model, compare_columns=None, exclude_columns=None, precision = None) %}\n  {{ return(adapter.dispatch('test_equality', 'dbt_utils')(model, compare_model, compare_columns, exclude_columns, precision)) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_utils.default__test_equality"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722889774.444948, "supported_languages": null}, "macro.dbt_utils.default__test_equality": {"name": "default__test_equality", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/equality.sql", "original_file_path": "macros/generic_tests/equality.sql", "unique_id": "macro.dbt_utils.default__test_equality", "macro_sql": "{% macro default__test_equality(model, compare_model, compare_columns=None, exclude_columns=None, precision = None) %}\n\n{%- if compare_columns and exclude_columns -%}\n    {{ exceptions.raise_compiler_error(\"Both a compare and an ignore list were provided to the `equality` macro. Only one is allowed\") }}\n{%- endif -%}\n\n{% set set_diff %}\n    count(*) + coalesce(abs(\n        sum(case when which_diff = 'a_minus_b' then 1 else 0 end) -\n        sum(case when which_diff = 'b_minus_a' then 1 else 0 end)\n    ), 0)\n{% endset %}\n\n{#-- Needs to be set at parse time, before we return '' below --#}\n{{ config(fail_calc = set_diff) }}\n\n{#-- Prevent querying of db in parsing mode. This works because this macro does not create any new refs. #}\n{%- if not execute -%}\n    {{ return('') }}\n{% endif %}\n\n\n\n-- setup\n{%- do dbt_utils._is_relation(model, 'test_equality') -%}\n\n{# Ensure there are no extra columns in the compare_model vs model #}\n{%- if not compare_columns -%}\n    {%- do dbt_utils._is_ephemeral(model, 'test_equality') -%}\n    {%- do dbt_utils._is_ephemeral(compare_model, 'test_equality') -%}\n\n    {%- set model_columns = adapter.get_columns_in_relation(model) -%}\n    {%- set compare_model_columns = adapter.get_columns_in_relation(compare_model) -%}\n\n\n    {%- if exclude_columns -%}\n        {#-- Lower case ignore columns for easier comparison --#}\n        {%- set exclude_columns = exclude_columns | map(\"lower\") | list %}\n\n        {# Filter out the excluded columns #}\n        {%- set include_columns = [] %}\n        {%- set include_model_columns = [] %}\n        {%- for column in model_columns -%}\n            {%- if column.name | lower not in exclude_columns -%}\n                {% do include_columns.append(column) %}\n            {%- endif %}\n        {%- endfor %}\n        {%- for column in compare_model_columns -%}\n            {%- if column.name | lower not in exclude_columns -%}\n                {% do include_model_columns.append(column) %}\n            {%- endif %}\n        {%- endfor %}\n\n        {%- set compare_columns_set = set(include_columns | map(attribute='quoted') | map(\"lower\")) %}\n        {%- set compare_model_columns_set = set(include_model_columns | map(attribute='quoted') | map(\"lower\")) %}\n    {%- else -%}\n        {%- set compare_columns_set = set(model_columns | map(attribute='quoted') | map(\"lower\")) %}\n        {%- set compare_model_columns_set = set(compare_model_columns | map(attribute='quoted') | map(\"lower\")) %}\n    {%- endif -%}\n\n    {% if compare_columns_set != compare_model_columns_set %}\n        {{ exceptions.raise_compiler_error(compare_model ~\" has less columns than \" ~ model ~ \", please ensure they have the same columns or use the `compare_columns` or `exclude_columns` arguments to subset them.\") }}\n    {% endif %}\n\n\n{% endif %}\n\n{%- if not precision -%}\n    {%- if not compare_columns -%}\n        {# \n            You cannot get the columns in an ephemeral model (due to not existing in the information schema),\n            so if the user does not provide an explicit list of columns we must error in the case it is ephemeral\n        #}\n        {%- do dbt_utils._is_ephemeral(model, 'test_equality') -%}\n        {%- set compare_columns = adapter.get_columns_in_relation(model)-%}\n\n        {%- if exclude_columns -%}\n            {#-- Lower case ignore columns for easier comparison --#}\n            {%- set exclude_columns = exclude_columns | map(\"lower\") | list %}\n\n            {# Filter out the excluded columns #}\n            {%- set include_columns = [] %}\n            {%- for column in compare_columns -%}\n                {%- if column.name | lower not in exclude_columns -%}\n                    {% do include_columns.append(column) %}\n                {%- endif %}\n            {%- endfor %}\n\n            {%- set compare_columns = include_columns | map(attribute='quoted') %}\n        {%- else -%} {# Compare columns provided #}\n            {%- set compare_columns = compare_columns | map(attribute='quoted') %}\n        {%- endif -%}\n    {%- endif -%}\n\n    {% set compare_cols_csv = compare_columns | join(', ') %}\n\n{% else %} {# Precision required #}\n    {#-\n        If rounding is required, we need to get the types, so it cannot be ephemeral even if they provide column names\n    -#}\n    {%- do dbt_utils._is_ephemeral(model, 'test_equality') -%}\n    {%- set columns = adapter.get_columns_in_relation(model) -%}\n\n    {% set columns_list = [] %}\n    {%- for col in columns -%}\n        {%- if (\n                (col.name|lower in compare_columns|map('lower') or not compare_columns) and\n                (col.name|lower not in exclude_columns|map('lower') or not exclude_columns)\n                ) -%}\n            {# Databricks double type is not picked up by any number type checks in dbt #}\n            {%- if col.is_float() or col.is_numeric() or col.data_type == 'double' -%}\n                {# Cast is required due to postgres not having round for a double precision number #}\n                {%- do columns_list.append('round(cast(' ~ col.quoted ~ ' as ' ~ dbt.type_numeric() ~ '),' ~ precision ~ ') as ' ~ col.quoted) -%}\n            {%- else -%} {# Non-numeric type #}\n                {%- do columns_list.append(col.quoted) -%}\n            {%- endif -%}\n        {% endif %}\n    {%- endfor -%}\n\n    {% set compare_cols_csv = columns_list | join(', ') %}\n\n{% endif %}\n\nwith a as (\n\n    select * from {{ model }}\n\n),\n\nb as (\n\n    select * from {{ compare_model }}\n\n),\n\na_minus_b as (\n\n    select {{compare_cols_csv}} from a\n    {{ dbt.except() }}\n    select {{compare_cols_csv}} from b\n\n),\n\nb_minus_a as (\n\n    select {{compare_cols_csv}} from b\n    {{ dbt.except() }}\n    select {{compare_cols_csv}} from a\n\n),\n\nunioned as (\n\n    select 'a_minus_b' as which_diff, a_minus_b.* from a_minus_b\n    union all\n    select 'b_minus_a' as which_diff, b_minus_a.* from b_minus_a\n\n)\n\nselect * from unioned\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils._is_relation", "macro.dbt_utils._is_ephemeral", "macro.dbt.type_numeric", "macro.dbt.except"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722889774.448364, "supported_languages": null}, "macro.dbt_utils.test_not_empty_string": {"name": "test_not_empty_string", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/not_empty_string.sql", "original_file_path": "macros/generic_tests/not_empty_string.sql", "unique_id": "macro.dbt_utils.test_not_empty_string", "macro_sql": "{% test not_empty_string(model, column_name, trim_whitespace=true) %}\n\n  {{ return(adapter.dispatch('test_not_empty_string', 'dbt_utils')(model, column_name, trim_whitespace)) }}\n\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_utils.default__test_not_empty_string"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722889774.448844, "supported_languages": null}, "macro.dbt_utils.default__test_not_empty_string": {"name": "default__test_not_empty_string", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/not_empty_string.sql", "original_file_path": "macros/generic_tests/not_empty_string.sql", "unique_id": "macro.dbt_utils.default__test_not_empty_string", "macro_sql": "{% macro default__test_not_empty_string(model, column_name, trim_whitespace=true) %}\n\n    with\n    \n    all_values as (\n\n        select \n\n\n            {% if trim_whitespace == true -%}\n\n                trim({{ column_name }}) as {{ column_name }}\n\n            {%- else -%}\n\n                {{ column_name }}\n\n            {%- endif %}\n            \n        from {{ model }}\n\n    ),\n\n    errors as (\n\n        select * from all_values\n        where {{ column_name }} = ''\n\n    )\n\n    select * from errors\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722889774.44911, "supported_languages": null}, "macro.dbt_utils.test_mutually_exclusive_ranges": {"name": "test_mutually_exclusive_ranges", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/mutually_exclusive_ranges.sql", "original_file_path": "macros/generic_tests/mutually_exclusive_ranges.sql", "unique_id": "macro.dbt_utils.test_mutually_exclusive_ranges", "macro_sql": "{% test mutually_exclusive_ranges(model, lower_bound_column, upper_bound_column, partition_by=None, gaps='allowed', zero_length_range_allowed=False) %}\n  {{ return(adapter.dispatch('test_mutually_exclusive_ranges', 'dbt_utils')(model, lower_bound_column, upper_bound_column, partition_by, gaps, zero_length_range_allowed)) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_utils.default__test_mutually_exclusive_ranges"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722889774.4521558, "supported_languages": null}, "macro.dbt_utils.default__test_mutually_exclusive_ranges": {"name": "default__test_mutually_exclusive_ranges", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/mutually_exclusive_ranges.sql", "original_file_path": "macros/generic_tests/mutually_exclusive_ranges.sql", "unique_id": "macro.dbt_utils.default__test_mutually_exclusive_ranges", "macro_sql": "{% macro default__test_mutually_exclusive_ranges(model, lower_bound_column, upper_bound_column, partition_by=None, gaps='allowed', zero_length_range_allowed=False) %}\n{% if gaps == 'not_allowed' %}\n    {% set allow_gaps_operator='=' %}\n    {% set allow_gaps_operator_in_words='equal_to' %}\n{% elif gaps == 'allowed' %}\n    {% set allow_gaps_operator='<=' %}\n    {% set allow_gaps_operator_in_words='less_than_or_equal_to' %}\n{% elif gaps == 'required' %}\n    {% set allow_gaps_operator='<' %}\n    {% set allow_gaps_operator_in_words='less_than' %}\n{% else %}\n    {{ exceptions.raise_compiler_error(\n        \"`gaps` argument for mutually_exclusive_ranges test must be one of ['not_allowed', 'allowed', 'required'] Got: '\" ~ gaps ~\"'.'\"\n    ) }}\n{% endif %}\n{% if not zero_length_range_allowed %}\n    {% set allow_zero_length_operator='<' %}\n    {% set allow_zero_length_operator_in_words='less_than' %}\n{% elif zero_length_range_allowed %}\n    {% set allow_zero_length_operator='<=' %}\n    {% set allow_zero_length_operator_in_words='less_than_or_equal_to' %}\n{% else %}\n    {{ exceptions.raise_compiler_error(\n        \"`zero_length_range_allowed` argument for mutually_exclusive_ranges test must be one of [true, false] Got: '\" ~ zero_length_range_allowed ~\"'.'\"\n    ) }}\n{% endif %}\n\n{% set partition_clause=\"partition by \" ~ partition_by if partition_by else '' %}\n\nwith window_functions as (\n\n    select\n        {% if partition_by %}\n        {{ partition_by }} as partition_by_col,\n        {% endif %}\n        {{ lower_bound_column }} as lower_bound,\n        {{ upper_bound_column }} as upper_bound,\n\n        lead({{ lower_bound_column }}) over (\n            {{ partition_clause }}\n            order by {{ lower_bound_column }}, {{ upper_bound_column }}\n        ) as next_lower_bound,\n\n        row_number() over (\n            {{ partition_clause }}\n            order by {{ lower_bound_column }} desc, {{ upper_bound_column }} desc\n        ) = 1 as is_last_record\n\n    from {{ model }}\n\n),\n\ncalc as (\n    -- We want to return records where one of our assumptions fails, so we'll use\n    -- the `not` function with `and` statements so we can write our assumptions more cleanly\n    select\n        *,\n\n        -- For each record: lower_bound should be < upper_bound.\n        -- Coalesce it to return an error on the null case (implicit assumption\n        -- these columns are not_null)\n        coalesce(\n            lower_bound {{ allow_zero_length_operator }} upper_bound,\n            false\n        ) as lower_bound_{{ allow_zero_length_operator_in_words }}_upper_bound,\n\n        -- For each record: upper_bound {{ allow_gaps_operator }} the next lower_bound.\n        -- Coalesce it to handle null cases for the last record.\n        coalesce(\n            upper_bound {{ allow_gaps_operator }} next_lower_bound,\n            is_last_record,\n            false\n        ) as upper_bound_{{ allow_gaps_operator_in_words }}_next_lower_bound\n\n    from window_functions\n\n),\n\nvalidation_errors as (\n\n    select\n        *\n    from calc\n\n    where not(\n        -- THE FOLLOWING SHOULD BE TRUE --\n        lower_bound_{{ allow_zero_length_operator_in_words }}_upper_bound\n        and upper_bound_{{ allow_gaps_operator_in_words }}_next_lower_bound\n    )\n)\n\nselect * from validation_errors\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722889774.4534268, "supported_languages": null}, "macro.dbt_utils.pretty_log_format": {"name": "pretty_log_format", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/jinja_helpers/pretty_log_format.sql", "original_file_path": "macros/jinja_helpers/pretty_log_format.sql", "unique_id": "macro.dbt_utils.pretty_log_format", "macro_sql": "{% macro pretty_log_format(message) %}\n    {{ return(adapter.dispatch('pretty_log_format', 'dbt_utils')(message)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__pretty_log_format"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722889774.453666, "supported_languages": null}, "macro.dbt_utils.default__pretty_log_format": {"name": "default__pretty_log_format", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/jinja_helpers/pretty_log_format.sql", "original_file_path": "macros/jinja_helpers/pretty_log_format.sql", "unique_id": "macro.dbt_utils.default__pretty_log_format", "macro_sql": "{% macro default__pretty_log_format(message) %}\n    {{ return( dbt_utils.pretty_time() ~ ' + ' ~ message) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.pretty_time"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722889774.453812, "supported_languages": null}, "macro.dbt_utils._is_relation": {"name": "_is_relation", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/jinja_helpers/_is_relation.sql", "original_file_path": "macros/jinja_helpers/_is_relation.sql", "unique_id": "macro.dbt_utils._is_relation", "macro_sql": "{% macro _is_relation(obj, macro) %}\n    {%- if not (obj is mapping and obj.get('metadata', {}).get('type', '').endswith('Relation')) -%}\n        {%- do exceptions.raise_compiler_error(\"Macro \" ~ macro ~ \" expected a Relation but received the value: \" ~ obj) -%}\n    {%- endif -%}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722889774.4542038, "supported_languages": null}, "macro.dbt_utils.pretty_time": {"name": "pretty_time", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/jinja_helpers/pretty_time.sql", "original_file_path": "macros/jinja_helpers/pretty_time.sql", "unique_id": "macro.dbt_utils.pretty_time", "macro_sql": "{% macro pretty_time(format='%H:%M:%S') %}\n    {{ return(adapter.dispatch('pretty_time', 'dbt_utils')(format)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__pretty_time"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722889774.4544451, "supported_languages": null}, "macro.dbt_utils.default__pretty_time": {"name": "default__pretty_time", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/jinja_helpers/pretty_time.sql", "original_file_path": "macros/jinja_helpers/pretty_time.sql", "unique_id": "macro.dbt_utils.default__pretty_time", "macro_sql": "{% macro default__pretty_time(format='%H:%M:%S') %}\n    {{ return(modules.datetime.datetime.now().strftime(format)) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722889774.454611, "supported_languages": null}, "macro.dbt_utils.log_info": {"name": "log_info", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/jinja_helpers/log_info.sql", "original_file_path": "macros/jinja_helpers/log_info.sql", "unique_id": "macro.dbt_utils.log_info", "macro_sql": "{% macro log_info(message) %}\n    {{ return(adapter.dispatch('log_info', 'dbt_utils')(message)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__log_info"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722889774.4548311, "supported_languages": null}, "macro.dbt_utils.default__log_info": {"name": "default__log_info", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/jinja_helpers/log_info.sql", "original_file_path": "macros/jinja_helpers/log_info.sql", "unique_id": "macro.dbt_utils.default__log_info", "macro_sql": "{% macro default__log_info(message) %}\n    {{ log(dbt_utils.pretty_log_format(message), info=True) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.pretty_log_format"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722889774.4549818, "supported_languages": null}, "macro.dbt_utils.slugify": {"name": "slugify", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/jinja_helpers/slugify.sql", "original_file_path": "macros/jinja_helpers/slugify.sql", "unique_id": "macro.dbt_utils.slugify", "macro_sql": "{% macro slugify(string) %}\n\n{#- Lower case the string -#}\n{% set string = string | lower %}\n{#- Replace spaces and dashes with underscores -#}\n{% set string = modules.re.sub('[ -]+', '_', string) %}\n{#- Only take letters, numbers, and underscores -#}\n{% set string = modules.re.sub('[^a-z0-9_]+', '', string) %}\n{#- Prepends \"_\" if string begins with a number -#}\n{% set string = modules.re.sub('^[0-9]', '_' + string[0], string) %}\n\n{{ return(string) }}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722889774.4555142, "supported_languages": null}, "macro.dbt_utils._is_ephemeral": {"name": "_is_ephemeral", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/jinja_helpers/_is_ephemeral.sql", "original_file_path": "macros/jinja_helpers/_is_ephemeral.sql", "unique_id": "macro.dbt_utils._is_ephemeral", "macro_sql": "{% macro _is_ephemeral(obj, macro) %}\n    {%- if obj.is_cte -%}\n        {% set ephemeral_prefix = api.Relation.add_ephemeral_prefix('') %}\n        {% if obj.name.startswith(ephemeral_prefix) %}\n            {% set model_name = obj.name[(ephemeral_prefix|length):] %}\n        {% else %}\n            {% set model_name = obj.name %}\n        {%- endif -%}\n        {% set error_message %}\nThe `{{ macro }}` macro cannot be used with ephemeral models, as it relies on the information schema.\n\n`{{ model_name }}` is an ephemeral model. Consider making it a view or table instead.\n        {% endset %}\n        {%- do exceptions.raise_compiler_error(error_message) -%}\n    {%- endif -%}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722889774.456227, "supported_languages": null}, "macro.dbt_utils.get_intervals_between": {"name": "get_intervals_between", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/date_spine.sql", "original_file_path": "macros/sql/date_spine.sql", "unique_id": "macro.dbt_utils.get_intervals_between", "macro_sql": "{% macro get_intervals_between(start_date, end_date, datepart) -%}\n    {{ return(adapter.dispatch('get_intervals_between', 'dbt_utils')(start_date, end_date, datepart)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__get_intervals_between"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722889774.45684, "supported_languages": null}, "macro.dbt_utils.default__get_intervals_between": {"name": "default__get_intervals_between", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/date_spine.sql", "original_file_path": "macros/sql/date_spine.sql", "unique_id": "macro.dbt_utils.default__get_intervals_between", "macro_sql": "{% macro default__get_intervals_between(start_date, end_date, datepart) -%}\n    {%- call statement('get_intervals_between', fetch_result=True) %}\n\n        select {{ dbt.datediff(start_date, end_date, datepart) }}\n\n    {%- endcall -%}\n\n    {%- set value_list = load_result('get_intervals_between') -%}\n\n    {%- if value_list and value_list['data'] -%}\n        {%- set values = value_list['data'] | map(attribute=0) | list %}\n        {{ return(values[0]) }}\n    {%- else -%}\n        {{ return(1) }}\n    {%- endif -%}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.statement", "macro.dbt.datediff"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722889774.457351, "supported_languages": null}, "macro.dbt_utils.date_spine": {"name": "date_spine", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/date_spine.sql", "original_file_path": "macros/sql/date_spine.sql", "unique_id": "macro.dbt_utils.date_spine", "macro_sql": "{% macro date_spine(datepart, start_date, end_date) %}\n    {{ return(adapter.dispatch('date_spine', 'dbt_utils')(datepart, start_date, end_date)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__date_spine"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722889774.457636, "supported_languages": null}, "macro.dbt_utils.default__date_spine": {"name": "default__date_spine", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/date_spine.sql", "original_file_path": "macros/sql/date_spine.sql", "unique_id": "macro.dbt_utils.default__date_spine", "macro_sql": "{% macro default__date_spine(datepart, start_date, end_date) %}\n\n\n{# call as follows:\n\ndate_spine(\n    \"day\",\n    \"to_date('01/01/2016', 'mm/dd/yyyy')\",\n    \"dbt.dateadd(week, 1, current_date)\"\n) #}\n\n\nwith rawdata as (\n\n    {{dbt_utils.generate_series(\n        dbt_utils.get_intervals_between(start_date, end_date, datepart)\n    )}}\n\n),\n\nall_periods as (\n\n    select (\n        {{\n            dbt.dateadd(\n                datepart,\n                \"row_number() over (order by 1) - 1\",\n                start_date\n            )\n        }}\n    ) as date_{{datepart}}\n    from rawdata\n\n),\n\nfiltered as (\n\n    select *\n    from all_periods\n    where date_{{datepart}} <= {{ end_date }}\n\n)\n\nselect * from filtered\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.generate_series", "macro.dbt_utils.get_intervals_between", "macro.dbt.dateadd"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722889774.457959, "supported_languages": null}, "macro.dbt_utils.safe_subtract": {"name": "safe_subtract", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/safe_subtract.sql", "original_file_path": "macros/sql/safe_subtract.sql", "unique_id": "macro.dbt_utils.safe_subtract", "macro_sql": "{%- macro safe_subtract(field_list) -%}\n    {{ return(adapter.dispatch('safe_subtract', 'dbt_utils')(field_list)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__safe_subtract"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722889774.4582999, "supported_languages": null}, "macro.dbt_utils.default__safe_subtract": {"name": "default__safe_subtract", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/safe_subtract.sql", "original_file_path": "macros/sql/safe_subtract.sql", "unique_id": "macro.dbt_utils.default__safe_subtract", "macro_sql": "\n\n{%- macro default__safe_subtract(field_list) -%}\n\n{%- if field_list is not iterable or field_list is string or field_list is mapping -%}\n\n{%- set error_message = '\nWarning: the `safe_subtract` macro takes a single list argument instead of \\\nstring arguments. The {}.{} model triggered this warning. \\\n'.format(model.package_name, model.name) -%}\n\n{%- do exceptions.raise_compiler_error(error_message) -%}\n\n{%- endif -%}\n\n{% set fields = [] %}\n\n{%- for field in field_list -%}\n\n    {% do fields.append(\"coalesce(\" ~ field ~ \", 0)\") %}\n\n{%- endfor -%}\n\n{{ fields|join(' -\\n  ') }}\n\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722889774.458772, "supported_languages": null}, "macro.dbt_utils.nullcheck_table": {"name": "nullcheck_table", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/nullcheck_table.sql", "original_file_path": "macros/sql/nullcheck_table.sql", "unique_id": "macro.dbt_utils.nullcheck_table", "macro_sql": "{% macro nullcheck_table(relation) %}\n    {{ return(adapter.dispatch('nullcheck_table', 'dbt_utils')(relation)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__nullcheck_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722889774.4590452, "supported_languages": null}, "macro.dbt_utils.default__nullcheck_table": {"name": "default__nullcheck_table", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/nullcheck_table.sql", "original_file_path": "macros/sql/nullcheck_table.sql", "unique_id": "macro.dbt_utils.default__nullcheck_table", "macro_sql": "{% macro default__nullcheck_table(relation) %}\n\n  {%- do dbt_utils._is_relation(relation, 'nullcheck_table') -%}\n  {%- do dbt_utils._is_ephemeral(relation, 'nullcheck_table') -%}\n  {% set cols = adapter.get_columns_in_relation(relation) %}\n\n  select {{ dbt_utils.nullcheck(cols) }}\n  from {{relation}}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils._is_relation", "macro.dbt_utils._is_ephemeral", "macro.dbt_utils.nullcheck"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722889774.459341, "supported_languages": null}, "macro.dbt_utils.get_relations_by_pattern": {"name": "get_relations_by_pattern", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_relations_by_pattern.sql", "original_file_path": "macros/sql/get_relations_by_pattern.sql", "unique_id": "macro.dbt_utils.get_relations_by_pattern", "macro_sql": "{% macro get_relations_by_pattern(schema_pattern, table_pattern, exclude='', database=target.database) %}\n    {{ return(adapter.dispatch('get_relations_by_pattern', 'dbt_utils')(schema_pattern, table_pattern, exclude, database)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__get_relations_by_pattern"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722889774.459918, "supported_languages": null}, "macro.dbt_utils.default__get_relations_by_pattern": {"name": "default__get_relations_by_pattern", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_relations_by_pattern.sql", "original_file_path": "macros/sql/get_relations_by_pattern.sql", "unique_id": "macro.dbt_utils.default__get_relations_by_pattern", "macro_sql": "{% macro default__get_relations_by_pattern(schema_pattern, table_pattern, exclude='', database=target.database) %}\n\n    {%- call statement('get_tables', fetch_result=True) %}\n\n      {{ dbt_utils.get_tables_by_pattern_sql(schema_pattern, table_pattern, exclude, database) }}\n\n    {%- endcall -%}\n\n    {%- set table_list = load_result('get_tables') -%}\n\n    {%- if table_list and table_list['table'] -%}\n        {%- set tbl_relations = [] -%}\n        {%- for row in table_list['table'] -%}\n            {%- set tbl_relation = api.Relation.create(\n                database=database,\n                schema=row.table_schema,\n                identifier=row.table_name,\n                type=row.table_type\n            ) -%}\n            {%- do tbl_relations.append(tbl_relation) -%}\n        {%- endfor -%}\n\n        {{ return(tbl_relations) }}\n    {%- else -%}\n        {{ return([]) }}\n    {%- endif -%}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement", "macro.dbt_utils.get_tables_by_pattern_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722889774.460646, "supported_languages": null}, "macro.dbt_utils.get_powers_of_two": {"name": "get_powers_of_two", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/generate_series.sql", "original_file_path": "macros/sql/generate_series.sql", "unique_id": "macro.dbt_utils.get_powers_of_two", "macro_sql": "{% macro get_powers_of_two(upper_bound) %}\n    {{ return(adapter.dispatch('get_powers_of_two', 'dbt_utils')(upper_bound)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__get_powers_of_two"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722889774.461378, "supported_languages": null}, "macro.dbt_utils.default__get_powers_of_two": {"name": "default__get_powers_of_two", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/generate_series.sql", "original_file_path": "macros/sql/generate_series.sql", "unique_id": "macro.dbt_utils.default__get_powers_of_two", "macro_sql": "{% macro default__get_powers_of_two(upper_bound) %}\n\n    {% if upper_bound <= 0 %}\n    {{ exceptions.raise_compiler_error(\"upper bound must be positive\") }}\n    {% endif %}\n\n    {% for _ in range(1, 100) %}\n       {% if upper_bound <= 2 ** loop.index %}{{ return(loop.index) }}{% endif %}\n    {% endfor %}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722889774.461726, "supported_languages": null}, "macro.dbt_utils.generate_series": {"name": "generate_series", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/generate_series.sql", "original_file_path": "macros/sql/generate_series.sql", "unique_id": "macro.dbt_utils.generate_series", "macro_sql": "{% macro generate_series(upper_bound) %}\n    {{ return(adapter.dispatch('generate_series', 'dbt_utils')(upper_bound)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__generate_series"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722889774.461889, "supported_languages": null}, "macro.dbt_utils.default__generate_series": {"name": "default__generate_series", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/generate_series.sql", "original_file_path": "macros/sql/generate_series.sql", "unique_id": "macro.dbt_utils.default__generate_series", "macro_sql": "{% macro default__generate_series(upper_bound) %}\n\n    {% set n = dbt_utils.get_powers_of_two(upper_bound) %}\n\n    with p as (\n        select 0 as generated_number union all select 1\n    ), unioned as (\n\n    select\n\n    {% for i in range(n) %}\n    p{{i}}.generated_number * power(2, {{i}})\n    {% if not loop.last %} + {% endif %}\n    {% endfor %}\n    + 1\n    as generated_number\n\n    from\n\n    {% for i in range(n) %}\n    p as p{{i}}\n    {% if not loop.last %} cross join {% endif %}\n    {% endfor %}\n\n    )\n\n    select *\n    from unioned\n    where generated_number <= {{upper_bound}}\n    order by generated_number\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.get_powers_of_two"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722889774.4623191, "supported_languages": null}, "macro.dbt_utils.get_relations_by_prefix": {"name": "get_relations_by_prefix", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_relations_by_prefix.sql", "original_file_path": "macros/sql/get_relations_by_prefix.sql", "unique_id": "macro.dbt_utils.get_relations_by_prefix", "macro_sql": "{% macro get_relations_by_prefix(schema, prefix, exclude='', database=target.database) %}\n    {{ return(adapter.dispatch('get_relations_by_prefix', 'dbt_utils')(schema, prefix, exclude, database)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__get_relations_by_prefix"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722889774.462894, "supported_languages": null}, "macro.dbt_utils.default__get_relations_by_prefix": {"name": "default__get_relations_by_prefix", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_relations_by_prefix.sql", "original_file_path": "macros/sql/get_relations_by_prefix.sql", "unique_id": "macro.dbt_utils.default__get_relations_by_prefix", "macro_sql": "{% macro default__get_relations_by_prefix(schema, prefix, exclude='', database=target.database) %}\n\n    {%- call statement('get_tables', fetch_result=True) %}\n\n      {{ dbt_utils.get_tables_by_prefix_sql(schema, prefix, exclude, database) }}\n\n    {%- endcall -%}\n\n    {%- set table_list = load_result('get_tables') -%}\n\n    {%- if table_list and table_list['table'] -%}\n        {%- set tbl_relations = [] -%}\n        {%- for row in table_list['table'] -%}\n            {%- set tbl_relation = api.Relation.create(\n                database=database,\n                schema=row.table_schema,\n                identifier=row.table_name,\n                type=row.table_type\n            ) -%}\n            {%- do tbl_relations.append(tbl_relation) -%}\n        {%- endfor -%}\n\n        {{ return(tbl_relations) }}\n    {%- else -%}\n        {{ return([]) }}\n    {%- endif -%}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement", "macro.dbt_utils.get_tables_by_prefix_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722889774.463682, "supported_languages": null}, "macro.dbt_utils.get_tables_by_prefix_sql": {"name": "get_tables_by_prefix_sql", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_tables_by_prefix_sql.sql", "original_file_path": "macros/sql/get_tables_by_prefix_sql.sql", "unique_id": "macro.dbt_utils.get_tables_by_prefix_sql", "macro_sql": "{% macro get_tables_by_prefix_sql(schema, prefix, exclude='', database=target.database) %}\n    {{ return(adapter.dispatch('get_tables_by_prefix_sql', 'dbt_utils')(schema, prefix, exclude, database)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__get_tables_by_prefix_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722889774.4641201, "supported_languages": null}, "macro.dbt_utils.default__get_tables_by_prefix_sql": {"name": "default__get_tables_by_prefix_sql", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_tables_by_prefix_sql.sql", "original_file_path": "macros/sql/get_tables_by_prefix_sql.sql", "unique_id": "macro.dbt_utils.default__get_tables_by_prefix_sql", "macro_sql": "{% macro default__get_tables_by_prefix_sql(schema, prefix, exclude='', database=target.database) %}\n\n    {{ dbt_utils.get_tables_by_pattern_sql(\n        schema_pattern = schema,\n        table_pattern = prefix ~ '%',\n        exclude = exclude,\n        database = database\n    ) }}\n    \n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.get_tables_by_pattern_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722889774.464384, "supported_languages": null}, "macro.dbt_utils.star": {"name": "star", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/star.sql", "original_file_path": "macros/sql/star.sql", "unique_id": "macro.dbt_utils.star", "macro_sql": "{% macro star(from, relation_alias=False, except=[], prefix='', suffix='', quote_identifiers=True) -%}\r\n    {{ return(adapter.dispatch('star', 'dbt_utils')(from, relation_alias, except, prefix, suffix, quote_identifiers)) }}\r\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__star"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722889774.46556, "supported_languages": null}, "macro.dbt_utils.default__star": {"name": "default__star", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/star.sql", "original_file_path": "macros/sql/star.sql", "unique_id": "macro.dbt_utils.default__star", "macro_sql": "{% macro default__star(from, relation_alias=False, except=[], prefix='', suffix='', quote_identifiers=True) -%}\r\n    {%- do dbt_utils._is_relation(from, 'star') -%}\r\n    {%- do dbt_utils._is_ephemeral(from, 'star') -%}\r\n\r\n    {#-- Prevent querying of db in parsing mode. This works because this macro does not create any new refs. #}\r\n    {%- if not execute -%}\r\n        {% do return('*') %}\r\n    {%- endif -%}\r\n\r\n    {% set cols = dbt_utils.get_filtered_columns_in_relation(from, except) %}\r\n\r\n    {%- if cols|length <= 0 -%}\r\n        {% if flags.WHICH == 'compile' %}\r\n            {% set response %}\r\n*\r\n/* No columns were returned. Maybe the relation doesn't exist yet \r\nor all columns were excluded. This star is only output during  \r\ndbt compile, and exists to keep SQLFluff happy. */\r\n            {% endset %}\r\n            {% do return(response) %}\r\n        {% else %}\r\n            {% do return(\"/* no columns returned from star() macro */\") %}\r\n        {% endif %}\r\n    {%- else -%}\r\n        {%- for col in cols %}\r\n            {%- if relation_alias %}{{ relation_alias }}.{% else %}{%- endif -%}\r\n                {%- if quote_identifiers -%}\r\n                    {{ adapter.quote(col)|trim }} {%- if prefix!='' or suffix!='' %} as {{ adapter.quote(prefix ~ col ~ suffix)|trim }} {%- endif -%}\r\n                {%- else -%}\r\n                    {{ col|trim }} {%- if prefix!='' or suffix!='' %} as {{ (prefix ~ col ~ suffix)|trim }} {%- endif -%}\r\n                {% endif %}\r\n            {%- if not loop.last %},{{ '\\n  ' }}{%- endif -%}\r\n        {%- endfor -%}\r\n    {% endif %}\r\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_utils._is_relation", "macro.dbt_utils._is_ephemeral", "macro.dbt_utils.get_filtered_columns_in_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722889774.4671261, "supported_languages": null}, "macro.dbt_utils.unpivot": {"name": "unpivot", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/unpivot.sql", "original_file_path": "macros/sql/unpivot.sql", "unique_id": "macro.dbt_utils.unpivot", "macro_sql": "{% macro unpivot(relation=none, cast_to='varchar', exclude=none, remove=none, field_name='field_name', value_name='value') -%}\n    {{ return(adapter.dispatch('unpivot', 'dbt_utils')(relation, cast_to, exclude, remove, field_name, value_name)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__unpivot"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722889774.4683478, "supported_languages": null}, "macro.dbt_utils.default__unpivot": {"name": "default__unpivot", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/unpivot.sql", "original_file_path": "macros/sql/unpivot.sql", "unique_id": "macro.dbt_utils.default__unpivot", "macro_sql": "{% macro default__unpivot(relation=none, cast_to='varchar', exclude=none, remove=none, field_name='field_name', value_name='value') -%}\n\n    {% if not relation %}\n        {{ exceptions.raise_compiler_error(\"Error: argument `relation` is required for `unpivot` macro.\") }}\n    {% endif %}\n\n  {%- set exclude = exclude if exclude is not none else [] %}\n  {%- set remove = remove if remove is not none else [] %}\n\n  {%- set include_cols = [] %}\n\n  {%- set table_columns = {} %}\n\n  {%- do table_columns.update({relation: []}) %}\n\n  {%- do dbt_utils._is_relation(relation, 'unpivot') -%}\n  {%- do dbt_utils._is_ephemeral(relation, 'unpivot') -%}\n  {%- set cols = adapter.get_columns_in_relation(relation) %}\n\n  {%- for col in cols -%}\n    {%- if col.column.lower() not in remove|map('lower') and col.column.lower() not in exclude|map('lower') -%}\n      {% do include_cols.append(col) %}\n    {%- endif %}\n  {%- endfor %}\n\n\n  {%- for col in include_cols -%}\n    select\n      {%- for exclude_col in exclude %}\n        {{ exclude_col }},\n      {%- endfor %}\n\n      cast('{{ col.column }}' as {{ dbt.type_string() }}) as {{ field_name }},\n      cast(  {% if col.data_type == 'boolean' %}\n           {{ dbt.cast_bool_to_text(col.column) }}\n             {% else %}\n           {{ col.column }}\n             {% endif %}\n           as {{ cast_to }}) as {{ value_name }}\n\n    from {{ relation }}\n\n    {% if not loop.last -%}\n      union all\n    {% endif -%}\n  {%- endfor -%}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_utils._is_relation", "macro.dbt_utils._is_ephemeral", "macro.dbt.type_string", "macro.dbt.cast_bool_to_text"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722889774.469858, "supported_languages": null}, "macro.dbt_utils.safe_divide": {"name": "safe_divide", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/safe_divide.sql", "original_file_path": "macros/sql/safe_divide.sql", "unique_id": "macro.dbt_utils.safe_divide", "macro_sql": "{% macro safe_divide(numerator, denominator) -%}\n  {{ return(adapter.dispatch('safe_divide', 'dbt_utils')(numerator, denominator)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__safe_divide"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722889774.470152, "supported_languages": null}, "macro.dbt_utils.default__safe_divide": {"name": "default__safe_divide", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/safe_divide.sql", "original_file_path": "macros/sql/safe_divide.sql", "unique_id": "macro.dbt_utils.default__safe_divide", "macro_sql": "{% macro default__safe_divide(numerator, denominator) %}\n    ( {{ numerator }} ) / nullif( ( {{ denominator }} ), 0)\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722889774.4702709, "supported_languages": null}, "macro.dbt_utils.union_relations": {"name": "union_relations", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/union.sql", "original_file_path": "macros/sql/union.sql", "unique_id": "macro.dbt_utils.union_relations", "macro_sql": "{%- macro union_relations(relations, column_override=none, include=[], exclude=[], source_column_name='_dbt_source_relation', where=none) -%}\n    {{ return(adapter.dispatch('union_relations', 'dbt_utils')(relations, column_override, include, exclude, source_column_name, where)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__union_relations"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722889774.472862, "supported_languages": null}, "macro.dbt_utils.default__union_relations": {"name": "default__union_relations", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/union.sql", "original_file_path": "macros/sql/union.sql", "unique_id": "macro.dbt_utils.default__union_relations", "macro_sql": "\n\n{%- macro default__union_relations(relations, column_override=none, include=[], exclude=[], source_column_name='_dbt_source_relation', where=none) -%}\n\n    {%- if exclude and include -%}\n        {{ exceptions.raise_compiler_error(\"Both an exclude and include list were provided to the `union` macro. Only one is allowed\") }}\n    {%- endif -%}\n\n    {#-- Prevent querying of db in parsing mode. This works because this macro does not create any new refs. -#}\n    {%- if not execute %}\n        {{ return('') }}\n    {% endif -%}\n\n    {%- set column_override = column_override if column_override is not none else {} -%}\n\n    {%- set relation_columns = {} -%}\n    {%- set column_superset = {} -%}\n    {%- set all_excludes = [] -%}\n    {%- set all_includes = [] -%}\n\n    {%- if exclude -%}\n        {%- for exc in exclude -%}\n            {%- do all_excludes.append(exc | lower) -%}\n        {%- endfor -%}\n    {%- endif -%}\n\n    {%- if include -%}\n        {%- for inc in include -%}\n            {%- do all_includes.append(inc | lower) -%}\n        {%- endfor -%}\n    {%- endif -%}\n\n    {%- for relation in relations -%}\n\n        {%- do relation_columns.update({relation: []}) -%}\n\n        {%- do dbt_utils._is_relation(relation, 'union_relations') -%}\n        {%- do dbt_utils._is_ephemeral(relation, 'union_relations') -%}\n        {%- set cols = adapter.get_columns_in_relation(relation) -%}\n        {%- for col in cols -%}\n\n        {#- If an exclude list was provided and the column is in the list, do nothing -#}\n        {%- if exclude and col.column | lower in all_excludes -%}\n\n        {#- If an include list was provided and the column is not in the list, do nothing -#}\n        {%- elif include and col.column | lower not in all_includes -%}\n\n        {#- Otherwise add the column to the column superset -#}\n        {%- else -%}\n\n            {#- update the list of columns in this relation -#}\n            {%- do relation_columns[relation].append(col.column) -%}\n\n            {%- if col.column in column_superset -%}\n\n                {%- set stored = column_superset[col.column] -%}\n                {%- if col.is_string() and stored.is_string() and col.string_size() > stored.string_size() -%}\n\n                    {%- do column_superset.update({col.column: col}) -%}\n\n                {%- endif %}\n\n            {%- else -%}\n\n                {%- do column_superset.update({col.column: col}) -%}\n\n            {%- endif -%}\n\n        {%- endif -%}\n\n        {%- endfor -%}\n    {%- endfor -%}\n\n    {%- set ordered_column_names = column_superset.keys() -%}\n    {%- set dbt_command = flags.WHICH -%}\n\n\n    {% if dbt_command in ['run', 'build'] %}\n    {% if (include | length > 0 or exclude | length > 0) and not column_superset.keys() %}\n        {%- set relations_string -%}\n            {%- for relation in relations -%}\n                {{ relation.name }}\n            {%- if not loop.last %}, {% endif -%}\n            {%- endfor -%}\n        {%- endset -%}\n\n        {%- set error_message -%}\n            There were no columns found to union for relations {{ relations_string }}\n        {%- endset -%}\n\n        {{ exceptions.raise_compiler_error(error_message) }}\n    {%- endif -%}\n    {%- endif -%}\n\n    {%- for relation in relations %}\n\n        (\n            select\n\n                {%- if source_column_name is not none %}\n                cast({{ dbt.string_literal(relation) }} as {{ dbt.type_string() }}) as {{ source_column_name }},\n                {%- endif %}\n\n                {% for col_name in ordered_column_names -%}\n\n                    {%- set col = column_superset[col_name] %}\n                    {%- set col_type = column_override.get(col.column, col.data_type) %}\n                    {%- set col_name = adapter.quote(col_name) if col_name in relation_columns[relation] else 'null' %}\n                    cast({{ col_name }} as {{ col_type }}) as {{ col.quoted }} {% if not loop.last %},{% endif -%}\n\n                {%- endfor %}\n\n            from {{ relation }}\n\n            {% if where -%}\n            where {{ where }}\n            {%- endif %}\n        )\n\n        {% if not loop.last -%}\n            union all\n        {% endif -%}\n\n    {%- endfor -%}\n\n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbt_utils._is_relation", "macro.dbt_utils._is_ephemeral", "macro.dbt.string_literal", "macro.dbt.type_string"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722889774.476071, "supported_languages": null}, "macro.dbt_utils.group_by": {"name": "group_by", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/groupby.sql", "original_file_path": "macros/sql/groupby.sql", "unique_id": "macro.dbt_utils.group_by", "macro_sql": "{%- macro group_by(n) -%}\n    {{ return(adapter.dispatch('group_by', 'dbt_utils')(n)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__group_by"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722889774.476332, "supported_languages": null}, "macro.dbt_utils.default__group_by": {"name": "default__group_by", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/groupby.sql", "original_file_path": "macros/sql/groupby.sql", "unique_id": "macro.dbt_utils.default__group_by", "macro_sql": "\n\n{%- macro default__group_by(n) -%}\n\n  group by {% for i in range(1, n + 1) -%}\n      {{ i }}{{ ',' if not loop.last }}   \n   {%- endfor -%}\n\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722889774.476541, "supported_languages": null}, "macro.dbt_utils.deduplicate": {"name": "deduplicate", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/deduplicate.sql", "original_file_path": "macros/sql/deduplicate.sql", "unique_id": "macro.dbt_utils.deduplicate", "macro_sql": "{%- macro deduplicate(relation, partition_by, order_by) -%}\n    {{ return(adapter.dispatch('deduplicate', 'dbt_utils')(relation, partition_by, order_by)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.postgres__deduplicate"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722889774.477327, "supported_languages": null}, "macro.dbt_utils.default__deduplicate": {"name": "default__deduplicate", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/deduplicate.sql", "original_file_path": "macros/sql/deduplicate.sql", "unique_id": "macro.dbt_utils.default__deduplicate", "macro_sql": "\n\n{%- macro default__deduplicate(relation, partition_by, order_by) -%}\n\n    with row_numbered as (\n        select\n            _inner.*,\n            row_number() over (\n                partition by {{ partition_by }}\n                order by {{ order_by }}\n            ) as rn\n        from {{ relation }} as _inner\n    )\n\n    select\n        distinct data.*\n    from {{ relation }} as data\n    {#\n    -- Not all DBs will support natural joins but the ones that do include:\n    -- Oracle, MySQL, SQLite, Redshift, Teradata, Materialize, Databricks\n    -- Apache Spark, SingleStore, Vertica\n    -- Those that do not appear to support natural joins include:\n    -- SQLServer, Trino, Presto, Rockset, Athena\n    #}\n    natural join row_numbered\n    where row_numbered.rn = 1\n\n{%- endmacro -%}\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722889774.477515, "supported_languages": null}, "macro.dbt_utils.redshift__deduplicate": {"name": "redshift__deduplicate", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/deduplicate.sql", "original_file_path": "macros/sql/deduplicate.sql", "unique_id": "macro.dbt_utils.redshift__deduplicate", "macro_sql": "{% macro redshift__deduplicate(relation, partition_by, order_by) -%}\n\n    select *\n    from {{ relation }} as tt\n    qualify\n        row_number() over (\n            partition by {{ partition_by }}\n            order by {{ order_by }}\n        ) = 1\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722889774.477657, "supported_languages": null}, "macro.dbt_utils.postgres__deduplicate": {"name": "postgres__deduplicate", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/deduplicate.sql", "original_file_path": "macros/sql/deduplicate.sql", "unique_id": "macro.dbt_utils.postgres__deduplicate", "macro_sql": "\n{%- macro postgres__deduplicate(relation, partition_by, order_by) -%}\n\n    select\n        distinct on ({{ partition_by }}) *\n    from {{ relation }}\n    order by {{ partition_by }}{{ ',' ~ order_by }}\n\n{%- endmacro -%}\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722889774.477816, "supported_languages": null}, "macro.dbt_utils.snowflake__deduplicate": {"name": "snowflake__deduplicate", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/deduplicate.sql", "original_file_path": "macros/sql/deduplicate.sql", "unique_id": "macro.dbt_utils.snowflake__deduplicate", "macro_sql": "\n{%- macro snowflake__deduplicate(relation, partition_by, order_by) -%}\n\n    select *\n    from {{ relation }}\n    qualify\n        row_number() over (\n            partition by {{ partition_by }}\n            order by {{ order_by }}\n        ) = 1\n\n{%- endmacro -%}\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722889774.477961, "supported_languages": null}, "macro.dbt_utils.databricks__deduplicate": {"name": "databricks__deduplicate", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/deduplicate.sql", "original_file_path": "macros/sql/deduplicate.sql", "unique_id": "macro.dbt_utils.databricks__deduplicate", "macro_sql": "\n{%- macro databricks__deduplicate(relation, partition_by, order_by) -%}\n\n    select *\n    from {{ relation }}\n    qualify\n        row_number() over (\n            partition by {{ partition_by }}\n            order by {{ order_by }}\n        ) = 1\n\n{%- endmacro -%}\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722889774.4780989, "supported_languages": null}, "macro.dbt_utils.bigquery__deduplicate": {"name": "bigquery__deduplicate", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/deduplicate.sql", "original_file_path": "macros/sql/deduplicate.sql", "unique_id": "macro.dbt_utils.bigquery__deduplicate", "macro_sql": "\n{%- macro bigquery__deduplicate(relation, partition_by, order_by) -%}\n\n    select unique.*\n    from (\n        select\n            array_agg (\n                original\n                order by {{ order_by }}\n                limit 1\n            )[offset(0)] unique\n        from {{ relation }} original\n        group by {{ partition_by }}\n    )\n\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722889774.4782422, "supported_languages": null}, "macro.dbt_utils.surrogate_key": {"name": "surrogate_key", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/surrogate_key.sql", "original_file_path": "macros/sql/surrogate_key.sql", "unique_id": "macro.dbt_utils.surrogate_key", "macro_sql": "{%- macro surrogate_key(field_list) -%}\n    {% set frustrating_jinja_feature = varargs %}\n    {{ return(adapter.dispatch('surrogate_key', 'dbt_utils')(field_list, *varargs)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__surrogate_key"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722889774.478569, "supported_languages": null}, "macro.dbt_utils.default__surrogate_key": {"name": "default__surrogate_key", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/surrogate_key.sql", "original_file_path": "macros/sql/surrogate_key.sql", "unique_id": "macro.dbt_utils.default__surrogate_key", "macro_sql": "\n\n{%- macro default__surrogate_key(field_list) -%}\n\n{%- set error_message = '\nWarning: `dbt_utils.surrogate_key` has been replaced by \\\n`dbt_utils.generate_surrogate_key`. The new macro treats null values \\\ndifferently to empty strings. To restore the behaviour of the original \\\nmacro, add a global variable in dbt_project.yml called \\\n`surrogate_key_treat_nulls_as_empty_strings` to your \\\ndbt_project.yml file with a value of True. \\\nThe {}.{} model triggered this warning. \\\n'.format(model.package_name, model.name) -%}\n\n{%- do exceptions.raise_compiler_error(error_message) -%}\n\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722889774.478772, "supported_languages": null}, "macro.dbt_utils.safe_add": {"name": "safe_add", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/safe_add.sql", "original_file_path": "macros/sql/safe_add.sql", "unique_id": "macro.dbt_utils.safe_add", "macro_sql": "{%- macro safe_add(field_list) -%}\n    {{ return(adapter.dispatch('safe_add', 'dbt_utils')(field_list)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__safe_add"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722889774.479091, "supported_languages": null}, "macro.dbt_utils.default__safe_add": {"name": "default__safe_add", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/safe_add.sql", "original_file_path": "macros/sql/safe_add.sql", "unique_id": "macro.dbt_utils.default__safe_add", "macro_sql": "\n\n{%- macro default__safe_add(field_list) -%}\n\n{%- if field_list is not iterable or field_list is string or field_list is mapping -%}\n\n{%- set error_message = '\nWarning: the `safe_add` macro now takes a single list argument instead of \\\nstring arguments. The {}.{} model triggered this warning. \\\n'.format(model.package_name, model.name) -%}\n\n{%- do exceptions.warn(error_message) -%}\n\n{%- endif -%}\n\n{% set fields = [] %}\n\n{%- for field in field_list -%}\n\n    {% do fields.append(\"coalesce(\" ~ field ~ \", 0)\") %}\n\n{%- endfor -%}\n\n{{ fields|join(' +\\n  ') }}\n\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722889774.479542, "supported_languages": null}, "macro.dbt_utils.nullcheck": {"name": "nullcheck", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/nullcheck.sql", "original_file_path": "macros/sql/nullcheck.sql", "unique_id": "macro.dbt_utils.nullcheck", "macro_sql": "{% macro nullcheck(cols) %}\n    {{ return(adapter.dispatch('nullcheck', 'dbt_utils')(cols)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__nullcheck"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722889774.47983, "supported_languages": null}, "macro.dbt_utils.default__nullcheck": {"name": "default__nullcheck", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/nullcheck.sql", "original_file_path": "macros/sql/nullcheck.sql", "unique_id": "macro.dbt_utils.default__nullcheck", "macro_sql": "{% macro default__nullcheck(cols) %}\n{%- for col in cols %}\n\n    {% if col.is_string() -%}\n\n    nullif({{col.name}},'') as {{col.name}}\n\n    {%- else -%}\n\n    {{col.name}}\n\n    {%- endif -%}\n\n{%- if not loop.last -%} , {%- endif -%}\n\n{%- endfor -%}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722889774.4801102, "supported_languages": null}, "macro.dbt_utils.get_tables_by_pattern_sql": {"name": "get_tables_by_pattern_sql", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_tables_by_pattern_sql.sql", "original_file_path": "macros/sql/get_tables_by_pattern_sql.sql", "unique_id": "macro.dbt_utils.get_tables_by_pattern_sql", "macro_sql": "{% macro get_tables_by_pattern_sql(schema_pattern, table_pattern, exclude='', database=target.database) %}\n    {{ return(adapter.dispatch('get_tables_by_pattern_sql', 'dbt_utils')\n        (schema_pattern, table_pattern, exclude, database)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__get_tables_by_pattern_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722889774.482707, "supported_languages": null}, "macro.dbt_utils.default__get_tables_by_pattern_sql": {"name": "default__get_tables_by_pattern_sql", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_tables_by_pattern_sql.sql", "original_file_path": "macros/sql/get_tables_by_pattern_sql.sql", "unique_id": "macro.dbt_utils.default__get_tables_by_pattern_sql", "macro_sql": "{% macro default__get_tables_by_pattern_sql(schema_pattern, table_pattern, exclude='', database=target.database) %}\n\n        select distinct\n            table_schema as {{ adapter.quote('table_schema') }},\n            table_name as {{ adapter.quote('table_name') }},\n            {{ dbt_utils.get_table_types_sql() }}\n        from {{ database }}.information_schema.tables\n        where table_schema ilike '{{ schema_pattern }}'\n        and table_name ilike '{{ table_pattern }}'\n        and table_name not ilike '{{ exclude }}'\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.get_table_types_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722889774.483084, "supported_languages": null}, "macro.dbt_utils.redshift__get_tables_by_pattern_sql": {"name": "redshift__get_tables_by_pattern_sql", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_tables_by_pattern_sql.sql", "original_file_path": "macros/sql/get_tables_by_pattern_sql.sql", "unique_id": "macro.dbt_utils.redshift__get_tables_by_pattern_sql", "macro_sql": "{% macro redshift__get_tables_by_pattern_sql(schema_pattern, table_pattern, exclude='', database=target.database) %}\n\n    {% set sql %}\n        select distinct\n            table_schema as {{ adapter.quote('table_schema') }},\n            table_name as {{ adapter.quote('table_name') }},\n            {{ dbt_utils.get_table_types_sql() }}\n        from \"{{ database }}\".\"information_schema\".\"tables\"\n        where table_schema ilike '{{ schema_pattern }}'\n        and table_name ilike '{{ table_pattern }}'\n        and table_name not ilike '{{ exclude }}'\n        union all\n        select distinct\n            schemaname as {{ adapter.quote('table_schema') }},\n            tablename as {{ adapter.quote('table_name') }},\n            'external' as {{ adapter.quote('table_type') }}\n        from svv_external_tables\n        where redshift_database_name = '{{ database }}'\n        and schemaname ilike '{{ schema_pattern }}'\n        and table_name ilike '{{ table_pattern }}'\n        and table_name not ilike '{{ exclude }}'\n    {% endset %}\n\n    {{ return(sql) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.get_table_types_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722889774.483781, "supported_languages": null}, "macro.dbt_utils.bigquery__get_tables_by_pattern_sql": {"name": "bigquery__get_tables_by_pattern_sql", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_tables_by_pattern_sql.sql", "original_file_path": "macros/sql/get_tables_by_pattern_sql.sql", "unique_id": "macro.dbt_utils.bigquery__get_tables_by_pattern_sql", "macro_sql": "{% macro bigquery__get_tables_by_pattern_sql(schema_pattern, table_pattern, exclude='', database=target.database) %}\n\n    {% if '%' in schema_pattern %}\n        {% set schemata=dbt_utils._bigquery__get_matching_schemata(schema_pattern, database) %}\n    {% else %}\n        {% set schemata=[schema_pattern] %}\n    {% endif %}\n\n    {% set sql %}\n        {% for schema in schemata %}\n            select distinct\n                table_schema,\n                table_name,\n                {{ dbt_utils.get_table_types_sql() }}\n\n            from {{ adapter.quote(database) }}.{{ schema }}.INFORMATION_SCHEMA.TABLES\n            where lower(table_name) like lower ('{{ table_pattern }}')\n                and lower(table_name) not like lower ('{{ exclude }}')\n\n            {% if not loop.last %} union all {% endif %}\n\n        {% endfor %}\n    {% endset %}\n\n    {{ return(sql) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils._bigquery__get_matching_schemata", "macro.dbt_utils.get_table_types_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722889774.484396, "supported_languages": null}, "macro.dbt_utils._bigquery__get_matching_schemata": {"name": "_bigquery__get_matching_schemata", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_tables_by_pattern_sql.sql", "original_file_path": "macros/sql/get_tables_by_pattern_sql.sql", "unique_id": "macro.dbt_utils._bigquery__get_matching_schemata", "macro_sql": "{% macro _bigquery__get_matching_schemata(schema_pattern, database) %}\n    {% if execute %}\n\n        {% set sql %}\n        select schema_name from {{ adapter.quote(database) }}.INFORMATION_SCHEMA.SCHEMATA\n        where lower(schema_name) like lower('{{ schema_pattern }}')\n        {% endset %}\n\n        {% set results=run_query(sql) %}\n\n        {% set schemata=results.columns['schema_name'].values() %}\n\n        {{ return(schemata) }}\n\n    {% else %}\n\n        {{ return([]) }}\n\n    {% endif %}\n\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722889774.4848242, "supported_languages": null}, "macro.dbt_utils.get_column_values": {"name": "get_column_values", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_column_values.sql", "original_file_path": "macros/sql/get_column_values.sql", "unique_id": "macro.dbt_utils.get_column_values", "macro_sql": "{% macro get_column_values(table, column, order_by='count(*) desc', max_records=none, default=none, where=none) -%}\n    {{ return(adapter.dispatch('get_column_values', 'dbt_utils')(table, column, order_by, max_records, default, where)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__get_column_values"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722889774.485791, "supported_languages": null}, "macro.dbt_utils.default__get_column_values": {"name": "default__get_column_values", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_column_values.sql", "original_file_path": "macros/sql/get_column_values.sql", "unique_id": "macro.dbt_utils.default__get_column_values", "macro_sql": "{% macro default__get_column_values(table, column, order_by='count(*) desc', max_records=none, default=none, where=none) -%}\n    {#-- Prevent querying of db in parsing mode. This works because this macro does not create any new refs. #}\n    {%- if not execute -%}\n        {% set default = [] if not default %}\n        {{ return(default) }}\n    {% endif %}\n\n    {%- do dbt_utils._is_ephemeral(table, 'get_column_values') -%}\n\n    {# Not all relations are tables. Renaming for internal clarity without breaking functionality for anyone using named arguments #}\n    {# TODO: Change the method signature in a future 0.x.0 release #}\n    {%- set target_relation = table -%}\n\n    {# adapter.load_relation is a convenience wrapper to avoid building a Relation when we already have one #}\n    {% set relation_exists = (load_relation(target_relation)) is not none %}\n\n    {%- call statement('get_column_values', fetch_result=true) %}\n\n        {%- if not relation_exists and default is none -%}\n\n          {{ exceptions.raise_compiler_error(\"In get_column_values(): relation \" ~ target_relation ~ \" does not exist and no default value was provided.\") }}\n\n        {%- elif not relation_exists and default is not none -%}\n\n          {{ log(\"Relation \" ~ target_relation ~ \" does not exist. Returning the default value: \" ~ default) }}\n\n          {{ return(default) }}\n\n        {%- else -%}\n\n\n            select\n                {{ column }} as value\n\n            from {{ target_relation }}\n\n            {% if where is not none %}\n            where {{ where }}\n            {% endif %}\n\n            group by {{ column }}\n            order by {{ order_by }}\n\n            {% if max_records is not none %}\n            limit {{ max_records }}\n            {% endif %}\n\n        {% endif %}\n\n    {%- endcall -%}\n\n    {%- set value_list = load_result('get_column_values') -%}\n\n    {%- if value_list and value_list['data'] -%}\n        {%- set values = value_list['data'] | map(attribute=0) | list %}\n        {{ return(values) }}\n    {%- else -%}\n        {{ return(default) }}\n    {%- endif -%}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_utils._is_ephemeral", "macro.dbt.load_relation", "macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722889774.4870489, "supported_languages": null}, "macro.dbt_utils.pivot": {"name": "pivot", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/pivot.sql", "original_file_path": "macros/sql/pivot.sql", "unique_id": "macro.dbt_utils.pivot", "macro_sql": "{% macro pivot(column,\n               values,\n               alias=True,\n               agg='sum',\n               cmp='=',\n               prefix='',\n               suffix='',\n               then_value=1,\n               else_value=0,\n               quote_identifiers=True,\n               distinct=False) %}\n    {{ return(adapter.dispatch('pivot', 'dbt_utils')(column, values, alias, agg, cmp, prefix, suffix, then_value, else_value, quote_identifiers, distinct)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__pivot"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722889774.487971, "supported_languages": null}, "macro.dbt_utils.default__pivot": {"name": "default__pivot", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/pivot.sql", "original_file_path": "macros/sql/pivot.sql", "unique_id": "macro.dbt_utils.default__pivot", "macro_sql": "{% macro default__pivot(column,\n               values,\n               alias=True,\n               agg='sum',\n               cmp='=',\n               prefix='',\n               suffix='',\n               then_value=1,\n               else_value=0,\n               quote_identifiers=True,\n               distinct=False) %}\n  {% for value in values %}\n    {{ agg }}(\n      {% if distinct %} distinct {% endif %}\n      case\n      when {{ column }} {{ cmp }} '{{ dbt.escape_single_quotes(value) }}'\n        then {{ then_value }}\n      else {{ else_value }}\n      end\n    )\n    {% if alias %}\n      {% if quote_identifiers %}\n            as {{ adapter.quote(prefix ~ value ~ suffix) }}\n      {% else %}\n        as {{ dbt_utils.slugify(prefix ~ value ~ suffix) }}\n      {% endif %}\n    {% endif %}\n    {% if not loop.last %},{% endif %}\n  {% endfor %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.escape_single_quotes", "macro.dbt_utils.slugify"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722889774.488653, "supported_languages": null}, "macro.dbt_utils.get_filtered_columns_in_relation": {"name": "get_filtered_columns_in_relation", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_filtered_columns_in_relation.sql", "original_file_path": "macros/sql/get_filtered_columns_in_relation.sql", "unique_id": "macro.dbt_utils.get_filtered_columns_in_relation", "macro_sql": "{% macro get_filtered_columns_in_relation(from, except=[]) -%}\n    {{ return(adapter.dispatch('get_filtered_columns_in_relation', 'dbt_utils')(from, except)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__get_filtered_columns_in_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722889774.489075, "supported_languages": null}, "macro.dbt_utils.default__get_filtered_columns_in_relation": {"name": "default__get_filtered_columns_in_relation", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_filtered_columns_in_relation.sql", "original_file_path": "macros/sql/get_filtered_columns_in_relation.sql", "unique_id": "macro.dbt_utils.default__get_filtered_columns_in_relation", "macro_sql": "{% macro default__get_filtered_columns_in_relation(from, except=[]) -%}\n    {%- do dbt_utils._is_relation(from, 'get_filtered_columns_in_relation') -%}\n    {%- do dbt_utils._is_ephemeral(from, 'get_filtered_columns_in_relation') -%}\n\n    {# -- Prevent querying of db in parsing mode. This works because this macro does not create any new refs. #}\n    {%- if not execute -%}\n        {{ return('') }}\n    {% endif %}\n\n    {%- set include_cols = [] %}\n    {%- set cols = adapter.get_columns_in_relation(from) -%}\n    {%- set except = except | map(\"lower\") | list %}\n    {%- for col in cols -%}\n        {%- if col.column|lower not in except -%}\n            {% do include_cols.append(col.column) %}\n        {%- endif %}\n    {%- endfor %}\n\n    {{ return(include_cols) }}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_utils._is_relation", "macro.dbt_utils._is_ephemeral"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722889774.489687, "supported_languages": null}, "macro.dbt_utils.width_bucket": {"name": "width_bucket", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/width_bucket.sql", "original_file_path": "macros/sql/width_bucket.sql", "unique_id": "macro.dbt_utils.width_bucket", "macro_sql": "{% macro width_bucket(expr, min_value, max_value, num_buckets) %}\n  {{ return(adapter.dispatch('width_bucket', 'dbt_utils') (expr, min_value, max_value, num_buckets)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__width_bucket"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722889774.490346, "supported_languages": null}, "macro.dbt_utils.default__width_bucket": {"name": "default__width_bucket", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/width_bucket.sql", "original_file_path": "macros/sql/width_bucket.sql", "unique_id": "macro.dbt_utils.default__width_bucket", "macro_sql": "{% macro default__width_bucket(expr, min_value, max_value, num_buckets) -%}\n\n    {% set bin_size -%}\n    (( {{ max_value }} - {{ min_value }} ) / {{ num_buckets }} )\n    {%- endset %}\n    (\n        -- to break ties when the amount is eaxtly at the bucket egde\n        case\n            when\n                mod(\n                    {{ dbt.safe_cast(expr, dbt.type_numeric() ) }},\n                    {{ dbt.safe_cast(bin_size, dbt.type_numeric() ) }}\n                ) = 0\n            then 1\n            else 0\n        end\n    ) +\n      -- Anything over max_value goes the N+1 bucket\n    least(\n        ceil(\n            ({{ expr }} - {{ min_value }})/{{ bin_size }}\n        ),\n        {{ num_buckets }} + 1\n    )\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.safe_cast", "macro.dbt.type_numeric"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722889774.490727, "supported_languages": null}, "macro.dbt_utils.snowflake__width_bucket": {"name": "snowflake__width_bucket", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/width_bucket.sql", "original_file_path": "macros/sql/width_bucket.sql", "unique_id": "macro.dbt_utils.snowflake__width_bucket", "macro_sql": "{% macro snowflake__width_bucket(expr, min_value, max_value, num_buckets) %}\n    width_bucket({{ expr }}, {{ min_value }}, {{ max_value }}, {{ num_buckets }} )\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722889774.490887, "supported_languages": null}, "macro.dbt_utils.get_query_results_as_dict": {"name": "get_query_results_as_dict", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_query_results_as_dict.sql", "original_file_path": "macros/sql/get_query_results_as_dict.sql", "unique_id": "macro.dbt_utils.get_query_results_as_dict", "macro_sql": "{% macro get_query_results_as_dict(query) %}\n    {{ return(adapter.dispatch('get_query_results_as_dict', 'dbt_utils')(query)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__get_query_results_as_dict"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722889774.4912179, "supported_languages": null}, "macro.dbt_utils.default__get_query_results_as_dict": {"name": "default__get_query_results_as_dict", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_query_results_as_dict.sql", "original_file_path": "macros/sql/get_query_results_as_dict.sql", "unique_id": "macro.dbt_utils.default__get_query_results_as_dict", "macro_sql": "{% macro default__get_query_results_as_dict(query) %}\n\n{# This macro returns a dictionary of the form {column_name: (tuple_of_results)} #}\n\n    {%- call statement('get_query_results', fetch_result=True,auto_begin=false) -%}\n\n        {{ query }}\n\n    {%- endcall -%}\n\n    {% set sql_results={} %}\n\n    {%- if execute -%}\n        {% set sql_results_table = load_result('get_query_results').table.columns %}\n        {% for column_name, column in sql_results_table.items() %}\n            {% do sql_results.update({column_name: column.values()}) %}\n        {% endfor %}\n    {%- endif -%}\n\n    {{ return(sql_results) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722889774.4917262, "supported_languages": null}, "macro.dbt_utils.generate_surrogate_key": {"name": "generate_surrogate_key", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/generate_surrogate_key.sql", "original_file_path": "macros/sql/generate_surrogate_key.sql", "unique_id": "macro.dbt_utils.generate_surrogate_key", "macro_sql": "{%- macro generate_surrogate_key(field_list) -%}\n    {{ return(adapter.dispatch('generate_surrogate_key', 'dbt_utils')(field_list)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__generate_surrogate_key"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722889774.49212, "supported_languages": null}, "macro.dbt_utils.default__generate_surrogate_key": {"name": "default__generate_surrogate_key", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/generate_surrogate_key.sql", "original_file_path": "macros/sql/generate_surrogate_key.sql", "unique_id": "macro.dbt_utils.default__generate_surrogate_key", "macro_sql": "\n\n{%- macro default__generate_surrogate_key(field_list) -%}\n\n{%- if var('surrogate_key_treat_nulls_as_empty_strings', False) -%}\n    {%- set default_null_value = \"\" -%}\n{%- else -%}\n    {%- set default_null_value = '_dbt_utils_surrogate_key_null_' -%}\n{%- endif -%}\n\n{%- set fields = [] -%}\n\n{%- for field in field_list -%}\n\n    {%- do fields.append(\n        \"coalesce(cast(\" ~ field ~ \" as \" ~ dbt.type_string() ~ \"), '\" ~ default_null_value  ~\"')\"\n    ) -%}\n\n    {%- if not loop.last %}\n        {%- do fields.append(\"'-'\") -%}\n    {%- endif -%}\n\n{%- endfor -%}\n\n{{ dbt.hash(dbt.concat(fields)) }}\n\n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbt.type_string", "macro.dbt.hash", "macro.dbt.concat"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722889774.492643, "supported_languages": null}, "macro.dbt_utils.get_table_types_sql": {"name": "get_table_types_sql", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_table_types_sql.sql", "original_file_path": "macros/sql/get_table_types_sql.sql", "unique_id": "macro.dbt_utils.get_table_types_sql", "macro_sql": "{%- macro get_table_types_sql() -%}\n  {{ return(adapter.dispatch('get_table_types_sql', 'dbt_utils')()) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt_utils.postgres__get_table_types_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722889774.4930859, "supported_languages": null}, "macro.dbt_utils.default__get_table_types_sql": {"name": "default__get_table_types_sql", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_table_types_sql.sql", "original_file_path": "macros/sql/get_table_types_sql.sql", "unique_id": "macro.dbt_utils.default__get_table_types_sql", "macro_sql": "{% macro default__get_table_types_sql() %}\n            case table_type\n                when 'BASE TABLE' then 'table'\n                when 'EXTERNAL TABLE' then 'external'\n                when 'MATERIALIZED VIEW' then 'materializedview'\n                else lower(table_type)\n            end as {{ adapter.quote('table_type') }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722889774.493268, "supported_languages": null}, "macro.dbt_utils.postgres__get_table_types_sql": {"name": "postgres__get_table_types_sql", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_table_types_sql.sql", "original_file_path": "macros/sql/get_table_types_sql.sql", "unique_id": "macro.dbt_utils.postgres__get_table_types_sql", "macro_sql": "{% macro postgres__get_table_types_sql() %}\n            case table_type\n                when 'BASE TABLE' then 'table'\n                when 'FOREIGN' then 'external'\n                when 'MATERIALIZED VIEW' then 'materializedview'\n                else lower(table_type)\n            end as {{ adapter.quote('table_type') }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722889774.493409, "supported_languages": null}, "macro.dbt_utils.databricks__get_table_types_sql": {"name": "databricks__get_table_types_sql", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_table_types_sql.sql", "original_file_path": "macros/sql/get_table_types_sql.sql", "unique_id": "macro.dbt_utils.databricks__get_table_types_sql", "macro_sql": "{% macro databricks__get_table_types_sql() %}\n            case table_type\n                when 'MANAGED' then 'table'\n                when 'BASE TABLE' then 'table'\n                when 'MATERIALIZED VIEW' then 'materializedview'\n                else lower(table_type)\n            end as {{ adapter.quote('table_type') }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722889774.493539, "supported_languages": null}, "macro.dbt_utils.get_single_value": {"name": "get_single_value", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_single_value.sql", "original_file_path": "macros/sql/get_single_value.sql", "unique_id": "macro.dbt_utils.get_single_value", "macro_sql": "{% macro get_single_value(query, default=none) %}\n    {{ return(adapter.dispatch('get_single_value', 'dbt_utils')(query, default)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__get_single_value"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722889774.494071, "supported_languages": null}, "macro.dbt_utils.default__get_single_value": {"name": "default__get_single_value", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_single_value.sql", "original_file_path": "macros/sql/get_single_value.sql", "unique_id": "macro.dbt_utils.default__get_single_value", "macro_sql": "{% macro default__get_single_value(query, default) %}\n\n{# This macro returns the (0, 0) record in a query, i.e. the first row of the first column #}\n\n    {%- call statement('get_query_result', fetch_result=True, auto_begin=false) -%}\n\n        {{ query }}\n\n    {%- endcall -%}\n\n    {%- if execute -%}\n\n        {% set r = load_result('get_query_result').table.columns[0].values() %}\n        {% if r | length == 0 %}\n            {% do print('Query `' ~ query ~ '` returned no rows. Using the default value: ' ~ default) %}\n            {% set sql_result = default %}\n        {% else %}\n            {% set sql_result = r[0] %}\n        {% endif %}\n        \n    {%- else -%}\n    \n        {% set sql_result = default %}\n    \n    {%- endif -%}\n\n    {% do return(sql_result) %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722889774.49471, "supported_languages": null}, "macro.dbt_utils.degrees_to_radians": {"name": "degrees_to_radians", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/haversine_distance.sql", "original_file_path": "macros/sql/haversine_distance.sql", "unique_id": "macro.dbt_utils.degrees_to_radians", "macro_sql": "{% macro degrees_to_radians(degrees) -%}\n    acos(-1) * {{degrees}} / 180\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722889774.495698, "supported_languages": null}, "macro.dbt_utils.haversine_distance": {"name": "haversine_distance", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/haversine_distance.sql", "original_file_path": "macros/sql/haversine_distance.sql", "unique_id": "macro.dbt_utils.haversine_distance", "macro_sql": "{% macro haversine_distance(lat1, lon1, lat2, lon2, unit='mi') -%}\n    {{ return(adapter.dispatch('haversine_distance', 'dbt_utils')(lat1,lon1,lat2,lon2,unit)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__haversine_distance"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722889774.495945, "supported_languages": null}, "macro.dbt_utils.default__haversine_distance": {"name": "default__haversine_distance", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/haversine_distance.sql", "original_file_path": "macros/sql/haversine_distance.sql", "unique_id": "macro.dbt_utils.default__haversine_distance", "macro_sql": "{% macro default__haversine_distance(lat1, lon1, lat2, lon2, unit='mi') -%}\n{%- if unit == 'mi' %}\n    {% set conversion_rate = 1 %}\n{% elif unit == 'km' %}\n    {% set conversion_rate = 1.60934 %}\n{% else %}\n    {{ exceptions.raise_compiler_error(\"unit input must be one of 'mi' or 'km'. Got \" ~ unit) }}\n{% endif %}\n\n    2 * 3961 * asin(sqrt(power((sin(radians(({{ lat2 }} - {{ lat1 }}) / 2))), 2) +\n    cos(radians({{lat1}})) * cos(radians({{lat2}})) *\n    power((sin(radians(({{ lon2 }} - {{ lon1 }}) / 2))), 2))) * {{ conversion_rate }}\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722889774.4964669, "supported_languages": null}, "macro.dbt_utils.bigquery__haversine_distance": {"name": "bigquery__haversine_distance", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/haversine_distance.sql", "original_file_path": "macros/sql/haversine_distance.sql", "unique_id": "macro.dbt_utils.bigquery__haversine_distance", "macro_sql": "{% macro bigquery__haversine_distance(lat1, lon1, lat2, lon2, unit='mi') -%}\n{% set radians_lat1 = dbt_utils.degrees_to_radians(lat1) %}\n{% set radians_lat2 = dbt_utils.degrees_to_radians(lat2) %}\n{% set radians_lon1 = dbt_utils.degrees_to_radians(lon1) %}\n{% set radians_lon2 = dbt_utils.degrees_to_radians(lon2) %}\n{%- if unit == 'mi' %}\n    {% set conversion_rate = 1 %}\n{% elif unit == 'km' %}\n    {% set conversion_rate = 1.60934 %}\n{% else %}\n    {{ exceptions.raise_compiler_error(\"unit input must be one of 'mi' or 'km'. Got \" ~ unit) }}\n{% endif %}\n    2 * 3961 * asin(sqrt(power(sin(({{ radians_lat2 }} - {{ radians_lat1 }}) / 2), 2) +\n    cos({{ radians_lat1 }}) * cos({{ radians_lat2 }}) *\n    power(sin(({{ radians_lon2 }} - {{ radians_lon1 }}) / 2), 2))) * {{ conversion_rate }}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.degrees_to_radians"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722889774.497159, "supported_languages": null}, "macro.recurly_source.get_subscription_history_columns": {"name": "get_subscription_history_columns", "resource_type": "macro", "package_name": "recurly_source", "path": "macros/get_subscription_history_columns.sql", "original_file_path": "macros/get_subscription_history_columns.sql", "unique_id": "macro.recurly_source.get_subscription_history_columns", "macro_sql": "{% macro get_subscription_history_columns() %}\n\n{% set columns = [\n    {\"name\": \"_fivetran_synced\", \"datatype\": dbt.type_timestamp()},\n    {\"name\": \"id\", \"datatype\": dbt.type_string()},\n    {\"name\": \"created_at\", \"datatype\": dbt.type_timestamp()},\n    {\"name\": \"updated_at\", \"datatype\": dbt.type_timestamp()},\n    {\"name\": \"activated_at\", \"datatype\": dbt.type_timestamp()},\n    {\"name\": \"canceled_at\", \"datatype\": dbt.type_timestamp()},\n    {\"name\": \"converted_at\", \"datatype\": dbt.type_timestamp()},\n    {\"name\": \"expires_at\", \"datatype\": dbt.type_timestamp()},\n    {\"name\": \"account_id\", \"datatype\": dbt.type_string()},\n    {\"name\": \"plan_id\", \"datatype\": dbt.type_string()},\n    {\"name\": \"object\", \"datatype\": dbt.type_string()},\n    {\"name\": \"uuid\", \"datatype\": dbt.type_string()},\n    {\"name\": \"state\", \"datatype\": dbt.type_string()},\n    {\"name\": \"current_period_started_at\", \"datatype\": dbt.type_timestamp()},\n    {\"name\": \"current_period_ends_at\", \"datatype\": dbt.type_timestamp()},\n    {\"name\": \"current_term_started_at\", \"datatype\": dbt.type_timestamp()},\n    {\"name\": \"current_term_ends_at\", \"datatype\": dbt.type_timestamp()},\n    {\"name\": \"trial_started_at\", \"datatype\": dbt.type_timestamp()},\n    {\"name\": \"trial_ends_at\", \"datatype\": dbt.type_timestamp()},\n    {\"name\": \"remaining_billing_cycles\", \"datatype\": dbt.type_int()},\n    {\"name\": \"total_billing_cycles\", \"datatype\": dbt.type_int()},\n    {\"name\": \"renewal_billing_cycles\", \"datatype\": dbt.type_int()},\n    {\"name\": \"auto_renew\", \"datatype\": \"boolean\"},\n    {\"name\": \"paused_at\", \"datatype\": dbt.type_timestamp()},\n    {\"name\": \"remaining_pause_cycles\", \"datatype\": dbt.type_int()},\n    {\"name\": \"currency\", \"datatype\": dbt.type_string()},\n    {\"name\": \"unit_amount\", \"datatype\": dbt.type_int()},\n    {\"name\": \"quantity\", \"datatype\": dbt.type_int()},\n    {\"name\": \"add_ons_total\", \"datatype\": dbt.type_int()},\n    {\"name\": \"subtotal\", \"datatype\": dbt.type_int()},\n    {\"name\": \"collection_method\", \"datatype\": dbt.type_string()},\n    {\"name\": \"expiration_reason\", \"datatype\": dbt.type_string()},\n    {\"name\": \"started_with_gift\", \"datatype\": \"boolean\"} \n] %}\n\n{{ fivetran_utils.add_pass_through_columns(columns, var('recurly_subscription_pass_through_columns')) }}\n\n{{ return(columns) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.type_timestamp", "macro.dbt.type_string", "macro.dbt.type_int", "macro.fivetran_utils.add_pass_through_columns"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722889774.500673, "supported_languages": null}, "macro.recurly_source.get_plan_currency_history_columns": {"name": "get_plan_currency_history_columns", "resource_type": "macro", "package_name": "recurly_source", "path": "macros/get_plan_currency_history_columns.sql", "original_file_path": "macros/get_plan_currency_history_columns.sql", "unique_id": "macro.recurly_source.get_plan_currency_history_columns", "macro_sql": "{% macro get_plan_currency_history_columns() %}\n\n{% set columns = [\n    {\"name\": \"_fivetran_synced\", \"datatype\": dbt.type_timestamp()},\n    {\"name\": \"plan_id\", \"datatype\": dbt.type_string()},\n    {\"name\": \"plan_updated_at\", \"datatype\": dbt.type_timestamp()},\n    {\"name\": \"currency\", \"datatype\": dbt.type_string()},\n    {\"name\": \"setup_fees\", \"datatype\": dbt.type_float()},\n    {\"name\": \"unit_amount\", \"datatype\": dbt.type_float()}\n] %}\n\n{{ return(columns) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.type_timestamp", "macro.dbt.type_string", "macro.dbt.type_float"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722889774.501378, "supported_languages": null}, "macro.recurly_source.get_billing_info_history_columns": {"name": "get_billing_info_history_columns", "resource_type": "macro", "package_name": "recurly_source", "path": "macros/get_billing_info_history_columns.sql", "original_file_path": "macros/get_billing_info_history_columns.sql", "unique_id": "macro.recurly_source.get_billing_info_history_columns", "macro_sql": "{% macro get_billing_info_history_columns() %}\n\n{% set columns = [\n    {\"name\": \"_fivetran_synced\", \"datatype\": dbt.type_timestamp()},\n    {\"name\": \"id\", \"datatype\": dbt.type_string()},\n    {\"name\": \"updated_at\", \"datatype\": dbt.type_timestamp()},\n    {\"name\": \"account_id\", \"datatype\": dbt.type_string()},\n    {\"name\": \"first_name\", \"datatype\": dbt.type_string()},\n    {\"name\": \"last_name\", \"datatype\": dbt.type_string()},\n    {\"name\": \"company\", \"datatype\": dbt.type_string()},\n    {\"name\": \"billing_phone\", \"datatype\": dbt.type_string()},\n    {\"name\": \"billing_street_1\", \"datatype\": dbt.type_string()},\n    {\"name\": \"billing_street_2\", \"datatype\": dbt.type_string()},\n    {\"name\": \"billing_city\", \"datatype\": dbt.type_string()},\n    {\"name\": \"billing_region\", \"datatype\": dbt.type_string()},\n    {\"name\": \"billing_postal_code\", \"datatype\": dbt.type_string()},\n    {\"name\": \"billing_country\", \"datatype\": dbt.type_string()},\n    {\"name\": \"vat_number\", \"datatype\": dbt.type_string()},\n    {\"name\": \"valid\", \"datatype\": \"boolean\"},\n    {\"name\": \"payment_method_object\", \"datatype\": dbt.type_string()},\n    {\"name\": \"payment_method_card_type\", \"datatype\": dbt.type_string()},\n    {\"name\": \"payment_method_first_six\", \"datatype\": dbt.type_string()},\n    {\"name\": \"payment_method_last_four\", \"datatype\": dbt.type_string()},\n    {\"name\": \"payment_method_exp_month\", \"datatype\": dbt.type_int()},\n    {\"name\": \"payment_method_exp_year\", \"datatype\": dbt.type_int()},\n    {\"name\": \"fraud_score\", \"datatype\": dbt.type_string()},\n    {\"name\": \"fraud_decision\", \"datatype\": dbt.type_string()},\n    {\"name\": \"fraud_risk_rules_triggered\", \"datatype\": \"variant\"},\n    {\"name\": \"created_at\", \"datatype\": dbt.type_timestamp()},\n    {\"name\": \"updated_by_ip\", \"datatype\": dbt.type_string()},\n    {\"name\": \"updated_by_country\", \"datatype\": dbt.type_string()} \n] %}\n\n{{ return(columns) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.type_timestamp", "macro.dbt.type_string", "macro.dbt.type_int"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722889774.504215, "supported_languages": null}, "macro.recurly_source.get_line_item_history_columns": {"name": "get_line_item_history_columns", "resource_type": "macro", "package_name": "recurly_source", "path": "macros/get_line_item_history_columns.sql", "original_file_path": "macros/get_line_item_history_columns.sql", "unique_id": "macro.recurly_source.get_line_item_history_columns", "macro_sql": "{% macro get_line_item_history_columns() %}\n\n{% set columns = [\n    {\"name\": \"_fivetran_synced\", \"datatype\": dbt.type_timestamp()},\n    {\"name\": \"id\", \"datatype\": dbt.type_string()},\n    {\"name\": \"created_at\", \"datatype\": dbt.type_timestamp()},\n    {\"name\": \"updated_at\", \"datatype\": dbt.type_timestamp()},\n    {\"name\": \"account_id\", \"datatype\": dbt.type_string()},\n    {\"name\": \"plan_id\", \"datatype\": dbt.type_string()},\n    {\"name\": \"add_on_id\", \"datatype\": dbt.type_string()},\n    {\"name\": \"invoice_id\", \"datatype\": dbt.type_string()},\n    {\"name\": \"previous_line_item_id\", \"datatype\": dbt.type_string()},\n    {\"name\": \"original_line_item_invoice_id\", \"datatype\": dbt.type_string()},\n    {\"name\": \"subscription_id\", \"datatype\": dbt.type_string()},\n    {\"name\": \"uuid\", \"datatype\": dbt.type_string()},\n    {\"name\": \"type\", \"datatype\": dbt.type_string()},\n    {\"name\": \"state\", \"datatype\": dbt.type_string()},\n    {\"name\": \"plan_code\", \"datatype\": dbt.type_string()},\n    {\"name\": \"add_on_code\", \"datatype\": dbt.type_string()},\n    {\"name\": \"invoice_number\", \"datatype\": dbt.type_string()},\n    {\"name\": \"origin\", \"datatype\": dbt.type_string()},\n    {\"name\": \"product_code\", \"datatype\": dbt.type_string()},\n    {\"name\": \"currency\", \"datatype\": dbt.type_string()},\n    {\"name\": \"amount\", \"datatype\": dbt.type_float()},\n    {\"name\": \"description\", \"datatype\": dbt.type_string()},\n    {\"name\": \"quantity\", \"datatype\": dbt.type_int()},\n    {\"name\": \"unit_amount\", \"datatype\": dbt.type_int()},\n    {\"name\": \"subtotal\", \"datatype\": dbt.type_int()},\n    {\"name\": \"discount\", \"datatype\": dbt.type_float()},\n    {\"name\": \"tax\", \"datatype\": dbt.type_int()},\n    {\"name\": \"taxable\", \"datatype\": \"boolean\"},\n    {\"name\": \"tax_exempt\", \"datatype\": \"boolean\"},\n    {\"name\": \"tax_code\", \"datatype\": dbt.type_string()},\n    {\"name\": \"tax_type\", \"datatype\": dbt.type_string()},\n    {\"name\": \"tax_region\", \"datatype\": dbt.type_string()},\n    {\"name\": \"tax_rate\", \"datatype\": dbt.type_float()},\n    {\"name\": \"proration_rate\", \"datatype\": dbt.type_float()},\n    {\"name\": \"refund\", \"datatype\": \"boolean\"},\n    {\"name\": \"refunded_quantity\", \"datatype\": dbt.type_int()},\n    {\"name\": \"credit_applied\", \"datatype\": dbt.type_float()},\n    {\"name\": \"start_date\", \"datatype\": dbt.type_timestamp()},\n    {\"name\": \"end_date\", \"datatype\": dbt.type_timestamp()}\n] %}\n\n{{ return(columns) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.type_timestamp", "macro.dbt.type_string", "macro.dbt.type_float", "macro.dbt.type_int"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722889774.508244, "supported_languages": null}, "macro.recurly_source.get_account_balance_history_columns": {"name": "get_account_balance_history_columns", "resource_type": "macro", "package_name": "recurly_source", "path": "macros/get_account_balance_history_columns.sql", "original_file_path": "macros/get_account_balance_history_columns.sql", "unique_id": "macro.recurly_source.get_account_balance_history_columns", "macro_sql": "{% macro get_account_balance_history_columns() %}\n\n{% set columns = [\n    {\"name\": \"_fivetran_synced\", \"datatype\": dbt.type_timestamp()},\n    {\"name\": \"account_id\", \"datatype\": dbt.type_string()},\n    {\"name\": \"account_updated_at\", \"datatype\": dbt.type_timestamp()},\n    {\"name\": \"amount\", \"datatype\": dbt.type_float()},\n    {\"name\": \"currency\", \"datatype\": dbt.type_string()},\n    {\"name\": \"past_due\", \"datatype\": \"boolean\"}\n] %}\n\n{{ return(columns) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.type_timestamp", "macro.dbt.type_string", "macro.dbt.type_float"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722889774.5089438, "supported_languages": null}, "macro.recurly_source.get_coupon_redemption_history_columns": {"name": "get_coupon_redemption_history_columns", "resource_type": "macro", "package_name": "recurly_source", "path": "macros/get_coupon_redemption_history_columns.sql", "original_file_path": "macros/get_coupon_redemption_history_columns.sql", "unique_id": "macro.recurly_source.get_coupon_redemption_history_columns", "macro_sql": "{% macro get_coupon_redemption_history_columns() %}\n\n{% set columns = [\n    {\"name\": \"_fivetran_synced\", \"datatype\": dbt.type_timestamp()},\n    {\"name\": \"account_id\", \"datatype\": dbt.type_string()},\n    {\"name\": \"coupon_id\", \"datatype\": dbt.type_string()},\n    {\"name\": \"created_at\", \"datatype\": dbt.type_timestamp()},\n    {\"name\": \"currency\", \"datatype\": dbt.type_string()},\n    {\"name\": \"discounted\", \"datatype\": dbt.type_string()},\n    {\"name\": \"id\", \"datatype\": dbt.type_string()},\n    {\"name\": \"removed_at\", \"datatype\": dbt.type_timestamp()},\n    {\"name\": \"state\", \"datatype\": dbt.type_string()},\n    {\"name\": \"updated_at\", \"datatype\": dbt.type_timestamp()}\n] %}\n\n{{ return(columns) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.type_timestamp", "macro.dbt.type_string"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722889774.509974, "supported_languages": null}, "macro.recurly_source.get_subscription_add_on_history_columns": {"name": "get_subscription_add_on_history_columns", "resource_type": "macro", "package_name": "recurly_source", "path": "macros/get_subscription_add_on_history_columns.sql", "original_file_path": "macros/get_subscription_add_on_history_columns.sql", "unique_id": "macro.recurly_source.get_subscription_add_on_history_columns", "macro_sql": "{% macro get_subscription_add_on_history_columns() %}\n\n{% set columns = [\n    {\"name\": \"_fivetran_synced\", \"datatype\": dbt.type_timestamp()},\n    {\"name\": \"created_at\", \"datatype\": dbt.type_timestamp()},\n    {\"name\": \"expired_at\", \"datatype\": dbt.type_timestamp()},\n    {\"name\": \"id\", \"datatype\": dbt.type_string()},\n    {\"name\": \"object\", \"datatype\": dbt.type_string()},\n    {\"name\": \"plan_add_on_id\", \"datatype\": dbt.type_string()},\n    {\"name\": \"quantity\", \"datatype\": dbt.type_int()},\n    {\"name\": \"subscription_id\", \"datatype\": dbt.type_string()},\n    {\"name\": \"unit_amount\", \"datatype\": dbt.type_float()},\n    {\"name\": \"updated_at\", \"datatype\": dbt.type_timestamp()}\n] %}\n\n{{ return(columns) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.type_timestamp", "macro.dbt.type_string", "macro.dbt.type_int", "macro.dbt.type_float"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722889774.510988, "supported_languages": null}, "macro.recurly_source.get_invoice_history_columns": {"name": "get_invoice_history_columns", "resource_type": "macro", "package_name": "recurly_source", "path": "macros/get_invoice_history_columns.sql", "original_file_path": "macros/get_invoice_history_columns.sql", "unique_id": "macro.recurly_source.get_invoice_history_columns", "macro_sql": "{% macro get_invoice_history_columns() %}\n\n{% set columns = [\n    {\"name\": \"_fivetran_synced\", \"datatype\": dbt.type_timestamp()},\n    {\"name\": \"id\", \"datatype\": dbt.type_string()},\n    {\"name\": \"created_at\", \"datatype\": dbt.type_timestamp()},\n    {\"name\": \"updated_at\", \"datatype\": dbt.type_timestamp()},\n    {\"name\": \"due_at\", \"datatype\": dbt.type_timestamp()},\n    {\"name\": \"closed_at\", \"datatype\": dbt.type_timestamp()},\n    {\"name\": \"account_id\", \"datatype\": dbt.type_string()},\n    {\"name\": \"previous_invoice_id\", \"datatype\": dbt.type_string()},\n    {\"name\": \"type\", \"datatype\": dbt.type_string()},\n    {\"name\": \"origin\", \"datatype\": dbt.type_string()},\n    {\"name\": \"state\", \"datatype\": dbt.type_string()},\n    {\"name\": \"number\", \"datatype\": dbt.type_string()},\n    {\"name\": \"collection_method\", \"datatype\": dbt.type_string()},\n    {\"name\": \"po_number\", \"datatype\": dbt.type_string()},\n    {\"name\": \"net_terms\", \"datatype\": dbt.type_string()},\n    {\"name\": \"currency\", \"datatype\": dbt.type_string()},\n    {\"name\": \"balance\", \"datatype\": dbt.type_float()},\n    {\"name\": \"paid\", \"datatype\": dbt.type_int()},\n    {\"name\": \"total\", \"datatype\": dbt.type_int()},\n    {\"name\": \"subtotal\", \"datatype\": dbt.type_int()},\n    {\"name\": \"refundable_amount\", \"datatype\": dbt.type_int()},\n    {\"name\": \"discount\", \"datatype\": dbt.type_int()},\n    {\"name\": \"tax\", \"datatype\": dbt.type_int()},\n    {\"name\": \"tax_type\", \"datatype\": dbt.type_string()},\n    {\"name\": \"tax_region\", \"datatype\": dbt.type_string()},\n    {\"name\": \"tax_rate\", \"datatype\": dbt.type_float()}\n] %}\n\n{{ return(columns) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.type_timestamp", "macro.dbt.type_string", "macro.dbt.type_float", "macro.dbt.type_int"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722889774.513772, "supported_languages": null}, "macro.recurly_source.get_transaction_columns": {"name": "get_transaction_columns", "resource_type": "macro", "package_name": "recurly_source", "path": "macros/get_transaction_columns.sql", "original_file_path": "macros/get_transaction_columns.sql", "unique_id": "macro.recurly_source.get_transaction_columns", "macro_sql": "{% macro get_transaction_columns() %}\n\n{% set columns = [\n    {\"name\": \"_fivetran_synced\", \"datatype\": dbt.type_timestamp()},\n    {\"name\": \"id\", \"datatype\": dbt.type_string()},\n    {\"name\": \"created_at\", \"datatype\": dbt.type_timestamp()},\n    {\"name\": \"voided_at\", \"datatype\": dbt.type_timestamp()},\n    {\"name\": \"collected_at\", \"datatype\": dbt.type_timestamp()},\n    {\"name\": \"original_transaction_id\", \"datatype\": dbt.type_string()},\n    {\"name\": \"account_id\", \"datatype\": dbt.type_string()},\n    {\"name\": \"invoice_id\", \"datatype\": dbt.type_string()},\n    {\"name\": \"voided_by_invoice_id\", \"datatype\": dbt.type_string()},\n    {\"name\": \"uuid\", \"datatype\": dbt.type_string()},\n    {\"name\": \"type\", \"datatype\": dbt.type_string()},\n    {\"name\": \"origin\", \"datatype\": dbt.type_string()},\n    {\"name\": \"currency\", \"datatype\": dbt.type_string()},\n    {\"name\": \"amount\", \"datatype\": dbt.type_float()},\n    {\"name\": \"status\", \"datatype\": dbt.type_string()},\n    {\"name\": \"success\", \"datatype\": \"boolean\"},\n    {\"name\": \"refunded\", \"datatype\": \"boolean\"},\n    {\"name\": \"billing_first_name\", \"datatype\": dbt.type_string()},\n    {\"name\": \"billing_last_name\", \"datatype\": dbt.type_string()},\n    {\"name\": \"billing_phone\", \"datatype\": dbt.type_string()},\n    {\"name\": \"billing_street_1\", \"datatype\": dbt.type_string()},\n    {\"name\": \"billing_street_2\", \"datatype\": dbt.type_string()},\n    {\"name\": \"billing_city\", \"datatype\": dbt.type_string()},\n    {\"name\": \"billing_region\", \"datatype\": dbt.type_string()},\n    {\"name\": \"billing_postal_code\", \"datatype\": dbt.type_string()},\n    {\"name\": \"billing_country\", \"datatype\": dbt.type_string()},\n    {\"name\": \"collection_method\", \"datatype\": dbt.type_string()},\n    {\"name\": \"payment_method_object\", \"datatype\": dbt.type_string()},\n    {\"name\": \"status_code\", \"datatype\": dbt.type_string()},\n    {\"name\": \"status_message\", \"datatype\": dbt.type_string()},\n    {\"name\": \"customer_message\", \"datatype\": dbt.type_string()},\n    {\"name\": \"customer_message_locale\", \"datatype\": dbt.type_string()},\n    {\"name\": \"gateway_message\", \"datatype\": dbt.type_string()},\n    {\"name\": \"gateway_reference\", \"datatype\": dbt.type_string()},\n    {\"name\": \"gateway_approval_code\", \"datatype\": dbt.type_string()},\n    {\"name\": \"gateway_response_code\", \"datatype\": dbt.type_string()},\n    {\"name\": \"gateway_response_time\", \"datatype\": dbt.type_float()},\n    {\"name\": \"payment_gateway_id\", \"datatype\": dbt.type_string()},\n    {\"name\": \"payment_gateway_type\", \"datatype\": dbt.type_string()},\n    {\"name\": \"payment_gateway_name\", \"datatype\": dbt.type_timestamp()},\n    {\"name\": \"gateway_response_values\", \"datatype\": dbt.type_string()}\n] %}\n\n{{ return(columns) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.type_timestamp", "macro.dbt.type_string", "macro.dbt.type_float"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722889774.5181692, "supported_languages": null}, "macro.recurly_source.get_invoice_subscription_history_columns": {"name": "get_invoice_subscription_history_columns", "resource_type": "macro", "package_name": "recurly_source", "path": "macros/get_invoice_subscription_history_columns.sql", "original_file_path": "macros/get_invoice_subscription_history_columns.sql", "unique_id": "macro.recurly_source.get_invoice_subscription_history_columns", "macro_sql": "{% macro get_invoice_subscription_history_columns() %}\n\n{% set columns = [\n    {\"name\": \"_fivetran_synced\", \"datatype\": dbt.type_timestamp()},\n    {\"name\": \"invoice_id\", \"datatype\": dbt.type_string()},\n    {\"name\": \"invoice_updated_at\", \"datatype\": dbt.type_timestamp()},\n    {\"name\": \"subscription_id\", \"datatype\": dbt.type_string()}\n] %}\n\n{{ return(columns) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.type_timestamp", "macro.dbt.type_string"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722889774.5186791, "supported_languages": null}, "macro.recurly_source.get_subscription_change_history_columns": {"name": "get_subscription_change_history_columns", "resource_type": "macro", "package_name": "recurly_source", "path": "macros/get_subscription_change_history_columns.sql", "original_file_path": "macros/get_subscription_change_history_columns.sql", "unique_id": "macro.recurly_source.get_subscription_change_history_columns", "macro_sql": "{% macro get_subscription_change_history_columns() %}\n\n{% set columns = [\n    {\"name\": \"_fivetran_synced\", \"datatype\": dbt.type_timestamp()},\n    {\"name\": \"id\", \"datatype\": dbt.type_string()},\n    {\"name\": \"updated_at\", \"datatype\": dbt.type_timestamp()},\n    {\"name\": \"plan_id\", \"datatype\": dbt.type_string()},\n    {\"name\": \"subscription_id\", \"datatype\": dbt.type_string()},\n    {\"name\": \"object\", \"datatype\": dbt.type_string()},\n    {\"name\": \"unit_amount\", \"datatype\": dbt.type_float()},\n    {\"name\": \"quantity\", \"datatype\": dbt.type_int()},\n    {\"name\": \"activate_at\", \"datatype\": dbt.type_timestamp()},\n    {\"name\": \"activated\", \"datatype\": dbt.type_string()},\n    {\"name\": \"created_at\", \"datatype\": dbt.type_timestamp()},\n    {\"name\": \"deleted_at\", \"datatype\": dbt.type_timestamp()}\n] %}\n\n{{ return(columns) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.type_timestamp", "macro.dbt.type_string", "macro.dbt.type_float", "macro.dbt.type_int"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722889774.5198238, "supported_languages": null}, "macro.recurly_source.get_account_history_columns": {"name": "get_account_history_columns", "resource_type": "macro", "package_name": "recurly_source", "path": "macros/get_account_history_columns.sql", "original_file_path": "macros/get_account_history_columns.sql", "unique_id": "macro.recurly_source.get_account_history_columns", "macro_sql": "{% macro get_account_history_columns() %}\n\n{% set columns = [\n    {\"name\": \"_fivetran_synced\", \"datatype\": dbt.type_timestamp()},\n    {\"name\": \"id\", \"datatype\": dbt.type_string()},\n    {\"name\": \"created_at\", \"datatype\": dbt.type_timestamp()},\n    {\"name\": \"updated_at\", \"datatype\": dbt.type_timestamp()},\n    {\"name\": \"deleted_at\", \"datatype\": dbt.type_timestamp()},\n    {\"name\": \"code\", \"datatype\": dbt.type_string()},\n    {\"name\": \"bill_to\", \"datatype\": dbt.type_string()},\n    {\"name\": \"state\", \"datatype\": dbt.type_string()},\n    {\"name\": \"username\", \"datatype\": dbt.type_string()},\n    {\"name\": \"first_name\", \"datatype\": dbt.type_string()},\n    {\"name\": \"last_name\", \"datatype\": dbt.type_string()},\n    {\"name\": \"email\", \"datatype\": dbt.type_string()},\n    {\"name\": \"cc_emails\", \"datatype\": dbt.type_string()},\n    {\"name\": \"company\", \"datatype\": dbt.type_string()},\n    {\"name\": \"vat_number\", \"datatype\": dbt.type_string()},\n    {\"name\": \"tax_exempt\", \"datatype\": \"boolean\"},\n    {\"name\": \"account_city\", \"datatype\": dbt.type_string()},\n    {\"name\": \"account_country\", \"datatype\": dbt.type_string()},\n    {\"name\": \"account_postal_code\", \"datatype\": dbt.type_string()},\n    {\"name\": \"account_region\", \"datatype\": dbt.type_string()}\n] %}\n\n{{ fivetran_utils.add_pass_through_columns(columns, var('recurly_account_pass_through_columns')) }}\n\n{{ return(columns) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.type_timestamp", "macro.dbt.type_string", "macro.fivetran_utils.add_pass_through_columns"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722889774.522017, "supported_languages": null}, "macro.recurly_source.get_invoice_coupon_redemption_history_columns": {"name": "get_invoice_coupon_redemption_history_columns", "resource_type": "macro", "package_name": "recurly_source", "path": "macros/get_invoice_coupon_redemption_history_columns.sql", "original_file_path": "macros/get_invoice_coupon_redemption_history_columns.sql", "unique_id": "macro.recurly_source.get_invoice_coupon_redemption_history_columns", "macro_sql": "{% macro get_invoice_coupon_redemption_history_columns() %}\n\n{% set columns = [\n    {\"name\": \"_fivetran_synced\", \"datatype\": dbt.type_timestamp()},\n    {\"name\": \"coupon_redemption_id\", \"datatype\": dbt.type_string()},\n    {\"name\": \"invoice_id\", \"datatype\": dbt.type_string()},\n    {\"name\": \"invoice_updated_at\", \"datatype\": dbt.type_timestamp()}\n] %}\n\n{{ return(columns) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.type_timestamp", "macro.dbt.type_string"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722889774.522611, "supported_languages": null}, "macro.recurly_source.get_credit_payment_history_columns": {"name": "get_credit_payment_history_columns", "resource_type": "macro", "package_name": "recurly_source", "path": "macros/get_credit_payment_history_columns.sql", "original_file_path": "macros/get_credit_payment_history_columns.sql", "unique_id": "macro.recurly_source.get_credit_payment_history_columns", "macro_sql": "{% macro get_credit_payment_history_columns() %}\n\n{% set columns = [\n    {\"name\": \"_fivetran_synced\", \"datatype\": dbt.type_timestamp()},\n    {\"name\": \"id\", \"datatype\": dbt.type_string()},\n    {\"name\": \"updated_at\", \"datatype\": dbt.type_timestamp()},\n    {\"name\": \"account_id\", \"datatype\": dbt.type_string()},\n    {\"name\": \"applied_to_invoice_id\", \"datatype\": dbt.type_string()},\n    {\"name\": \"original_invoice_id\", \"datatype\": dbt.type_string()},\n    {\"name\": \"refund_transaction_id\", \"datatype\": dbt.type_string()},\n    {\"name\": \"original_credit_payment_id\", \"datatype\": dbt.type_string()},\n    {\"name\": \"uuid\", \"datatype\": dbt.type_string()},\n    {\"name\": \"action\", \"datatype\": dbt.type_string()},\n    {\"name\": \"currency\", \"datatype\": dbt.type_string()},\n    {\"name\": \"amount\", \"datatype\": dbt.type_float()},\n    {\"name\": \"created_at\", \"datatype\": dbt.type_timestamp()},\n    {\"name\": \"voided_at\", \"datatype\": dbt.type_timestamp()}\n] %}\n\n{{ return(columns) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.type_timestamp", "macro.dbt.type_string", "macro.dbt.type_float"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722889774.524021, "supported_languages": null}, "macro.recurly_source.get_coupon_discount_columns": {"name": "get_coupon_discount_columns", "resource_type": "macro", "package_name": "recurly_source", "path": "macros/get_coupon_discount_columns.sql", "original_file_path": "macros/get_coupon_discount_columns.sql", "unique_id": "macro.recurly_source.get_coupon_discount_columns", "macro_sql": "{% macro get_coupon_discount_columns() %}\n\n{% set columns = [\n    {\"name\": \"_fivetran_synced\", \"datatype\": dbt.type_timestamp()},\n    {\"name\": \"amount\", \"datatype\": dbt.type_float()},\n    {\"name\": \"coupon_id\", \"datatype\": dbt.type_string()},\n    {\"name\": \"currency\", \"datatype\": dbt.type_string()},\n    {\"name\": \"fivetran_id\", \"datatype\": dbt.type_string()},\n    {\"name\": \"percentage\", \"datatype\": dbt.type_string()},\n    {\"name\": \"trial_length\", \"datatype\": dbt.type_int()},\n    {\"name\": \"trial_unit\", \"datatype\": dbt.type_string()},\n    {\"name\": \"type\", \"datatype\": dbt.type_string()}\n] %}\n\n{{ return(columns) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.type_timestamp", "macro.dbt.type_float", "macro.dbt.type_string", "macro.dbt.type_int"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722889774.524965, "supported_languages": null}, "macro.recurly_source.get_account_note_history_columns": {"name": "get_account_note_history_columns", "resource_type": "macro", "package_name": "recurly_source", "path": "macros/get_account_note_history_columns.sql", "original_file_path": "macros/get_account_note_history_columns.sql", "unique_id": "macro.recurly_source.get_account_note_history_columns", "macro_sql": "{% macro get_account_note_history_columns() %}\n\n{% set columns = [\n    {\"name\": \"_fivetran_synced\", \"datatype\": dbt.type_timestamp()},\n    {\"name\": \"account_id\", \"datatype\": dbt.type_string()},\n    {\"name\": \"account_updated_at\", \"datatype\": dbt.type_timestamp()},\n    {\"name\": \"created_at\", \"datatype\": dbt.type_timestamp()},\n    {\"name\": \"id\", \"datatype\": dbt.type_string()},\n    {\"name\": \"message\", \"datatype\": dbt.type_string()},\n    {\"name\": \"object\", \"datatype\": dbt.type_string()},\n    {\"name\": \"user_email\", \"datatype\": dbt.type_string()},\n    {\"name\": \"user_id\", \"datatype\": dbt.type_string()}\n] %}\n\n{{ return(columns) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.type_timestamp", "macro.dbt.type_string"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722889774.525903, "supported_languages": null}, "macro.recurly_source.get_transaction_subscription_columns": {"name": "get_transaction_subscription_columns", "resource_type": "macro", "package_name": "recurly_source", "path": "macros/get_transaction_subscription_columns.sql", "original_file_path": "macros/get_transaction_subscription_columns.sql", "unique_id": "macro.recurly_source.get_transaction_subscription_columns", "macro_sql": "{% macro get_transaction_subscription_columns() %}\n\n{% set columns = [\n    {\"name\": \"_fivetran_synced\", \"datatype\": dbt.type_timestamp()},\n    {\"name\": \"transaction_id\", \"datatype\": dbt.type_string()},\n    {\"name\": \"subscription_id\", \"datatype\": dbt.type_string()}\n] %}\n\n{{ return(columns) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.type_timestamp", "macro.dbt.type_string"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722889774.5263438, "supported_languages": null}, "macro.recurly_source.get_plan_history_columns": {"name": "get_plan_history_columns", "resource_type": "macro", "package_name": "recurly_source", "path": "macros/get_plan_history_columns.sql", "original_file_path": "macros/get_plan_history_columns.sql", "unique_id": "macro.recurly_source.get_plan_history_columns", "macro_sql": "{% macro get_plan_history_columns() %}\n\n{% set columns = [\n    {\"name\": \"_fivetran_synced\", \"datatype\": dbt.type_timestamp()},\n    {\"name\": \"id\", \"datatype\": dbt.type_string()},\n    {\"name\": \"created_at\", \"datatype\": dbt.type_timestamp()},\n    {\"name\": \"updated_at\", \"datatype\": dbt.type_timestamp()},\n    {\"name\": \"deleted_at\", \"datatype\": dbt.type_timestamp()},\n    {\"name\": \"code\", \"datatype\": dbt.type_string()},\n    {\"name\": \"state\", \"datatype\": dbt.type_string()},\n    {\"name\": \"name\", \"datatype\": dbt.type_string()},\n    {\"name\": \"description\", \"datatype\": dbt.type_string()},\n    {\"name\": \"interval_unit\", \"datatype\": dbt.type_string()},\n    {\"name\": \"interval_length\", \"datatype\": dbt.type_int()},\n    {\"name\": \"trial_unit\", \"datatype\": dbt.type_string()},\n    {\"name\": \"trial_length\", \"datatype\": dbt.type_int()},\n    {\"name\": \"total_billing_cycles\", \"datatype\": dbt.type_int()},\n    {\"name\": \"auto_renew\", \"datatype\": \"boolean\"},\n    {\"name\": \"accounting_code\", \"datatype\": dbt.type_string()},\n    {\"name\": \"setup_fee_accounting_code\", \"datatype\": dbt.type_string()},\n    {\"name\": \"tax_code\", \"datatype\": dbt.type_string()},\n    {\"name\": \"tax_exempt\", \"datatype\": \"boolean\"}\n] %}\n\n{{ return(columns) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.type_timestamp", "macro.dbt.type_string", "macro.dbt.type_int"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722889774.528196, "supported_languages": null}, "macro.spark_utils.get_tables": {"name": "get_tables", "resource_type": "macro", "package_name": "spark_utils", "path": "macros/maintenance_operation.sql", "original_file_path": "macros/maintenance_operation.sql", "unique_id": "macro.spark_utils.get_tables", "macro_sql": "{% macro get_tables(table_regex_pattern='.*') %}\n\n  {% set tables = [] %}\n  {% for database in spark__list_schemas('not_used') %}\n    {% for table in spark__list_relations_without_caching(database[0]) %}\n      {% set db_tablename = database[0] ~ \".\" ~ table[1] %}\n      {% set is_match = modules.re.match(table_regex_pattern, db_tablename) %}\n      {% if is_match %}\n        {% call statement('table_detail', fetch_result=True) -%}\n          describe extended {{ db_tablename }}\n        {% endcall %}\n\n        {% set table_type = load_result('table_detail').table|reverse|selectattr(0, 'in', ('type', 'TYPE', 'Type'))|first %}\n        {% if table_type[1]|lower != 'view' %}\n          {{ tables.append(db_tablename) }}\n        {% endif %}\n      {% endif %}\n    {% endfor %}\n  {% endfor %}\n  {{ return(tables) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722889774.532726, "supported_languages": null}, "macro.spark_utils.get_delta_tables": {"name": "get_delta_tables", "resource_type": "macro", "package_name": "spark_utils", "path": "macros/maintenance_operation.sql", "original_file_path": "macros/maintenance_operation.sql", "unique_id": "macro.spark_utils.get_delta_tables", "macro_sql": "{% macro get_delta_tables(table_regex_pattern='.*') %}\n\n  {% set delta_tables = [] %}\n  {% for db_tablename in get_tables(table_regex_pattern) %}\n    {% call statement('table_detail', fetch_result=True) -%}\n      describe extended {{ db_tablename }}\n    {% endcall %}\n\n    {% set table_type = load_result('table_detail').table|reverse|selectattr(0, 'in', ('provider', 'PROVIDER', 'Provider'))|first %}\n    {% if table_type[1]|lower == 'delta' %}\n      {{ delta_tables.append(db_tablename) }}\n    {% endif %}\n  {% endfor %}\n  {{ return(delta_tables) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.spark_utils.get_tables", "macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722889774.533428, "supported_languages": null}, "macro.spark_utils.get_statistic_columns": {"name": "get_statistic_columns", "resource_type": "macro", "package_name": "spark_utils", "path": "macros/maintenance_operation.sql", "original_file_path": "macros/maintenance_operation.sql", "unique_id": "macro.spark_utils.get_statistic_columns", "macro_sql": "{% macro get_statistic_columns(table) %}\n\n  {% call statement('input_columns', fetch_result=True) %}\n    SHOW COLUMNS IN {{ table }}\n  {% endcall %}\n  {% set input_columns = load_result('input_columns').table %}\n\n  {% set output_columns = [] %}\n  {% for column in input_columns %}\n    {% call statement('column_information', fetch_result=True) %}\n      DESCRIBE TABLE {{ table }} `{{ column[0] }}`\n    {% endcall %}\n    {% if not load_result('column_information').table[1][1].startswith('struct') and not load_result('column_information').table[1][1].startswith('array')  %}\n      {{ output_columns.append('`' ~ column[0] ~ '`') }}\n    {% endif %}\n  {% endfor %}\n  {{ return(output_columns) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722889774.534188, "supported_languages": null}, "macro.spark_utils.spark_optimize_delta_tables": {"name": "spark_optimize_delta_tables", "resource_type": "macro", "package_name": "spark_utils", "path": "macros/maintenance_operation.sql", "original_file_path": "macros/maintenance_operation.sql", "unique_id": "macro.spark_utils.spark_optimize_delta_tables", "macro_sql": "{% macro spark_optimize_delta_tables(table_regex_pattern='.*') %}\n\n  {% for table in get_delta_tables(table_regex_pattern) %}\n    {% set start=modules.datetime.datetime.now() %}\n    {% set message_prefix=loop.index ~ \" of \" ~ loop.length %}\n    {{ dbt_utils.log_info(message_prefix ~ \" Optimizing \" ~ table) }}\n    {% do run_query(\"optimize \" ~ table) %}\n    {% set end=modules.datetime.datetime.now() %}\n    {% set total_seconds = (end - start).total_seconds() | round(2)  %}\n    {{ dbt_utils.log_info(message_prefix ~ \" Finished \" ~ table ~ \" in \" ~ total_seconds ~ \"s\") }}\n  {% endfor %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.spark_utils.get_delta_tables", "macro.dbt_utils.log_info", "macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722889774.534842, "supported_languages": null}, "macro.spark_utils.spark_vacuum_delta_tables": {"name": "spark_vacuum_delta_tables", "resource_type": "macro", "package_name": "spark_utils", "path": "macros/maintenance_operation.sql", "original_file_path": "macros/maintenance_operation.sql", "unique_id": "macro.spark_utils.spark_vacuum_delta_tables", "macro_sql": "{% macro spark_vacuum_delta_tables(table_regex_pattern='.*') %}\n\n  {% for table in get_delta_tables(table_regex_pattern) %}\n    {% set start=modules.datetime.datetime.now() %}\n    {% set message_prefix=loop.index ~ \" of \" ~ loop.length %}\n    {{ dbt_utils.log_info(message_prefix ~ \" Vacuuming \" ~ table) }}\n    {% do run_query(\"vacuum \" ~ table) %}\n    {% set end=modules.datetime.datetime.now() %}\n    {% set total_seconds = (end - start).total_seconds() | round(2)  %}\n    {{ dbt_utils.log_info(message_prefix ~ \" Finished \" ~ table ~ \" in \" ~ total_seconds ~ \"s\") }}\n  {% endfor %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.spark_utils.get_delta_tables", "macro.dbt_utils.log_info", "macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722889774.535465, "supported_languages": null}, "macro.spark_utils.spark_analyze_tables": {"name": "spark_analyze_tables", "resource_type": "macro", "package_name": "spark_utils", "path": "macros/maintenance_operation.sql", "original_file_path": "macros/maintenance_operation.sql", "unique_id": "macro.spark_utils.spark_analyze_tables", "macro_sql": "{% macro spark_analyze_tables(table_regex_pattern='.*') %}\n\n  {% for table in get_tables(table_regex_pattern) %}\n    {% set start=modules.datetime.datetime.now() %}\n    {% set columns = get_statistic_columns(table) | join(',') %}\n    {% set message_prefix=loop.index ~ \" of \" ~ loop.length %}\n    {{ dbt_utils.log_info(message_prefix ~ \" Analyzing \" ~ table) }}\n    {% if columns != '' %}\n      {% do run_query(\"analyze table \" ~ table ~ \" compute statistics for columns \" ~ columns) %}\n    {% endif %}\n    {% set end=modules.datetime.datetime.now() %}\n    {% set total_seconds = (end - start).total_seconds() | round(2)  %}\n    {{ dbt_utils.log_info(message_prefix ~ \" Finished \" ~ table ~ \" in \" ~ total_seconds ~ \"s\") }}\n  {% endfor %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.spark_utils.get_tables", "macro.spark_utils.get_statistic_columns", "macro.dbt_utils.log_info", "macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722889774.5362282, "supported_languages": null}, "macro.spark_utils.spark__concat": {"name": "spark__concat", "resource_type": "macro", "package_name": "spark_utils", "path": "macros/dbt_utils/cross_db_utils/concat.sql", "original_file_path": "macros/dbt_utils/cross_db_utils/concat.sql", "unique_id": "macro.spark_utils.spark__concat", "macro_sql": "{% macro spark__concat(fields) -%}\n    concat({{ fields|join(', ') }})\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722889774.5364108, "supported_languages": null}, "macro.spark_utils.spark__type_numeric": {"name": "spark__type_numeric", "resource_type": "macro", "package_name": "spark_utils", "path": "macros/dbt_utils/cross_db_utils/datatypes.sql", "original_file_path": "macros/dbt_utils/cross_db_utils/datatypes.sql", "unique_id": "macro.spark_utils.spark__type_numeric", "macro_sql": "{% macro spark__type_numeric() %}\n    decimal(28, 6)\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722889774.5365162, "supported_languages": null}, "macro.spark_utils.spark__dateadd": {"name": "spark__dateadd", "resource_type": "macro", "package_name": "spark_utils", "path": "macros/dbt_utils/cross_db_utils/dateadd.sql", "original_file_path": "macros/dbt_utils/cross_db_utils/dateadd.sql", "unique_id": "macro.spark_utils.spark__dateadd", "macro_sql": "{% macro spark__dateadd(datepart, interval, from_date_or_timestamp) %}\n\n    {%- set clock_component -%}\n        {# make sure the dates + timestamps are real, otherwise raise an error asap #}\n        to_unix_timestamp({{ spark_utils.assert_not_null('to_timestamp', from_date_or_timestamp) }})\n        - to_unix_timestamp({{ spark_utils.assert_not_null('date', from_date_or_timestamp) }})\n    {%- endset -%}\n\n    {%- if datepart in ['day', 'week'] -%}\n        \n        {%- set multiplier = 7 if datepart == 'week' else 1 -%}\n\n        to_timestamp(\n            to_unix_timestamp(\n                date_add(\n                    {{ spark_utils.assert_not_null('date', from_date_or_timestamp) }},\n                    cast({{interval}} * {{multiplier}} as int)\n                )\n            ) + {{clock_component}}\n        )\n\n    {%- elif datepart in ['month', 'quarter', 'year'] -%}\n    \n        {%- set multiplier -%} \n            {%- if datepart == 'month' -%} 1\n            {%- elif datepart == 'quarter' -%} 3\n            {%- elif datepart == 'year' -%} 12\n            {%- endif -%}\n        {%- endset -%}\n\n        to_timestamp(\n            to_unix_timestamp(\n                add_months(\n                    {{ spark_utils.assert_not_null('date', from_date_or_timestamp) }},\n                    cast({{interval}} * {{multiplier}} as int)\n                )\n            ) + {{clock_component}}\n        )\n\n    {%- elif datepart in ('hour', 'minute', 'second', 'millisecond', 'microsecond') -%}\n    \n        {%- set multiplier -%} \n            {%- if datepart == 'hour' -%} 3600\n            {%- elif datepart == 'minute' -%} 60\n            {%- elif datepart == 'second' -%} 1\n            {%- elif datepart == 'millisecond' -%} (1/1000000)\n            {%- elif datepart == 'microsecond' -%} (1/1000000)\n            {%- endif -%}\n        {%- endset -%}\n\n        to_timestamp(\n            {{ spark_utils.assert_not_null('to_unix_timestamp', from_date_or_timestamp) }}\n            + cast({{interval}} * {{multiplier}} as int)\n        )\n\n    {%- else -%}\n\n        {{ exceptions.raise_compiler_error(\"macro dateadd not implemented for datepart ~ '\" ~ datepart ~ \"' ~ on Spark\") }}\n\n    {%- endif -%}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.spark_utils.assert_not_null"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722889774.5389209, "supported_languages": null}, "macro.spark_utils.spark__datediff": {"name": "spark__datediff", "resource_type": "macro", "package_name": "spark_utils", "path": "macros/dbt_utils/cross_db_utils/datediff.sql", "original_file_path": "macros/dbt_utils/cross_db_utils/datediff.sql", "unique_id": "macro.spark_utils.spark__datediff", "macro_sql": "{% macro spark__datediff(first_date, second_date, datepart) %}\n\n    {%- if datepart in ['day', 'week', 'month', 'quarter', 'year'] -%}\n    \n        {# make sure the dates are real, otherwise raise an error asap #}\n        {% set first_date = spark_utils.assert_not_null('date', first_date) %}\n        {% set second_date = spark_utils.assert_not_null('date', second_date) %}\n    \n    {%- endif -%}\n    \n    {%- if datepart == 'day' -%}\n    \n        datediff({{second_date}}, {{first_date}})\n    \n    {%- elif datepart == 'week' -%}\n    \n        case when {{first_date}} < {{second_date}}\n            then floor(datediff({{second_date}}, {{first_date}})/7)\n            else ceil(datediff({{second_date}}, {{first_date}})/7)\n            end\n        \n        -- did we cross a week boundary (Sunday)?\n        + case\n            when {{first_date}} < {{second_date}} and dayofweek({{second_date}}) < dayofweek({{first_date}}) then 1\n            when {{first_date}} > {{second_date}} and dayofweek({{second_date}}) > dayofweek({{first_date}}) then -1\n            else 0 end\n\n    {%- elif datepart == 'month' -%}\n\n        case when {{first_date}} < {{second_date}}\n            then floor(months_between(date({{second_date}}), date({{first_date}})))\n            else ceil(months_between(date({{second_date}}), date({{first_date}})))\n            end\n        \n        -- did we cross a month boundary?\n        + case\n            when {{first_date}} < {{second_date}} and dayofmonth({{second_date}}) < dayofmonth({{first_date}}) then 1\n            when {{first_date}} > {{second_date}} and dayofmonth({{second_date}}) > dayofmonth({{first_date}}) then -1\n            else 0 end\n        \n    {%- elif datepart == 'quarter' -%}\n    \n        case when {{first_date}} < {{second_date}}\n            then floor(months_between(date({{second_date}}), date({{first_date}}))/3)\n            else ceil(months_between(date({{second_date}}), date({{first_date}}))/3)\n            end\n        \n        -- did we cross a quarter boundary?\n        + case\n            when {{first_date}} < {{second_date}} and (\n                (dayofyear({{second_date}}) - (quarter({{second_date}}) * 365/4))\n                < (dayofyear({{first_date}}) - (quarter({{first_date}}) * 365/4))\n            ) then 1\n            when {{first_date}} > {{second_date}} and (\n                (dayofyear({{second_date}}) - (quarter({{second_date}}) * 365/4))\n                > (dayofyear({{first_date}}) - (quarter({{first_date}}) * 365/4))\n            ) then -1\n            else 0 end\n\n    {%- elif datepart == 'year' -%}\n    \n        year({{second_date}}) - year({{first_date}})\n\n    {%- elif datepart in ('hour', 'minute', 'second', 'millisecond', 'microsecond') -%}\n    \n        {%- set divisor -%} \n            {%- if datepart == 'hour' -%} 3600\n            {%- elif datepart == 'minute' -%} 60\n            {%- elif datepart == 'second' -%} 1\n            {%- elif datepart == 'millisecond' -%} (1/1000)\n            {%- elif datepart == 'microsecond' -%} (1/1000000)\n            {%- endif -%}\n        {%- endset -%}\n\n        case when {{first_date}} < {{second_date}}\n            then ceil((\n                {# make sure the timestamps are real, otherwise raise an error asap #}\n                {{ spark_utils.assert_not_null('to_unix_timestamp', spark_utils.assert_not_null('to_timestamp', second_date)) }}\n                - {{ spark_utils.assert_not_null('to_unix_timestamp', spark_utils.assert_not_null('to_timestamp', first_date)) }}\n            ) / {{divisor}})\n            else floor((\n                {{ spark_utils.assert_not_null('to_unix_timestamp', spark_utils.assert_not_null('to_timestamp', second_date)) }}\n                - {{ spark_utils.assert_not_null('to_unix_timestamp', spark_utils.assert_not_null('to_timestamp', first_date)) }}\n            ) / {{divisor}})\n            end\n            \n            {% if datepart == 'millisecond' %}\n                + cast(date_format({{second_date}}, 'SSS') as int)\n                - cast(date_format({{first_date}}, 'SSS') as int)\n            {% endif %}\n            \n            {% if datepart == 'microsecond' %}    \n                {% set capture_str = '[0-9]{4}-[0-9]{2}-[0-9]{2}.[0-9]{2}:[0-9]{2}:[0-9]{2}.([0-9]{6})' %}\n                -- Spark doesn't really support microseconds, so this is a massive hack!\n                -- It will only work if the timestamp-string is of the format\n                -- 'yyyy-MM-dd-HH mm.ss.SSSSSS'\n                + cast(regexp_extract({{second_date}}, '{{capture_str}}', 1) as int)\n                - cast(regexp_extract({{first_date}}, '{{capture_str}}', 1) as int)    \n            {% endif %}\n\n    {%- else -%}\n\n        {{ exceptions.raise_compiler_error(\"macro datediff not implemented for datepart ~ '\" ~ datepart ~ \"' ~ on Spark\") }}\n\n    {%- endif -%}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.spark_utils.assert_not_null"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722889774.545404, "supported_languages": null}, "macro.spark_utils.spark__current_timestamp": {"name": "spark__current_timestamp", "resource_type": "macro", "package_name": "spark_utils", "path": "macros/dbt_utils/cross_db_utils/current_timestamp.sql", "original_file_path": "macros/dbt_utils/cross_db_utils/current_timestamp.sql", "unique_id": "macro.spark_utils.spark__current_timestamp", "macro_sql": "{% macro spark__current_timestamp() %}\n    current_timestamp()\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722889774.545541, "supported_languages": null}, "macro.spark_utils.spark__current_timestamp_in_utc": {"name": "spark__current_timestamp_in_utc", "resource_type": "macro", "package_name": "spark_utils", "path": "macros/dbt_utils/cross_db_utils/current_timestamp.sql", "original_file_path": "macros/dbt_utils/cross_db_utils/current_timestamp.sql", "unique_id": "macro.spark_utils.spark__current_timestamp_in_utc", "macro_sql": "{% macro spark__current_timestamp_in_utc() %}\n    unix_timestamp()\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722889774.545611, "supported_languages": null}, "macro.spark_utils.spark__split_part": {"name": "spark__split_part", "resource_type": "macro", "package_name": "spark_utils", "path": "macros/dbt_utils/cross_db_utils/split_part.sql", "original_file_path": "macros/dbt_utils/cross_db_utils/split_part.sql", "unique_id": "macro.spark_utils.spark__split_part", "macro_sql": "{% macro spark__split_part(string_text, delimiter_text, part_number) %}\n\n    {% set delimiter_expr %}\n    \n        -- escape if starts with a special character\n        case when regexp_extract({{ delimiter_text }}, '([^A-Za-z0-9])(.*)', 1) != '_'\n            then concat('\\\\', {{ delimiter_text }})\n            else {{ delimiter_text }} end\n    \n    {% endset %}\n\n    {% set split_part_expr %}\n    \n    split(\n        {{ string_text }},\n        {{ delimiter_expr }}\n        )[({{ part_number - 1 }})]\n    \n    {% endset %}\n    \n    {{ return(split_part_expr) }}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722889774.5461152, "supported_languages": null}, "macro.spark_utils.spark__get_relations_by_pattern": {"name": "spark__get_relations_by_pattern", "resource_type": "macro", "package_name": "spark_utils", "path": "macros/dbt_utils/sql/get_relations_by_prefix.sql", "original_file_path": "macros/dbt_utils/sql/get_relations_by_prefix.sql", "unique_id": "macro.spark_utils.spark__get_relations_by_pattern", "macro_sql": "{% macro spark__get_relations_by_pattern(schema_pattern, table_pattern, exclude='', database=target.database) %}\n\n    {%- call statement('get_tables', fetch_result=True) %}\n\n        show table extended in {{ schema_pattern }} like '{{ table_pattern }}'\n\n    {%- endcall -%}\n\n    {%- set table_list = load_result('get_tables') -%}\n\n    {%- if table_list and table_list['table'] -%}\n    {%- set tbl_relations = [] -%}\n    {%- for row in table_list['table'] -%}\n        {%- set tbl_relation = api.Relation.create(\n            database=None,\n            schema=row[0],\n            identifier=row[1],\n            type=('view' if 'Type: VIEW' in row[3] else 'table')\n        ) -%}\n        {%- do tbl_relations.append(tbl_relation) -%}\n    {%- endfor -%}\n\n    {{ return(tbl_relations) }}\n    {%- else -%}\n    {{ return([]) }}\n    {%- endif -%}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722889774.547542, "supported_languages": null}, "macro.spark_utils.spark__get_relations_by_prefix": {"name": "spark__get_relations_by_prefix", "resource_type": "macro", "package_name": "spark_utils", "path": "macros/dbt_utils/sql/get_relations_by_prefix.sql", "original_file_path": "macros/dbt_utils/sql/get_relations_by_prefix.sql", "unique_id": "macro.spark_utils.spark__get_relations_by_prefix", "macro_sql": "{% macro spark__get_relations_by_prefix(schema_pattern, table_pattern, exclude='', database=target.database) %}\n    {% set table_pattern = table_pattern ~ '*' %}\n    {{ return(spark_utils.spark__get_relations_by_pattern(schema_pattern, table_pattern, exclude='', database=target.database)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.spark_utils.spark__get_relations_by_pattern"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722889774.547831, "supported_languages": null}, "macro.spark_utils.spark__get_tables_by_pattern": {"name": "spark__get_tables_by_pattern", "resource_type": "macro", "package_name": "spark_utils", "path": "macros/dbt_utils/sql/get_relations_by_prefix.sql", "original_file_path": "macros/dbt_utils/sql/get_relations_by_prefix.sql", "unique_id": "macro.spark_utils.spark__get_tables_by_pattern", "macro_sql": "{% macro spark__get_tables_by_pattern(schema_pattern, table_pattern, exclude='', database=target.database) %}\n    {{ return(spark_utils.spark__get_relations_by_pattern(schema_pattern, table_pattern, exclude='', database=target.database)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.spark_utils.spark__get_relations_by_pattern"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722889774.548073, "supported_languages": null}, "macro.spark_utils.spark__get_tables_by_prefix": {"name": "spark__get_tables_by_prefix", "resource_type": "macro", "package_name": "spark_utils", "path": "macros/dbt_utils/sql/get_relations_by_prefix.sql", "original_file_path": "macros/dbt_utils/sql/get_relations_by_prefix.sql", "unique_id": "macro.spark_utils.spark__get_tables_by_prefix", "macro_sql": "{% macro spark__get_tables_by_prefix(schema_pattern, table_pattern, exclude='', database=target.database) %}\n    {{ return(spark_utils.spark__get_relations_by_prefix(schema_pattern, table_pattern, exclude='', database=target.database)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.spark_utils.spark__get_relations_by_prefix"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722889774.548309, "supported_languages": null}, "macro.spark_utils.assert_not_null": {"name": "assert_not_null", "resource_type": "macro", "package_name": "spark_utils", "path": "macros/etc/assert_not_null.sql", "original_file_path": "macros/etc/assert_not_null.sql", "unique_id": "macro.spark_utils.assert_not_null", "macro_sql": "{% macro assert_not_null(function, arg) -%}\n  {{ return(adapter.dispatch('assert_not_null', 'spark_utils')(function, arg)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.spark_utils.default__assert_not_null"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722889774.548595, "supported_languages": null}, "macro.spark_utils.default__assert_not_null": {"name": "default__assert_not_null", "resource_type": "macro", "package_name": "spark_utils", "path": "macros/etc/assert_not_null.sql", "original_file_path": "macros/etc/assert_not_null.sql", "unique_id": "macro.spark_utils.default__assert_not_null", "macro_sql": "{% macro default__assert_not_null(function, arg) %}\n\n    coalesce({{function}}({{arg}}), nvl2({{function}}({{arg}}), assert_true({{function}}({{arg}}) is not null), null))\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722889774.548769, "supported_languages": null}, "macro.spark_utils.spark__convert_timezone": {"name": "spark__convert_timezone", "resource_type": "macro", "package_name": "spark_utils", "path": "macros/snowplow/convert_timezone.sql", "original_file_path": "macros/snowplow/convert_timezone.sql", "unique_id": "macro.spark_utils.spark__convert_timezone", "macro_sql": "{% macro spark__convert_timezone(in_tz, out_tz, in_timestamp) %}\n    from_utc_timestamp(to_utc_timestamp({{in_timestamp}}, {{in_tz}}), {{out_tz}})\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722889774.54895, "supported_languages": null}, "macro.fivetran_utils.enabled_vars": {"name": "enabled_vars", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/enabled_vars.sql", "original_file_path": "macros/enabled_vars.sql", "unique_id": "macro.fivetran_utils.enabled_vars", "macro_sql": "{% macro enabled_vars(vars) %}\n\n{% for v in vars %}\n    \n    {% if var(v, True) == False %}\n    {{ return(False) }}\n    {% endif %}\n\n{% endfor %}\n\n{{ return(True) }}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722889774.54929, "supported_languages": null}, "macro.fivetran_utils.percentile": {"name": "percentile", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/percentile.sql", "original_file_path": "macros/percentile.sql", "unique_id": "macro.fivetran_utils.percentile", "macro_sql": "{% macro percentile(percentile_field, partition_field, percent) -%}\n\n{{ adapter.dispatch('percentile', 'fivetran_utils') (percentile_field, partition_field, percent) }}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.fivetran_utils.postgres__percentile"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722889774.550146, "supported_languages": null}, "macro.fivetran_utils.default__percentile": {"name": "default__percentile", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/percentile.sql", "original_file_path": "macros/percentile.sql", "unique_id": "macro.fivetran_utils.default__percentile", "macro_sql": "{% macro default__percentile(percentile_field, partition_field, percent)  %}\n\n    percentile_cont( \n        {{ percent }} )\n        within group ( order by {{ percentile_field }} )\n        over ( partition by {{ partition_field }} )\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722889774.5503712, "supported_languages": null}, "macro.fivetran_utils.redshift__percentile": {"name": "redshift__percentile", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/percentile.sql", "original_file_path": "macros/percentile.sql", "unique_id": "macro.fivetran_utils.redshift__percentile", "macro_sql": "{% macro redshift__percentile(percentile_field, partition_field, percent)  %}\n\n    percentile_cont( \n        {{ percent }} )\n        within group ( order by {{ percentile_field }} )\n        over ( partition by {{ partition_field }} )\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722889774.5505369, "supported_languages": null}, "macro.fivetran_utils.bigquery__percentile": {"name": "bigquery__percentile", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/percentile.sql", "original_file_path": "macros/percentile.sql", "unique_id": "macro.fivetran_utils.bigquery__percentile", "macro_sql": "{% macro bigquery__percentile(percentile_field, partition_field, percent)  %}\n\n    percentile_cont( \n        {{ percentile_field }}, \n        {{ percent }}) \n        over (partition by {{ partition_field }}    \n        )\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722889774.550682, "supported_languages": null}, "macro.fivetran_utils.postgres__percentile": {"name": "postgres__percentile", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/percentile.sql", "original_file_path": "macros/percentile.sql", "unique_id": "macro.fivetran_utils.postgres__percentile", "macro_sql": "{% macro postgres__percentile(percentile_field, partition_field, percent)  %}\n\n    percentile_cont( \n        {{ percent }} )\n        within group ( order by {{ percentile_field }} )\n    /* have to group by partition field */\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722889774.550804, "supported_languages": null}, "macro.fivetran_utils.spark__percentile": {"name": "spark__percentile", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/percentile.sql", "original_file_path": "macros/percentile.sql", "unique_id": "macro.fivetran_utils.spark__percentile", "macro_sql": "{% macro spark__percentile(percentile_field, partition_field, percent)  %}\n\n    percentile( \n        {{ percentile_field }}, \n        {{ percent }}) \n        over (partition by {{ partition_field }}    \n        )\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722889774.550949, "supported_languages": null}, "macro.fivetran_utils.pivot_json_extract": {"name": "pivot_json_extract", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/pivot_json_extract.sql", "original_file_path": "macros/pivot_json_extract.sql", "unique_id": "macro.fivetran_utils.pivot_json_extract", "macro_sql": "{% macro pivot_json_extract(string, list_of_properties) %}\n\n{%- for property in list_of_properties -%}\n{%- if property is mapping -%}\nreplace( {{ fivetran_utils.json_extract(string, property.name) }}, '\"', '') as {{ property.alias if property.alias else property.name | replace(' ', '_') | replace('.', '_') | lower }}\n\n{%- else -%}\nreplace( {{ fivetran_utils.json_extract(string, property) }}, '\"', '') as {{ property | replace(' ', '_') | lower }}\n\n{%- endif -%}\n{%- if not loop.last -%},{%- endif %}\n{% endfor -%}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.fivetran_utils.json_extract"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722889774.551724, "supported_languages": null}, "macro.fivetran_utils.persist_pass_through_columns": {"name": "persist_pass_through_columns", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/persist_pass_through_columns.sql", "original_file_path": "macros/persist_pass_through_columns.sql", "unique_id": "macro.fivetran_utils.persist_pass_through_columns", "macro_sql": "{% macro persist_pass_through_columns(pass_through_variable, identifier=none, transform='') %}\n\n{% if var(pass_through_variable, none) %}\n    {% for field in var(pass_through_variable) %}\n        , {{ transform ~ '(' ~ (identifier ~ '.' if identifier else '') ~ (field.alias if field.alias else field.name) ~ ')' }} as {{ field.alias if field.alias else field.name }}\n    {% endfor %}\n{% endif %}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722889774.552264, "supported_languages": null}, "macro.fivetran_utils.json_parse": {"name": "json_parse", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/json_parse.sql", "original_file_path": "macros/json_parse.sql", "unique_id": "macro.fivetran_utils.json_parse", "macro_sql": "{% macro json_parse(string, string_path) -%}\n\n{{ adapter.dispatch('json_parse', 'fivetran_utils') (string, string_path) }}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.fivetran_utils.postgres__json_parse"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722889774.553411, "supported_languages": null}, "macro.fivetran_utils.default__json_parse": {"name": "default__json_parse", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/json_parse.sql", "original_file_path": "macros/json_parse.sql", "unique_id": "macro.fivetran_utils.default__json_parse", "macro_sql": "{% macro default__json_parse(string, string_path) %}\n\n  json_extract_path_text({{string}}, {%- for s in string_path -%}'{{ s }}'{%- if not loop.last -%},{%- endif -%}{%- endfor -%} )\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722889774.553618, "supported_languages": null}, "macro.fivetran_utils.redshift__json_parse": {"name": "redshift__json_parse", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/json_parse.sql", "original_file_path": "macros/json_parse.sql", "unique_id": "macro.fivetran_utils.redshift__json_parse", "macro_sql": "{% macro redshift__json_parse(string, string_path) %}\n\n  json_extract_path_text({{string}}, {%- for s in string_path -%}'{{ s }}'{%- if not loop.last -%},{%- endif -%}{%- endfor -%} )\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722889774.553824, "supported_languages": null}, "macro.fivetran_utils.bigquery__json_parse": {"name": "bigquery__json_parse", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/json_parse.sql", "original_file_path": "macros/json_parse.sql", "unique_id": "macro.fivetran_utils.bigquery__json_parse", "macro_sql": "{% macro bigquery__json_parse(string, string_path) %}\n\n \n  json_extract_scalar({{string}}, '$.{%- for s in string_path -%}{{ s }}{%- if not loop.last -%}.{%- endif -%}{%- endfor -%} ')\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722889774.554028, "supported_languages": null}, "macro.fivetran_utils.postgres__json_parse": {"name": "postgres__json_parse", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/json_parse.sql", "original_file_path": "macros/json_parse.sql", "unique_id": "macro.fivetran_utils.postgres__json_parse", "macro_sql": "{% macro postgres__json_parse(string, string_path) %}\n\n  {{string}}::json #>> '{ {%- for s in string_path -%}{{ s }}{%- if not loop.last -%},{%- endif -%}{%- endfor -%} }'\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722889774.554225, "supported_languages": null}, "macro.fivetran_utils.snowflake__json_parse": {"name": "snowflake__json_parse", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/json_parse.sql", "original_file_path": "macros/json_parse.sql", "unique_id": "macro.fivetran_utils.snowflake__json_parse", "macro_sql": "{% macro snowflake__json_parse(string, string_path) %}\n\n  parse_json( {{string}} ) {%- for s in string_path -%}{% if s is number %}[{{ s }}]{% else %}['{{ s }}']{% endif %}{%- endfor -%}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722889774.5544472, "supported_languages": null}, "macro.fivetran_utils.spark__json_parse": {"name": "spark__json_parse", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/json_parse.sql", "original_file_path": "macros/json_parse.sql", "unique_id": "macro.fivetran_utils.spark__json_parse", "macro_sql": "{% macro spark__json_parse(string, string_path) %}\n\n  {{string}} : {%- for s in string_path -%}{% if s is number %}[{{ s }}]{% else %}['{{ s }}']{% endif %}{%- endfor -%}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722889774.554662, "supported_languages": null}, "macro.fivetran_utils.sqlserver__json_parse": {"name": "sqlserver__json_parse", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/json_parse.sql", "original_file_path": "macros/json_parse.sql", "unique_id": "macro.fivetran_utils.sqlserver__json_parse", "macro_sql": "{% macro sqlserver__json_parse(string, string_path) %}\n\n  json_value({{string}}, '$.{%- for s in string_path -%}{{ s }}{%- if not loop.last -%}.{%- endif -%}{%- endfor -%} ')\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722889774.5548558, "supported_languages": null}, "macro.fivetran_utils.max_bool": {"name": "max_bool", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/max_bool.sql", "original_file_path": "macros/max_bool.sql", "unique_id": "macro.fivetran_utils.max_bool", "macro_sql": "{% macro max_bool(boolean_field) -%}\n\n{{ adapter.dispatch('max_bool', 'fivetran_utils') (boolean_field) }}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.fivetran_utils.default__max_bool"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722889774.555132, "supported_languages": null}, "macro.fivetran_utils.default__max_bool": {"name": "default__max_bool", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/max_bool.sql", "original_file_path": "macros/max_bool.sql", "unique_id": "macro.fivetran_utils.default__max_bool", "macro_sql": "{% macro default__max_bool(boolean_field)  %}\n\n    bool_or( {{ boolean_field }} )\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722889774.55522, "supported_languages": null}, "macro.fivetran_utils.snowflake__max_bool": {"name": "snowflake__max_bool", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/max_bool.sql", "original_file_path": "macros/max_bool.sql", "unique_id": "macro.fivetran_utils.snowflake__max_bool", "macro_sql": "{% macro snowflake__max_bool(boolean_field)  %}\n\n    max( {{ boolean_field }} )\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722889774.555307, "supported_languages": null}, "macro.fivetran_utils.bigquery__max_bool": {"name": "bigquery__max_bool", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/max_bool.sql", "original_file_path": "macros/max_bool.sql", "unique_id": "macro.fivetran_utils.bigquery__max_bool", "macro_sql": "{% macro bigquery__max_bool(boolean_field)  %}\n\n    max( {{ boolean_field }} )\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722889774.555393, "supported_languages": null}, "macro.fivetran_utils.calculated_fields": {"name": "calculated_fields", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/calculated_fields.sql", "original_file_path": "macros/calculated_fields.sql", "unique_id": "macro.fivetran_utils.calculated_fields", "macro_sql": "{% macro calculated_fields(variable) -%}\n\n{% if var(variable, none) %}\n    {% for field in var(variable) %}\n        , {{ field.transform_sql }} as {{ field.name }} \n    {% endfor %}\n{% endif %}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722889774.555705, "supported_languages": null}, "macro.fivetran_utils.drop_schemas_automation": {"name": "drop_schemas_automation", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/drop_schemas_automation.sql", "original_file_path": "macros/drop_schemas_automation.sql", "unique_id": "macro.fivetran_utils.drop_schemas_automation", "macro_sql": "{% macro drop_schemas_automation(drop_target_schema=true) %}\n    {{ return(adapter.dispatch('drop_schemas_automation', 'fivetran_utils')(drop_target_schema)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.fivetran_utils.default__drop_schemas_automation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722889774.556292, "supported_languages": null}, "macro.fivetran_utils.default__drop_schemas_automation": {"name": "default__drop_schemas_automation", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/drop_schemas_automation.sql", "original_file_path": "macros/drop_schemas_automation.sql", "unique_id": "macro.fivetran_utils.default__drop_schemas_automation", "macro_sql": "{% macro default__drop_schemas_automation(drop_target_schema=true) %}\n\n{% set fetch_list_sql %}\n    {% if target.type not in ('databricks', 'spark') %}\n        select schema_name\n        from \n        {{ wrap_in_quotes(target.database) }}.INFORMATION_SCHEMA.SCHEMATA\n        where lower(schema_name) like '{{ target.schema | lower }}{%- if not drop_target_schema -%}_{%- endif -%}%'\n    {% else %}\n        SHOW SCHEMAS LIKE '{{ target.schema }}{%- if not drop_target_schema -%}_{%- endif -%}*'\n    {% endif %}\n{% endset %}\n\n{% set results = run_query(fetch_list_sql) %}\n\n{% if execute %}\n    {% set results_list = results.columns[0].values() %}\n{% else %}\n    {% set results_list = [] %}\n{% endif %}\n\n{% for schema_to_drop in results_list %}\n    {% do adapter.drop_schema(api.Relation.create(database=target.database, schema=schema_to_drop)) %}\n    {{ print('Schema ' ~ schema_to_drop ~ ' successfully dropped from the ' ~ target.database ~ ' database.\\n')}}\n{% endfor %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.fivetran_utils.wrap_in_quotes", "macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722889774.5574589, "supported_languages": null}, "macro.fivetran_utils.seed_data_helper": {"name": "seed_data_helper", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/seed_data_helper.sql", "original_file_path": "macros/seed_data_helper.sql", "unique_id": "macro.fivetran_utils.seed_data_helper", "macro_sql": "{% macro seed_data_helper(seed_name, warehouses) %}\n\n{% if target.type in warehouses %}\n    {% for w in warehouses %}\n        {% if target.type == w %}\n            {{ return(ref(seed_name ~ \"_\" ~ w ~ \"\")) }}\n        {% endif %}\n    {% endfor %}\n{% else %}\n{{ return(ref(seed_name)) }}\n{% endif %}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722889774.558018, "supported_languages": null}, "macro.fivetran_utils.fill_pass_through_columns": {"name": "fill_pass_through_columns", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/fill_pass_through_columns.sql", "original_file_path": "macros/fill_pass_through_columns.sql", "unique_id": "macro.fivetran_utils.fill_pass_through_columns", "macro_sql": "{% macro fill_pass_through_columns(pass_through_variable) %}\n\n{% if var(pass_through_variable) %}\n    {% for field in var(pass_through_variable) %}\n        {% if field is mapping %}\n            {% if field.transform_sql %}\n                , {{ field.transform_sql }} as {{ field.alias if field.alias else field.name }}\n            {% else %}\n                , {{ field.alias if field.alias else field.name }}\n            {% endif %}\n        {% else %}\n        , {{ field }}\n        {% endif %}\n    {% endfor %}\n{% endif %}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722889774.558702, "supported_languages": null}, "macro.fivetran_utils.string_agg": {"name": "string_agg", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/string_agg.sql", "original_file_path": "macros/string_agg.sql", "unique_id": "macro.fivetran_utils.string_agg", "macro_sql": "{% macro string_agg(field_to_agg, delimiter) -%}\n\n{{ adapter.dispatch('string_agg', 'fivetran_utils') (field_to_agg, delimiter) }}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.fivetran_utils.default__string_agg"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722889774.5591512, "supported_languages": null}, "macro.fivetran_utils.default__string_agg": {"name": "default__string_agg", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/string_agg.sql", "original_file_path": "macros/string_agg.sql", "unique_id": "macro.fivetran_utils.default__string_agg", "macro_sql": "{% macro default__string_agg(field_to_agg, delimiter) %}\n    string_agg({{ field_to_agg }}, {{ delimiter }})\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722889774.559278, "supported_languages": null}, "macro.fivetran_utils.snowflake__string_agg": {"name": "snowflake__string_agg", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/string_agg.sql", "original_file_path": "macros/string_agg.sql", "unique_id": "macro.fivetran_utils.snowflake__string_agg", "macro_sql": "{% macro snowflake__string_agg(field_to_agg, delimiter) %}\n    listagg({{ field_to_agg }}, {{ delimiter }})\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722889774.5593941, "supported_languages": null}, "macro.fivetran_utils.redshift__string_agg": {"name": "redshift__string_agg", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/string_agg.sql", "original_file_path": "macros/string_agg.sql", "unique_id": "macro.fivetran_utils.redshift__string_agg", "macro_sql": "{% macro redshift__string_agg(field_to_agg, delimiter) %}\n    listagg({{ field_to_agg }}, {{ delimiter }})\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722889774.559509, "supported_languages": null}, "macro.fivetran_utils.spark__string_agg": {"name": "spark__string_agg", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/string_agg.sql", "original_file_path": "macros/string_agg.sql", "unique_id": "macro.fivetran_utils.spark__string_agg", "macro_sql": "{% macro spark__string_agg(field_to_agg, delimiter) %}\n    -- collect set will remove duplicates\n    replace(replace(replace(cast( collect_set({{ field_to_agg }}) as string), '[', ''), ']', ''), ', ', {{ delimiter }} )\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722889774.559635, "supported_languages": null}, "macro.fivetran_utils.timestamp_diff": {"name": "timestamp_diff", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/timestamp_diff.sql", "original_file_path": "macros/timestamp_diff.sql", "unique_id": "macro.fivetran_utils.timestamp_diff", "macro_sql": "{% macro timestamp_diff(first_date, second_date, datepart) %}\n  {{ adapter.dispatch('timestamp_diff', 'fivetran_utils')(first_date, second_date, datepart) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.fivetran_utils.postgres__timestamp_diff"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722889774.5622342, "supported_languages": null}, "macro.fivetran_utils.default__timestamp_diff": {"name": "default__timestamp_diff", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/timestamp_diff.sql", "original_file_path": "macros/timestamp_diff.sql", "unique_id": "macro.fivetran_utils.default__timestamp_diff", "macro_sql": "{% macro default__timestamp_diff(first_date, second_date, datepart) %}\n\n    datediff(\n        {{ datepart }},\n        {{ first_date }},\n        {{ second_date }}\n        )\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722889774.562378, "supported_languages": null}, "macro.fivetran_utils.redshift__timestamp_diff": {"name": "redshift__timestamp_diff", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/timestamp_diff.sql", "original_file_path": "macros/timestamp_diff.sql", "unique_id": "macro.fivetran_utils.redshift__timestamp_diff", "macro_sql": "{% macro redshift__timestamp_diff(first_date, second_date, datepart) %}\n\n    datediff(\n        {{ datepart }},\n        {{ first_date }},\n        {{ second_date }}\n        )\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722889774.562515, "supported_languages": null}, "macro.fivetran_utils.bigquery__timestamp_diff": {"name": "bigquery__timestamp_diff", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/timestamp_diff.sql", "original_file_path": "macros/timestamp_diff.sql", "unique_id": "macro.fivetran_utils.bigquery__timestamp_diff", "macro_sql": "{% macro bigquery__timestamp_diff(first_date, second_date, datepart) %}\n\n    timestamp_diff(\n        {{second_date}},\n        {{first_date}},\n        {{datepart}}\n    )\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722889774.562645, "supported_languages": null}, "macro.fivetran_utils.postgres__timestamp_diff": {"name": "postgres__timestamp_diff", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/timestamp_diff.sql", "original_file_path": "macros/timestamp_diff.sql", "unique_id": "macro.fivetran_utils.postgres__timestamp_diff", "macro_sql": "{% macro postgres__timestamp_diff(first_date, second_date, datepart) %}\n\n    {% if datepart == 'year' %}\n        (date_part('year', ({{second_date}})::date) - date_part('year', ({{first_date}})::date))\n    {% elif datepart == 'quarter' %}\n        ({{ dbt.datediff(first_date, second_date, 'year') }} * 4 + date_part('quarter', ({{second_date}})::date) - date_part('quarter', ({{first_date}})::date))\n    {% elif datepart == 'month' %}\n        ({{ dbt.datediff(first_date, second_date, 'year') }} * 12 + date_part('month', ({{second_date}})::date) - date_part('month', ({{first_date}})::date))\n    {% elif datepart == 'day' %}\n        (({{second_date}})::date - ({{first_date}})::date)\n    {% elif datepart == 'week' %}\n        ({{ dbt.datediff(first_date, second_date, 'day') }} / 7 + case\n            when date_part('dow', ({{first_date}})::timestamp) <= date_part('dow', ({{second_date}})::timestamp) then\n                case when {{first_date}} <= {{second_date}} then 0 else -1 end\n            else\n                case when {{first_date}} <= {{second_date}} then 1 else 0 end\n        end)\n    {% elif datepart == 'hour' %}\n        ({{ dbt.datediff(first_date, second_date, 'day') }} * 24 + date_part('hour', ({{second_date}})::timestamp) - date_part('hour', ({{first_date}})::timestamp))\n    {% elif datepart == 'minute' %}\n        ({{ dbt.datediff(first_date, second_date, 'hour') }} * 60 + date_part('minute', ({{second_date}})::timestamp) - date_part('minute', ({{first_date}})::timestamp))\n    {% elif datepart == 'second' %}\n        ({{ dbt.datediff(first_date, second_date, 'minute') }} * 60 + floor(date_part('second', ({{second_date}})::timestamp)) - floor(date_part('second', ({{first_date}})::timestamp)))\n    {% elif datepart == 'millisecond' %}\n        ({{ dbt.datediff(first_date, second_date, 'minute') }} * 60000 + floor(date_part('millisecond', ({{second_date}})::timestamp)) - floor(date_part('millisecond', ({{first_date}})::timestamp)))\n    {% elif datepart == 'microsecond' %}\n        ({{ dbt.datediff(first_date, second_date, 'minute') }} * 60000000 + floor(date_part('microsecond', ({{second_date}})::timestamp)) - floor(date_part('microsecond', ({{first_date}})::timestamp)))\n    {% else %}\n        {{ exceptions.raise_compiler_error(\"Unsupported datepart for macro datediff in postgres: {!r}\".format(datepart)) }}\n    {% endif %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.datediff"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722889774.56415, "supported_languages": null}, "macro.fivetran_utils.try_cast": {"name": "try_cast", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/try_cast.sql", "original_file_path": "macros/try_cast.sql", "unique_id": "macro.fivetran_utils.try_cast", "macro_sql": "{% macro try_cast(field, type) %}\n    {{ adapter.dispatch('try_cast', 'fivetran_utils') (field, type) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.fivetran_utils.postgres__try_cast"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722889774.5649831, "supported_languages": null}, "macro.fivetran_utils.default__try_cast": {"name": "default__try_cast", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/try_cast.sql", "original_file_path": "macros/try_cast.sql", "unique_id": "macro.fivetran_utils.default__try_cast", "macro_sql": "{% macro default__try_cast(field, type) %}\n    {# most databases don't support this function yet\n    so we just need to use cast #}\n    cast({{field}} as {{type}})\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722889774.5651042, "supported_languages": null}, "macro.fivetran_utils.redshift__try_cast": {"name": "redshift__try_cast", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/try_cast.sql", "original_file_path": "macros/try_cast.sql", "unique_id": "macro.fivetran_utils.redshift__try_cast", "macro_sql": "{% macro redshift__try_cast(field, type) %}\n{%- if type == 'numeric' -%}\n\n    case\n        when trim({{field}}) ~ '^(0|[1-9][0-9]*)$' then trim({{field}})\n        else null\n    end::{{type}}\n\n{% else %}\n    {{ exceptions.raise_compiler_error(\n            \"non-numeric datatypes are not currently supported\") }}\n\n{% endif %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722889774.565342, "supported_languages": null}, "macro.fivetran_utils.postgres__try_cast": {"name": "postgres__try_cast", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/try_cast.sql", "original_file_path": "macros/try_cast.sql", "unique_id": "macro.fivetran_utils.postgres__try_cast", "macro_sql": "{% macro postgres__try_cast(field, type) %}\n{%- if type == 'numeric' -%}\n\n    case\n        when replace(cast({{field}} as varchar),cast(' ' as varchar),cast('' as varchar)) ~ '^(0|[1-9][0-9]*)$' \n        then replace(cast({{field}} as varchar),cast(' ' as varchar),cast('' as varchar))\n        else null\n    end::{{type}}\n\n{% else %}\n    {{ exceptions.raise_compiler_error(\n            \"non-numeric datatypes are not currently supported\") }}\n\n{% endif %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722889774.565579, "supported_languages": null}, "macro.fivetran_utils.snowflake__try_cast": {"name": "snowflake__try_cast", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/try_cast.sql", "original_file_path": "macros/try_cast.sql", "unique_id": "macro.fivetran_utils.snowflake__try_cast", "macro_sql": "{% macro snowflake__try_cast(field, type) %}\n    try_cast(cast({{field}} as varchar) as {{type}})\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722889774.56569, "supported_languages": null}, "macro.fivetran_utils.bigquery__try_cast": {"name": "bigquery__try_cast", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/try_cast.sql", "original_file_path": "macros/try_cast.sql", "unique_id": "macro.fivetran_utils.bigquery__try_cast", "macro_sql": "{% macro bigquery__try_cast(field, type) %}\n    safe_cast({{field}} as {{type}})\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722889774.5657978, "supported_languages": null}, "macro.fivetran_utils.spark__try_cast": {"name": "spark__try_cast", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/try_cast.sql", "original_file_path": "macros/try_cast.sql", "unique_id": "macro.fivetran_utils.spark__try_cast", "macro_sql": "{% macro spark__try_cast(field, type) %}\n    try_cast({{field}} as {{type}})\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722889774.56591, "supported_languages": null}, "macro.fivetran_utils.sqlserver__try_cast": {"name": "sqlserver__try_cast", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/try_cast.sql", "original_file_path": "macros/try_cast.sql", "unique_id": "macro.fivetran_utils.sqlserver__try_cast", "macro_sql": "{% macro sqlserver__try_cast(field, type) %}\n    try_cast({{field}} as {{type}})\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722889774.566018, "supported_languages": null}, "macro.fivetran_utils.source_relation": {"name": "source_relation", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/source_relation.sql", "original_file_path": "macros/source_relation.sql", "unique_id": "macro.fivetran_utils.source_relation", "macro_sql": "{% macro source_relation(union_schema_variable='union_schemas', union_database_variable='union_databases') -%}\n\n{{ adapter.dispatch('source_relation', 'fivetran_utils') (union_schema_variable, union_database_variable) }}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.fivetran_utils.default__source_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722889774.566444, "supported_languages": null}, "macro.fivetran_utils.default__source_relation": {"name": "default__source_relation", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/source_relation.sql", "original_file_path": "macros/source_relation.sql", "unique_id": "macro.fivetran_utils.default__source_relation", "macro_sql": "{% macro default__source_relation(union_schema_variable, union_database_variable) %}\n\n{% if var(union_schema_variable, none)  %}\n, case\n    {% for schema in var(union_schema_variable) %}\n    when lower(replace(replace(_dbt_source_relation,'\"',''),'`','')) like '%.{{ schema|lower }}.%' then '{{ schema|lower }}'\n    {% endfor %}\n  end as source_relation\n{% elif var(union_database_variable, none) %}\n, case\n    {% for database in var(union_database_variable) %}\n    when lower(replace(replace(_dbt_source_relation,'\"',''),'`','')) like '%{{ database|lower }}.%' then '{{ database|lower }}'\n    {% endfor %}\n  end as source_relation\n{% else %}\n, cast('' as {{ dbt.type_string() }}) as source_relation\n{% endif %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.type_string"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722889774.5669289, "supported_languages": null}, "macro.fivetran_utils.first_value": {"name": "first_value", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/first_value.sql", "original_file_path": "macros/first_value.sql", "unique_id": "macro.fivetran_utils.first_value", "macro_sql": "{% macro first_value(first_value_field, partition_field, order_by_field, order=\"asc\") -%}\n\n{{ adapter.dispatch('first_value', 'fivetran_utils') (first_value_field, partition_field, order_by_field, order) }}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.fivetran_utils.default__first_value"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722889774.567444, "supported_languages": null}, "macro.fivetran_utils.default__first_value": {"name": "default__first_value", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/first_value.sql", "original_file_path": "macros/first_value.sql", "unique_id": "macro.fivetran_utils.default__first_value", "macro_sql": "{% macro default__first_value(first_value_field, partition_field, order_by_field, order=\"asc\")  %}\n\n    first_value( {{ first_value_field }} ignore nulls ) over (partition by {{ partition_field }} order by {{ order_by_field }} {{ order }} )\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722889774.5676239, "supported_languages": null}, "macro.fivetran_utils.redshift__first_value": {"name": "redshift__first_value", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/first_value.sql", "original_file_path": "macros/first_value.sql", "unique_id": "macro.fivetran_utils.redshift__first_value", "macro_sql": "{% macro redshift__first_value(first_value_field, partition_field, order_by_field, order=\"asc\") %}\n\n    first_value( {{ first_value_field }} ignore nulls ) over (partition by {{ partition_field }} order by {{ order_by_field }} {{ order }} , {{ partition_field }} rows unbounded preceding )\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722889774.567818, "supported_languages": null}, "macro.fivetran_utils.add_dbt_source_relation": {"name": "add_dbt_source_relation", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/add_dbt_source_relation.sql", "original_file_path": "macros/add_dbt_source_relation.sql", "unique_id": "macro.fivetran_utils.add_dbt_source_relation", "macro_sql": "{% macro add_dbt_source_relation() %}\n\n{% if var('union_schemas', none) or var('union_databases', none) %}\n, _dbt_source_relation\n{% endif %}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722889774.5680509, "supported_languages": null}, "macro.fivetran_utils.add_pass_through_columns": {"name": "add_pass_through_columns", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/add_pass_through_columns.sql", "original_file_path": "macros/add_pass_through_columns.sql", "unique_id": "macro.fivetran_utils.add_pass_through_columns", "macro_sql": "{% macro add_pass_through_columns(base_columns, pass_through_var) %}\n\n  {% if pass_through_var %}\n\n    {% for column in pass_through_var %}\n\n    {% if column is mapping %}\n\n      {% if column.alias %}\n\n        {% do base_columns.append({ \"name\": column.name, \"alias\": column.alias, \"datatype\": column.datatype if column.datatype else dbt.type_string()}) %}\n\n      {% else %}\n\n        {% do base_columns.append({ \"name\": column.name, \"datatype\": column.datatype if column.datatype else dbt.type_string()}) %}\n        \n      {% endif %}\n\n    {% else %}\n\n      {% do base_columns.append({ \"name\": column, \"datatype\": dbt.type_string()}) %}\n\n    {% endif %}\n\n    {% endfor %}\n\n  {% endif %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.type_string"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722889774.5692449, "supported_languages": null}, "macro.fivetran_utils.union_relations": {"name": "union_relations", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/union_relations.sql", "original_file_path": "macros/union_relations.sql", "unique_id": "macro.fivetran_utils.union_relations", "macro_sql": "{%- macro union_relations(relations, aliases=none, column_override=none, include=[], exclude=[], source_column_name=none) -%}\n\n    {%- if exclude and include -%}\n        {{ exceptions.raise_compiler_error(\"Both an exclude and include list were provided to the `union` macro. Only one is allowed\") }}\n    {%- endif -%}\n\n    {#-- Prevent querying of db in parsing mode. This works because this macro does not create any new refs. -#}\n    {%- if not execute %}\n        {{ return('') }}\n    {% endif -%}\n\n    {%- set column_override = column_override if column_override is not none else {} -%}\n    {%- set source_column_name = source_column_name if source_column_name is not none else '_dbt_source_relation' -%}\n\n    {%- set relation_columns = {} -%}\n    {%- set column_superset = {} -%}\n\n    {%- for relation in relations -%}\n\n        {%- do relation_columns.update({relation: []}) -%}\n\n        {%- do dbt_utils._is_relation(relation, 'union_relations') -%}\n        {%- set cols = adapter.get_columns_in_relation(relation) -%}\n        {%- for col in cols -%}\n\n        {#- If an exclude list was provided and the column is in the list, do nothing -#}\n        {%- if exclude and col.column in exclude -%}\n\n        {#- If an include list was provided and the column is not in the list, do nothing -#}\n        {%- elif include and col.column not in include -%}\n\n        {#- Otherwise add the column to the column superset -#}\n        {%- else -%}\n\n            {#- update the list of columns in this relation -#}\n            {%- do relation_columns[relation].append(col.column) -%}\n\n            {%- if col.column in column_superset -%}\n\n                {%- set stored = column_superset[col.column] -%}\n                {%- if col.is_string() and stored.is_string() and col.string_size() > stored.string_size() -%}\n\n                    {%- do column_superset.update({col.column: col}) -%}\n\n                {%- endif %}\n\n            {%- else -%}\n\n                {%- do column_superset.update({col.column: col}) -%}\n\n            {%- endif -%}\n\n        {%- endif -%}\n\n        {%- endfor -%}\n    {%- endfor -%}\n\n    {%- set ordered_column_names = column_superset.keys() -%}\n\n    {%- for relation in relations %}\n\n        (\n            select\n\n                cast({{ dbt.string_literal(relation) }} as {{ dbt.type_string() }}) as {{ source_column_name }},\n                {% for col_name in ordered_column_names -%}\n\n                    {%- set col = column_superset[col_name] %}\n                    {%- set col_type = column_override.get(col.column, col.data_type) %}\n                    {%- set col_name = adapter.quote(col_name) if col_name in relation_columns[relation] else 'null' %}\n                    cast({{ col_name }} as {{ col_type }}) as {{ col.quoted }} {% if not loop.last %},{% endif -%}\n\n                {%- endfor %}\n\n            from {{ aliases[loop.index0] if aliases else relation }}\n        )\n\n        {% if not loop.last -%}\n            union all\n        {% endif -%}\n\n    {%- endfor -%}\n\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt_utils._is_relation", "macro.dbt.string_literal", "macro.dbt.type_string"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722889774.572733, "supported_languages": null}, "macro.fivetran_utils.union_tables": {"name": "union_tables", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/union_relations.sql", "original_file_path": "macros/union_relations.sql", "unique_id": "macro.fivetran_utils.union_tables", "macro_sql": "{%- macro union_tables(tables, column_override=none, include=[], exclude=[], source_column_name='_dbt_source_table') -%}\n\n    {%- do exceptions.warn(\"Warning: the `union_tables` macro is no longer supported and will be deprecated in a future release of dbt-utils. Use the `union_relations` macro instead\") -%}\n\n    {{ return(dbt_utils.union_relations(tables, column_override, include, exclude, source_column_name)) }}\n\n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbt_utils.union_relations"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722889774.573048, "supported_languages": null}, "macro.fivetran_utils.snowflake_seed_data": {"name": "snowflake_seed_data", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/snowflake_seed_data.sql", "original_file_path": "macros/snowflake_seed_data.sql", "unique_id": "macro.fivetran_utils.snowflake_seed_data", "macro_sql": "{% macro snowflake_seed_data(seed_name) %}\n\n{% if target.type == 'snowflake' %}\n{{ return(ref(seed_name ~ '_snowflake')) }}\n{% else %}\n{{ return(ref(seed_name)) }}\n{% endif %}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722889774.573372, "supported_languages": null}, "macro.fivetran_utils.fill_staging_columns": {"name": "fill_staging_columns", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/fill_staging_columns.sql", "original_file_path": "macros/fill_staging_columns.sql", "unique_id": "macro.fivetran_utils.fill_staging_columns", "macro_sql": "{% macro fill_staging_columns(source_columns, staging_columns) -%}\n\n{%- set source_column_names = source_columns|map(attribute='name')|map('lower')|list -%}\n\n{%- for column in staging_columns %}\n    {% if column.name|lower in source_column_names -%}\n        {{ fivetran_utils.quote_column(column) }} as \n        {%- if 'alias' in column %} {{ column.alias }} {% else %} {{ fivetran_utils.quote_column(column) }} {%- endif -%}\n    {%- else -%}\n        cast(null as {{ column.datatype }})\n        {%- if 'alias' in column %} as {{ column.alias }} {% else %} as {{ fivetran_utils.quote_column(column) }} {% endif -%}\n    {%- endif -%}\n    {%- if not loop.last -%} , {% endif -%}\n{% endfor %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.fivetran_utils.quote_column"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722889774.574666, "supported_languages": null}, "macro.fivetran_utils.quote_column": {"name": "quote_column", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/fill_staging_columns.sql", "original_file_path": "macros/fill_staging_columns.sql", "unique_id": "macro.fivetran_utils.quote_column", "macro_sql": "{% macro quote_column(column) %}\n    {% if 'quote' in column %}\n        {% if column.quote %}\n            {% if target.type in ('bigquery', 'spark', 'databricks') %}\n            `{{ column.name }}`\n            {% elif target.type == 'snowflake' %}\n            \"{{ column.name | upper }}\"\n            {% else %}\n            \"{{ column.name }}\"\n            {% endif %}\n        {% else %}\n        {{ column.name }}\n        {% endif %}\n    {% else %}\n    {{ column.name }}\n    {% endif %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722889774.5751429, "supported_languages": null}, "macro.fivetran_utils.json_extract": {"name": "json_extract", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/json_extract.sql", "original_file_path": "macros/json_extract.sql", "unique_id": "macro.fivetran_utils.json_extract", "macro_sql": "{% macro json_extract(string, string_path) -%}\n\n{{ adapter.dispatch('json_extract', 'fivetran_utils') (string, string_path) }}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.fivetran_utils.postgres__json_extract"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722889774.5756512, "supported_languages": null}, "macro.fivetran_utils.default__json_extract": {"name": "default__json_extract", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/json_extract.sql", "original_file_path": "macros/json_extract.sql", "unique_id": "macro.fivetran_utils.default__json_extract", "macro_sql": "{% macro default__json_extract(string, string_path) %}\n\n  json_extract_path_text({{string}}, {{ \"'\" ~ string_path ~ \"'\" }} )\n \n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722889774.575792, "supported_languages": null}, "macro.fivetran_utils.snowflake__json_extract": {"name": "snowflake__json_extract", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/json_extract.sql", "original_file_path": "macros/json_extract.sql", "unique_id": "macro.fivetran_utils.snowflake__json_extract", "macro_sql": "{% macro snowflake__json_extract(string, string_path) %}\n\n  json_extract_path_text(try_parse_json( {{string}} ), {{ \"'\" ~ string_path ~ \"'\" }} )\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722889774.5759249, "supported_languages": null}, "macro.fivetran_utils.redshift__json_extract": {"name": "redshift__json_extract", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/json_extract.sql", "original_file_path": "macros/json_extract.sql", "unique_id": "macro.fivetran_utils.redshift__json_extract", "macro_sql": "{% macro redshift__json_extract(string, string_path) %}\n\n  case when is_valid_json( {{string}} ) then json_extract_path_text({{string}}, {{ \"'\" ~ string_path ~ \"'\" }} ) else null end\n \n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722889774.576074, "supported_languages": null}, "macro.fivetran_utils.bigquery__json_extract": {"name": "bigquery__json_extract", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/json_extract.sql", "original_file_path": "macros/json_extract.sql", "unique_id": "macro.fivetran_utils.bigquery__json_extract", "macro_sql": "{% macro bigquery__json_extract(string, string_path) %}\n\n  json_extract_scalar({{string}}, {{ \"'$.\" ~ string_path ~ \"'\" }} )\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722889774.576205, "supported_languages": null}, "macro.fivetran_utils.postgres__json_extract": {"name": "postgres__json_extract", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/json_extract.sql", "original_file_path": "macros/json_extract.sql", "unique_id": "macro.fivetran_utils.postgres__json_extract", "macro_sql": "{% macro postgres__json_extract(string, string_path) %}\n\n  {{string}}::json->>{{\"'\" ~ string_path ~ \"'\" }}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722889774.576333, "supported_languages": null}, "macro.fivetran_utils.collect_freshness": {"name": "collect_freshness", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/collect_freshness.sql", "original_file_path": "macros/collect_freshness.sql", "unique_id": "macro.fivetran_utils.collect_freshness", "macro_sql": "{% macro collect_freshness(source, loaded_at_field, filter) %}\n  {{ return(adapter.dispatch('collect_freshness')(source, loaded_at_field, filter))}}\n{% endmacro %}", "depends_on": {"macros": ["macro.fivetran_utils.default__collect_freshness"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722889774.5770528, "supported_languages": null}, "macro.fivetran_utils.default__collect_freshness": {"name": "default__collect_freshness", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/collect_freshness.sql", "original_file_path": "macros/collect_freshness.sql", "unique_id": "macro.fivetran_utils.default__collect_freshness", "macro_sql": "{% macro default__collect_freshness(source, loaded_at_field, filter) %}\n  {% call statement('collect_freshness', fetch_result=True, auto_begin=False) -%}\n\n  {%- set enabled_array = [] -%}\n  {% for node in graph.sources.values() %}\n    {% if node.identifier == source.identifier %}\n      {% if (node.meta['is_enabled'] | default(true)) %}\n        {%- do enabled_array.append(1) -%}\n      {% endif %}\n    {% endif %}\n  {% endfor %}\n  {% set is_enabled = (enabled_array != []) %}\n\n    select\n      {% if is_enabled %}\n      max({{ loaded_at_field }})\n      {% else %} \n      {{ current_timestamp() }} {% endif %} as max_loaded_at,\n      {{ current_timestamp() }} as snapshotted_at\n\n    {% if is_enabled %}\n    from {{ source }}\n      {% if filter %}\n      where {{ filter }}\n      {% endif %}\n    {% endif %}\n\n  {% endcall %}\n\n  {% if dbt_version.split('.') | map('int') | list >= [1, 5, 0]  %}\n    {{ return(load_result('collect_freshness')) }}\n  {% else %}\n    {{ return(load_result('collect_freshness').table) }}\n  {% endif %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement", "macro.dbt.current_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722889774.605057, "supported_languages": null}, "macro.fivetran_utils.timestamp_add": {"name": "timestamp_add", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/timestamp_add.sql", "original_file_path": "macros/timestamp_add.sql", "unique_id": "macro.fivetran_utils.timestamp_add", "macro_sql": "{% macro timestamp_add(datepart, interval, from_timestamp) -%}\n\n{{ adapter.dispatch('timestamp_add', 'fivetran_utils') (datepart, interval, from_timestamp) }}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.fivetran_utils.postgres__timestamp_add"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722889774.605759, "supported_languages": null}, "macro.fivetran_utils.default__timestamp_add": {"name": "default__timestamp_add", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/timestamp_add.sql", "original_file_path": "macros/timestamp_add.sql", "unique_id": "macro.fivetran_utils.default__timestamp_add", "macro_sql": "{% macro default__timestamp_add(datepart, interval, from_timestamp) %}\n\n    timestampadd(\n        {{ datepart }},\n        {{ interval }},\n        {{ from_timestamp }}\n        )\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722889774.6059232, "supported_languages": null}, "macro.fivetran_utils.bigquery__timestamp_add": {"name": "bigquery__timestamp_add", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/timestamp_add.sql", "original_file_path": "macros/timestamp_add.sql", "unique_id": "macro.fivetran_utils.bigquery__timestamp_add", "macro_sql": "{% macro bigquery__timestamp_add(datepart, interval, from_timestamp) %}\n\n        timestamp_add({{ from_timestamp }}, interval  {{ interval }} {{ datepart }})\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722889774.60607, "supported_languages": null}, "macro.fivetran_utils.redshift__timestamp_add": {"name": "redshift__timestamp_add", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/timestamp_add.sql", "original_file_path": "macros/timestamp_add.sql", "unique_id": "macro.fivetran_utils.redshift__timestamp_add", "macro_sql": "{% macro redshift__timestamp_add(datepart, interval, from_timestamp) %}\n\n        dateadd(\n        {{ datepart }},\n        {{ interval }},\n        {{ from_timestamp }}\n        )\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722889774.606216, "supported_languages": null}, "macro.fivetran_utils.postgres__timestamp_add": {"name": "postgres__timestamp_add", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/timestamp_add.sql", "original_file_path": "macros/timestamp_add.sql", "unique_id": "macro.fivetran_utils.postgres__timestamp_add", "macro_sql": "{% macro postgres__timestamp_add(datepart, interval, from_timestamp) %}\n\n    {{ from_timestamp }} + ((interval '1 {{ datepart }}') * ({{ interval }}))\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722889774.606362, "supported_languages": null}, "macro.fivetran_utils.spark__timestamp_add": {"name": "spark__timestamp_add", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/timestamp_add.sql", "original_file_path": "macros/timestamp_add.sql", "unique_id": "macro.fivetran_utils.spark__timestamp_add", "macro_sql": "{% macro spark__timestamp_add(datepart, interval, from_timestamp) %}\n\n    {{ dbt.dateadd(datepart, interval, from_timestamp) }}\n        \n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.dateadd"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722889774.606519, "supported_languages": null}, "macro.fivetran_utils.ceiling": {"name": "ceiling", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/ceiling.sql", "original_file_path": "macros/ceiling.sql", "unique_id": "macro.fivetran_utils.ceiling", "macro_sql": "{% macro ceiling(num) -%}\n\n{{ adapter.dispatch('ceiling', 'fivetran_utils') (num) }}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.fivetran_utils.default__ceiling"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722889774.606752, "supported_languages": null}, "macro.fivetran_utils.default__ceiling": {"name": "default__ceiling", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/ceiling.sql", "original_file_path": "macros/ceiling.sql", "unique_id": "macro.fivetran_utils.default__ceiling", "macro_sql": "{% macro default__ceiling(num) %}\n    ceiling({{ num }})\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722889774.606844, "supported_languages": null}, "macro.fivetran_utils.snowflake__ceiling": {"name": "snowflake__ceiling", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/ceiling.sql", "original_file_path": "macros/ceiling.sql", "unique_id": "macro.fivetran_utils.snowflake__ceiling", "macro_sql": "{% macro snowflake__ceiling(num) %}\n    ceil({{ num }})\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722889774.6069381, "supported_languages": null}, "macro.fivetran_utils.remove_prefix_from_columns": {"name": "remove_prefix_from_columns", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/remove_prefix_from_columns.sql", "original_file_path": "macros/remove_prefix_from_columns.sql", "unique_id": "macro.fivetran_utils.remove_prefix_from_columns", "macro_sql": "{% macro remove_prefix_from_columns(columns, prefix='', exclude=[]) %}\n\n        {%- for col in columns if col.name not in exclude -%}\n        {%- if col.name[:prefix|length]|lower == prefix -%}\n        {{ col.name }} as {{ col.name[prefix|length:] }}\n        {%- else -%}\n        {{ col.name }}\n        {%- endif -%}\n        {%- if not loop.last -%},{%- endif %}\n        {% endfor -%}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722889774.6074948, "supported_languages": null}, "macro.fivetran_utils.fivetran_date_spine": {"name": "fivetran_date_spine", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/fivetran_date_spine.sql", "original_file_path": "macros/fivetran_date_spine.sql", "unique_id": "macro.fivetran_utils.fivetran_date_spine", "macro_sql": "{% macro fivetran_date_spine(datepart, start_date, end_date) -%}\n\n{{ return(adapter.dispatch('fivetran_date_spine', 'fivetran_utils') (datepart, start_date, end_date)) }}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.fivetran_utils.default__fivetran_date_spine"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722889774.608646, "supported_languages": null}, "macro.fivetran_utils.default__fivetran_date_spine": {"name": "default__fivetran_date_spine", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/fivetran_date_spine.sql", "original_file_path": "macros/fivetran_date_spine.sql", "unique_id": "macro.fivetran_utils.default__fivetran_date_spine", "macro_sql": "{% macro default__fivetran_date_spine(datepart, start_date, end_date) %}\n\n    {{ dbt_utils.date_spine(datepart, start_date, end_date) }}\n        \n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.date_spine"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722889774.608806, "supported_languages": null}, "macro.fivetran_utils.sqlserver__fivetran_date_spine": {"name": "sqlserver__fivetran_date_spine", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/fivetran_date_spine.sql", "original_file_path": "macros/fivetran_date_spine.sql", "unique_id": "macro.fivetran_utils.sqlserver__fivetran_date_spine", "macro_sql": "{% macro sqlserver__fivetran_date_spine(datepart, start_date, end_date) -%}\n\n    {% set date_spine_query %}\n        with\n\n        l0 as (\n\n            select c\n            from (select 1 union all select 1) as d(c)\n\n        ),\n        l1 as (\n\n            select\n                1 as c\n            from l0 as a\n            cross join l0 as b\n\n        ),\n\n        l2 as (\n\n            select 1 as c\n            from l1 as a\n            cross join l1 as b\n        ),\n\n        l3 as (\n\n            select 1 as c\n            from l2 as a\n            cross join l2 as b\n        ),\n\n        l4 as (\n\n            select 1 as c\n            from l3 as a\n            cross join l3 as b\n        ),\n\n        l5 as (\n\n            select 1 as c\n            from l4 as a\n            cross join l4 as b\n        ),\n\n        nums as (\n\n            select row_number() over (order by (select null)) as rownum\n            from l5\n        ),\n\n        rawdata as (\n\n            select top ({{dbt.datediff(start_date, end_date, datepart)}}) rownum -1 as n\n            from nums\n            order by rownum\n        ),\n\n        all_periods as (\n\n            select (\n                {{\n                    dbt.dateadd(\n                        datepart,\n                        'n',\n                        start_date\n                    )\n                }}\n            ) as date_{{datepart}}\n            from rawdata\n        ),\n\n        filtered as (\n\n            select *\n            from all_periods\n            where date_{{datepart}} <= {{ end_date }}\n\n        )\n\n        select * from filtered\n        order by 1\n\n    {% endset %}\n\n    {% set results = run_query(date_spine_query) %}\n\n    {% if execute %}\n\n        {% set results_list = results.columns[0].values() %}\n    \n    {% else %}\n\n        {% set results_list = [] %}\n\n    {% endif %}\n\n    {%- for date_field in results_list %}\n        select cast('{{ date_field }}' as date) as date_{{datepart}} {{ 'union all ' if not loop.last else '' }}\n    {% endfor -%}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.datediff", "macro.dbt.dateadd", "macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722889774.609569, "supported_languages": null}, "macro.fivetran_utils.union_data": {"name": "union_data", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/union_data.sql", "original_file_path": "macros/union_data.sql", "unique_id": "macro.fivetran_utils.union_data", "macro_sql": "{%- macro union_data(table_identifier, database_variable, schema_variable, default_database, default_schema, default_variable, union_schema_variable='union_schemas', union_database_variable='union_databases') -%}\n\n{{ adapter.dispatch('union_data', 'fivetran_utils') (\n    table_identifier, \n    database_variable, \n    schema_variable, \n    default_database, \n    default_schema, \n    default_variable,\n    union_schema_variable,\n    union_database_variable\n    ) }}\n\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.fivetran_utils.default__union_data"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722889774.6129012, "supported_languages": null}, "macro.fivetran_utils.default__union_data": {"name": "default__union_data", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/union_data.sql", "original_file_path": "macros/union_data.sql", "unique_id": "macro.fivetran_utils.default__union_data", "macro_sql": "{%- macro default__union_data(\n    table_identifier, \n    database_variable, \n    schema_variable, \n    default_database, \n    default_schema, \n    default_variable,\n    union_schema_variable,\n    union_database_variable\n    ) -%}\n\n{%- if var(union_schema_variable, none) -%}\n\n    {%- set relations = [] -%}\n    \n    {%- if var(union_schema_variable) is string -%}\n    {%- set trimmed = var(union_schema_variable)|trim('[')|trim(']') -%}\n    {%- set schemas = trimmed.split(',')|map('trim',\" \")|map('trim','\"')|map('trim',\"'\") -%}\n    {%- else -%}\n    {%- set schemas = var(union_schema_variable) -%}\n    {%- endif -%}\n\n    {%- for schema in var(union_schema_variable) -%}\n    {%- set relation=adapter.get_relation(\n        database=source(schema, table_identifier).database if var('has_defined_sources', false) else var(database_variable, default_database),\n        schema=source(schema, table_identifier).schema if var('has_defined_sources', false) else schema,\n        identifier=source(schema, table_identifier).identifier if var('has_defined_sources', false) else table_identifier\n    ) -%}\n    \n    {%- set relation_exists=relation is not none -%}\n\n    {%- if relation_exists -%}\n        {%- do relations.append(relation) -%}\n    {%- endif -%}\n\n    {%- endfor -%}\n    \n    {%- if relations != [] -%}\n        {{ dbt_utils.union_relations(relations) }}\n    {%- else -%}\n    {% if execute and not var('fivetran__remove_empty_table_warnings', false) -%}\n    {{ exceptions.warn(\"\\n\\nPlease be aware: The \" ~ table_identifier|upper ~ \" table was not found in your \" ~ default_schema|upper ~ \" schema(s). The Fivetran dbt package will create a completely empty \" ~ table_identifier|upper ~ \" staging model as to not break downstream transformations. To turn off these warnings, set the `fivetran__remove_empty_table_warnings` variable to TRUE (see https://github.com/fivetran/dbt_fivetran_utils/tree/releases/v0.4.latest#union_data-source for details).\\n\") }}\n    {% endif -%}\n    select \n        cast(null as {{ dbt.type_string() }}) as _dbt_source_relation\n    limit 0\n    {%- endif -%}\n\n{%- elif var(union_database_variable, none) -%}\n\n    {%- set relations = [] -%}\n\n    {%- for database in var(union_database_variable) -%}\n    {%- set relation=adapter.get_relation(\n        database=source(schema, table_identifier).database if var('has_defined_sources', false) else database,\n        schema=source(schema, table_identifier).schema if var('has_defined_sources', false) else var(schema_variable, default_schema),\n        identifier=source(schema, table_identifier).identifier if var('has_defined_sources', false) else table_identifier\n    ) -%}\n\n    {%- set relation_exists=relation is not none -%}\n\n    {%- if relation_exists -%}\n        {%- do relations.append(relation) -%}\n    {%- endif -%}\n\n    {%- endfor -%}\n\n    {%- if relations != [] -%}\n        {{ dbt_utils.union_relations(relations) }}\n    {%- else -%}\n    {% if execute and not var('fivetran__remove_empty_table_warnings', false) -%}\n    {{ exceptions.warn(\"\\n\\nPlease be aware: The \" ~ table_identifier|upper ~ \" table was not found in your \" ~ default_schema|upper ~ \" schema(s). The Fivetran dbt package will create a completely empty \" ~ table_identifier|upper ~ \" staging model as to not break downstream transformations. To turn off these warnings, set the `fivetran__remove_empty_table_warnings` variable to TRUE (see https://github.com/fivetran/dbt_fivetran_utils/tree/releases/v0.4.latest#union_data-source for details).\\n\") }}\n    {% endif -%}\n    select \n        cast(null as {{ dbt.type_string() }}) as _dbt_source_relation\n    limit 0\n    {%- endif -%}\n\n{%- else -%}\n    {% set exception_schemas = {\"linkedin_company_pages\": \"linkedin_pages\", \"instagram_business_pages\": \"instagram_business\"} %}\n    {% set relation = namespace(value=\"\") %}\n    {% if default_schema in exception_schemas.keys() %}\n        {% for corrected_schema_name in exception_schemas.items() %}   \n            {% if default_schema in corrected_schema_name %}\n                {# In order for this macro to effectively work within upstream integration tests (mainly used by the Fivetran dbt package maintainers), this identifier variable selection is required to use the macro with different identifier names. #}\n                {% set identifier_var = corrected_schema_name[1] + \"_\" + table_identifier + \"_identifier\"  %}\n                {%- set relation.value=adapter.get_relation(\n                    database=source(corrected_schema_name[1], table_identifier).database,\n                    schema=source(corrected_schema_name[1], table_identifier).schema,\n                    identifier=var(identifier_var, table_identifier)\n                ) -%}\n            {% endif %}\n        {% endfor %}\n    {% else %}\n        {# In order for this macro to effectively work within upstream integration tests (mainly used by the Fivetran dbt package maintainers), this identifier variable selection is required to use the macro with different identifier names. #}\n        {% set identifier_var = default_schema + \"_\" + table_identifier + \"_identifier\"  %}\n        {# Unfortunately the Twitter Organic identifiers were misspelled. As such, we will need to account for this in the model. This will be adjusted in the Twitter Organic package, but to ensure backwards compatibility, this needs to be included. #}\n        {% if var(identifier_var, none) is none %} \n            {% set identifier_var = default_schema + \"_\" + table_identifier + \"_identifer\"  %}\n        {% endif %}\n        {%- set relation.value=adapter.get_relation(\n            database=source(default_schema, table_identifier).database,\n            schema=source(default_schema, table_identifier).schema,\n            identifier=var(identifier_var, table_identifier)\n        ) -%}\n    {% endif %}\n{%- set table_exists=relation.value is not none -%}\n\n{%- if table_exists -%}\n    select * \n    from {{ relation.value }}\n{%- else -%}\n    {% if execute and not var('fivetran__remove_empty_table_warnings', false) -%}\n    {{ exceptions.warn(\"\\n\\nPlease be aware: The \" ~ table_identifier|upper ~ \" table was not found in your \" ~ default_schema|upper ~ \" schema(s). The Fivetran dbt package will create a completely empty \" ~ table_identifier|upper ~ \" staging model as to not break downstream transformations. To turn off these warnings, set the `fivetran__remove_empty_table_warnings` variable to TRUE (see https://github.com/fivetran/dbt_fivetran_utils/tree/releases/v0.4.latest#union_data-source for details).\\n\") }}\n    {% endif -%}\n    select \n        cast(null as {{ dbt.type_string() }}) as _dbt_source_relation\n    limit 0\n{%- endif -%}\n{%- endif -%}\n\n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbt_utils.union_relations", "macro.dbt.type_string"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722889774.6171541, "supported_languages": null}, "macro.fivetran_utils.dummy_coalesce_value": {"name": "dummy_coalesce_value", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/dummy_coalesce_value.sql", "original_file_path": "macros/dummy_coalesce_value.sql", "unique_id": "macro.fivetran_utils.dummy_coalesce_value", "macro_sql": "{% macro dummy_coalesce_value(column) %}\n\n{% set coalesce_value = {\n 'STRING': \"'DUMMY_STRING'\",\n 'BOOLEAN': 'null',\n 'INT': 999999999,\n 'FLOAT': 999999999.99,\n 'TIMESTAMP': 'cast(\"2099-12-31\" as timestamp)',\n 'DATE': 'cast(\"2099-12-31\" as date)',\n} %}\n\n{% if column.is_float() %}\n{{ return(coalesce_value['FLOAT']) }}\n\n{% elif column.is_numeric() %}\n{{ return(coalesce_value['INT']) }}\n\n{% elif column.is_string() %}\n{{ return(coalesce_value['STRING']) }}\n\n{% elif column.data_type|lower == 'boolean' %}\n{{ return(coalesce_value['BOOLEAN']) }}\n\n{% elif 'timestamp' in column.data_type|lower %}\n{{ return(coalesce_value['TIMESTAMP']) }}\n\n{% elif 'date' in column.data_type|lower %}\n{{ return(coalesce_value['DATE']) }}\n\n{% elif 'int' in column.data_type|lower %}\n{{ return(coalesce_value['INT']) }}\n\n{% endif %}\n\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722889774.6184242, "supported_languages": null}, "macro.fivetran_utils.extract_url_parameter": {"name": "extract_url_parameter", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/extract_url_parameter.sql", "original_file_path": "macros/extract_url_parameter.sql", "unique_id": "macro.fivetran_utils.extract_url_parameter", "macro_sql": "{% macro extract_url_parameter(field, url_parameter) -%}\n\n{{ adapter.dispatch('extract_url_parameter', 'fivetran_utils') (field, url_parameter) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.fivetran_utils.default__extract_url_parameter"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722889774.618735, "supported_languages": null}, "macro.fivetran_utils.default__extract_url_parameter": {"name": "default__extract_url_parameter", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/extract_url_parameter.sql", "original_file_path": "macros/extract_url_parameter.sql", "unique_id": "macro.fivetran_utils.default__extract_url_parameter", "macro_sql": "{% macro default__extract_url_parameter(field, url_parameter) -%}\n\n{{ dbt_utils.get_url_parameter(field, url_parameter) }}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.get_url_parameter"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722889774.6188722, "supported_languages": null}, "macro.fivetran_utils.spark__extract_url_parameter": {"name": "spark__extract_url_parameter", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/extract_url_parameter.sql", "original_file_path": "macros/extract_url_parameter.sql", "unique_id": "macro.fivetran_utils.spark__extract_url_parameter", "macro_sql": "{% macro spark__extract_url_parameter(field, url_parameter) -%}\n\n{%- set formatted_url_parameter = \"'\" + url_parameter + \"=([^&]+)'\" -%}\nnullif(regexp_extract({{ field }}, {{ formatted_url_parameter }}, 1), '')\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722889774.619045, "supported_languages": null}, "macro.fivetran_utils.wrap_in_quotes": {"name": "wrap_in_quotes", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/wrap_in_quotes.sql", "original_file_path": "macros/wrap_in_quotes.sql", "unique_id": "macro.fivetran_utils.wrap_in_quotes", "macro_sql": "{%- macro wrap_in_quotes(object_to_quote) -%}\n\n{{ return(adapter.dispatch('wrap_in_quotes', 'fivetran_utils')(object_to_quote)) }}\n\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.fivetran_utils.postgres__wrap_in_quotes"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722889774.6193411, "supported_languages": null}, "macro.fivetran_utils.default__wrap_in_quotes": {"name": "default__wrap_in_quotes", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/wrap_in_quotes.sql", "original_file_path": "macros/wrap_in_quotes.sql", "unique_id": "macro.fivetran_utils.default__wrap_in_quotes", "macro_sql": "{%- macro default__wrap_in_quotes(object_to_quote)  -%}\n{# bigquery, spark, databricks #}\n    `{{ object_to_quote }}`\n{%- endmacro -%}\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722889774.6194391, "supported_languages": null}, "macro.fivetran_utils.snowflake__wrap_in_quotes": {"name": "snowflake__wrap_in_quotes", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/wrap_in_quotes.sql", "original_file_path": "macros/wrap_in_quotes.sql", "unique_id": "macro.fivetran_utils.snowflake__wrap_in_quotes", "macro_sql": "{%- macro snowflake__wrap_in_quotes(object_to_quote)  -%}\n    \"{{ object_to_quote | upper }}\"\n{%- endmacro -%}\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722889774.6195369, "supported_languages": null}, "macro.fivetran_utils.redshift__wrap_in_quotes": {"name": "redshift__wrap_in_quotes", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/wrap_in_quotes.sql", "original_file_path": "macros/wrap_in_quotes.sql", "unique_id": "macro.fivetran_utils.redshift__wrap_in_quotes", "macro_sql": "{%- macro redshift__wrap_in_quotes(object_to_quote)  -%}\n    \"{{ object_to_quote }}\"\n{%- endmacro -%}\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722889774.619626, "supported_languages": null}, "macro.fivetran_utils.postgres__wrap_in_quotes": {"name": "postgres__wrap_in_quotes", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/wrap_in_quotes.sql", "original_file_path": "macros/wrap_in_quotes.sql", "unique_id": "macro.fivetran_utils.postgres__wrap_in_quotes", "macro_sql": "{%- macro postgres__wrap_in_quotes(object_to_quote)  -%}\n    \"{{ object_to_quote }}\"\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722889774.619714, "supported_languages": null}, "macro.fivetran_utils.array_agg": {"name": "array_agg", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/array_agg.sql", "original_file_path": "macros/array_agg.sql", "unique_id": "macro.fivetran_utils.array_agg", "macro_sql": "{% macro array_agg(field_to_agg) -%}\n\n{{ adapter.dispatch('array_agg', 'fivetran_utils') (field_to_agg) }}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.fivetran_utils.default__array_agg"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722889774.6200871, "supported_languages": null}, "macro.fivetran_utils.default__array_agg": {"name": "default__array_agg", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/array_agg.sql", "original_file_path": "macros/array_agg.sql", "unique_id": "macro.fivetran_utils.default__array_agg", "macro_sql": "{% macro default__array_agg(field_to_agg) %}\n    array_agg({{ field_to_agg }})\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722889774.620196, "supported_languages": null}, "macro.fivetran_utils.redshift__array_agg": {"name": "redshift__array_agg", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/array_agg.sql", "original_file_path": "macros/array_agg.sql", "unique_id": "macro.fivetran_utils.redshift__array_agg", "macro_sql": "{% macro redshift__array_agg(field_to_agg) %}\n    listagg({{ field_to_agg }}, ',')\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722889774.620297, "supported_languages": null}, "macro.fivetran_utils.empty_variable_warning": {"name": "empty_variable_warning", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/empty_variable_warning.sql", "original_file_path": "macros/empty_variable_warning.sql", "unique_id": "macro.fivetran_utils.empty_variable_warning", "macro_sql": "{% macro empty_variable_warning(variable, downstream_model) %}\n\n{% if not var(variable) %}\n{{ log(\n    \"\"\"\n    Warning: You have passed an empty list to the \"\"\" ~ variable ~ \"\"\".\n    As a result, you won't see the history of any columns in the \"\"\" ~ downstream_model ~ \"\"\" model.\n    \"\"\",\n    info=True\n) }}\n{% endif %}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722889774.620672, "supported_languages": null}, "macro.fivetran_utils.enabled_vars_one_true": {"name": "enabled_vars_one_true", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/enabled_vars_one_true.sql", "original_file_path": "macros/enabled_vars_one_true.sql", "unique_id": "macro.fivetran_utils.enabled_vars_one_true", "macro_sql": "{% macro enabled_vars_one_true(vars) %}\n\n{% for v in vars %}\n    \n    {% if var(v, False) == True %}\n    {{ return(True) }}\n    {% endif %}\n\n{% endfor %}\n\n{{ return(False) }}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1722889774.621061, "supported_languages": null}}, "docs": {"doc.dbt.__overview__": {"name": "__overview__", "resource_type": "doc", "package_name": "dbt", "path": "overview.md", "original_file_path": "docs/overview.md", "unique_id": "doc.dbt.__overview__", "block_contents": "### Welcome!\n\nWelcome to the auto-generated documentation for your dbt project!\n\n### Navigation\n\nYou can use the `Project` and `Database` navigation tabs on the left side of the window to explore the models\nin your project.\n\n#### Project Tab\nThe `Project` tab mirrors the directory structure of your dbt project. In this tab, you can see all of the\nmodels defined in your dbt project, as well as models imported from dbt packages.\n\n#### Database Tab\nThe `Database` tab also exposes your models, but in a format that looks more like a database explorer. This view\nshows relations (tables and views) grouped into database schemas. Note that ephemeral models are _not_ shown\nin this interface, as they do not exist in the database.\n\n### Graph Exploration\nYou can click the blue icon on the bottom-right corner of the page to view the lineage graph of your models.\n\nOn model pages, you'll see the immediate parents and children of the model you're exploring. By clicking the `Expand`\nbutton at the top-right of this lineage pane, you'll be able to see all of the models that are used to build,\nor are built from, the model you're exploring.\n\nOnce expanded, you'll be able to use the `--select` and `--exclude` model selection syntax to filter the\nmodels in the graph. For more information on model selection, check out the [dbt docs](https://docs.getdbt.com/docs/model-selection-syntax).\n\nNote that you can also right-click on models to interactively filter and explore the graph.\n\n---\n\n### More information\n\n- [What is dbt](https://docs.getdbt.com/docs/introduction)?\n- Read the [dbt viewpoint](https://docs.getdbt.com/docs/viewpoint)\n- [Installation](https://docs.getdbt.com/docs/installation)\n- Join the [dbt Community](https://www.getdbt.com/community/) for questions and discussion"}}, "exposures": {}, "metrics": {}, "groups": {}, "selectors": {}, "disabled": {"test.recurly_integration_tests.consistency_line_item_enhanced": [{"database": "postgres", "schema": "recurly_integrations_tests_dbt_test__audit", "name": "consistency_line_item_enhanced", "resource_type": "test", "package_name": "recurly_integration_tests", "path": "consistency/consistency_line_item_enhanced.sql", "original_file_path": "tests/consistency/consistency_line_item_enhanced.sql", "unique_id": "test.recurly_integration_tests.consistency_line_item_enhanced", "fqn": ["recurly_integration_tests", "consistency", "consistency_line_item_enhanced"], "alias": "consistency_line_item_enhanced", "checksum": {"name": "sha256", "checksum": "181cf93a9ca798d4ea1307966c3c6d761a7f57915f0a8fbb18c8ce007d5bc512"}, "config": {"enabled": false, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": ["fivetran_validations"], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": ["fivetran_validations"], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"tags": ["fivetran_validations"], "enabled": false}, "created_at": 1722889774.9459221, "relation_name": null, "raw_code": "{{ config(\n    tags=\"fivetran_validations\",\n    enabled=var('fivetran_validation_tests_enabled', false)\n) }}\n\nwith prod as (\n    select *\n    from {{ target.schema }}_recurly_prod.recurly__line_item_enhanced\n),\n\ndev as (\n    select *\n    from {{ target.schema }}_recurly_dev.recurly__line_item_enhanced\n), \n\nprod_not_in_dev as (\n    -- rows from prod not found in dev\n    select * from prod\n    except distinct\n    select * from dev\n),\n\ndev_not_in_prod as (\n    -- rows from dev not found in prod\n    select * from dev\n    except distinct\n    select * from prod\n),\n\nfinal as (\n    select\n        *,\n        'from prod' as source\n    from prod_not_in_dev\n\n    union all -- union since we only care if rows are produced\n\n    select\n        *,\n        'from dev' as source\n    from dev_not_in_prod\n)\n\nselect *\nfrom final", "language": "sql", "refs": [], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": []}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}}]}, "parent_map": {"seed.recurly_integration_tests.account_balance_history_data": [], "seed.recurly_integration_tests.subscription_change_history_data": [], "seed.recurly_integration_tests.credit_payment_history_data": [], "seed.recurly_integration_tests.subscription_history_data": [], "seed.recurly_integration_tests.coupon_discount_data": [], "seed.recurly_integration_tests.invoice_subscription_history_data": [], "seed.recurly_integration_tests.coupon_redemption_history_data": [], "seed.recurly_integration_tests.billing_info_history_data": [], "seed.recurly_integration_tests.plan_currency_history_data": [], "seed.recurly_integration_tests.invoice_history_data": [], "seed.recurly_integration_tests.transaction_subscription_data": [], "seed.recurly_integration_tests.plan_history_data": [], "seed.recurly_integration_tests.account_history_data": [], "seed.recurly_integration_tests.account_note_history_data": [], "seed.recurly_integration_tests.invoice_coupon_redemption_history_data": [], "seed.recurly_integration_tests.line_item_history_data": [], "seed.recurly_integration_tests.transaction_data": [], "seed.recurly_integration_tests.subscription_add_on_history_data": [], "model.recurly_source.stg_recurly__invoice_coupon_redemption_history": ["model.recurly_source.stg_recurly__invoice_coupon_redemption_history_tmp"], "model.recurly_source.stg_recurly__subscription_history": ["model.recurly_source.stg_recurly__subscription_history_tmp"], "model.recurly_source.stg_recurly__billing_info_history": ["model.recurly_source.stg_recurly__billing_info_history_tmp"], "model.recurly_source.stg_recurly__plan_history": ["model.recurly_source.stg_recurly__plan_history_tmp"], "model.recurly_source.stg_recurly__invoice_history": ["model.recurly_source.stg_recurly__invoice_history_tmp"], "model.recurly_source.stg_recurly__account_balance_history": ["model.recurly_source.stg_recurly__account_balance_history_tmp"], "model.recurly_source.stg_recurly__plan_currency_history": ["model.recurly_source.stg_recurly__plan_currency_history_tmp"], "model.recurly_source.stg_recurly__coupon_discount": ["model.recurly_source.stg_recurly__coupon_discount_tmp"], "model.recurly_source.stg_recurly__subscription_change_history": ["model.recurly_source.stg_recurly__subscription_change_history_tmp"], "model.recurly_source.stg_recurly__account_note_history": ["model.recurly_source.stg_recurly__account_note_history_tmp"], "model.recurly_source.stg_recurly__transaction_subscription": ["model.recurly_source.stg_recurly__transaction_subscription_tmp"], "model.recurly_source.stg_recurly__transaction": ["model.recurly_source.stg_recurly__transaction_tmp"], "model.recurly_source.stg_recurly__invoice_subscription_history": ["model.recurly_source.stg_recurly__invoice_subscription_history_tmp"], "model.recurly_source.stg_recurly__account_history": ["model.recurly_source.stg_recurly__account_history_tmp"], "model.recurly_source.stg_recurly__subscription_add_on_history": ["model.recurly_source.stg_recurly__subscription_add_on_history_tmp"], "model.recurly_source.stg_recurly__line_item_history": ["model.recurly_source.stg_recurly__line_item_history_tmp"], "model.recurly_source.stg_recurly__coupon_redemption_history": ["model.recurly_source.stg_recurly__coupon_redemption_history_tmp"], "model.recurly_source.stg_recurly__credit_payment_history": ["model.recurly_source.stg_recurly__credit_payment_history_tmp"], "model.recurly_source.stg_recurly__invoice_history_tmp": ["source.recurly_source.recurly.invoice_history"], "model.recurly_source.stg_recurly__plan_history_tmp": ["source.recurly_source.recurly.plan_history"], "model.recurly_source.stg_recurly__billing_info_history_tmp": ["source.recurly_source.recurly.billing_info_history"], "model.recurly_source.stg_recurly__invoice_subscription_history_tmp": ["source.recurly_source.recurly.invoice_subscription_history"], "model.recurly_source.stg_recurly__transaction_subscription_tmp": ["source.recurly_source.recurly.transaction_subscription"], "model.recurly_source.stg_recurly__subscription_history_tmp": ["source.recurly_source.recurly.subscription_history"], "model.recurly_source.stg_recurly__account_balance_history_tmp": ["source.recurly_source.recurly.account_balance_history"], "model.recurly_source.stg_recurly__credit_payment_history_tmp": ["source.recurly_source.recurly.credit_payment_history"], "model.recurly_source.stg_recurly__subscription_change_history_tmp": ["source.recurly_source.recurly.subscription_change_history"], "model.recurly_source.stg_recurly__account_note_history_tmp": ["source.recurly_source.recurly.account_note_history"], "model.recurly_source.stg_recurly__plan_currency_history_tmp": ["source.recurly_source.recurly.plan_currency_history"], "model.recurly_source.stg_recurly__coupon_discount_tmp": ["source.recurly_source.recurly.coupon_discount"], "model.recurly_source.stg_recurly__subscription_add_on_history_tmp": ["source.recurly_source.recurly.subscription_add_on_history"], "model.recurly_source.stg_recurly__coupon_redemption_history_tmp": ["source.recurly_source.recurly.coupon_redemption_history"], "model.recurly_source.stg_recurly__line_item_history_tmp": ["source.recurly_source.recurly.line_item_history"], "model.recurly_source.stg_recurly__account_history_tmp": ["source.recurly_source.recurly.account_history"], "model.recurly_source.stg_recurly__invoice_coupon_redemption_history_tmp": ["source.recurly_source.recurly.invoice_coupon_redemption_history"], "model.recurly_source.stg_recurly__transaction_tmp": ["source.recurly_source.recurly.transaction"], "model.recurly.recurly__account_daily_overview": ["model.recurly.int_recurly__account_running_totals"], "model.recurly.recurly__balance_transactions": ["model.recurly_source.stg_recurly__invoice_history", "model.recurly_source.stg_recurly__line_item_history", "model.recurly_source.stg_recurly__transaction"], "model.recurly.recurly__account_overview": ["model.recurly.int_recurly__account_cumulatives", "model.recurly.recurly__balance_transactions", "model.recurly_source.stg_recurly__account_history"], "model.recurly.recurly__subscription_overview": ["model.recurly.recurly__account_overview", "model.recurly_source.stg_recurly__plan_history", "model.recurly_source.stg_recurly__subscription_history"], "model.recurly.recurly__churn_analysis": ["model.recurly.recurly__subscription_overview"], "model.recurly.recurly__monthly_recurring_revenue": ["model.recurly.recurly__balance_transactions", "model.recurly_source.stg_recurly__account_history"], "model.recurly.recurly__line_item_enhanced": ["model.recurly_source.stg_recurly__account_history", "model.recurly_source.stg_recurly__invoice_history", "model.recurly_source.stg_recurly__line_item_history", "model.recurly_source.stg_recurly__plan_history", "model.recurly_source.stg_recurly__subscription_history", "model.recurly_source.stg_recurly__transaction"], "model.recurly.int_recurly__transactions_date_spine": ["model.recurly.recurly__account_overview", "model.recurly.recurly__balance_transactions"], "model.recurly.int_recurly__transactions_grouped": ["model.recurly.recurly__balance_transactions"], "model.recurly.int_recurly__account_rolling_totals": ["model.recurly.int_recurly__transactions_date_spine", "model.recurly.int_recurly__transactions_grouped"], "model.recurly.int_recurly__account_partitions": ["model.recurly.int_recurly__account_rolling_totals"], "model.recurly.int_recurly__account_cumulatives": ["model.recurly.int_recurly__transactions_grouped", "model.recurly.recurly__balance_transactions"], "model.recurly.int_recurly__account_running_totals": ["model.recurly.int_recurly__account_partitions", "model.recurly.recurly__account_overview"], "test.recurly_source.not_null_stg_recurly__account_balance_history_account_id.3e5f5059aa": ["model.recurly_source.stg_recurly__account_balance_history"], "test.recurly_source.dbt_utils_unique_combination_of_columns_stg_recurly__account_balance_history_account_id__account_updated_at__currency.f2a92ef487": ["model.recurly_source.stg_recurly__account_balance_history"], "test.recurly_source.not_null_stg_recurly__account_history_account_id.44786b38b6": ["model.recurly_source.stg_recurly__account_history"], "test.recurly_source.dbt_utils_unique_combination_of_columns_stg_recurly__account_history_account_id__updated_at.8b52517a8d": ["model.recurly_source.stg_recurly__account_history"], "test.recurly_source.not_null_stg_recurly__account_note_history_account_note_id.149e8223d0": ["model.recurly_source.stg_recurly__account_note_history"], "test.recurly_source.dbt_utils_unique_combination_of_columns_stg_recurly__account_note_history_account_note_id__account_id__account_updated_at.16e69c745d": ["model.recurly_source.stg_recurly__account_note_history"], "test.recurly_source.not_null_stg_recurly__billing_info_history_billing_id.0ea7044987": ["model.recurly_source.stg_recurly__billing_info_history"], "test.recurly_source.dbt_utils_unique_combination_of_columns_stg_recurly__billing_info_history_billing_id__updated_at.e0eac3a8ea": ["model.recurly_source.stg_recurly__billing_info_history"], "test.recurly_source.not_null_stg_recurly__coupon_discount_fivetran_id.72815f9856": ["model.recurly_source.stg_recurly__coupon_discount"], "test.recurly_source.not_null_stg_recurly__coupon_discount_coupon_id.5cadc37042": ["model.recurly_source.stg_recurly__coupon_discount"], "test.recurly_source.dbt_utils_unique_combination_of_columns_stg_recurly__coupon_discount_fivetran_id__coupon_id.3b43f53454": ["model.recurly_source.stg_recurly__coupon_discount"], "test.recurly_source.not_null_stg_recurly__coupon_redemption_history_coupon_redemption_id.e23507152c": ["model.recurly_source.stg_recurly__coupon_redemption_history"], "test.recurly_source.dbt_utils_unique_combination_of_columns_stg_recurly__coupon_redemption_history_coupon_redemption_id__updated_at.3231280b1f": ["model.recurly_source.stg_recurly__coupon_redemption_history"], "test.recurly_source.not_null_stg_recurly__credit_payment_history_credit_payment_id.242ec5084a": ["model.recurly_source.stg_recurly__credit_payment_history"], "test.recurly_source.dbt_utils_unique_combination_of_columns_stg_recurly__credit_payment_history_credit_payment_id__updated_at.4b777b7f53": ["model.recurly_source.stg_recurly__credit_payment_history"], "test.recurly_source.not_null_stg_recurly__invoice_coupon_redemption_history_coupon_redemption_id.7231a87702": ["model.recurly_source.stg_recurly__invoice_coupon_redemption_history"], "test.recurly_source.dbt_utils_unique_combination_of_columns_stg_recurly__invoice_coupon_redemption_history_coupon_redemption_id__invoice_id__invoice_updated_at.342096847a": ["model.recurly_source.stg_recurly__invoice_coupon_redemption_history"], "test.recurly_source.not_null_stg_recurly__invoice_history_invoice_id.8a72a867d9": ["model.recurly_source.stg_recurly__invoice_history"], "test.recurly_source.not_null_stg_recurly__invoice_history_number.2f6fe530ab": ["model.recurly_source.stg_recurly__invoice_history"], "test.recurly_source.dbt_utils_unique_combination_of_columns_stg_recurly__invoice_history_invoice_id__updated_at.7ab44a4bd3": ["model.recurly_source.stg_recurly__invoice_history"], "test.recurly_source.not_null_stg_recurly__invoice_subscription_history_invoice_id.0cf4105c8e": ["model.recurly_source.stg_recurly__invoice_subscription_history"], "test.recurly_source.not_null_stg_recurly__invoice_subscription_history_subscription_id.ded699c67d": ["model.recurly_source.stg_recurly__invoice_subscription_history"], "test.recurly_source.dbt_utils_unique_combination_of_columns_stg_recurly__invoice_subscription_history_invoice_id__invoice_updated_at__subscription_id.f57f4495ea": ["model.recurly_source.stg_recurly__invoice_subscription_history"], "test.recurly_source.not_null_stg_recurly__line_item_history_line_item_id.a1e1c656cf": ["model.recurly_source.stg_recurly__line_item_history"], "test.recurly_source.dbt_utils_unique_combination_of_columns_stg_recurly__line_item_history_line_item_id__updated_at.d4b4d9b36d": ["model.recurly_source.stg_recurly__line_item_history"], "test.recurly_source.not_null_stg_recurly__plan_currency_history_plan_id.9fc7106759": ["model.recurly_source.stg_recurly__plan_currency_history"], "test.recurly_source.dbt_utils_unique_combination_of_columns_stg_recurly__plan_currency_history_plan_id__plan_updated_at__currency.e0bd5adf3b": ["model.recurly_source.stg_recurly__plan_currency_history"], "test.recurly_source.not_null_stg_recurly__plan_history_plan_id.78effe7ba4": ["model.recurly_source.stg_recurly__plan_history"], "test.recurly_source.dbt_utils_unique_combination_of_columns_stg_recurly__plan_history_plan_id__updated_at.266aec2c6a": ["model.recurly_source.stg_recurly__plan_history"], "test.recurly_source.not_null_stg_recurly__subscription_add_on_history_subscription_add_on_id.17162cbb6e": ["model.recurly_source.stg_recurly__subscription_add_on_history"], "test.recurly_source.dbt_utils_unique_combination_of_columns_stg_recurly__subscription_add_on_history_subscription_add_on_id__updated_at.a589f1354f": ["model.recurly_source.stg_recurly__subscription_add_on_history"], "test.recurly_source.not_null_stg_recurly__subscription_change_history_subscription_change_id.d2bd0b27a6": ["model.recurly_source.stg_recurly__subscription_change_history"], "test.recurly_source.dbt_utils_unique_combination_of_columns_stg_recurly__subscription_change_history_subscription_change_id__updated_at.bb2112fd18": ["model.recurly_source.stg_recurly__subscription_change_history"], "test.recurly_source.not_null_stg_recurly__subscription_history_subscription_id.57c06c08bb": ["model.recurly_source.stg_recurly__subscription_history"], "test.recurly_source.dbt_utils_unique_combination_of_columns_stg_recurly__subscription_history_subscription_id__updated_at.bcb59ad4a4": ["model.recurly_source.stg_recurly__subscription_history"], "test.recurly_source.not_null_stg_recurly__transaction_subscription_transaction_id.99c6baecfe": ["model.recurly_source.stg_recurly__transaction_subscription"], "test.recurly_source.not_null_stg_recurly__transaction_subscription_subscription_id.0f7cd7e702": ["model.recurly_source.stg_recurly__transaction_subscription"], "test.recurly_source.dbt_utils_unique_combination_of_columns_stg_recurly__transaction_subscription_transaction_id__subscription_id.f396a8e771": ["model.recurly_source.stg_recurly__transaction_subscription"], "test.recurly_source.not_null_stg_recurly__transaction_transaction_id.5f44527c3c": ["model.recurly_source.stg_recurly__transaction"], "test.recurly_source.dbt_utils_unique_combination_of_columns_stg_recurly__transaction_transaction_id__created_at.769d67c8b8": ["model.recurly_source.stg_recurly__transaction"], "test.recurly.unique_recurly__account_daily_overview_account_daily_id.3e059c878a": ["model.recurly.recurly__account_daily_overview"], "test.recurly.not_null_recurly__account_daily_overview_account_daily_id.560ba5d6ac": ["model.recurly.recurly__account_daily_overview"], "test.recurly.unique_recurly__account_overview_account_id.ab3c32728d": ["model.recurly.recurly__account_overview"], "test.recurly.not_null_recurly__account_overview_account_id.55789d9c23": ["model.recurly.recurly__account_overview"], "test.recurly.not_null_recurly__balance_transactions_balance_transaction_id.63b1820723": ["model.recurly.recurly__balance_transactions"], "test.recurly.dbt_utils_unique_combination_of_columns_recurly__balance_transactions_balance_transaction_id__transaction_id.837e2ce868": ["model.recurly.recurly__balance_transactions"], "test.recurly.unique_recurly__churn_analysis_subscription_id.701f6b0aaf": ["model.recurly.recurly__churn_analysis"], "test.recurly.not_null_recurly__churn_analysis_subscription_id.9f21047592": ["model.recurly.recurly__churn_analysis"], "test.recurly.unique_recurly__monthly_recurring_revenue_account_monthly_id.f687206566": ["model.recurly.recurly__monthly_recurring_revenue"], "test.recurly.not_null_recurly__monthly_recurring_revenue_account_monthly_id.3957633afc": ["model.recurly.recurly__monthly_recurring_revenue"], "test.recurly.unique_recurly__subscription_overview_subscription_key.f2dc9d95af": ["model.recurly.recurly__subscription_overview"], "test.recurly.dbt_utils_unique_combination_of_columns_recurly__line_item_enhanced_header_id__line_item_id.7d90ceea61": ["model.recurly.recurly__line_item_enhanced"], "source.recurly_source.recurly.account_balance_history": [], "source.recurly_source.recurly.account_history": [], "source.recurly_source.recurly.account_note_history": [], "source.recurly_source.recurly.billing_info_history": [], "source.recurly_source.recurly.coupon_discount": [], "source.recurly_source.recurly.coupon_redemption_history": [], "source.recurly_source.recurly.credit_payment_history": [], "source.recurly_source.recurly.invoice_coupon_redemption_history": [], "source.recurly_source.recurly.invoice_history": [], "source.recurly_source.recurly.invoice_subscription_history": [], "source.recurly_source.recurly.line_item_history": [], "source.recurly_source.recurly.plan_currency_history": [], "source.recurly_source.recurly.plan_history": [], "source.recurly_source.recurly.subscription_add_on_history": [], "source.recurly_source.recurly.subscription_change_history": [], "source.recurly_source.recurly.subscription_history": [], "source.recurly_source.recurly.transaction_subscription": [], "source.recurly_source.recurly.transaction": []}, "child_map": {"seed.recurly_integration_tests.account_balance_history_data": [], "seed.recurly_integration_tests.subscription_change_history_data": [], "seed.recurly_integration_tests.credit_payment_history_data": [], "seed.recurly_integration_tests.subscription_history_data": [], "seed.recurly_integration_tests.coupon_discount_data": [], "seed.recurly_integration_tests.invoice_subscription_history_data": [], "seed.recurly_integration_tests.coupon_redemption_history_data": [], "seed.recurly_integration_tests.billing_info_history_data": [], "seed.recurly_integration_tests.plan_currency_history_data": [], "seed.recurly_integration_tests.invoice_history_data": [], "seed.recurly_integration_tests.transaction_subscription_data": [], "seed.recurly_integration_tests.plan_history_data": [], "seed.recurly_integration_tests.account_history_data": [], "seed.recurly_integration_tests.account_note_history_data": [], "seed.recurly_integration_tests.invoice_coupon_redemption_history_data": [], "seed.recurly_integration_tests.line_item_history_data": [], "seed.recurly_integration_tests.transaction_data": [], "seed.recurly_integration_tests.subscription_add_on_history_data": [], "model.recurly_source.stg_recurly__invoice_coupon_redemption_history": ["test.recurly_source.dbt_utils_unique_combination_of_columns_stg_recurly__invoice_coupon_redemption_history_coupon_redemption_id__invoice_id__invoice_updated_at.342096847a", "test.recurly_source.not_null_stg_recurly__invoice_coupon_redemption_history_coupon_redemption_id.7231a87702"], "model.recurly_source.stg_recurly__subscription_history": ["model.recurly.recurly__line_item_enhanced", "model.recurly.recurly__subscription_overview", "test.recurly_source.dbt_utils_unique_combination_of_columns_stg_recurly__subscription_history_subscription_id__updated_at.bcb59ad4a4", "test.recurly_source.not_null_stg_recurly__subscription_history_subscription_id.57c06c08bb"], "model.recurly_source.stg_recurly__billing_info_history": ["test.recurly_source.dbt_utils_unique_combination_of_columns_stg_recurly__billing_info_history_billing_id__updated_at.e0eac3a8ea", "test.recurly_source.not_null_stg_recurly__billing_info_history_billing_id.0ea7044987"], "model.recurly_source.stg_recurly__plan_history": ["model.recurly.recurly__line_item_enhanced", "model.recurly.recurly__subscription_overview", "test.recurly_source.dbt_utils_unique_combination_of_columns_stg_recurly__plan_history_plan_id__updated_at.266aec2c6a", "test.recurly_source.not_null_stg_recurly__plan_history_plan_id.78effe7ba4"], "model.recurly_source.stg_recurly__invoice_history": ["model.recurly.recurly__balance_transactions", "model.recurly.recurly__line_item_enhanced", "test.recurly_source.dbt_utils_unique_combination_of_columns_stg_recurly__invoice_history_invoice_id__updated_at.7ab44a4bd3", "test.recurly_source.not_null_stg_recurly__invoice_history_invoice_id.8a72a867d9", "test.recurly_source.not_null_stg_recurly__invoice_history_number.2f6fe530ab"], "model.recurly_source.stg_recurly__account_balance_history": ["test.recurly_source.dbt_utils_unique_combination_of_columns_stg_recurly__account_balance_history_account_id__account_updated_at__currency.f2a92ef487", "test.recurly_source.not_null_stg_recurly__account_balance_history_account_id.3e5f5059aa"], "model.recurly_source.stg_recurly__plan_currency_history": ["test.recurly_source.dbt_utils_unique_combination_of_columns_stg_recurly__plan_currency_history_plan_id__plan_updated_at__currency.e0bd5adf3b", "test.recurly_source.not_null_stg_recurly__plan_currency_history_plan_id.9fc7106759"], "model.recurly_source.stg_recurly__coupon_discount": ["test.recurly_source.dbt_utils_unique_combination_of_columns_stg_recurly__coupon_discount_fivetran_id__coupon_id.3b43f53454", "test.recurly_source.not_null_stg_recurly__coupon_discount_coupon_id.5cadc37042", "test.recurly_source.not_null_stg_recurly__coupon_discount_fivetran_id.72815f9856"], "model.recurly_source.stg_recurly__subscription_change_history": ["test.recurly_source.dbt_utils_unique_combination_of_columns_stg_recurly__subscription_change_history_subscription_change_id__updated_at.bb2112fd18", "test.recurly_source.not_null_stg_recurly__subscription_change_history_subscription_change_id.d2bd0b27a6"], "model.recurly_source.stg_recurly__account_note_history": ["test.recurly_source.dbt_utils_unique_combination_of_columns_stg_recurly__account_note_history_account_note_id__account_id__account_updated_at.16e69c745d", "test.recurly_source.not_null_stg_recurly__account_note_history_account_note_id.149e8223d0"], "model.recurly_source.stg_recurly__transaction_subscription": ["test.recurly_source.dbt_utils_unique_combination_of_columns_stg_recurly__transaction_subscription_transaction_id__subscription_id.f396a8e771", "test.recurly_source.not_null_stg_recurly__transaction_subscription_subscription_id.0f7cd7e702", "test.recurly_source.not_null_stg_recurly__transaction_subscription_transaction_id.99c6baecfe"], "model.recurly_source.stg_recurly__transaction": ["model.recurly.recurly__balance_transactions", "model.recurly.recurly__line_item_enhanced", "test.recurly_source.dbt_utils_unique_combination_of_columns_stg_recurly__transaction_transaction_id__created_at.769d67c8b8", "test.recurly_source.not_null_stg_recurly__transaction_transaction_id.5f44527c3c"], "model.recurly_source.stg_recurly__invoice_subscription_history": ["test.recurly_source.dbt_utils_unique_combination_of_columns_stg_recurly__invoice_subscription_history_invoice_id__invoice_updated_at__subscription_id.f57f4495ea", "test.recurly_source.not_null_stg_recurly__invoice_subscription_history_invoice_id.0cf4105c8e", "test.recurly_source.not_null_stg_recurly__invoice_subscription_history_subscription_id.ded699c67d"], "model.recurly_source.stg_recurly__account_history": ["model.recurly.recurly__account_overview", "model.recurly.recurly__line_item_enhanced", "model.recurly.recurly__monthly_recurring_revenue", "test.recurly_source.dbt_utils_unique_combination_of_columns_stg_recurly__account_history_account_id__updated_at.8b52517a8d", "test.recurly_source.not_null_stg_recurly__account_history_account_id.44786b38b6"], "model.recurly_source.stg_recurly__subscription_add_on_history": ["test.recurly_source.dbt_utils_unique_combination_of_columns_stg_recurly__subscription_add_on_history_subscription_add_on_id__updated_at.a589f1354f", "test.recurly_source.not_null_stg_recurly__subscription_add_on_history_subscription_add_on_id.17162cbb6e"], "model.recurly_source.stg_recurly__line_item_history": ["model.recurly.recurly__balance_transactions", "model.recurly.recurly__line_item_enhanced", "test.recurly_source.dbt_utils_unique_combination_of_columns_stg_recurly__line_item_history_line_item_id__updated_at.d4b4d9b36d", "test.recurly_source.not_null_stg_recurly__line_item_history_line_item_id.a1e1c656cf"], "model.recurly_source.stg_recurly__coupon_redemption_history": ["test.recurly_source.dbt_utils_unique_combination_of_columns_stg_recurly__coupon_redemption_history_coupon_redemption_id__updated_at.3231280b1f", "test.recurly_source.not_null_stg_recurly__coupon_redemption_history_coupon_redemption_id.e23507152c"], "model.recurly_source.stg_recurly__credit_payment_history": ["test.recurly_source.dbt_utils_unique_combination_of_columns_stg_recurly__credit_payment_history_credit_payment_id__updated_at.4b777b7f53", "test.recurly_source.not_null_stg_recurly__credit_payment_history_credit_payment_id.242ec5084a"], "model.recurly_source.stg_recurly__invoice_history_tmp": ["model.recurly_source.stg_recurly__invoice_history"], "model.recurly_source.stg_recurly__plan_history_tmp": ["model.recurly_source.stg_recurly__plan_history"], "model.recurly_source.stg_recurly__billing_info_history_tmp": ["model.recurly_source.stg_recurly__billing_info_history"], "model.recurly_source.stg_recurly__invoice_subscription_history_tmp": ["model.recurly_source.stg_recurly__invoice_subscription_history"], "model.recurly_source.stg_recurly__transaction_subscription_tmp": ["model.recurly_source.stg_recurly__transaction_subscription"], "model.recurly_source.stg_recurly__subscription_history_tmp": ["model.recurly_source.stg_recurly__subscription_history"], "model.recurly_source.stg_recurly__account_balance_history_tmp": ["model.recurly_source.stg_recurly__account_balance_history"], "model.recurly_source.stg_recurly__credit_payment_history_tmp": ["model.recurly_source.stg_recurly__credit_payment_history"], "model.recurly_source.stg_recurly__subscription_change_history_tmp": ["model.recurly_source.stg_recurly__subscription_change_history"], "model.recurly_source.stg_recurly__account_note_history_tmp": ["model.recurly_source.stg_recurly__account_note_history"], "model.recurly_source.stg_recurly__plan_currency_history_tmp": ["model.recurly_source.stg_recurly__plan_currency_history"], "model.recurly_source.stg_recurly__coupon_discount_tmp": ["model.recurly_source.stg_recurly__coupon_discount"], "model.recurly_source.stg_recurly__subscription_add_on_history_tmp": ["model.recurly_source.stg_recurly__subscription_add_on_history"], "model.recurly_source.stg_recurly__coupon_redemption_history_tmp": ["model.recurly_source.stg_recurly__coupon_redemption_history"], "model.recurly_source.stg_recurly__line_item_history_tmp": ["model.recurly_source.stg_recurly__line_item_history"], "model.recurly_source.stg_recurly__account_history_tmp": ["model.recurly_source.stg_recurly__account_history"], "model.recurly_source.stg_recurly__invoice_coupon_redemption_history_tmp": ["model.recurly_source.stg_recurly__invoice_coupon_redemption_history"], "model.recurly_source.stg_recurly__transaction_tmp": ["model.recurly_source.stg_recurly__transaction"], "model.recurly.recurly__account_daily_overview": ["test.recurly.not_null_recurly__account_daily_overview_account_daily_id.560ba5d6ac", "test.recurly.unique_recurly__account_daily_overview_account_daily_id.3e059c878a"], "model.recurly.recurly__balance_transactions": ["model.recurly.int_recurly__account_cumulatives", "model.recurly.int_recurly__transactions_date_spine", "model.recurly.int_recurly__transactions_grouped", "model.recurly.recurly__account_overview", "model.recurly.recurly__monthly_recurring_revenue", "test.recurly.dbt_utils_unique_combination_of_columns_recurly__balance_transactions_balance_transaction_id__transaction_id.837e2ce868", "test.recurly.not_null_recurly__balance_transactions_balance_transaction_id.63b1820723"], "model.recurly.recurly__account_overview": ["model.recurly.int_recurly__account_running_totals", "model.recurly.int_recurly__transactions_date_spine", "model.recurly.recurly__subscription_overview", "test.recurly.not_null_recurly__account_overview_account_id.55789d9c23", "test.recurly.unique_recurly__account_overview_account_id.ab3c32728d"], "model.recurly.recurly__subscription_overview": ["model.recurly.recurly__churn_analysis", "test.recurly.unique_recurly__subscription_overview_subscription_key.f2dc9d95af"], "model.recurly.recurly__churn_analysis": ["test.recurly.not_null_recurly__churn_analysis_subscription_id.9f21047592", "test.recurly.unique_recurly__churn_analysis_subscription_id.701f6b0aaf"], "model.recurly.recurly__monthly_recurring_revenue": ["test.recurly.not_null_recurly__monthly_recurring_revenue_account_monthly_id.3957633afc", "test.recurly.unique_recurly__monthly_recurring_revenue_account_monthly_id.f687206566"], "model.recurly.recurly__line_item_enhanced": ["test.recurly.dbt_utils_unique_combination_of_columns_recurly__line_item_enhanced_header_id__line_item_id.7d90ceea61"], "model.recurly.int_recurly__transactions_date_spine": ["model.recurly.int_recurly__account_rolling_totals"], "model.recurly.int_recurly__transactions_grouped": ["model.recurly.int_recurly__account_cumulatives", "model.recurly.int_recurly__account_rolling_totals"], "model.recurly.int_recurly__account_rolling_totals": ["model.recurly.int_recurly__account_partitions"], "model.recurly.int_recurly__account_partitions": ["model.recurly.int_recurly__account_running_totals"], "model.recurly.int_recurly__account_cumulatives": ["model.recurly.recurly__account_overview"], "model.recurly.int_recurly__account_running_totals": ["model.recurly.recurly__account_daily_overview"], "test.recurly_source.not_null_stg_recurly__account_balance_history_account_id.3e5f5059aa": [], "test.recurly_source.dbt_utils_unique_combination_of_columns_stg_recurly__account_balance_history_account_id__account_updated_at__currency.f2a92ef487": [], "test.recurly_source.not_null_stg_recurly__account_history_account_id.44786b38b6": [], "test.recurly_source.dbt_utils_unique_combination_of_columns_stg_recurly__account_history_account_id__updated_at.8b52517a8d": [], "test.recurly_source.not_null_stg_recurly__account_note_history_account_note_id.149e8223d0": [], "test.recurly_source.dbt_utils_unique_combination_of_columns_stg_recurly__account_note_history_account_note_id__account_id__account_updated_at.16e69c745d": [], "test.recurly_source.not_null_stg_recurly__billing_info_history_billing_id.0ea7044987": [], "test.recurly_source.dbt_utils_unique_combination_of_columns_stg_recurly__billing_info_history_billing_id__updated_at.e0eac3a8ea": [], "test.recurly_source.not_null_stg_recurly__coupon_discount_fivetran_id.72815f9856": [], "test.recurly_source.not_null_stg_recurly__coupon_discount_coupon_id.5cadc37042": [], "test.recurly_source.dbt_utils_unique_combination_of_columns_stg_recurly__coupon_discount_fivetran_id__coupon_id.3b43f53454": [], "test.recurly_source.not_null_stg_recurly__coupon_redemption_history_coupon_redemption_id.e23507152c": [], "test.recurly_source.dbt_utils_unique_combination_of_columns_stg_recurly__coupon_redemption_history_coupon_redemption_id__updated_at.3231280b1f": [], "test.recurly_source.not_null_stg_recurly__credit_payment_history_credit_payment_id.242ec5084a": [], "test.recurly_source.dbt_utils_unique_combination_of_columns_stg_recurly__credit_payment_history_credit_payment_id__updated_at.4b777b7f53": [], "test.recurly_source.not_null_stg_recurly__invoice_coupon_redemption_history_coupon_redemption_id.7231a87702": [], "test.recurly_source.dbt_utils_unique_combination_of_columns_stg_recurly__invoice_coupon_redemption_history_coupon_redemption_id__invoice_id__invoice_updated_at.342096847a": [], "test.recurly_source.not_null_stg_recurly__invoice_history_invoice_id.8a72a867d9": [], "test.recurly_source.not_null_stg_recurly__invoice_history_number.2f6fe530ab": [], "test.recurly_source.dbt_utils_unique_combination_of_columns_stg_recurly__invoice_history_invoice_id__updated_at.7ab44a4bd3": [], "test.recurly_source.not_null_stg_recurly__invoice_subscription_history_invoice_id.0cf4105c8e": [], "test.recurly_source.not_null_stg_recurly__invoice_subscription_history_subscription_id.ded699c67d": [], "test.recurly_source.dbt_utils_unique_combination_of_columns_stg_recurly__invoice_subscription_history_invoice_id__invoice_updated_at__subscription_id.f57f4495ea": [], "test.recurly_source.not_null_stg_recurly__line_item_history_line_item_id.a1e1c656cf": [], "test.recurly_source.dbt_utils_unique_combination_of_columns_stg_recurly__line_item_history_line_item_id__updated_at.d4b4d9b36d": [], "test.recurly_source.not_null_stg_recurly__plan_currency_history_plan_id.9fc7106759": [], "test.recurly_source.dbt_utils_unique_combination_of_columns_stg_recurly__plan_currency_history_plan_id__plan_updated_at__currency.e0bd5adf3b": [], "test.recurly_source.not_null_stg_recurly__plan_history_plan_id.78effe7ba4": [], "test.recurly_source.dbt_utils_unique_combination_of_columns_stg_recurly__plan_history_plan_id__updated_at.266aec2c6a": [], "test.recurly_source.not_null_stg_recurly__subscription_add_on_history_subscription_add_on_id.17162cbb6e": [], "test.recurly_source.dbt_utils_unique_combination_of_columns_stg_recurly__subscription_add_on_history_subscription_add_on_id__updated_at.a589f1354f": [], "test.recurly_source.not_null_stg_recurly__subscription_change_history_subscription_change_id.d2bd0b27a6": [], "test.recurly_source.dbt_utils_unique_combination_of_columns_stg_recurly__subscription_change_history_subscription_change_id__updated_at.bb2112fd18": [], "test.recurly_source.not_null_stg_recurly__subscription_history_subscription_id.57c06c08bb": [], "test.recurly_source.dbt_utils_unique_combination_of_columns_stg_recurly__subscription_history_subscription_id__updated_at.bcb59ad4a4": [], "test.recurly_source.not_null_stg_recurly__transaction_subscription_transaction_id.99c6baecfe": [], "test.recurly_source.not_null_stg_recurly__transaction_subscription_subscription_id.0f7cd7e702": [], "test.recurly_source.dbt_utils_unique_combination_of_columns_stg_recurly__transaction_subscription_transaction_id__subscription_id.f396a8e771": [], "test.recurly_source.not_null_stg_recurly__transaction_transaction_id.5f44527c3c": [], "test.recurly_source.dbt_utils_unique_combination_of_columns_stg_recurly__transaction_transaction_id__created_at.769d67c8b8": [], "test.recurly.unique_recurly__account_daily_overview_account_daily_id.3e059c878a": [], "test.recurly.not_null_recurly__account_daily_overview_account_daily_id.560ba5d6ac": [], "test.recurly.unique_recurly__account_overview_account_id.ab3c32728d": [], "test.recurly.not_null_recurly__account_overview_account_id.55789d9c23": [], "test.recurly.not_null_recurly__balance_transactions_balance_transaction_id.63b1820723": [], "test.recurly.dbt_utils_unique_combination_of_columns_recurly__balance_transactions_balance_transaction_id__transaction_id.837e2ce868": [], "test.recurly.unique_recurly__churn_analysis_subscription_id.701f6b0aaf": [], "test.recurly.not_null_recurly__churn_analysis_subscription_id.9f21047592": [], "test.recurly.unique_recurly__monthly_recurring_revenue_account_monthly_id.f687206566": [], "test.recurly.not_null_recurly__monthly_recurring_revenue_account_monthly_id.3957633afc": [], "test.recurly.unique_recurly__subscription_overview_subscription_key.f2dc9d95af": [], "test.recurly.dbt_utils_unique_combination_of_columns_recurly__line_item_enhanced_header_id__line_item_id.7d90ceea61": [], "source.recurly_source.recurly.account_balance_history": ["model.recurly_source.stg_recurly__account_balance_history_tmp"], "source.recurly_source.recurly.account_history": ["model.recurly_source.stg_recurly__account_history_tmp"], "source.recurly_source.recurly.account_note_history": ["model.recurly_source.stg_recurly__account_note_history_tmp"], "source.recurly_source.recurly.billing_info_history": ["model.recurly_source.stg_recurly__billing_info_history_tmp"], "source.recurly_source.recurly.coupon_discount": ["model.recurly_source.stg_recurly__coupon_discount_tmp"], "source.recurly_source.recurly.coupon_redemption_history": ["model.recurly_source.stg_recurly__coupon_redemption_history_tmp"], "source.recurly_source.recurly.credit_payment_history": ["model.recurly_source.stg_recurly__credit_payment_history_tmp"], "source.recurly_source.recurly.invoice_coupon_redemption_history": ["model.recurly_source.stg_recurly__invoice_coupon_redemption_history_tmp"], "source.recurly_source.recurly.invoice_history": ["model.recurly_source.stg_recurly__invoice_history_tmp"], "source.recurly_source.recurly.invoice_subscription_history": ["model.recurly_source.stg_recurly__invoice_subscription_history_tmp"], "source.recurly_source.recurly.line_item_history": ["model.recurly_source.stg_recurly__line_item_history_tmp"], "source.recurly_source.recurly.plan_currency_history": ["model.recurly_source.stg_recurly__plan_currency_history_tmp"], "source.recurly_source.recurly.plan_history": ["model.recurly_source.stg_recurly__plan_history_tmp"], "source.recurly_source.recurly.subscription_add_on_history": ["model.recurly_source.stg_recurly__subscription_add_on_history_tmp"], "source.recurly_source.recurly.subscription_change_history": ["model.recurly_source.stg_recurly__subscription_change_history_tmp"], "source.recurly_source.recurly.subscription_history": ["model.recurly_source.stg_recurly__subscription_history_tmp"], "source.recurly_source.recurly.transaction_subscription": ["model.recurly_source.stg_recurly__transaction_subscription_tmp"], "source.recurly_source.recurly.transaction": ["model.recurly_source.stg_recurly__transaction_tmp"]}, "group_map": {}, "saved_queries": {}, "semantic_models": {}, "unit_tests": {}}