{"metadata": {"dbt_schema_version": "https://schemas.getdbt.com/dbt/run-results/v6.json", "dbt_version": "1.8.4", "generated_at": "2024-08-05T21:39:07.676476Z", "invocation_id": "3e1cbb78-ec02-475c-833d-364a0b168d67", "env": {}}, "results": [{"status": "success", "timing": [{"name": "compile", "started_at": "2024-08-05T21:39:05.477935Z", "completed_at": "2024-08-05T21:39:05.485185Z"}, {"name": "execute", "started_at": "2024-08-05T21:39:05.485498Z", "completed_at": "2024-08-05T21:39:05.485510Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.017465829849243164, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.recurly_source.stg_recurly__account_history_tmp", "compiled": true, "compiled_code": "select * \nfrom \"postgres\".\"recurly_integrations_tests\".\"account_history_data\"", "relation_name": "\"postgres\".\"recurly_integrations_tests_recurly_dev\".\"stg_recurly__account_history_tmp\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-08-05T21:39:05.470051Z", "completed_at": "2024-08-05T21:39:05.486676Z"}, {"name": "execute", "started_at": "2024-08-05T21:39:05.487494Z", "completed_at": "2024-08-05T21:39:05.487502Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.019712209701538086, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.recurly_source.stg_recurly__account_balance_history_tmp", "compiled": true, "compiled_code": "select * \nfrom \"postgres\".\"recurly_integrations_tests\".\"account_balance_history_data\"", "relation_name": "\"postgres\".\"recurly_integrations_tests_recurly_dev\".\"stg_recurly__account_balance_history_tmp\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-08-05T21:39:05.480032Z", "completed_at": "2024-08-05T21:39:05.488027Z"}, {"name": "execute", "started_at": "2024-08-05T21:39:05.491892Z", "completed_at": "2024-08-05T21:39:05.491897Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.02361893653869629, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.recurly_source.stg_recurly__account_note_history_tmp", "compiled": true, "compiled_code": "select * \nfrom \"postgres\".\"recurly_integrations_tests\".\"account_note_history_data\"", "relation_name": "\"postgres\".\"recurly_integrations_tests_recurly_dev\".\"stg_recurly__account_note_history_tmp\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-08-05T21:39:05.482373Z", "completed_at": "2024-08-05T21:39:05.488369Z"}, {"name": "execute", "started_at": "2024-08-05T21:39:05.492400Z", "completed_at": "2024-08-05T21:39:05.492407Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.023747920989990234, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.recurly_source.stg_recurly__billing_info_history_tmp", "compiled": true, "compiled_code": "select * \nfrom \"postgres\".\"recurly_integrations_tests\".\"billing_info_history_data\"", "relation_name": "\"postgres\".\"recurly_integrations_tests_recurly_dev\".\"stg_recurly__billing_info_history_tmp\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-08-05T21:39:05.488668Z", "completed_at": "2024-08-05T21:39:05.493719Z"}, {"name": "execute", "started_at": "2024-08-05T21:39:05.495091Z", "completed_at": "2024-08-05T21:39:05.495095Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.008761167526245117, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.recurly_source.stg_recurly__coupon_discount_tmp", "compiled": true, "compiled_code": "select * \nfrom \"postgres\".\"recurly_integrations_tests\".\"coupon_discount_data\"", "relation_name": "\"postgres\".\"recurly_integrations_tests_recurly_dev\".\"stg_recurly__coupon_discount_tmp\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-08-05T21:39:05.495812Z", "completed_at": "2024-08-05T21:39:05.504572Z"}, {"name": "execute", "started_at": "2024-08-05T21:39:05.505332Z", "completed_at": "2024-08-05T21:39:05.505345Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.012387990951538086, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.recurly_source.stg_recurly__coupon_redemption_history_tmp", "compiled": true, "compiled_code": "select * \nfrom \"postgres\".\"recurly_integrations_tests\".\"coupon_redemption_history_data\"", "relation_name": "\"postgres\".\"recurly_integrations_tests_recurly_dev\".\"stg_recurly__coupon_redemption_history_tmp\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-08-05T21:39:05.499615Z", "completed_at": "2024-08-05T21:39:05.505793Z"}, {"name": "execute", "started_at": "2024-08-05T21:39:05.509596Z", "completed_at": "2024-08-05T21:39:05.509603Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.014940977096557617, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.recurly_source.stg_recurly__credit_payment_history_tmp", "compiled": true, "compiled_code": "\n\nselect * \nfrom \"postgres\".\"recurly_integrations_tests\".\"credit_payment_history_data\"", "relation_name": "\"postgres\".\"recurly_integrations_tests_recurly_dev\".\"stg_recurly__credit_payment_history_tmp\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-08-05T21:39:05.502519Z", "completed_at": "2024-08-05T21:39:05.508785Z"}, {"name": "execute", "started_at": "2024-08-05T21:39:05.510239Z", "completed_at": "2024-08-05T21:39:05.510245Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.014790773391723633, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.recurly_source.stg_recurly__invoice_coupon_redemption_history_tmp", "compiled": true, "compiled_code": "select * \nfrom \"postgres\".\"recurly_integrations_tests\".\"invoice_coupon_redemption_history_data\"", "relation_name": "\"postgres\".\"recurly_integrations_tests_recurly_dev\".\"stg_recurly__invoice_coupon_redemption_history_tmp\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-08-05T21:39:05.506100Z", "completed_at": "2024-08-05T21:39:05.511042Z"}, {"name": "execute", "started_at": "2024-08-05T21:39:05.512670Z", "completed_at": "2024-08-05T21:39:05.512676Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.010606050491333008, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.recurly_source.stg_recurly__invoice_history_tmp", "compiled": true, "compiled_code": "select * \nfrom \"postgres\".\"recurly_integrations_tests\".\"invoice_history_data\"", "relation_name": "\"postgres\".\"recurly_integrations_tests_recurly_dev\".\"stg_recurly__invoice_history_tmp\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-08-05T21:39:05.513697Z", "completed_at": "2024-08-05T21:39:05.519464Z"}, {"name": "execute", "started_at": "2024-08-05T21:39:05.523193Z", "completed_at": "2024-08-05T21:39:05.523200Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.012559175491333008, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.recurly_source.stg_recurly__invoice_subscription_history_tmp", "compiled": true, "compiled_code": "select * \nfrom \"postgres\".\"recurly_integrations_tests\".\"invoice_subscription_history_data\"", "relation_name": "\"postgres\".\"recurly_integrations_tests_recurly_dev\".\"stg_recurly__invoice_subscription_history_tmp\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-08-05T21:39:05.517416Z", "completed_at": "2024-08-05T21:39:05.526245Z"}, {"name": "execute", "started_at": "2024-08-05T21:39:05.527036Z", "completed_at": "2024-08-05T21:39:05.527042Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.014029979705810547, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.recurly_source.stg_recurly__line_item_history_tmp", "compiled": true, "compiled_code": "select *\nfrom \"postgres\".\"recurly_integrations_tests\".\"line_item_history_data\"", "relation_name": "\"postgres\".\"recurly_integrations_tests_recurly_dev\".\"stg_recurly__line_item_history_tmp\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-08-05T21:39:05.519766Z", "completed_at": "2024-08-05T21:39:05.526482Z"}, {"name": "execute", "started_at": "2024-08-05T21:39:05.527439Z", "completed_at": "2024-08-05T21:39:05.527442Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.014061212539672852, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.recurly_source.stg_recurly__plan_currency_history_tmp", "compiled": true, "compiled_code": "select *\nfrom \"postgres\".\"recurly_integrations_tests\".\"plan_currency_history_data\"", "relation_name": "\"postgres\".\"recurly_integrations_tests_recurly_dev\".\"stg_recurly__plan_currency_history_tmp\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-08-05T21:39:05.523688Z", "completed_at": "2024-08-05T21:39:05.527763Z"}, {"name": "execute", "started_at": "2024-08-05T21:39:05.528776Z", "completed_at": "2024-08-05T21:39:05.528780Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.011780261993408203, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.recurly_source.stg_recurly__plan_history_tmp", "compiled": true, "compiled_code": "select *\nfrom \"postgres\".\"recurly_integrations_tests\".\"plan_history_data\"", "relation_name": "\"postgres\".\"recurly_integrations_tests_recurly_dev\".\"stg_recurly__plan_history_tmp\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-08-05T21:39:05.529124Z", "completed_at": "2024-08-05T21:39:05.533247Z"}, {"name": "execute", "started_at": "2024-08-05T21:39:05.538330Z", "completed_at": "2024-08-05T21:39:05.538338Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.011688947677612305, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.recurly_source.stg_recurly__subscription_add_on_history_tmp", "compiled": true, "compiled_code": "\n\nselect * \nfrom \"postgres\".\"recurly_integrations_tests\".\"subscription_add_on_history_data\"", "relation_name": "\"postgres\".\"recurly_integrations_tests_recurly_dev\".\"stg_recurly__subscription_add_on_history_tmp\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-08-05T21:39:05.533454Z", "completed_at": "2024-08-05T21:39:05.541996Z"}, {"name": "execute", "started_at": "2024-08-05T21:39:05.542855Z", "completed_at": "2024-08-05T21:39:05.542860Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.011301994323730469, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.recurly_source.stg_recurly__subscription_change_history_tmp", "compiled": true, "compiled_code": "\n\nselect * \nfrom \"postgres\".\"recurly_integrations_tests\".\"subscription_change_history_data\"", "relation_name": "\"postgres\".\"recurly_integrations_tests_recurly_dev\".\"stg_recurly__subscription_change_history_tmp\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-08-05T21:39:05.535889Z", "completed_at": "2024-08-05T21:39:05.542617Z"}, {"name": "execute", "started_at": "2024-08-05T21:39:05.543533Z", "completed_at": "2024-08-05T21:39:05.543538Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.011660099029541016, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.recurly_source.stg_recurly__subscription_history_tmp", "compiled": true, "compiled_code": "select * \nfrom \"postgres\".\"recurly_integrations_tests\".\"subscription_history_data\"", "relation_name": "\"postgres\".\"recurly_integrations_tests_recurly_dev\".\"stg_recurly__subscription_history_tmp\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-08-05T21:39:05.539009Z", "completed_at": "2024-08-05T21:39:05.543870Z"}, {"name": "execute", "started_at": "2024-08-05T21:39:05.544890Z", "completed_at": "2024-08-05T21:39:05.544894Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.011941671371459961, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.recurly_source.stg_recurly__transaction_subscription_tmp", "compiled": true, "compiled_code": "select * \nfrom \"postgres\".\"recurly_integrations_tests\".\"transaction_subscription_data\"", "relation_name": "\"postgres\".\"recurly_integrations_tests_recurly_dev\".\"stg_recurly__transaction_subscription_tmp\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-08-05T21:39:05.549443Z", "completed_at": "2024-08-05T21:39:05.550712Z"}, {"name": "execute", "started_at": "2024-08-05T21:39:05.552767Z", "completed_at": "2024-08-05T21:39:05.552774Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.007586240768432617, "adapter_response": {}, "message": null, "failures": null, "unique_id": "seed.recurly_integration_tests.account_balance_history_data", "compiled": null, "compiled_code": null, "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-08-05T21:39:05.545514Z", "completed_at": "2024-08-05T21:39:05.550979Z"}, {"name": "execute", "started_at": "2024-08-05T21:39:05.553206Z", "completed_at": "2024-08-05T21:39:05.553210Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.009984016418457031, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.recurly_source.stg_recurly__transaction_tmp", "compiled": true, "compiled_code": "select * \nfrom \"postgres\".\"recurly_integrations_tests\".\"transaction_data\"", "relation_name": "\"postgres\".\"recurly_integrations_tests_recurly_dev\".\"stg_recurly__transaction_tmp\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-08-05T21:39:05.551217Z", "completed_at": "2024-08-05T21:39:05.552288Z"}, {"name": "execute", "started_at": "2024-08-05T21:39:05.553566Z", "completed_at": "2024-08-05T21:39:05.553570Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.005637168884277344, "adapter_response": {}, "message": null, "failures": null, "unique_id": "seed.recurly_integration_tests.account_history_data", "compiled": null, "compiled_code": null, "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-08-05T21:39:05.553909Z", "completed_at": "2024-08-05T21:39:05.555037Z"}, {"name": "execute", "started_at": "2024-08-05T21:39:05.556139Z", "completed_at": "2024-08-05T21:39:05.556144Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.00702214241027832, "adapter_response": {}, "message": null, "failures": null, "unique_id": "seed.recurly_integration_tests.account_note_history_data", "compiled": null, "compiled_code": null, "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-08-05T21:39:05.558287Z", "completed_at": "2024-08-05T21:39:05.560240Z"}, {"name": "execute", "started_at": "2024-08-05T21:39:05.563520Z", "completed_at": "2024-08-05T21:39:05.563528Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.00710296630859375, "adapter_response": {}, "message": null, "failures": null, "unique_id": "seed.recurly_integration_tests.billing_info_history_data", "compiled": null, "compiled_code": null, "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-08-05T21:39:05.560583Z", "completed_at": "2024-08-05T21:39:05.561707Z"}, {"name": "execute", "started_at": "2024-08-05T21:39:05.563943Z", "completed_at": "2024-08-05T21:39:05.563947Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.007255077362060547, "adapter_response": {}, "message": null, "failures": null, "unique_id": "seed.recurly_integration_tests.coupon_discount_data", "compiled": null, "compiled_code": null, "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-08-05T21:39:05.561979Z", "completed_at": "2024-08-05T21:39:05.563034Z"}, {"name": "execute", "started_at": "2024-08-05T21:39:05.564292Z", "completed_at": "2024-08-05T21:39:05.564296Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.007383823394775391, "adapter_response": {}, "message": null, "failures": null, "unique_id": "seed.recurly_integration_tests.coupon_redemption_history_data", "compiled": null, "compiled_code": null, "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-08-05T21:39:05.564638Z", "completed_at": "2024-08-05T21:39:05.565702Z"}, {"name": "execute", "started_at": "2024-08-05T21:39:05.566687Z", "completed_at": "2024-08-05T21:39:05.566691Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.008754968643188477, "adapter_response": {}, "message": null, "failures": null, "unique_id": "seed.recurly_integration_tests.credit_payment_history_data", "compiled": null, "compiled_code": null, "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-08-05T21:39:05.568857Z", "completed_at": "2024-08-05T21:39:05.570009Z"}, {"name": "execute", "started_at": "2024-08-05T21:39:05.573923Z", "completed_at": "2024-08-05T21:39:05.573929Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.00694584846496582, "adapter_response": {}, "message": null, "failures": null, "unique_id": "seed.recurly_integration_tests.invoice_coupon_redemption_history_data", "compiled": null, "compiled_code": null, "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-08-05T21:39:05.570300Z", "completed_at": "2024-08-05T21:39:05.571333Z"}, {"name": "execute", "started_at": "2024-08-05T21:39:05.574320Z", "completed_at": "2024-08-05T21:39:05.574323Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.007079124450683594, "adapter_response": {}, "message": null, "failures": null, "unique_id": "seed.recurly_integration_tests.invoice_history_data", "compiled": null, "compiled_code": null, "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-08-05T21:39:05.571575Z", "completed_at": "2024-08-05T21:39:05.573463Z"}, {"name": "execute", "started_at": "2024-08-05T21:39:05.574652Z", "completed_at": "2024-08-05T21:39:05.574655Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.007195949554443359, "adapter_response": {}, "message": null, "failures": null, "unique_id": "seed.recurly_integration_tests.invoice_subscription_history_data", "compiled": null, "compiled_code": null, "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-08-05T21:39:05.574966Z", "completed_at": "2024-08-05T21:39:05.576036Z"}, {"name": "execute", "started_at": "2024-08-05T21:39:05.577080Z", "completed_at": "2024-08-05T21:39:05.577084Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.008611679077148438, "adapter_response": {}, "message": null, "failures": null, "unique_id": "seed.recurly_integration_tests.line_item_history_data", "compiled": null, "compiled_code": null, "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-08-05T21:39:05.579742Z", "completed_at": "2024-08-05T21:39:05.580909Z"}, {"name": "execute", "started_at": "2024-08-05T21:39:05.584436Z", "completed_at": "2024-08-05T21:39:05.584443Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.0069980621337890625, "adapter_response": {}, "message": null, "failures": null, "unique_id": "seed.recurly_integration_tests.plan_currency_history_data", "compiled": null, "compiled_code": null, "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-08-05T21:39:05.581135Z", "completed_at": "2024-08-05T21:39:05.582183Z"}, {"name": "execute", "started_at": "2024-08-05T21:39:05.584895Z", "completed_at": "2024-08-05T21:39:05.584902Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.007124900817871094, "adapter_response": {}, "message": null, "failures": null, "unique_id": "seed.recurly_integration_tests.plan_history_data", "compiled": null, "compiled_code": null, "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-08-05T21:39:05.582515Z", "completed_at": "2024-08-05T21:39:05.583792Z"}, {"name": "execute", "started_at": "2024-08-05T21:39:05.585392Z", "completed_at": "2024-08-05T21:39:05.585398Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.007279157638549805, "adapter_response": {}, "message": null, "failures": null, "unique_id": "seed.recurly_integration_tests.subscription_add_on_history_data", "compiled": null, "compiled_code": null, "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-08-05T21:39:05.585786Z", "completed_at": "2024-08-05T21:39:05.586983Z"}, {"name": "execute", "started_at": "2024-08-05T21:39:05.588127Z", "completed_at": "2024-08-05T21:39:05.588131Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.008691787719726562, "adapter_response": {}, "message": null, "failures": null, "unique_id": "seed.recurly_integration_tests.subscription_change_history_data", "compiled": null, "compiled_code": null, "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-08-05T21:39:05.590938Z", "completed_at": "2024-08-05T21:39:05.593083Z"}, {"name": "execute", "started_at": "2024-08-05T21:39:05.596163Z", "completed_at": "2024-08-05T21:39:05.596171Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.0076122283935546875, "adapter_response": {}, "message": null, "failures": null, "unique_id": "seed.recurly_integration_tests.subscription_history_data", "compiled": null, "compiled_code": null, "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-08-05T21:39:05.593388Z", "completed_at": "2024-08-05T21:39:05.594435Z"}, {"name": "execute", "started_at": "2024-08-05T21:39:05.596576Z", "completed_at": "2024-08-05T21:39:05.596580Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.007701873779296875, "adapter_response": {}, "message": null, "failures": null, "unique_id": "seed.recurly_integration_tests.transaction_data", "compiled": null, "compiled_code": null, "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-08-05T21:39:05.594679Z", "completed_at": "2024-08-05T21:39:05.595707Z"}, {"name": "execute", "started_at": "2024-08-05T21:39:05.597115Z", "completed_at": "2024-08-05T21:39:05.597121Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.007985115051269531, "adapter_response": {}, "message": null, "failures": null, "unique_id": "seed.recurly_integration_tests.transaction_subscription_data", "compiled": null, "compiled_code": null, "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-08-05T21:39:05.610181Z", "completed_at": "2024-08-05T21:39:05.932646Z"}, {"name": "execute", "started_at": "2024-08-05T21:39:05.933186Z", "completed_at": "2024-08-05T21:39:05.933194Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.34759974479675293, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.recurly_source.stg_recurly__account_balance_history", "compiled": true, "compiled_code": "with base as (\n\n    select * \n    from \"postgres\".\"recurly_integrations_tests_recurly_dev\".\"stg_recurly__account_balance_history_tmp\"\n),\n\nfields as (\n\n    select\n        \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    \n    \n    account_id\n    \n as \n    \n    account_id\n    \n, \n    \n    \n    account_updated_at\n    \n as \n    \n    account_updated_at\n    \n, \n    \n    \n    amount\n    \n as \n    \n    amount\n    \n, \n    \n    \n    currency\n    \n as \n    \n    currency\n    \n, \n    \n    \n    past_due\n    \n as \n    \n    past_due\n    \n\n\n\n    from base\n),\n\nfinal as (\n    \n    select \n        account_id, \n        cast(account_updated_at as timestamp) as account_updated_at,\n        cast(amount as float) as amount,\n        currency,\n        past_due,\n        row_number() over (partition by account_id order by account_updated_at desc) = 1 as is_most_recent_record\n    from fields\n)\n\nselect *\nfrom final", "relation_name": "\"postgres\".\"recurly_integrations_tests_recurly_dev\".\"stg_recurly__account_balance_history\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-08-05T21:39:05.614799Z", "completed_at": "2024-08-05T21:39:05.933449Z"}, {"name": "execute", "started_at": "2024-08-05T21:39:05.934122Z", "completed_at": "2024-08-05T21:39:05.934126Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.3528409004211426, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.recurly_source.stg_recurly__account_note_history", "compiled": true, "compiled_code": "with base as (\n\n    select * \n    from \"postgres\".\"recurly_integrations_tests_recurly_dev\".\"stg_recurly__account_note_history_tmp\"\n),\n\nfields as (\n\n    select\n        \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    \n    \n    account_id\n    \n as \n    \n    account_id\n    \n, \n    \n    \n    account_updated_at\n    \n as \n    \n    account_updated_at\n    \n, \n    \n    \n    created_at\n    \n as \n    \n    created_at\n    \n, \n    \n    \n    id\n    \n as \n    \n    id\n    \n, \n    \n    \n    message\n    \n as \n    \n    message\n    \n, \n    \n    \n    object\n    \n as \n    \n    object\n    \n, \n    \n    \n    user_email\n    \n as \n    \n    user_email\n    \n, \n    \n    \n    user_id\n    \n as \n    \n    user_id\n    \n\n\n\n    from base\n),\n\nfinal as (\n    \n    select \n        id as account_note_id, \n        account_id,\n        cast(account_updated_at as timestamp) as account_updated_at,\n        cast(created_at as timestamp) as created_at,\n        message,\n        object,\n        user_email,\n        user_id,\n        row_number() over (partition by id order by account_updated_at desc) = 1 as is_most_recent_record\n    from fields\n)\n\nselect *\nfrom final", "relation_name": "\"postgres\".\"recurly_integrations_tests_recurly_dev\".\"stg_recurly__account_note_history\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-08-05T21:39:05.597508Z", "completed_at": "2024-08-05T21:39:05.932971Z"}, {"name": "execute", "started_at": "2024-08-05T21:39:05.933835Z", "completed_at": "2024-08-05T21:39:05.933838Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.3726320266723633, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.recurly_source.stg_recurly__account_history", "compiled": true, "compiled_code": "with base as (\n\n    select *\n    from \"postgres\".\"recurly_integrations_tests_recurly_dev\".\"stg_recurly__account_history_tmp\"\n),\n\nfields as (\n\n    select \n        \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    \n    \n    id\n    \n as \n    \n    id\n    \n, \n    \n    \n    created_at\n    \n as \n    \n    created_at\n    \n, \n    \n    \n    updated_at\n    \n as \n    \n    updated_at\n    \n, \n    \n    \n    deleted_at\n    \n as \n    \n    deleted_at\n    \n, \n    \n    \n    code\n    \n as \n    \n    code\n    \n, \n    \n    \n    bill_to\n    \n as \n    \n    bill_to\n    \n, \n    \n    \n    state\n    \n as \n    \n    state\n    \n, \n    \n    \n    username\n    \n as \n    \n    username\n    \n, \n    cast(null as TEXT) as \n    \n    first_name\n    \n , \n    cast(null as TEXT) as \n    \n    last_name\n    \n , \n    \n    \n    email\n    \n as \n    \n    email\n    \n, \n    \n    \n    cc_emails\n    \n as \n    \n    cc_emails\n    \n, \n    \n    \n    company\n    \n as \n    \n    company\n    \n, \n    \n    \n    vat_number\n    \n as \n    \n    vat_number\n    \n, \n    \n    \n    tax_exempt\n    \n as \n    \n    tax_exempt\n    \n, \n    cast(null as TEXT) as \n    \n    account_city\n    \n , \n    \n    \n    account_country\n    \n as \n    \n    account_country\n    \n, \n    cast(null as TEXT) as \n    \n    account_postal_code\n    \n , \n    cast(null as TEXT) as \n    \n    account_region\n    \n \n\n\n    from base\n),\n\nfinal as (\n\n    select\n        id as account_id, \n        cast(updated_at as timestamp) as updated_at, \n        account_city,\n        account_country, \n        account_postal_code,\n        account_region,\n        bill_to, \n        cc_emails, \n        code, \n        company, \n        cast(created_at as timestamp) as created_at,\n        cast(deleted_at as timestamp) as deleted_at,\n        email,  \n        first_name,\n        row_number() over (partition by id order by updated_at desc) = 1 as is_most_recent_record,\n        tax_exempt as is_tax_exempt, \n        last_name,\n        state, \n        username, \n        vat_number\n\n        --The below macro adds the fields defined within your accounts_pass_through_columns variable into the staging model\n        \n\n\n\n\n\n   from fields\n)\n\nselect *\nfrom final", "relation_name": "\"postgres\".\"recurly_integrations_tests_recurly_dev\".\"stg_recurly__account_history\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-08-05T21:39:05.618365Z", "completed_at": "2024-08-05T21:39:05.933653Z"}, {"name": "execute", "started_at": "2024-08-05T21:39:05.934339Z", "completed_at": "2024-08-05T21:39:05.934342Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.3548767566680908, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.recurly_source.stg_recurly__billing_info_history", "compiled": true, "compiled_code": "with base as (\n\n    select *\n    from \"postgres\".\"recurly_integrations_tests_recurly_dev\".\"stg_recurly__billing_info_history_tmp\"\n),\n\nfields as (\n    select\n        \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    \n    \n    id\n    \n as \n    \n    id\n    \n, \n    \n    \n    updated_at\n    \n as \n    \n    updated_at\n    \n, \n    \n    \n    account_id\n    \n as \n    \n    account_id\n    \n, \n    \n    \n    first_name\n    \n as \n    \n    first_name\n    \n, \n    \n    \n    last_name\n    \n as \n    \n    last_name\n    \n, \n    cast(null as TEXT) as \n    \n    company\n    \n , \n    \n    \n    billing_phone\n    \n as \n    \n    billing_phone\n    \n, \n    \n    \n    billing_street_1\n    \n as \n    \n    billing_street_1\n    \n, \n    \n    \n    billing_street_2\n    \n as \n    \n    billing_street_2\n    \n, \n    \n    \n    billing_city\n    \n as \n    \n    billing_city\n    \n, \n    \n    \n    billing_region\n    \n as \n    \n    billing_region\n    \n, \n    \n    \n    billing_postal_code\n    \n as \n    \n    billing_postal_code\n    \n, \n    \n    \n    billing_country\n    \n as \n    \n    billing_country\n    \n, \n    \n    \n    vat_number\n    \n as \n    \n    vat_number\n    \n, \n    \n    \n    valid\n    \n as \n    \n    valid\n    \n, \n    \n    \n    payment_method_object\n    \n as \n    \n    payment_method_object\n    \n, \n    cast(null as TEXT) as \n    \n    payment_method_card_type\n    \n , \n    \n    \n    payment_method_first_six\n    \n as \n    \n    payment_method_first_six\n    \n, \n    \n    \n    payment_method_last_four\n    \n as \n    \n    payment_method_last_four\n    \n, \n    \n    \n    payment_method_exp_month\n    \n as \n    \n    payment_method_exp_month\n    \n, \n    \n    \n    payment_method_exp_year\n    \n as \n    \n    payment_method_exp_year\n    \n, \n    \n    \n    fraud_score\n    \n as \n    \n    fraud_score\n    \n, \n    \n    \n    fraud_decision\n    \n as \n    \n    fraud_decision\n    \n, \n    \n    \n    fraud_risk_rules_triggered\n    \n as \n    \n    fraud_risk_rules_triggered\n    \n, \n    \n    \n    created_at\n    \n as \n    \n    created_at\n    \n, \n    \n    \n    updated_by_ip\n    \n as \n    \n    updated_by_ip\n    \n, \n    \n    \n    updated_by_country\n    \n as \n    \n    updated_by_country\n    \n\n\n\n    from base\n),\n\nfinal as (\n\n    select\n        id as billing_id, \n        cast(updated_at as timestamp) as updated_at,\n        account_id,\n        billing_city,\n        billing_country,\n        billing_phone,\n        billing_postal_code,\n        billing_region,\n        billing_street_1,\n        billing_street_2,\n        company,\n        cast(created_at as timestamp) as created_at, \n        first_name,\n        valid as is_valid,\n        last_name,\n        payment_method_card_type,\n        payment_method_object,\n        updated_by_country,\n        updated_by_ip,\n        vat_number,\n        row_number() over (partition by id order by updated_at desc) = 1 as is_most_recent_record\n    from fields\n)\n\nselect *\nfrom final", "relation_name": "\"postgres\".\"recurly_integrations_tests_recurly_dev\".\"stg_recurly__billing_info_history\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-08-05T21:39:05.965210Z", "completed_at": "2024-08-05T21:39:06.198873Z"}, {"name": "execute", "started_at": "2024-08-05T21:39:06.199114Z", "completed_at": "2024-08-05T21:39:06.199123Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.262631893157959, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.recurly_source.stg_recurly__coupon_redemption_history", "compiled": true, "compiled_code": "with base as (\n\n    select * \n    from \"postgres\".\"recurly_integrations_tests_recurly_dev\".\"stg_recurly__coupon_redemption_history_tmp\"\n),\n\nfields as (\n\n    select\n        \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    \n    \n    account_id\n    \n as \n    \n    account_id\n    \n, \n    \n    \n    coupon_id\n    \n as \n    \n    coupon_id\n    \n, \n    \n    \n    created_at\n    \n as \n    \n    created_at\n    \n, \n    \n    \n    currency\n    \n as \n    \n    currency\n    \n, \n    \n    \n    discounted\n    \n as \n    \n    discounted\n    \n, \n    \n    \n    id\n    \n as \n    \n    id\n    \n, \n    \n    \n    removed_at\n    \n as \n    \n    removed_at\n    \n, \n    \n    \n    state\n    \n as \n    \n    state\n    \n, \n    \n    \n    updated_at\n    \n as \n    \n    updated_at\n    \n\n\n\n    from base\n),\n\nfinal as (\n    \n    select \n        id as coupon_redemption_id,\n        cast(updated_at as timestamp) as updated_at,\n        account_id,\n        coupon_id,\n        cast(created_at as timestamp) as created_at,\n        currency, \n        discounted, \n        cast(removed_at as timestamp) as removed_at,\n        state\n    from fields\n)\n\nselect *\nfrom final", "relation_name": "\"postgres\".\"recurly_integrations_tests_recurly_dev\".\"stg_recurly__coupon_redemption_history\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-08-05T21:39:05.957582Z", "completed_at": "2024-08-05T21:39:06.214099Z"}, {"name": "execute", "started_at": "2024-08-05T21:39:06.214384Z", "completed_at": "2024-08-05T21:39:06.214390Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.28311920166015625, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.recurly_source.stg_recurly__coupon_discount", "compiled": true, "compiled_code": "with base as (\n\n    select * \n    from \"postgres\".\"recurly_integrations_tests_recurly_dev\".\"stg_recurly__coupon_discount_tmp\"\n),\n\nfields as (\n\n    select\n        \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    \n    \n    amount\n    \n as \n    \n    amount\n    \n, \n    \n    \n    coupon_id\n    \n as \n    \n    coupon_id\n    \n, \n    \n    \n    currency\n    \n as \n    \n    currency\n    \n, \n    \n    \n    fivetran_id\n    \n as \n    \n    fivetran_id\n    \n, \n    \n    \n    percentage\n    \n as \n    \n    percentage\n    \n, \n    \n    \n    trial_length\n    \n as \n    \n    trial_length\n    \n, \n    \n    \n    trial_unit\n    \n as \n    \n    trial_unit\n    \n, \n    \n    \n    type\n    \n as \n    \n    type\n    \n\n\n\n    from base\n),\n\nfinal as (\n    \n    select \n        coupon_id,\n        cast(amount as float) as amount,\n        currency,\n        fivetran_id,\n        percentage,\n        trial_length,\n        trial_unit,\n        type\n    from fields\n)\n\nselect *\nfrom final", "relation_name": "\"postgres\".\"recurly_integrations_tests_recurly_dev\".\"stg_recurly__coupon_discount\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-08-05T21:39:05.969815Z", "completed_at": "2024-08-05T21:39:06.225858Z"}, {"name": "execute", "started_at": "2024-08-05T21:39:06.226773Z", "completed_at": "2024-08-05T21:39:06.226778Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.287416934967041, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.recurly_source.stg_recurly__credit_payment_history", "compiled": true, "compiled_code": "\n\nwith base as (\n\n    select * \n    from \"postgres\".\"recurly_integrations_tests_recurly_dev\".\"stg_recurly__credit_payment_history_tmp\"\n),\n\nfields as (\n\n    select\n        \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    \n    \n    id\n    \n as \n    \n    id\n    \n, \n    \n    \n    updated_at\n    \n as \n    \n    updated_at\n    \n, \n    \n    \n    account_id\n    \n as \n    \n    account_id\n    \n, \n    \n    \n    applied_to_invoice_id\n    \n as \n    \n    applied_to_invoice_id\n    \n, \n    \n    \n    original_invoice_id\n    \n as \n    \n    original_invoice_id\n    \n, \n    \n    \n    refund_transaction_id\n    \n as \n    \n    refund_transaction_id\n    \n, \n    \n    \n    original_credit_payment_id\n    \n as \n    \n    original_credit_payment_id\n    \n, \n    \n    \n    uuid\n    \n as \n    \n    uuid\n    \n, \n    \n    \n    action\n    \n as \n    \n    action\n    \n, \n    \n    \n    currency\n    \n as \n    \n    currency\n    \n, \n    \n    \n    amount\n    \n as \n    \n    amount\n    \n, \n    \n    \n    created_at\n    \n as \n    \n    created_at\n    \n, \n    \n    \n    voided_at\n    \n as \n    \n    voided_at\n    \n\n\n\n    from base\n),\n\nfinal as (\n    \n    select \n        id as credit_payment_id,\n        cast(updated_at as timestamp) as updated_at,\n        account_id,\n        action,        \n        cast(amount as float) as amount,\n        applied_to_invoice_id,\n        cast(created_at as timestamp) as created_at,\n        currency,\n        refund_transaction_id,\n        original_credit_payment_id,\n        original_invoice_id,\n        uuid,\n        cast(voided_at as timestamp) as voided_at,\n        row_number() over (partition by id order by updated_at desc) = 1 as is_most_recent_record\n    from fields\n) \n\nselect *\nfrom final", "relation_name": "\"postgres\".\"recurly_integrations_tests_recurly_dev\".\"stg_recurly__credit_payment_history\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-08-05T21:39:05.974515Z", "completed_at": "2024-08-05T21:39:06.226560Z"}, {"name": "execute", "started_at": "2024-08-05T21:39:06.227399Z", "completed_at": "2024-08-05T21:39:06.227402Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.28992486000061035, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.recurly_source.stg_recurly__invoice_coupon_redemption_history", "compiled": true, "compiled_code": "with base as (\n\n    select * \n    from \"postgres\".\"recurly_integrations_tests_recurly_dev\".\"stg_recurly__invoice_coupon_redemption_history_tmp\"\n),\n\nfields as (\n\n    select\n        \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    \n    \n    coupon_redemption_id\n    \n as \n    \n    coupon_redemption_id\n    \n, \n    \n    \n    invoice_id\n    \n as \n    \n    invoice_id\n    \n, \n    \n    \n    invoice_updated_at\n    \n as \n    \n    invoice_updated_at\n    \n\n\n\n    from base\n),\n\nfinal as (\n    \n    select \n        coupon_redemption_id,\n        invoice_id,\n        cast(invoice_updated_at as timestamp) as invoice_updated_at,\n        row_number() over (partition by coupon_redemption_id order by invoice_updated_at desc) = 1 as is_most_recent_record\n    from fields\n)\n\nselect *\nfrom final", "relation_name": "\"postgres\".\"recurly_integrations_tests_recurly_dev\".\"stg_recurly__invoice_coupon_redemption_history\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-08-05T21:39:06.228479Z", "completed_at": "2024-08-05T21:39:06.470207Z"}, {"name": "execute", "started_at": "2024-08-05T21:39:06.470435Z", "completed_at": "2024-08-05T21:39:06.470443Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.2741689682006836, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.recurly_source.stg_recurly__invoice_history", "compiled": true, "compiled_code": "with base as (\n\n    select *\n    from \"postgres\".\"recurly_integrations_tests_recurly_dev\".\"stg_recurly__invoice_history_tmp\"\n),\n\nfields as (\n\n    select\n        \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    \n    \n    id\n    \n as \n    \n    id\n    \n, \n    \n    \n    created_at\n    \n as \n    \n    created_at\n    \n, \n    \n    \n    updated_at\n    \n as \n    \n    updated_at\n    \n, \n    \n    \n    due_at\n    \n as \n    \n    due_at\n    \n, \n    \n    \n    closed_at\n    \n as \n    \n    closed_at\n    \n, \n    \n    \n    account_id\n    \n as \n    \n    account_id\n    \n, \n    \n    \n    previous_invoice_id\n    \n as \n    \n    previous_invoice_id\n    \n, \n    \n    \n    type\n    \n as \n    \n    type\n    \n, \n    \n    \n    origin\n    \n as \n    \n    origin\n    \n, \n    \n    \n    state\n    \n as \n    \n    state\n    \n, \n    \n    \n    number\n    \n as \n    \n    number\n    \n, \n    \n    \n    collection_method\n    \n as \n    \n    collection_method\n    \n, \n    \n    \n    po_number\n    \n as \n    \n    po_number\n    \n, \n    \n    \n    net_terms\n    \n as \n    \n    net_terms\n    \n, \n    \n    \n    currency\n    \n as \n    \n    currency\n    \n, \n    \n    \n    balance\n    \n as \n    \n    balance\n    \n, \n    \n    \n    paid\n    \n as \n    \n    paid\n    \n, \n    \n    \n    total\n    \n as \n    \n    total\n    \n, \n    \n    \n    subtotal\n    \n as \n    \n    subtotal\n    \n, \n    \n    \n    refundable_amount\n    \n as \n    \n    refundable_amount\n    \n, \n    \n    \n    discount\n    \n as \n    \n    discount\n    \n, \n    \n    \n    tax\n    \n as \n    \n    tax\n    \n, \n    \n    \n    tax_type\n    \n as \n    \n    tax_type\n    \n, \n    \n    \n    tax_region\n    \n as \n    \n    tax_region\n    \n, \n    \n    \n    tax_rate\n    \n as \n    \n    tax_rate\n    \n\n\n\n    from base\n),\n\nfinal as (\n\n    select\n        id as invoice_id, \n        cast(updated_at as timestamp) as updated_at,\n        account_id,\n        cast(balance as float) as balance,\n        cast(closed_at as timestamp) as closed_at,\n        collection_method,\n        cast(created_at as timestamp) as created_at,\n        currency,\n        discount,\n        cast(due_at as timestamp) as due_at,\n        row_number() over (partition by id order by updated_at desc) = 1 as is_most_recent_record,\n        net_terms,\n        number,\n        origin,\n        paid,\n        po_number,        \n        previous_invoice_id,\n        refundable_amount,\n        state,\n        subtotal,\n        tax,\n        tax_rate,\n        tax_region,\n        tax_type,\n        total,\n        type\n    from fields\n)\n\nselect *\nfrom final", "relation_name": "\"postgres\".\"recurly_integrations_tests_recurly_dev\".\"stg_recurly__invoice_history\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-08-05T21:39:06.253358Z", "completed_at": "2024-08-05T21:39:06.501761Z"}, {"name": "execute", "started_at": "2024-08-05T21:39:06.502553Z", "completed_at": "2024-08-05T21:39:06.502559Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.2726778984069824, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.recurly_source.stg_recurly__line_item_history", "compiled": true, "compiled_code": "with base as (\n\n    select *\n    from \"postgres\".\"recurly_integrations_tests_recurly_dev\".\"stg_recurly__line_item_history_tmp\"\n),\n\nfields as (\n\n    select \n        \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    \n    \n    id\n    \n as \n    \n    id\n    \n, \n    \n    \n    created_at\n    \n as \n    \n    created_at\n    \n, \n    \n    \n    updated_at\n    \n as \n    \n    updated_at\n    \n, \n    \n    \n    account_id\n    \n as \n    \n    account_id\n    \n, \n    \n    \n    plan_id\n    \n as \n    \n    plan_id\n    \n, \n    \n    \n    add_on_id\n    \n as \n    \n    add_on_id\n    \n, \n    \n    \n    invoice_id\n    \n as \n    \n    invoice_id\n    \n, \n    \n    \n    previous_line_item_id\n    \n as \n    \n    previous_line_item_id\n    \n, \n    \n    \n    original_line_item_invoice_id\n    \n as \n    \n    original_line_item_invoice_id\n    \n, \n    \n    \n    subscription_id\n    \n as \n    \n    subscription_id\n    \n, \n    \n    \n    uuid\n    \n as \n    \n    uuid\n    \n, \n    \n    \n    type\n    \n as \n    \n    type\n    \n, \n    \n    \n    state\n    \n as \n    \n    state\n    \n, \n    \n    \n    plan_code\n    \n as \n    \n    plan_code\n    \n, \n    \n    \n    add_on_code\n    \n as \n    \n    add_on_code\n    \n, \n    \n    \n    invoice_number\n    \n as \n    \n    invoice_number\n    \n, \n    \n    \n    origin\n    \n as \n    \n    origin\n    \n, \n    \n    \n    product_code\n    \n as \n    \n    product_code\n    \n, \n    \n    \n    currency\n    \n as \n    \n    currency\n    \n, \n    \n    \n    amount\n    \n as \n    \n    amount\n    \n, \n    \n    \n    description\n    \n as \n    \n    description\n    \n, \n    \n    \n    quantity\n    \n as \n    \n    quantity\n    \n, \n    \n    \n    unit_amount\n    \n as \n    \n    unit_amount\n    \n, \n    \n    \n    subtotal\n    \n as \n    \n    subtotal\n    \n, \n    \n    \n    discount\n    \n as \n    \n    discount\n    \n, \n    \n    \n    tax\n    \n as \n    \n    tax\n    \n, \n    \n    \n    taxable\n    \n as \n    \n    taxable\n    \n, \n    \n    \n    tax_exempt\n    \n as \n    \n    tax_exempt\n    \n, \n    \n    \n    tax_code\n    \n as \n    \n    tax_code\n    \n, \n    \n    \n    tax_type\n    \n as \n    \n    tax_type\n    \n, \n    \n    \n    tax_region\n    \n as \n    \n    tax_region\n    \n, \n    \n    \n    tax_rate\n    \n as \n    \n    tax_rate\n    \n, \n    \n    \n    proration_rate\n    \n as \n    \n    proration_rate\n    \n, \n    \n    \n    refund\n    \n as \n    \n    refund\n    \n, \n    \n    \n    refunded_quantity\n    \n as \n    \n    refunded_quantity\n    \n, \n    \n    \n    credit_applied\n    \n as \n    \n    credit_applied\n    \n, \n    \n    \n    start_date\n    \n as \n    \n    start_date\n    \n, \n    \n    \n    end_date\n    \n as \n    \n    end_date\n    \n\n\n\n    from base\n),\n\nfinal as (\n\n    select\n        id as line_item_id, \n        cast(updated_at as timestamp) as updated_at,\n        account_id,\n        add_on_code,\n        add_on_id,\n        cast(amount as float) as amount,\n        cast(created_at as timestamp) as created_at,\n        credit_applied,\n        currency,\n        description,\n        discount,\n        cast(end_date as timestamp) as ended_at,\n        refund as has_refund,\n        invoice_id,\n        invoice_number,\n        row_number() over (partition by id order by updated_at desc) = 1 as is_most_recent_record,\n        taxable as is_taxable,\n        original_line_item_invoice_id,\n        origin,\n        plan_code,\n        plan_id,\n        previous_line_item_id,\n        product_code,\n        proration_rate,\n        quantity,\n        refunded_quantity,\n        cast(start_date as timestamp) as started_at,\n        state,\n        subscription_id,\n        subtotal,\n        tax,\n        tax_code,\n        tax_exempt,\n        tax_region,\n        tax_rate,\n        tax_type,\n        type,\n        cast(unit_amount as float) as unit_amount,\n        uuid\n    from fields\n)\n\nselect *\nfrom final", "relation_name": "\"postgres\".\"recurly_integrations_tests_recurly_dev\".\"stg_recurly__line_item_history\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-08-05T21:39:06.241075Z", "completed_at": "2024-08-05T21:39:06.501516Z"}, {"name": "execute", "started_at": "2024-08-05T21:39:06.502336Z", "completed_at": "2024-08-05T21:39:06.502340Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.2919328212738037, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.recurly_source.stg_recurly__invoice_subscription_history", "compiled": true, "compiled_code": "with base as (\n\n    select *\n    from \"postgres\".\"recurly_integrations_tests_recurly_dev\".\"stg_recurly__invoice_subscription_history_tmp\"\n),\n\nfields as (\n\n    select \n        \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    \n    \n    invoice_id\n    \n as \n    \n    invoice_id\n    \n, \n    \n    \n    invoice_updated_at\n    \n as \n    \n    invoice_updated_at\n    \n, \n    \n    \n    subscription_id\n    \n as \n    \n    subscription_id\n    \n\n\n\n    from base\n),\n\nfinal as (\n\n    select\n        invoice_id,\n        cast(invoice_updated_at as timestamp) as invoice_updated_at,\n        subscription_id,\n        row_number() over (partition by invoice_id order by invoice_updated_at desc) = 1 as is_most_recent_record\n    from fields\n)\nselect *\nfrom final", "relation_name": "\"postgres\".\"recurly_integrations_tests_recurly_dev\".\"stg_recurly__invoice_subscription_history\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-08-05T21:39:06.260532Z", "completed_at": "2024-08-05T21:39:06.511908Z"}, {"name": "execute", "started_at": "2024-08-05T21:39:06.512125Z", "completed_at": "2024-08-05T21:39:06.512131Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.27923011779785156, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.recurly_source.stg_recurly__plan_currency_history", "compiled": true, "compiled_code": "with base as (\n\n    select *\n    from \"postgres\".\"recurly_integrations_tests_recurly_dev\".\"stg_recurly__plan_currency_history_tmp\"\n),\n\nfields as (\n\n    select \n        \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    \n    \n    plan_id\n    \n as \n    \n    plan_id\n    \n, \n    \n    \n    plan_updated_at\n    \n as \n    \n    plan_updated_at\n    \n, \n    \n    \n    currency\n    \n as \n    \n    currency\n    \n, \n    \n    \n    setup_fees\n    \n as \n    \n    setup_fees\n    \n, \n    \n    \n    unit_amount\n    \n as \n    \n    unit_amount\n    \n\n\n\n    from base\n),\n\nfinal as (\n\n    select\n        plan_id,\n        cast(plan_updated_at as timestamp) as plan_updated_at,\n        currency,\n        setup_fees,\n        cast(unit_amount as float) as unit_amount,\n        row_number() over (partition by plan_id order by plan_updated_at desc) = 1 as is_most_recent_record\n    from fields\n)\n\nselect *\nfrom final", "relation_name": "\"postgres\".\"recurly_integrations_tests_recurly_dev\".\"stg_recurly__plan_currency_history\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-08-05T21:39:06.503586Z", "completed_at": "2024-08-05T21:39:06.763717Z"}, {"name": "execute", "started_at": "2024-08-05T21:39:06.763949Z", "completed_at": "2024-08-05T21:39:06.763959Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.28804683685302734, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.recurly_source.stg_recurly__plan_history", "compiled": true, "compiled_code": "with base as (\n\n    select *\n    from \"postgres\".\"recurly_integrations_tests_recurly_dev\".\"stg_recurly__plan_history_tmp\"\n),\n\nfields as (\n\n    select \n        \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    \n    \n    id\n    \n as \n    \n    id\n    \n, \n    \n    \n    created_at\n    \n as \n    \n    created_at\n    \n, \n    \n    \n    updated_at\n    \n as \n    \n    updated_at\n    \n, \n    \n    \n    deleted_at\n    \n as \n    \n    deleted_at\n    \n, \n    \n    \n    code\n    \n as \n    \n    code\n    \n, \n    \n    \n    state\n    \n as \n    \n    state\n    \n, \n    \n    \n    name\n    \n as \n    \n    name\n    \n, \n    \n    \n    description\n    \n as \n    \n    description\n    \n, \n    \n    \n    interval_unit\n    \n as \n    \n    interval_unit\n    \n, \n    \n    \n    interval_length\n    \n as \n    \n    interval_length\n    \n, \n    \n    \n    trial_unit\n    \n as \n    \n    trial_unit\n    \n, \n    \n    \n    trial_length\n    \n as \n    \n    trial_length\n    \n, \n    \n    \n    total_billing_cycles\n    \n as \n    \n    total_billing_cycles\n    \n, \n    \n    \n    auto_renew\n    \n as \n    \n    auto_renew\n    \n, \n    \n    \n    accounting_code\n    \n as \n    \n    accounting_code\n    \n, \n    \n    \n    setup_fee_accounting_code\n    \n as \n    \n    setup_fee_accounting_code\n    \n, \n    \n    \n    tax_code\n    \n as \n    \n    tax_code\n    \n, \n    \n    \n    tax_exempt\n    \n as \n    \n    tax_exempt\n    \n\n\n\n    from base\n),\n\nfinal as (\n\n    select\n        id as plan_id, \n        cast(updated_at as timestamp) as updated_at,\n        accounting_code,\n        code,\n        cast(created_at as timestamp) as created_at,\n        cast(deleted_at as timestamp) as deleted_at,\n        description,\n        auto_renew as has_auto_renew,\n        interval_length,\n        interval_unit,\n        row_number() over (partition by id order by updated_at desc) = 1 as is_most_recent_record,\n        tax_exempt as is_tax_exempt,\n        name,\n        setup_fee_accounting_code,\n        state,\n        tax_code,\n        total_billing_cycles,\n        trial_length,\n        trial_unit\n    from fields\n)\n\nselect *\nfrom final", "relation_name": "\"postgres\".\"recurly_integrations_tests_recurly_dev\".\"stg_recurly__plan_history\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-08-05T21:39:06.540612Z", "completed_at": "2024-08-05T21:39:06.822658Z"}, {"name": "execute", "started_at": "2024-08-05T21:39:06.822937Z", "completed_at": "2024-08-05T21:39:06.822941Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.3069329261779785, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.recurly_source.stg_recurly__subscription_history", "compiled": true, "compiled_code": "with base as (\n\n    select *\n    from \"postgres\".\"recurly_integrations_tests_recurly_dev\".\"stg_recurly__subscription_history_tmp\"\n),\n\nfields as (\n\n    select \n        \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    \n    \n    id\n    \n as \n    \n    id\n    \n, \n    \n    \n    created_at\n    \n as \n    \n    created_at\n    \n, \n    \n    \n    updated_at\n    \n as \n    \n    updated_at\n    \n, \n    \n    \n    activated_at\n    \n as \n    \n    activated_at\n    \n, \n    \n    \n    canceled_at\n    \n as \n    \n    canceled_at\n    \n, \n    cast(null as timestamp) as \n    \n    converted_at\n    \n , \n    \n    \n    expires_at\n    \n as \n    \n    expires_at\n    \n, \n    \n    \n    account_id\n    \n as \n    \n    account_id\n    \n, \n    \n    \n    plan_id\n    \n as \n    \n    plan_id\n    \n, \n    \n    \n    object\n    \n as \n    \n    object\n    \n, \n    \n    \n    uuid\n    \n as \n    \n    uuid\n    \n, \n    \n    \n    state\n    \n as \n    \n    state\n    \n, \n    \n    \n    current_period_started_at\n    \n as \n    \n    current_period_started_at\n    \n, \n    \n    \n    current_period_ends_at\n    \n as \n    \n    current_period_ends_at\n    \n, \n    \n    \n    current_term_started_at\n    \n as \n    \n    current_term_started_at\n    \n, \n    \n    \n    current_term_ends_at\n    \n as \n    \n    current_term_ends_at\n    \n, \n    \n    \n    trial_started_at\n    \n as \n    \n    trial_started_at\n    \n, \n    \n    \n    trial_ends_at\n    \n as \n    \n    trial_ends_at\n    \n, \n    \n    \n    remaining_billing_cycles\n    \n as \n    \n    remaining_billing_cycles\n    \n, \n    \n    \n    total_billing_cycles\n    \n as \n    \n    total_billing_cycles\n    \n, \n    \n    \n    renewal_billing_cycles\n    \n as \n    \n    renewal_billing_cycles\n    \n, \n    \n    \n    auto_renew\n    \n as \n    \n    auto_renew\n    \n, \n    \n    \n    paused_at\n    \n as \n    \n    paused_at\n    \n, \n    \n    \n    remaining_pause_cycles\n    \n as \n    \n    remaining_pause_cycles\n    \n, \n    \n    \n    currency\n    \n as \n    \n    currency\n    \n, \n    \n    \n    unit_amount\n    \n as \n    \n    unit_amount\n    \n, \n    \n    \n    quantity\n    \n as \n    \n    quantity\n    \n, \n    \n    \n    add_ons_total\n    \n as \n    \n    add_ons_total\n    \n, \n    \n    \n    subtotal\n    \n as \n    \n    subtotal\n    \n, \n    \n    \n    collection_method\n    \n as \n    \n    collection_method\n    \n, \n    \n    \n    expiration_reason\n    \n as \n    \n    expiration_reason\n    \n, \n    \n    \n    started_with_gift\n    \n as \n    \n    started_with_gift\n    \n\n\n\n    from base\n),\n\nfinal as (\n\n    select  \n        id as subscription_id,\n        cast(updated_at as timestamp) as updated_at,\n        account_id,\n        cast(activated_at as timestamp) as activated_at,\n        add_ons_total,\n        cast(canceled_at as timestamp) as canceled_at,\n        collection_method,\n        cast(converted_at as timestamp) as converted_at,\n        cast(created_at as timestamp) as created_at,\n        currency,\n        cast(current_period_ends_at as timestamp) as current_period_ended_at,\n        cast(current_period_started_at as timestamp) as current_period_started_at,\n        cast(current_term_ends_at as timestamp) as current_term_ended_at,\n        cast(current_term_started_at as timestamp) as current_term_started_at,\n        expiration_reason,\n        cast(expires_at as timestamp) as expires_at,\n        auto_renew as has_auto_renew,\n        started_with_gift as has_started_with_gift,\n        row_number() over (partition by id order by current_period_started_at desc) = 1 as is_most_recent_record,\n        object,\n        cast(paused_at as timestamp) as paused_at, \n        plan_id,\n        quantity,\n        remaining_billing_cycles,\n        remaining_pause_cycles,\n        renewal_billing_cycles,\n        state,\n        subtotal,\n        total_billing_cycles,\n        cast(trial_ends_at as timestamp) as trial_ends_at,\n        cast(trial_started_at as timestamp) as trial_started_at,\n        cast(unit_amount as float) as unit_amount,\n        uuid\n\n        --The below macro adds the fields defined within your accounts_pass_through_columns variable into the staging model\n        \n\n\n\n\n\n    from fields\n)\n\nselect *\nfrom final", "relation_name": "\"postgres\".\"recurly_integrations_tests_recurly_dev\".\"stg_recurly__subscription_history\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-08-05T21:39:06.533602Z", "completed_at": "2024-08-05T21:39:06.814059Z"}, {"name": "execute", "started_at": "2024-08-05T21:39:06.821476Z", "completed_at": "2024-08-05T21:39:06.821485Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.3140718936920166, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.recurly_source.stg_recurly__subscription_change_history", "compiled": true, "compiled_code": "\n\nwith base as (\n\n    select * \n    from \"postgres\".\"recurly_integrations_tests_recurly_dev\".\"stg_recurly__subscription_change_history_tmp\"\n),\n\nfields as (\n\n    select\n        \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    \n    \n    id\n    \n as \n    \n    id\n    \n, \n    \n    \n    updated_at\n    \n as \n    \n    updated_at\n    \n, \n    \n    \n    plan_id\n    \n as \n    \n    plan_id\n    \n, \n    \n    \n    subscription_id\n    \n as \n    \n    subscription_id\n    \n, \n    \n    \n    object\n    \n as \n    \n    object\n    \n, \n    \n    \n    unit_amount\n    \n as \n    \n    unit_amount\n    \n, \n    \n    \n    quantity\n    \n as \n    \n    quantity\n    \n, \n    \n    \n    activate_at\n    \n as \n    \n    activate_at\n    \n, \n    \n    \n    activated\n    \n as \n    \n    activated\n    \n, \n    \n    \n    created_at\n    \n as \n    \n    created_at\n    \n, \n    \n    \n    deleted_at\n    \n as \n    \n    deleted_at\n    \n\n\n\n    from base\n),\n\nfinal as (\n    \n    select \n        id as subscription_change_id, \n        cast(updated_at as timestamp) as updated_at, \n        cast(activate_at as timestamp) as activate_at,\n        activated, \n        cast(created_at as timestamp) as created_at,\n        cast(deleted_at as timestamp) as deleted_at,\n        object,\n        plan_id,\n        quantity,\n        subscription_id,\n        unit_amount,\n        row_number() over (partition by id order by updated_at desc) = 1 as is_most_recent_record\n    from fields\n) \n\nselect *\nfrom final", "relation_name": "\"postgres\".\"recurly_integrations_tests_recurly_dev\".\"stg_recurly__subscription_change_history\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-08-05T21:39:06.526704Z", "completed_at": "2024-08-05T21:39:06.822053Z"}, {"name": "execute", "started_at": "2024-08-05T21:39:06.822367Z", "completed_at": "2024-08-05T21:39:06.822371Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.32173609733581543, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.recurly_source.stg_recurly__subscription_add_on_history", "compiled": true, "compiled_code": "\n\nwith base as (\n\n    select * \n    from \"postgres\".\"recurly_integrations_tests_recurly_dev\".\"stg_recurly__subscription_add_on_history_tmp\"\n),\n\nfields as (\n\n    select\n        \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    \n    \n    created_at\n    \n as \n    \n    created_at\n    \n, \n    \n    \n    expired_at\n    \n as \n    \n    expired_at\n    \n, \n    \n    \n    id\n    \n as \n    \n    id\n    \n, \n    \n    \n    object\n    \n as \n    \n    object\n    \n, \n    \n    \n    plan_add_on_id\n    \n as \n    \n    plan_add_on_id\n    \n, \n    \n    \n    quantity\n    \n as \n    \n    quantity\n    \n, \n    \n    \n    subscription_id\n    \n as \n    \n    subscription_id\n    \n, \n    \n    \n    unit_amount\n    \n as \n    \n    unit_amount\n    \n, \n    \n    \n    updated_at\n    \n as \n    \n    updated_at\n    \n\n\n\n    from base\n),\n\nfinal as (\n    \n    select \n        id as subscription_add_on_id,\n        cast(updated_at as timestamp) as updated_at, \n        cast(created_at as timestamp) as created_at, \n        cast(expired_at as timestamp) as expired_at,\n        object,         \n        plan_add_on_id,\n        quantity, \n        subscription_id, \n        cast(unit_amount as float) as unit_amount,\n        row_number() over (partition by id order by updated_at desc) = 1 as is_most_recent_record\n    from fields\n)\n\nselect *\nfrom final", "relation_name": "\"postgres\".\"recurly_integrations_tests_recurly_dev\".\"stg_recurly__subscription_add_on_history\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-08-05T21:39:06.854837Z", "completed_at": "2024-08-05T21:39:06.868288Z"}, {"name": "execute", "started_at": "2024-08-05T21:39:06.868553Z", "completed_at": "2024-08-05T21:39:06.868560Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.01927971839904785, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.recurly_source.dbt_utils_unique_combination_of_columns_stg_recurly__account_balance_history_account_id__account_updated_at__currency.f2a92ef487", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        account_id, account_updated_at, currency\n    from \"postgres\".\"recurly_integrations_tests_recurly_dev\".\"stg_recurly__account_balance_history\"\n    group by account_id, account_updated_at, currency\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-08-05T21:39:06.862643Z", "completed_at": "2024-08-05T21:39:06.872498Z"}, {"name": "execute", "started_at": "2024-08-05T21:39:06.872813Z", "completed_at": "2024-08-05T21:39:06.872817Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.023001909255981445, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.recurly_source.not_null_stg_recurly__account_balance_history_account_id.3e5f5059aa", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect account_id\nfrom \"postgres\".\"recurly_integrations_tests_recurly_dev\".\"stg_recurly__account_balance_history\"\nwhere account_id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-08-05T21:39:06.869636Z", "completed_at": "2024-08-05T21:39:06.873430Z"}, {"name": "execute", "started_at": "2024-08-05T21:39:06.873889Z", "completed_at": "2024-08-05T21:39:06.873892Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.004742860794067383, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.recurly_source.dbt_utils_unique_combination_of_columns_stg_recurly__account_note_history_account_note_id__account_id__account_updated_at.16e69c745d", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        account_note_id, account_id, account_updated_at\n    from \"postgres\".\"recurly_integrations_tests_recurly_dev\".\"stg_recurly__account_note_history\"\n    group by account_note_id, account_id, account_updated_at\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-08-05T21:39:06.874720Z", "completed_at": "2024-08-05T21:39:06.880480Z"}, {"name": "execute", "started_at": "2024-08-05T21:39:06.880714Z", "completed_at": "2024-08-05T21:39:06.880720Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.007142782211303711, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.recurly_source.not_null_stg_recurly__account_note_history_account_note_id.149e8223d0", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect account_note_id\nfrom \"postgres\".\"recurly_integrations_tests_recurly_dev\".\"stg_recurly__account_note_history\"\nwhere account_note_id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-08-05T21:39:06.877654Z", "completed_at": "2024-08-05T21:39:06.881192Z"}, {"name": "execute", "started_at": "2024-08-05T21:39:06.881670Z", "completed_at": "2024-08-05T21:39:06.881675Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.004563808441162109, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.recurly_source.dbt_utils_unique_combination_of_columns_stg_recurly__account_history_account_id__updated_at.8b52517a8d", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        account_id, updated_at\n    from \"postgres\".\"recurly_integrations_tests_recurly_dev\".\"stg_recurly__account_history\"\n    group by account_id, updated_at\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-08-05T21:39:06.883050Z", "completed_at": "2024-08-05T21:39:06.889548Z"}, {"name": "execute", "started_at": "2024-08-05T21:39:06.889848Z", "completed_at": "2024-08-05T21:39:06.889855Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.007867813110351562, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.recurly_source.not_null_stg_recurly__account_history_account_id.44786b38b6", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect account_id\nfrom \"postgres\".\"recurly_integrations_tests_recurly_dev\".\"stg_recurly__account_history\"\nwhere account_id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-08-05T21:39:06.885966Z", "completed_at": "2024-08-05T21:39:06.890503Z"}, {"name": "execute", "started_at": "2024-08-05T21:39:06.891032Z", "completed_at": "2024-08-05T21:39:06.891036Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.008272886276245117, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.recurly_source.dbt_utils_unique_combination_of_columns_stg_recurly__billing_info_history_billing_id__updated_at.e0eac3a8ea", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        billing_id, updated_at\n    from \"postgres\".\"recurly_integrations_tests_recurly_dev\".\"stg_recurly__billing_info_history\"\n    group by billing_id, updated_at\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-08-05T21:39:06.891843Z", "completed_at": "2024-08-05T21:39:06.898228Z"}, {"name": "execute", "started_at": "2024-08-05T21:39:06.898584Z", "completed_at": "2024-08-05T21:39:06.898591Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.007898330688476562, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.recurly_source.not_null_stg_recurly__billing_info_history_billing_id.0ea7044987", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect billing_id\nfrom \"postgres\".\"recurly_integrations_tests_recurly_dev\".\"stg_recurly__billing_info_history\"\nwhere billing_id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-08-05T21:39:06.895137Z", "completed_at": "2024-08-05T21:39:06.899304Z"}, {"name": "execute", "started_at": "2024-08-05T21:39:06.899784Z", "completed_at": "2024-08-05T21:39:06.899789Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.005301952362060547, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.recurly_source.dbt_utils_unique_combination_of_columns_stg_recurly__coupon_redemption_history_coupon_redemption_id__updated_at.3231280b1f", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        coupon_redemption_id, updated_at\n    from \"postgres\".\"recurly_integrations_tests_recurly_dev\".\"stg_recurly__coupon_redemption_history\"\n    group by coupon_redemption_id, updated_at\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-08-05T21:39:06.900627Z", "completed_at": "2024-08-05T21:39:06.907435Z"}, {"name": "execute", "started_at": "2024-08-05T21:39:06.907698Z", "completed_at": "2024-08-05T21:39:06.907704Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.008247852325439453, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.recurly_source.not_null_stg_recurly__coupon_redemption_history_coupon_redemption_id.e23507152c", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect coupon_redemption_id\nfrom \"postgres\".\"recurly_integrations_tests_recurly_dev\".\"stg_recurly__coupon_redemption_history\"\nwhere coupon_redemption_id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-08-05T21:39:06.904076Z", "completed_at": "2024-08-05T21:39:06.908109Z"}, {"name": "execute", "started_at": "2024-08-05T21:39:06.908764Z", "completed_at": "2024-08-05T21:39:06.908769Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.005298137664794922, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.recurly_source.dbt_utils_unique_combination_of_columns_stg_recurly__coupon_discount_fivetran_id__coupon_id.3b43f53454", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        fivetran_id, coupon_id\n    from \"postgres\".\"recurly_integrations_tests_recurly_dev\".\"stg_recurly__coupon_discount\"\n    group by fivetran_id, coupon_id\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-08-05T21:39:06.910274Z", "completed_at": "2024-08-05T21:39:06.956313Z"}, {"name": "execute", "started_at": "2024-08-05T21:39:06.956597Z", "completed_at": "2024-08-05T21:39:06.956603Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.04748106002807617, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.recurly_source.not_null_stg_recurly__coupon_discount_coupon_id.5cadc37042", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect coupon_id\nfrom \"postgres\".\"recurly_integrations_tests_recurly_dev\".\"stg_recurly__coupon_discount\"\nwhere coupon_id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-08-05T21:39:06.953451Z", "completed_at": "2024-08-05T21:39:06.957682Z"}, {"name": "execute", "started_at": "2024-08-05T21:39:06.960783Z", "completed_at": "2024-08-05T21:39:06.960789Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.0508420467376709, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.recurly_source.not_null_stg_recurly__coupon_discount_fivetran_id.72815f9856", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect fivetran_id\nfrom \"postgres\".\"recurly_integrations_tests_recurly_dev\".\"stg_recurly__coupon_discount\"\nwhere fivetran_id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-08-05T21:39:06.957925Z", "completed_at": "2024-08-05T21:39:06.961790Z"}, {"name": "execute", "started_at": "2024-08-05T21:39:06.962200Z", "completed_at": "2024-08-05T21:39:06.962204Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.005051851272583008, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.recurly_source.dbt_utils_unique_combination_of_columns_stg_recurly__credit_payment_history_credit_payment_id__updated_at.4b777b7f53", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        credit_payment_id, updated_at\n    from \"postgres\".\"recurly_integrations_tests_recurly_dev\".\"stg_recurly__credit_payment_history\"\n    group by credit_payment_id, updated_at\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-08-05T21:39:06.962542Z", "completed_at": "2024-08-05T21:39:06.968821Z"}, {"name": "execute", "started_at": "2024-08-05T21:39:06.969088Z", "completed_at": "2024-08-05T21:39:06.969094Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.0075910091400146484, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.recurly_source.not_null_stg_recurly__credit_payment_history_credit_payment_id.242ec5084a", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect credit_payment_id\nfrom \"postgres\".\"recurly_integrations_tests_recurly_dev\".\"stg_recurly__credit_payment_history\"\nwhere credit_payment_id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-08-05T21:39:06.965805Z", "completed_at": "2024-08-05T21:39:06.969769Z"}, {"name": "execute", "started_at": "2024-08-05T21:39:06.970226Z", "completed_at": "2024-08-05T21:39:06.970229Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.004988193511962891, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.recurly_source.dbt_utils_unique_combination_of_columns_stg_recurly__invoice_coupon_redemption_history_coupon_redemption_id__invoice_id__invoice_updated_at.342096847a", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        coupon_redemption_id, invoice_id, invoice_updated_at\n    from \"postgres\".\"recurly_integrations_tests_recurly_dev\".\"stg_recurly__invoice_coupon_redemption_history\"\n    group by coupon_redemption_id, invoice_id, invoice_updated_at\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-08-05T21:39:06.971092Z", "completed_at": "2024-08-05T21:39:06.977445Z"}, {"name": "execute", "started_at": "2024-08-05T21:39:06.977679Z", "completed_at": "2024-08-05T21:39:06.977684Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.007754087448120117, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.recurly_source.not_null_stg_recurly__invoice_coupon_redemption_history_coupon_redemption_id.7231a87702", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect coupon_redemption_id\nfrom \"postgres\".\"recurly_integrations_tests_recurly_dev\".\"stg_recurly__invoice_coupon_redemption_history\"\nwhere coupon_redemption_id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-08-05T21:39:06.974960Z", "completed_at": "2024-08-05T21:39:06.978028Z"}, {"name": "execute", "started_at": "2024-08-05T21:39:06.978507Z", "completed_at": "2024-08-05T21:39:06.978511Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.004122018814086914, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.recurly_source.dbt_utils_unique_combination_of_columns_stg_recurly__invoice_history_invoice_id__updated_at.7ab44a4bd3", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        invoice_id, updated_at\n    from \"postgres\".\"recurly_integrations_tests_recurly_dev\".\"stg_recurly__invoice_history\"\n    group by invoice_id, updated_at\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-08-05T21:39:06.979750Z", "completed_at": "2024-08-05T21:39:06.985012Z"}, {"name": "execute", "started_at": "2024-08-05T21:39:06.985249Z", "completed_at": "2024-08-05T21:39:06.985254Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.006455183029174805, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.recurly_source.not_null_stg_recurly__invoice_history_invoice_id.8a72a867d9", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect invoice_id\nfrom \"postgres\".\"recurly_integrations_tests_recurly_dev\".\"stg_recurly__invoice_history\"\nwhere invoice_id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-08-05T21:39:06.982518Z", "completed_at": "2024-08-05T21:39:06.985587Z"}, {"name": "execute", "started_at": "2024-08-05T21:39:06.986047Z", "completed_at": "2024-08-05T21:39:06.986050Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.00656580924987793, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.recurly_source.not_null_stg_recurly__invoice_history_number.2f6fe530ab", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect number\nfrom \"postgres\".\"recurly_integrations_tests_recurly_dev\".\"stg_recurly__invoice_history\"\nwhere number is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-08-05T21:39:06.987262Z", "completed_at": "2024-08-05T21:39:06.993608Z"}, {"name": "execute", "started_at": "2024-08-05T21:39:06.993867Z", "completed_at": "2024-08-05T21:39:06.993873Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.007559776306152344, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.recurly_source.dbt_utils_unique_combination_of_columns_stg_recurly__line_item_history_line_item_id__updated_at.d4b4d9b36d", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        line_item_id, updated_at\n    from \"postgres\".\"recurly_integrations_tests_recurly_dev\".\"stg_recurly__line_item_history\"\n    group by line_item_id, updated_at\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-08-05T21:39:06.990295Z", "completed_at": "2024-08-05T21:39:06.994219Z"}, {"name": "execute", "started_at": "2024-08-05T21:39:06.994703Z", "completed_at": "2024-08-05T21:39:06.994706Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.007711887359619141, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.recurly_source.not_null_stg_recurly__line_item_history_line_item_id.a1e1c656cf", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect line_item_id\nfrom \"postgres\".\"recurly_integrations_tests_recurly_dev\".\"stg_recurly__line_item_history\"\nwhere line_item_id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-08-05T21:39:06.996375Z", "completed_at": "2024-08-05T21:39:07.002312Z"}, {"name": "execute", "started_at": "2024-08-05T21:39:07.002560Z", "completed_at": "2024-08-05T21:39:07.002566Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.007568836212158203, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.recurly_source.dbt_utils_unique_combination_of_columns_stg_recurly__invoice_subscription_history_invoice_id__invoice_updated_at__subscription_id.f57f4495ea", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        invoice_id, invoice_updated_at, subscription_id\n    from \"postgres\".\"recurly_integrations_tests_recurly_dev\".\"stg_recurly__invoice_subscription_history\"\n    group by invoice_id, invoice_updated_at, subscription_id\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-08-05T21:39:06.999804Z", "completed_at": "2024-08-05T21:39:07.002929Z"}, {"name": "execute", "started_at": "2024-08-05T21:39:07.003400Z", "completed_at": "2024-08-05T21:39:07.003404Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.007290840148925781, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.recurly_source.not_null_stg_recurly__invoice_subscription_history_invoice_id.0cf4105c8e", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect invoice_id\nfrom \"postgres\".\"recurly_integrations_tests_recurly_dev\".\"stg_recurly__invoice_subscription_history\"\nwhere invoice_id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-08-05T21:39:07.004629Z", "completed_at": "2024-08-05T21:39:07.010577Z"}, {"name": "execute", "started_at": "2024-08-05T21:39:07.010821Z", "completed_at": "2024-08-05T21:39:07.010827Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.0071527957916259766, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.recurly_source.not_null_stg_recurly__invoice_subscription_history_subscription_id.ded699c67d", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect subscription_id\nfrom \"postgres\".\"recurly_integrations_tests_recurly_dev\".\"stg_recurly__invoice_subscription_history\"\nwhere subscription_id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-08-05T21:39:07.007544Z", "completed_at": "2024-08-05T21:39:07.011177Z"}, {"name": "execute", "started_at": "2024-08-05T21:39:07.011714Z", "completed_at": "2024-08-05T21:39:07.011718Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.007360935211181641, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.recurly_source.dbt_utils_unique_combination_of_columns_stg_recurly__plan_currency_history_plan_id__plan_updated_at__currency.e0bd5adf3b", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        plan_id, plan_updated_at, currency\n    from \"postgres\".\"recurly_integrations_tests_recurly_dev\".\"stg_recurly__plan_currency_history\"\n    group by plan_id, plan_updated_at, currency\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-08-05T21:39:07.012997Z", "completed_at": "2024-08-05T21:39:07.019175Z"}, {"name": "execute", "started_at": "2024-08-05T21:39:07.019408Z", "completed_at": "2024-08-05T21:39:07.019413Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.00739288330078125, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.recurly_source.not_null_stg_recurly__plan_currency_history_plan_id.9fc7106759", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect plan_id\nfrom \"postgres\".\"recurly_integrations_tests_recurly_dev\".\"stg_recurly__plan_currency_history\"\nwhere plan_id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-08-05T21:39:07.016618Z", "completed_at": "2024-08-05T21:39:07.019730Z"}, {"name": "execute", "started_at": "2024-08-05T21:39:07.020187Z", "completed_at": "2024-08-05T21:39:07.020191Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.007473945617675781, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.recurly_source.dbt_utils_unique_combination_of_columns_stg_recurly__plan_history_plan_id__updated_at.266aec2c6a", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        plan_id, updated_at\n    from \"postgres\".\"recurly_integrations_tests_recurly_dev\".\"stg_recurly__plan_history\"\n    group by plan_id, updated_at\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-08-05T21:39:07.021398Z", "completed_at": "2024-08-05T21:39:07.026712Z"}, {"name": "execute", "started_at": "2024-08-05T21:39:07.027201Z", "completed_at": "2024-08-05T21:39:07.027207Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.0067408084869384766, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.recurly_source.not_null_stg_recurly__plan_history_plan_id.78effe7ba4", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect plan_id\nfrom \"postgres\".\"recurly_integrations_tests_recurly_dev\".\"stg_recurly__plan_history\"\nwhere plan_id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-08-05T21:39:07.024107Z", "completed_at": "2024-08-05T21:39:07.028056Z"}, {"name": "execute", "started_at": "2024-08-05T21:39:07.028505Z", "completed_at": "2024-08-05T21:39:07.028509Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.007385969161987305, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.recurly_source.dbt_utils_unique_combination_of_columns_stg_recurly__subscription_history_subscription_id__updated_at.bcb59ad4a4", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        subscription_id, updated_at\n    from \"postgres\".\"recurly_integrations_tests_recurly_dev\".\"stg_recurly__subscription_history\"\n    group by subscription_id, updated_at\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-08-05T21:39:07.028964Z", "completed_at": "2024-08-05T21:39:07.036310Z"}, {"name": "execute", "started_at": "2024-08-05T21:39:07.040962Z", "completed_at": "2024-08-05T21:39:07.040971Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.013206958770751953, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.recurly_source.not_null_stg_recurly__subscription_history_subscription_id.57c06c08bb", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect subscription_id\nfrom \"postgres\".\"recurly_integrations_tests_recurly_dev\".\"stg_recurly__subscription_history\"\nwhere subscription_id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-08-05T21:39:07.036576Z", "completed_at": "2024-08-05T21:39:07.042824Z"}, {"name": "execute", "started_at": "2024-08-05T21:39:07.043382Z", "completed_at": "2024-08-05T21:39:07.043394Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.01073312759399414, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.recurly_source.dbt_utils_unique_combination_of_columns_stg_recurly__subscription_change_history_subscription_change_id__updated_at.bb2112fd18", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        subscription_change_id, updated_at\n    from \"postgres\".\"recurly_integrations_tests_recurly_dev\".\"stg_recurly__subscription_change_history\"\n    group by subscription_change_id, updated_at\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-08-05T21:39:07.043820Z", "completed_at": "2024-08-05T21:39:07.048347Z"}, {"name": "execute", "started_at": "2024-08-05T21:39:07.051540Z", "completed_at": "2024-08-05T21:39:07.051551Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.009123086929321289, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.recurly_source.not_null_stg_recurly__subscription_change_history_subscription_change_id.d2bd0b27a6", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect subscription_change_id\nfrom \"postgres\".\"recurly_integrations_tests_recurly_dev\".\"stg_recurly__subscription_change_history\"\nwhere subscription_change_id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-08-05T21:39:07.048574Z", "completed_at": "2024-08-05T21:39:07.053213Z"}, {"name": "execute", "started_at": "2024-08-05T21:39:07.056116Z", "completed_at": "2024-08-05T21:39:07.056122Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.008474111557006836, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.recurly_source.dbt_utils_unique_combination_of_columns_stg_recurly__subscription_add_on_history_subscription_add_on_id__updated_at.a589f1354f", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        subscription_add_on_id, updated_at\n    from \"postgres\".\"recurly_integrations_tests_recurly_dev\".\"stg_recurly__subscription_add_on_history\"\n    group by subscription_add_on_id, updated_at\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-08-05T21:39:07.053431Z", "completed_at": "2024-08-05T21:39:07.056804Z"}, {"name": "execute", "started_at": "2024-08-05T21:39:07.057064Z", "completed_at": "2024-08-05T21:39:07.057070Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.004655122756958008, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.recurly_source.not_null_stg_recurly__subscription_add_on_history_subscription_add_on_id.17162cbb6e", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect subscription_add_on_id\nfrom \"postgres\".\"recurly_integrations_tests_recurly_dev\".\"stg_recurly__subscription_add_on_history\"\nwhere subscription_add_on_id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-08-05T21:39:06.792256Z", "completed_at": "2024-08-05T21:39:07.041374Z"}, {"name": "execute", "started_at": "2024-08-05T21:39:07.042217Z", "completed_at": "2024-08-05T21:39:07.042225Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.27432894706726074, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.recurly_source.stg_recurly__transaction_subscription", "compiled": true, "compiled_code": "with base as (\n\n    select *\n    from \"postgres\".\"recurly_integrations_tests_recurly_dev\".\"stg_recurly__transaction_subscription_tmp\"\n),\n\nfields as (\n\n    select \n        \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    \n    \n    transaction_id\n    \n as \n    \n    transaction_id\n    \n, \n    \n    \n    subscription_id\n    \n as \n    \n    subscription_id\n    \n\n\n\n    from base\n\n),\n\nfinal as (\n\n    select\n        transaction_id, \n        subscription_id\n    from fields\n)\n\nselect *\nfrom final", "relation_name": "\"postgres\".\"recurly_integrations_tests_recurly_dev\".\"stg_recurly__transaction_subscription\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-08-05T21:39:07.069130Z", "completed_at": "2024-08-05T21:39:07.081701Z"}, {"name": "execute", "started_at": "2024-08-05T21:39:07.082754Z", "completed_at": "2024-08-05T21:39:07.082762Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.015486955642700195, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.recurly_source.dbt_utils_unique_combination_of_columns_stg_recurly__transaction_subscription_transaction_id__subscription_id.f396a8e771", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        transaction_id, subscription_id\n    from \"postgres\".\"recurly_integrations_tests_recurly_dev\".\"stg_recurly__transaction_subscription\"\n    group by transaction_id, subscription_id\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-08-05T21:39:07.072644Z", "completed_at": "2024-08-05T21:39:07.082302Z"}, {"name": "execute", "started_at": "2024-08-05T21:39:07.083271Z", "completed_at": "2024-08-05T21:39:07.083275Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.015603303909301758, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.recurly_source.not_null_stg_recurly__transaction_subscription_subscription_id.0f7cd7e702", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect subscription_id\nfrom \"postgres\".\"recurly_integrations_tests_recurly_dev\".\"stg_recurly__transaction_subscription\"\nwhere subscription_id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-08-05T21:39:07.077013Z", "completed_at": "2024-08-05T21:39:07.082539Z"}, {"name": "execute", "started_at": "2024-08-05T21:39:07.083619Z", "completed_at": "2024-08-05T21:39:07.083622Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.015630722045898438, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.recurly_source.not_null_stg_recurly__transaction_subscription_transaction_id.99c6baecfe", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect transaction_id\nfrom \"postgres\".\"recurly_integrations_tests_recurly_dev\".\"stg_recurly__transaction_subscription\"\nwhere transaction_id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-08-05T21:39:06.850334Z", "completed_at": "2024-08-05T21:39:07.134277Z"}, {"name": "execute", "started_at": "2024-08-05T21:39:07.134515Z", "completed_at": "2024-08-05T21:39:07.134522Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.31073737144470215, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.recurly_source.stg_recurly__transaction", "compiled": true, "compiled_code": "with base as (\n\n    select *\n    from \"postgres\".\"recurly_integrations_tests_recurly_dev\".\"stg_recurly__transaction_tmp\"\n),\n\nfields as (\n\n    select\n        \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    \n    \n    id\n    \n as \n    \n    id\n    \n, \n    \n    \n    created_at\n    \n as \n    \n    created_at\n    \n, \n    \n    \n    voided_at\n    \n as \n    \n    voided_at\n    \n, \n    \n    \n    collected_at\n    \n as \n    \n    collected_at\n    \n, \n    \n    \n    original_transaction_id\n    \n as \n    \n    original_transaction_id\n    \n, \n    \n    \n    account_id\n    \n as \n    \n    account_id\n    \n, \n    \n    \n    invoice_id\n    \n as \n    \n    invoice_id\n    \n, \n    \n    \n    voided_by_invoice_id\n    \n as \n    \n    voided_by_invoice_id\n    \n, \n    \n    \n    uuid\n    \n as \n    \n    uuid\n    \n, \n    \n    \n    type\n    \n as \n    \n    type\n    \n, \n    \n    \n    origin\n    \n as \n    \n    origin\n    \n, \n    \n    \n    currency\n    \n as \n    \n    currency\n    \n, \n    \n    \n    amount\n    \n as \n    \n    amount\n    \n, \n    \n    \n    status\n    \n as \n    \n    status\n    \n, \n    \n    \n    success\n    \n as \n    \n    success\n    \n, \n    \n    \n    refunded\n    \n as \n    \n    refunded\n    \n, \n    \n    \n    billing_first_name\n    \n as \n    \n    billing_first_name\n    \n, \n    \n    \n    billing_last_name\n    \n as \n    \n    billing_last_name\n    \n, \n    \n    \n    billing_phone\n    \n as \n    \n    billing_phone\n    \n, \n    \n    \n    billing_street_1\n    \n as \n    \n    billing_street_1\n    \n, \n    \n    \n    billing_street_2\n    \n as \n    \n    billing_street_2\n    \n, \n    \n    \n    billing_city\n    \n as \n    \n    billing_city\n    \n, \n    \n    \n    billing_region\n    \n as \n    \n    billing_region\n    \n, \n    \n    \n    billing_postal_code\n    \n as \n    \n    billing_postal_code\n    \n, \n    \n    \n    billing_country\n    \n as \n    \n    billing_country\n    \n, \n    \n    \n    collection_method\n    \n as \n    \n    collection_method\n    \n, \n    \n    \n    payment_method_object\n    \n as \n    \n    payment_method_object\n    \n, \n    \n    \n    status_code\n    \n as \n    \n    status_code\n    \n, \n    \n    \n    status_message\n    \n as \n    \n    status_message\n    \n, \n    \n    \n    customer_message\n    \n as \n    \n    customer_message\n    \n, \n    \n    \n    customer_message_locale\n    \n as \n    \n    customer_message_locale\n    \n, \n    \n    \n    gateway_message\n    \n as \n    \n    gateway_message\n    \n, \n    \n    \n    gateway_reference\n    \n as \n    \n    gateway_reference\n    \n, \n    \n    \n    gateway_approval_code\n    \n as \n    \n    gateway_approval_code\n    \n, \n    \n    \n    gateway_response_code\n    \n as \n    \n    gateway_response_code\n    \n, \n    \n    \n    gateway_response_time\n    \n as \n    \n    gateway_response_time\n    \n, \n    \n    \n    payment_gateway_id\n    \n as \n    \n    payment_gateway_id\n    \n, \n    cast(null as TEXT) as \n    \n    payment_gateway_type\n    \n , \n    \n    \n    payment_gateway_name\n    \n as \n    \n    payment_gateway_name\n    \n, \n    \n    \n    gateway_response_values\n    \n as \n    \n    gateway_response_values\n    \n\n\n\n    from base\n),\n\nfinal as (\n\n    select  \n        id as transaction_id,\n        cast(created_at as timestamp) as created_at,\n        account_id,\n        cast(amount as float) as amount,\n        billing_city,\n        billing_country,\n        billing_first_name,\n        billing_last_name,\n        billing_phone,\n        billing_postal_code,\n        billing_region,\n        billing_street_1,\n        billing_street_2,\n        cast(collected_at as timestamp) as collected_at,\n        collection_method,\n        currency,\n        customer_message,\n        customer_message_locale,\n        gateway_approval_code,\n        gateway_message,\n        gateway_reference,\n        gateway_response_code,\n        gateway_response_time,\n        gateway_response_values,\n        invoice_id,\n        refunded as is_refunded,\n        success as is_successful,\n        row_number() over (partition by id order by created_at desc) = 1 as is_most_recent_record,\n        origin,\n        original_transaction_id, \n        payment_gateway_id,\n        payment_gateway_name,\n        payment_gateway_type,\n        payment_method_object,\n        status,\n        status_code,\n        status_message,\n        TYPE as type,\n        uuid,\n        cast(voided_at as timestamp) as voided_at,\n        voided_by_invoice_id\n    from fields\n)\n\nselect *\nfrom final", "relation_name": "\"postgres\".\"recurly_integrations_tests_recurly_dev\".\"stg_recurly__transaction\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-08-05T21:39:07.163195Z", "completed_at": "2024-08-05T21:39:07.183560Z"}, {"name": "execute", "started_at": "2024-08-05T21:39:07.183935Z", "completed_at": "2024-08-05T21:39:07.183944Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.02269887924194336, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.recurly.recurly__balance_transactions", "compiled": true, "compiled_code": "with line_item_history as (\n\n    select * \n    from \"postgres\".\"recurly_integrations_tests_recurly_dev\".\"stg_recurly__line_item_history\"\n    where is_most_recent_record\n),\n\ninvoice_history as (\n\n    select *\n    from \"postgres\".\"recurly_integrations_tests_recurly_dev\".\"stg_recurly__invoice_history\"\n    where is_most_recent_record\n),\n\ntransaction_history as (\n\n    select * \n    from \"postgres\".\"recurly_integrations_tests_recurly_dev\".\"stg_recurly__transaction\"\n    where is_most_recent_record\n),\n\n\nfinal as (\n\n    select \n        line_item_history.line_item_id as balance_transaction_id,\n        line_item_history.created_at,\n        line_item_history.updated_at,\n        line_item_history.account_id,\n        line_item_history.invoice_id,\n        line_item_history.invoice_number,\n        line_item_history.type,\n        line_item_history.state,\n        line_item_history.origin,\n        line_item_history.product_code,\n        line_item_history.discount,\n        line_item_history.tax,\n        line_item_history.description,\n        line_item_history.plan_code,\n        line_item_history.add_on_code,\n        line_item_history.has_refund,\n        line_item_history.refunded_quantity,\n        line_item_history.currency,\n        line_item_history.amount,\n        line_item_history.credit_applied, \n        line_item_history.quantity,\n        line_item_history.unit_amount,\n        line_item_history.subtotal,\n        line_item_history.started_at,\n        line_item_history.ended_at,    \n        line_item_history.original_line_item_invoice_id,\n        line_item_history.previous_line_item_id,\n        invoice_history.state as invoice_state,\n        invoice_history.origin as invoice_origin,\n        invoice_history.type as invoice_type,\n        invoice_history.created_at as invoice_created_at,\n        invoice_history.due_at as invoice_due_at,\n        invoice_history.closed_at as invoice_closed_at, \n        transaction_history.transaction_id,\n        transaction_history.created_at as transaction_created_at,\n        transaction_history.type as transaction_type,\n        transaction_history.origin as transaction_origin,\n        transaction_history.status as transaction_status, \n        transaction_history.billing_country as transaction_billing_country, \n        transaction_history.status_message as transaction_status_message,\n        transaction_history.payment_method_object as transaction_payment_method_object\n    from line_item_history \n    left join invoice_history\n        on line_item_history.invoice_id = invoice_history.invoice_id\n    left join transaction_history \n        on invoice_history.invoice_id = transaction_history.invoice_id\n)\n\nselect * \nfrom final", "relation_name": "\"postgres\".\"recurly_integrations_tests_recurly_dev\".\"recurly__balance_transactions\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-08-05T21:39:07.166827Z", "completed_at": "2024-08-05T21:39:07.184713Z"}, {"name": "execute", "started_at": "2024-08-05T21:39:07.185041Z", "completed_at": "2024-08-05T21:39:07.185049Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.023489952087402344, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.recurly.recurly__line_item_enhanced", "compiled": true, "compiled_code": "with line_items as (\n\n    select * \n    from \"postgres\".\"recurly_integrations_tests_recurly_dev\".\"stg_recurly__line_item_history\"\n    where is_most_recent_record\n),\n\ninvoices as (\n\n    select *\n    from \"postgres\".\"recurly_integrations_tests_recurly_dev\".\"stg_recurly__invoice_history\"\n    where is_most_recent_record\n),\n\ntransactions as (\n\n    select * \n    from \"postgres\".\"recurly_integrations_tests_recurly_dev\".\"stg_recurly__transaction\"\n    where is_most_recent_record\n        and status = 'success'\n),\n\nsubscription_history as (\n\n    select \n        *,\n        row_number() over (partition by subscription_id, current_period_started_at, current_period_ended_at order by updated_at desc) = 1 as is_latest_period\n    from \"postgres\".\"recurly_integrations_tests_recurly_dev\".\"stg_recurly__subscription_history\"\n),\n\nplans as (\n\n    select * \n    from \"postgres\".\"recurly_integrations_tests_recurly_dev\".\"stg_recurly__plan_history\"\n    where is_most_recent_record\n),\n\naccounts as (\n\n    select * \n    from \"postgres\".\"recurly_integrations_tests_recurly_dev\".\"stg_recurly__account_history\"\n    where is_most_recent_record\n),\n\nsubscriptions as (\n\n    select \n        *\n    from subscription_history\n    where is_latest_period\n),\n\nenhanced as (\n\n    select\n        line_items.invoice_id as header_id,\n        line_items.line_item_id,\n        cast(row_number() over (partition by line_items.invoice_id order by line_items.created_at) as integer) as line_item_index,\n        line_items.created_at,\n        line_items.currency,\n        line_items.state as line_item_status,\n        line_items.type as billing_type,\n        transactions.type as transaction_type,\n        invoices.state as header_status,\n        line_items.plan_id as product_id,\n        plans.name as product_name,\n        line_items.origin as product_type,\n        line_items.description as product_category,\n        line_items.quantity,\n        line_items.unit_amount,\n        line_items.discount as discount_amount,\n        line_items.tax as tax_amount,\n        line_items.amount as total_amount,\n        transactions.transaction_id as payment_id,\n        cast(null as TEXT) as payment_method_id,\n        transactions.payment_method_object as payment_method,\n        transactions.collected_at as payment_at,\n        cast(null as numeric(28,6)) as fee_amount,\n        invoices.refundable_amount as refund_amount,\n        transactions.is_refunded,\n        transactions.created_at as refunded_at,\n        line_items.subscription_id,\n        plans.name as subscription_plan,\n        subscriptions.current_period_started_at as subscription_period_started_at,\n        subscriptions.current_period_ended_at as subscription_period_ended_at,\n        subscriptions.state as subscription_status,\n        line_items.account_id as customer_id,\n        accounts.created_at as customer_created_at,\n        'account' as customer_level,\n        accounts.first_name || '' || accounts.last_name as customer_name,\n        accounts.company as customer_company,\n        accounts.email as customer_email,\n        accounts.account_city as customer_city,\n        accounts.account_country as customer_country\n    from line_items\n    left join invoices\n        on invoices.invoice_id = line_items.invoice_id\n    left join transactions\n        on transactions.invoice_id = invoices.invoice_id\n    left join accounts\n        on accounts.account_id = line_items.account_id\n    left join subscriptions\n        on subscriptions.subscription_id = line_items.subscription_id\n            and subscriptions.current_period_started_at <= line_items.created_at\n            and subscriptions.current_period_ended_at > line_items.created_at\n    left join plans\n        on cast(plans.plan_id as TEXT) = cast(line_items.plan_id as TEXT)\n),\n\nfinal as (\n\n    select \n        header_id,\n        line_item_id,\n        line_item_index,\n        'line_item' as record_type,\n        created_at,\n        currency,\n        header_status,\n        product_id,\n        product_name,\n        transaction_type,\n        billing_type,\n        product_type,\n        quantity,\n        unit_amount,\n        discount_amount,\n        tax_amount,\n        total_amount,\n        payment_id,\n        cast(null as TEXT) as payment_method_id,\n        payment_method,\n        payment_at,\n        fee_amount,\n        cast(null as float) as refund_amount,\n        subscription_id,\n        subscription_plan,\n        subscription_period_started_at,\n        subscription_period_ended_at,\n        subscription_status,\n        customer_id,\n        customer_created_at,\n        customer_level,\n        customer_name,\n        customer_company,\n        customer_email,\n        customer_city,\n        customer_country\n    from enhanced\n\n    union all\n\n    -- Refund information is only reliable at the invoice header. Therefore the below operation creates a new line to track the refund values.\n    select\n        header_id,\n        line_item_id,\n        cast(0 as integer) as line_item_index,\n        'header' as record_type,\n        created_at,\n        currency,\n        header_status,\n        product_id,\n        product_name,\n        transaction_type,\n        billing_type,\n        cast(null as TEXT) as product_type,\n        cast(null as float) as quantity,\n        cast(null as float) as unit_amount,\n        cast(null as float) as discount_amount,\n        cast(null as float) as tax_amount,\n        cast(null as float) as total_amount,\n        payment_id,\n        cast(null as TEXT) as payment_method_id,\n        payment_method,\n        payment_at,\n        fee_amount,\n        refund_amount,\n        subscription_id,\n        subscription_plan,\n        subscription_period_started_at,\n        subscription_period_ended_at,\n        subscription_status,\n        customer_id,\n        customer_created_at,\n        customer_level,\n        customer_name,\n        customer_company,\n        customer_email,\n        customer_city,\n        customer_country\n    from enhanced\n    where is_refunded \n        and line_item_index = 1\n)\n\nselect *\nfrom final", "relation_name": "\"postgres\".\"recurly_integrations_tests_recurly_dev\".\"recurly__line_item_enhanced\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-08-05T21:39:07.180768Z", "completed_at": "2024-08-05T21:39:07.185794Z"}, {"name": "execute", "started_at": "2024-08-05T21:39:07.186870Z", "completed_at": "2024-08-05T21:39:07.186875Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.024840116500854492, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.recurly_source.not_null_stg_recurly__transaction_transaction_id.5f44527c3c", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect transaction_id\nfrom \"postgres\".\"recurly_integrations_tests_recurly_dev\".\"stg_recurly__transaction\"\nwhere transaction_id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-08-05T21:39:07.177665Z", "completed_at": "2024-08-05T21:39:07.186009Z"}, {"name": "execute", "started_at": "2024-08-05T21:39:07.187262Z", "completed_at": "2024-08-05T21:39:07.187267Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.025468826293945312, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.recurly_source.dbt_utils_unique_combination_of_columns_stg_recurly__transaction_transaction_id__created_at.769d67c8b8", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        transaction_id, created_at\n    from \"postgres\".\"recurly_integrations_tests_recurly_dev\".\"stg_recurly__transaction\"\n    group by transaction_id, created_at\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-08-05T21:39:07.195273Z", "completed_at": "2024-08-05T21:39:07.209774Z"}, {"name": "execute", "started_at": "2024-08-05T21:39:07.210312Z", "completed_at": "2024-08-05T21:39:07.210320Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.022758007049560547, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.recurly.recurly__monthly_recurring_revenue", "compiled": true, "compiled_code": "with account_history as (\n\n    select * \n    from \"postgres\".\"recurly_integrations_tests_recurly_dev\".\"stg_recurly__account_history\"\n    where is_most_recent_record\n),\n\nrecurly__balance_transactions as (\n\n    select * \n    from \"postgres\".\"recurly_integrations_tests_recurly_dev\".\"recurly__balance_transactions\"\n),\n\nmrr_balance_transactions as (\n\n    select \n        account_id,\n        amount,\n        date_trunc('month', created_at) as account_month \n    from recurly__balance_transactions\n    where lower(type) = 'charge' \n        and started_at is not null\n        and ended_at is not null\n), \n\nmrr_by_account as (\n\n    select \n        account_id,\n        account_month,\n        md5(cast(coalesce(cast(account_id as TEXT), '_dbt_utils_surrogate_key_null_') || '-' || coalesce(cast(account_month as TEXT), '_dbt_utils_surrogate_key_null_') as TEXT)) as account_monthly_id,\n        row_number() over (partition by account_id order by account_month) as account_month_number,\n        sum(amount) as current_month_mrr\n    from mrr_balance_transactions\n    group by 1,2,3\n\n),\n\ncurrent_vs_previous_mrr as (\n    \n    select \n        account_monthly_id,\n        account_id,\n        account_month,\n        account_month_number,\n        current_month_mrr,\n        lag(current_month_mrr) over (partition by account_id order by account_month) as previous_month_mrr\n    from mrr_by_account\n),\n\nmrr_type_enhanced as (\n\n    select \n        *,\n        case when current_month_mrr > previous_month_mrr then 'expansion'\n            when current_month_mrr < previous_month_mrr then 'contraction'\n            when current_month_mrr = previous_month_mrr then 'unchanged'\n            when previous_month_mrr is null then 'new'\n            when (current_month_mrr = 0.0 or current_month_mrr is null)\n                and (previous_month_mrr != 0.0)\n                then 'churned'\n            when (previous_month_mrr = 0.0 and current_month_mrr > 0.0 \n                and account_month_number >= 3) \n                then 'reactivation'\n            end as mrr_type\n    from current_vs_previous_mrr\n),\n\nfinal as (\n\n    select \n        mrr_type_enhanced.*,\n        account_history.code as account_code,\n        account_history.created_at as account_created_at,\n        account_history.email as account_email,\n        account_history.first_name as account_first_name,\n        account_history.last_name as account_last_name,\n        account_history.username as account_username\n    from mrr_type_enhanced\n    left join account_history on mrr_type_enhanced.account_id = account_history.account_id\n)\n\nselect * \nfrom final", "relation_name": "\"postgres\".\"recurly_integrations_tests_recurly_dev\".\"recurly__monthly_recurring_revenue\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-08-05T21:39:07.188783Z", "completed_at": "2024-08-05T21:39:07.209992Z"}, {"name": "execute", "started_at": "2024-08-05T21:39:07.210802Z", "completed_at": "2024-08-05T21:39:07.210805Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.024307966232299805, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.recurly.int_recurly__transactions_grouped", "compiled": true, "compiled_code": "with balance_transaction_joined as (\n\n    select * \n    from \"postgres\".\"recurly_integrations_tests_recurly_dev\".\"recurly__balance_transactions\"\n),\n\nfinal as (\n    \n    select  \n        account_id,\n        cast(date_trunc('day', created_at) as date) as date_day,             \n        cast(date_trunc('week', created_at) as date) as date_week, \n        cast(date_trunc('month', created_at) as date) as date_month, \n        cast(date_trunc('year', created_at) as date) as date_year,  \n        count(distinct transaction_id) as daily_transactions,\n        count(distinct invoice_id) as daily_invoices,\n        sum(case when lower(type) = 'charge' \n            then amount\n            else 0 \n            end) as daily_charges,\n        sum(case when lower(type) = 'credit' \n            then amount\n            else 0 \n            end) as daily_credits,\n        sum(amount) as daily_balance,\n        sum(discount) as daily_discounts,\n        sum(tax) as daily_taxes,\n        sum(case when lower(type) = 'charge' \n            then 1\n            else 0 \n            end) as daily_charge_count,\n        sum(case when lower(type) = 'credit' \n            then 1\n            else 0 \n            end) as daily_credit_count\n    from balance_transaction_joined\n    group by 1,2,3,4,5\n) \n\nselect * \nfrom final", "relation_name": "\"postgres\".\"recurly_integrations_tests_recurly_dev\".\"int_recurly__transactions_grouped\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-08-05T21:39:07.206921Z", "completed_at": "2024-08-05T21:39:07.211135Z"}, {"name": "execute", "started_at": "2024-08-05T21:39:07.212233Z", "completed_at": "2024-08-05T21:39:07.212237Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.017246007919311523, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.recurly.not_null_recurly__balance_transactions_balance_transaction_id.63b1820723", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect balance_transaction_id\nfrom \"postgres\".\"recurly_integrations_tests_recurly_dev\".\"recurly__balance_transactions\"\nwhere balance_transaction_id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-08-05T21:39:07.203793Z", "completed_at": "2024-08-05T21:39:07.211348Z"}, {"name": "execute", "started_at": "2024-08-05T21:39:07.212607Z", "completed_at": "2024-08-05T21:39:07.212610Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.018147945404052734, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.recurly.dbt_utils_unique_combination_of_columns_recurly__balance_transactions_balance_transaction_id__transaction_id.837e2ce868", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        balance_transaction_id, transaction_id\n    from \"postgres\".\"recurly_integrations_tests_recurly_dev\".\"recurly__balance_transactions\"\n    group by balance_transaction_id, transaction_id\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-08-05T21:39:07.215097Z", "completed_at": "2024-08-05T21:39:07.231201Z"}, {"name": "execute", "started_at": "2024-08-05T21:39:07.235072Z", "completed_at": "2024-08-05T21:39:07.235082Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.022223234176635742, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.recurly.dbt_utils_unique_combination_of_columns_recurly__line_item_enhanced_header_id__line_item_id.7d90ceea61", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        header_id, line_item_id\n    from \"postgres\".\"recurly_integrations_tests_recurly_dev\".\"recurly__line_item_enhanced\"\n    group by header_id, line_item_id\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-08-05T21:39:07.217949Z", "completed_at": "2024-08-05T21:39:07.234656Z"}, {"name": "execute", "started_at": "2024-08-05T21:39:07.235913Z", "completed_at": "2024-08-05T21:39:07.235919Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.022780895233154297, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.recurly.not_null_recurly__monthly_recurring_revenue_account_monthly_id.3957633afc", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect account_monthly_id\nfrom \"postgres\".\"recurly_integrations_tests_recurly_dev\".\"recurly__monthly_recurring_revenue\"\nwhere account_monthly_id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-08-05T21:39:07.220822Z", "completed_at": "2024-08-05T21:39:07.235709Z"}, {"name": "execute", "started_at": "2024-08-05T21:39:07.236757Z", "completed_at": "2024-08-05T21:39:07.236762Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.022481918334960938, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.recurly.unique_recurly__monthly_recurring_revenue_account_monthly_id.f687206566", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    account_monthly_id as unique_field,\n    count(*) as n_records\n\nfrom \"postgres\".\"recurly_integrations_tests_recurly_dev\".\"recurly__monthly_recurring_revenue\"\nwhere account_monthly_id is not null\ngroup by account_monthly_id\nhaving count(*) > 1\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-08-05T21:39:07.225805Z", "completed_at": "2024-08-05T21:39:07.236485Z"}, {"name": "execute", "started_at": "2024-08-05T21:39:07.237236Z", "completed_at": "2024-08-05T21:39:07.237241Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.02271890640258789, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.recurly.int_recurly__account_cumulatives", "compiled": true, "compiled_code": "with transactions_grouped as (\n\n    select * \n    from \"postgres\".\"recurly_integrations_tests_recurly_dev\".\"int_recurly__transactions_grouped\"\n),\n\nbalance_transaction_joined as (\n\n    select * \n    from \"postgres\".\"recurly_integrations_tests_recurly_dev\".\"recurly__balance_transactions\"\n),\n \naccount_current_month as (\n        \n        select account_id,\n                sum(case when date_trunc('month', date_day) = date_trunc('month', \n    current_timestamp::timestamp\n)\n                        then daily_transactions\n                        else 0 \n                        end) as transactions_this_month,\n                sum(case when date_trunc('month', date_day) = date_trunc('month', \n    current_timestamp::timestamp\n)\n                        then daily_invoices\n                        else 0 \n                        end) as invoices_this_month,\n                sum(case when date_trunc('month', date_day) = date_trunc('month', \n    current_timestamp::timestamp\n)\n                        then daily_balance\n                        else 0 \n                        end) as balance_this_month,\n                sum(case when date_trunc('month', date_day) = date_trunc('month', \n    current_timestamp::timestamp\n)\n                        then daily_charges\n                        else 0 \n                        end) as charges_this_month,\n                sum(case when date_trunc('month', date_day) = date_trunc('month', \n    current_timestamp::timestamp\n)\n                        then daily_credits\n                        else 0 \n                        end) as credits_this_month,\n                sum(case when date_trunc('month', date_day) = date_trunc('month', \n    current_timestamp::timestamp\n)\n                        then daily_discounts\n                        else 0 \n                        end) as discounts_this_month,\n                sum(case when date_trunc('month', date_day) = date_trunc('month', \n    current_timestamp::timestamp\n)\n                        then daily_credits\n                        else 0 \n                        end) as taxes_this_month\n        from transactions_grouped\n        group by 1  \n),\n\n\naccount_min_max as (\n\n    select \n        account_id,\n        min(case when lower(type) = 'charge' \n            then created_at \n            else null end) as first_charge_date,\n        max(case when lower(type) = 'charge' \n            then created_at\n            else null end) as most_recent_charge_date,\n        min(invoice_created_at) as first_invoice_date,\n        max(invoice_created_at) as most_recent_invoice_date,\n        min(transaction_created_at) as first_transaction_date,\n        max(transaction_created_at) as most_recent_transaction_date\n    from balance_transaction_joined\n    group by 1\n),\n\n\naccount_totals as (\n\n    select \n        account_id,\n        sum(daily_transactions) as total_transactions,\n        sum(daily_invoices) as total_invoices,\n        sum(daily_charges) as total_charges,\n        sum(daily_credits) as total_credits,\n        sum(daily_balance) as total_balance,\n        sum(daily_discounts) as total_discounts,\n        sum(daily_taxes) as total_taxes,\n        sum(daily_charge_count) as total_charge_count,\n        sum(daily_credit_count) as total_credit_count\n    from transactions_grouped\n    group by 1\n),\n\nfinal as (\n\n    select distinct\n        account_totals.*,\n        account_current_month.transactions_this_month,\n        account_current_month.invoices_this_month,\n        account_current_month.balance_this_month,\n        account_current_month.charges_this_month,\n        account_current_month.credits_this_month,\n        account_current_month.discounts_this_month,\n        account_current_month.taxes_this_month,\n        account_min_max.first_charge_date,\n        account_min_max.most_recent_charge_date,\n        account_min_max.first_invoice_date,\n        account_min_max.most_recent_invoice_date,\n        account_min_max.first_transaction_date,\n        account_min_max.most_recent_transaction_date\n    from account_totals\n    left join account_current_month \n        on account_totals.account_id = account_current_month.account_id\n    left join account_min_max\n        on account_totals.account_id = account_min_max.account_id\n)\n\nselect *\nfrom final", "relation_name": "\"postgres\".\"recurly_integrations_tests_recurly_dev\".\"int_recurly__account_cumulatives\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-08-05T21:39:07.238711Z", "completed_at": "2024-08-05T21:39:07.244348Z"}, {"name": "execute", "started_at": "2024-08-05T21:39:07.244600Z", "completed_at": "2024-08-05T21:39:07.244612Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.006536960601806641, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.recurly.recurly__account_overview", "compiled": true, "compiled_code": "with account_history as (\n\n    select * \n    from \"postgres\".\"recurly_integrations_tests_recurly_dev\".\"stg_recurly__account_history\"\n    where is_most_recent_record\n),\n\nbalance_transaction_joined as (\n\n    select * \n    from \"postgres\".\"recurly_integrations_tests_recurly_dev\".\"recurly__balance_transactions\"\n),\n\naccount_cumulatives as (\n\n    select * \n    from \"postgres\".\"recurly_integrations_tests_recurly_dev\".\"int_recurly__account_cumulatives\"\n),\n\naccount_next_invoice as (\n\n    select \n        account_id, \n        min(invoice_due_at) as next_invoice_due_at\n    from balance_transaction_joined\n    where invoice_due_at > date_trunc('day', \n    current_timestamp::timestamp\n)\n    group by 1  \n),\n\nfinal as ( \n\n    select \n        account_history.account_id,\n        account_history.created_at as account_created_at,\n        account_history.account_city,\n        account_history.code as account_code,       \n        account_history.company as account_company,\n        account_history.account_country,\n        account_history.email as account_email,\n        account_history.first_name as account_first_name,\n        account_history.is_tax_exempt as account_is_tax_exempt,\n        account_history.last_name as account_last_name,\n        account_history.account_postal_code,\n        account_history.account_region,\n        account_history.state as account_state,\n        account_history.username as account_username\n\n        \n\n\n\n,\n\n        coalesce(account_cumulatives.total_transactions, 0) as total_transactions,\n        coalesce(account_cumulatives.total_invoices, 0) as total_invoices,\n        coalesce(account_cumulatives.total_charges, 0) as total_charges,\n        coalesce(account_cumulatives.total_credits, 0) as total_credits,\n        coalesce(account_cumulatives.total_balance, 0) as total_balance,\n        coalesce(account_cumulatives.total_discounts, 0) as total_discounts,\n        coalesce(account_cumulatives.total_taxes, 0) as total_taxes,\n        coalesce(account_cumulatives.total_charge_count, 0) as total_charge_count,\n        coalesce(account_cumulatives.total_credit_count, 0) as total_credit_count,\n        coalesce(account_cumulatives.transactions_this_month, 0) as transactions_this_month,\n        coalesce(account_cumulatives.invoices_this_month, 0) as invoices_this_month,\n        coalesce(account_cumulatives.charges_this_month, 0) as charges_this_month,\n        coalesce(account_cumulatives.credits_this_month, 0) as credits_this_month,\n        coalesce(account_cumulatives.balance_this_month, 0) as balance_this_month,\n        coalesce(account_cumulatives.discounts_this_month, 0) as discounts_this_month,\n        coalesce(account_cumulatives.taxes_this_month, 0) as taxes_this_month,\n        account_cumulatives.first_charge_date,\n        account_cumulatives.most_recent_charge_date,\n        account_cumulatives.first_invoice_date,\n        account_cumulatives.most_recent_invoice_date,\n        account_next_invoice.next_invoice_due_at,\n        account_cumulatives.first_transaction_date,\n        account_cumulatives.most_recent_transaction_date\n\n    from account_history\n    left join account_cumulatives \n        on account_history.account_id = account_cumulatives.account_id\n    left join account_next_invoice\n        on account_cumulatives.account_id = account_next_invoice.account_id\n)\n\nselect * \nfrom final", "relation_name": "\"postgres\".\"recurly_integrations_tests_recurly_dev\".\"recurly__account_overview\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-08-05T21:39:07.266587Z", "completed_at": "2024-08-05T21:39:07.272701Z"}, {"name": "execute", "started_at": "2024-08-05T21:39:07.273501Z", "completed_at": "2024-08-05T21:39:07.273509Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.026462793350219727, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.recurly.not_null_recurly__account_overview_account_id.55789d9c23", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect account_id\nfrom \"postgres\".\"recurly_integrations_tests_recurly_dev\".\"recurly__account_overview\"\nwhere account_id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-08-05T21:39:07.257792Z", "completed_at": "2024-08-05T21:39:07.273032Z"}, {"name": "execute", "started_at": "2024-08-05T21:39:07.273923Z", "completed_at": "2024-08-05T21:39:07.273927Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.027198076248168945, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.recurly.recurly__subscription_overview", "compiled": true, "compiled_code": "with subscription_history as (\n\n    select * \n    from \"postgres\".\"recurly_integrations_tests_recurly_dev\".\"stg_recurly__subscription_history\"\n    where is_most_recent_record\n),\n\nplan_history as (\n\n    select * \n    from \"postgres\".\"recurly_integrations_tests_recurly_dev\".\"stg_recurly__plan_history\"\n    where is_most_recent_record\n),\n\nsubscription_enhanced as (\n\n    select \n        *,\n        coalesce(canceled_at, current_period_ended_at) as subscription_end_date,\n        row_number() over (partition by subscription_id order by current_period_started_at) - 1 as subscription_period\n        from subscription_history\n),\n\naccount_overview as (\n\n    select * \n    from \"postgres\".\"recurly_integrations_tests_recurly_dev\".\"recurly__account_overview\"\n),\n\nplan_enhanced as (\n\n    select \n        *, \n        case when lower(interval_unit) = 'months' then interval_length * 30\n            when lower(interval_unit) = 'weeks' then interval_length * 7\n            else interval_length \n            end as interval_days\n    from plan_history\n),\n\nfinal as (\n\n    select \n        subscription_enhanced.subscription_id,\n        subscription_enhanced.updated_at,\n        md5(cast(coalesce(cast(subscription_enhanced.subscription_id as TEXT), '_dbt_utils_surrogate_key_null_') || '-' || coalesce(cast(subscription_enhanced.updated_at as TEXT), '_dbt_utils_surrogate_key_null_') as TEXT)) as subscription_key,\n        subscription_enhanced.activated_at,\n        subscription_enhanced.add_ons_total, \n        subscription_enhanced.canceled_at,\n        subscription_enhanced.current_period_ended_at,\n        subscription_enhanced.current_period_started_at,\n        subscription_enhanced.expiration_reason, \n        subscription_enhanced.expires_at,\n        subscription_enhanced.has_auto_renew,\n        subscription_enhanced.subscription_period,  \n        subscription_enhanced.state as subscription_state,\n        subscription_enhanced.subscription_end_date,\n        \n        ((subscription_enhanced.subscription_end_date)::date - (subscription_enhanced.current_period_started_at)::date)\n     as subscription_interval_days,\n        subscription_enhanced.subtotal, \n        subscription_enhanced.trial_ends_at,\n        subscription_enhanced.trial_started_at,\n        \n        ((subscription_enhanced.trial_ends_at)::date - (subscription_enhanced.trial_started_at)::date)\n     as trial_interval_days,\n        subscription_enhanced.unit_amount\n\n        \n\n\n\n,\n\n        account_overview.account_id as account_id,\n        account_overview.account_created_at,\n        account_overview.account_email,\n        account_overview.account_first_name, \n        account_overview.account_last_name, \n        account_overview.account_state as account_state,\n        plan_enhanced.code as plan_code,\n        plan_enhanced.created_at as plan_created_at,\n        plan_enhanced.deleted_at as plan_deleted_at,\n        plan_enhanced.interval_days as plan_interval_days,\n        plan_enhanced.is_tax_exempt as plan_is_tax_exempt,\n        plan_enhanced.name as plan_name,\n        plan_enhanced.state as plan_state,\n        plan_enhanced.total_billing_cycles as plan_total_billing_cycles\n    from subscription_enhanced\n    left join account_overview\n        on subscription_enhanced.account_id = account_overview.account_id\n    left join plan_enhanced\n        on subscription_enhanced.plan_id = plan_enhanced.plan_id\n)\n\nselect * \nfrom final", "relation_name": "\"postgres\".\"recurly_integrations_tests_recurly_dev\".\"recurly__subscription_overview\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-08-05T21:39:07.269543Z", "completed_at": "2024-08-05T21:39:07.273299Z"}, {"name": "execute", "started_at": "2024-08-05T21:39:07.274272Z", "completed_at": "2024-08-05T21:39:07.274276Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.026638031005859375, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.recurly.unique_recurly__account_overview_account_id.ab3c32728d", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    account_id as unique_field,\n    count(*) as n_records\n\nfrom \"postgres\".\"recurly_integrations_tests_recurly_dev\".\"recurly__account_overview\"\nwhere account_id is not null\ngroup by account_id\nhaving count(*) > 1\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-08-05T21:39:07.276221Z", "completed_at": "2024-08-05T21:39:07.282436Z"}, {"name": "execute", "started_at": "2024-08-05T21:39:07.282710Z", "completed_at": "2024-08-05T21:39:07.282716Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.007440090179443359, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.recurly.recurly__churn_analysis", "compiled": true, "compiled_code": "with subscription_overview as (\n\n    select *\n    from \"postgres\".\"recurly_integrations_tests_recurly_dev\".\"recurly__subscription_overview\"\n),\n\nsubscription_churn_reason as (\n\n    select \n        subscription_id,\n        activated_at,\n        account_id,\n        account_state,\n        canceled_at,\n        current_period_ended_at,\n        current_period_started_at,\n        expires_at,\n        expiration_reason,\n        has_auto_renew,\n        plan_name,\n        plan_state,\n        subscription_end_date, \n        subscription_interval_days,\n        subscription_period,\n        subscription_state,\n        subtotal,\n        unit_amount,\n        case when expires_at is null then null \n            when account_state != 'active' then 'account closed'\n            when lower(expiration_reason) = 'canceled' then 'canceled'\n            when lower(expiration_reason) = 'nonpayment_gift' then 'gift ended'\n            when lower(expiration_reason) = 'nonpayment' then 'non-payment'\n            when lower(expiration_reason) = 'non renewing' then 'non-renewing'\n            when lower(expiration_reason) = 'tax_location_invalid' then 'tax location invalid' \n            when lower(expiration_reason) = 'nonpayment_trial' then 'trial ended'\n            else null \n        end as churn_reason\n    from subscription_overview\n),\n\n\nfinal as\n(\n    select \n        *,\n        case when churn_reason is null then null\n            when churn_reason in ('non-payment', 'tax location invalid') then 'involuntary'\n            else 'voluntary'\n            end as churn_reason_type\n    from subscription_churn_reason\n)\n\nselect * \nfrom final", "relation_name": "\"postgres\".\"recurly_integrations_tests_recurly_dev\".\"recurly__churn_analysis\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-08-05T21:39:07.278425Z", "completed_at": "2024-08-05T21:39:07.283065Z"}, {"name": "execute", "started_at": "2024-08-05T21:39:07.283507Z", "completed_at": "2024-08-05T21:39:07.283512Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.00799107551574707, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.recurly.unique_recurly__subscription_overview_subscription_key.f2dc9d95af", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    subscription_key as unique_field,\n    count(*) as n_records\n\nfrom \"postgres\".\"recurly_integrations_tests_recurly_dev\".\"recurly__subscription_overview\"\nwhere subscription_key is not null\ngroup by subscription_key\nhaving count(*) > 1\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-08-05T21:39:07.284676Z", "completed_at": "2024-08-05T21:39:07.287985Z"}, {"name": "execute", "started_at": "2024-08-05T21:39:07.290786Z", "completed_at": "2024-08-05T21:39:07.290792Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.006615877151489258, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.recurly.not_null_recurly__churn_analysis_subscription_id.9f21047592", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect subscription_id\nfrom \"postgres\".\"recurly_integrations_tests_recurly_dev\".\"recurly__churn_analysis\"\nwhere subscription_id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-08-05T21:39:07.288186Z", "completed_at": "2024-08-05T21:39:07.291415Z"}, {"name": "execute", "started_at": "2024-08-05T21:39:07.291742Z", "completed_at": "2024-08-05T21:39:07.291747Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.004294872283935547, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.recurly.unique_recurly__churn_analysis_subscription_id.701f6b0aaf", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    subscription_id as unique_field,\n    count(*) as n_records\n\nfrom \"postgres\".\"recurly_integrations_tests_recurly_dev\".\"recurly__churn_analysis\"\nwhere subscription_id is not null\ngroup by subscription_id\nhaving count(*) > 1\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-08-05T21:39:07.248469Z", "completed_at": "2024-08-05T21:39:07.624326Z"}, {"name": "execute", "started_at": "2024-08-05T21:39:07.624545Z", "completed_at": "2024-08-05T21:39:07.624555Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.40234899520874023, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.recurly.int_recurly__transactions_date_spine", "compiled": true, "compiled_code": "with spine as (\n\n    \n    \n    \n    \n        \n            \n\n        \n\n    \n\n    \n    \n\n    \n\n     \n    \n        \n    \n        \n\n    \n    \n\n    \n\n\n\n\n\nwith rawdata as (\n\n    \n\n    \n\n    with p as (\n        select 0 as generated_number union all select 1\n    ), unioned as (\n\n    select\n\n    \n    p0.generated_number * power(2, 0)\n     + \n    \n    p1.generated_number * power(2, 1)\n     + \n    \n    p2.generated_number * power(2, 2)\n     + \n    \n    p3.generated_number * power(2, 3)\n     + \n    \n    p4.generated_number * power(2, 4)\n     + \n    \n    p5.generated_number * power(2, 5)\n     + \n    \n    p6.generated_number * power(2, 6)\n     + \n    \n    p7.generated_number * power(2, 7)\n     + \n    \n    p8.generated_number * power(2, 8)\n     + \n    \n    p9.generated_number * power(2, 9)\n     + \n    \n    p10.generated_number * power(2, 10)\n     + \n    \n    p11.generated_number * power(2, 11)\n    \n    \n    + 1\n    as generated_number\n\n    from\n\n    \n    p as p0\n     cross join \n    \n    p as p1\n     cross join \n    \n    p as p2\n     cross join \n    \n    p as p3\n     cross join \n    \n    p as p4\n     cross join \n    \n    p as p5\n     cross join \n    \n    p as p6\n     cross join \n    \n    p as p7\n     cross join \n    \n    p as p8\n     cross join \n    \n    p as p9\n     cross join \n    \n    p as p10\n     cross join \n    \n    p as p11\n    \n    \n\n    )\n\n    select *\n    from unioned\n    where generated_number <= 3464\n    order by generated_number\n\n\n\n),\n\nall_periods as (\n\n    select (\n        \n\n    cast('2015-02-11' as date) + ((interval '1 day') * (row_number() over (order by 1) - 1))\n\n\n    ) as date_day\n    from rawdata\n\n),\n\nfiltered as (\n\n    select *\n    from all_periods\n    where date_day <= \n\n    cast('2024-08-05' as date) + ((interval '1 day') * (1))\n\n\n\n)\n\nselect * from filtered\n\n\n),\n\nbalance_transactions as (\n    \n    select *\n    from \"postgres\".\"recurly_integrations_tests_recurly_dev\".\"recurly__balance_transactions\"\n),\n\naccount_overview as (\n\n    select *\n    from \"postgres\".\"recurly_integrations_tests_recurly_dev\".\"recurly__account_overview\"\n),\n\ndate_spine as (\n\n    select\n        cast(date_trunc('day', date_day) as date) as date_day, \n        cast(date_trunc('week', date_day) as date) as date_week, \n        cast(date_trunc('month', date_day) as date) as date_month,\n        cast(date_trunc('year', date_day) as date) as date_year,  \n        row_number() over (order by cast(date_trunc('day', date_day) as date)) as date_index\n    from spine\n),\n\nfinal as (\n\n    select distinct\n        account_overview.account_id,\n        date_spine.date_day,\n        date_spine.date_week,\n        date_spine.date_month,\n        date_spine.date_year,\n        date_spine.date_index\n    from account_overview \n    cross join date_spine\n)\n\nselect * \nfrom final", "relation_name": "\"postgres\".\"recurly_integrations_tests_recurly_dev\".\"int_recurly__transactions_date_spine\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-08-05T21:39:07.649889Z", "completed_at": "2024-08-05T21:39:07.653153Z"}, {"name": "execute", "started_at": "2024-08-05T21:39:07.653379Z", "completed_at": "2024-08-05T21:39:07.653385Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.004105806350708008, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.recurly.int_recurly__account_rolling_totals", "compiled": true, "compiled_code": "\n\nwith balance_transaction_periods as (\n\n    select * \n    from \"postgres\".\"recurly_integrations_tests_recurly_dev\".\"int_recurly__transactions_date_spine\"\n),\n\naccount_balances as (\n\n    select *\n    from \"postgres\".\"recurly_integrations_tests_recurly_dev\".\"int_recurly__transactions_grouped\"\n), \n\naccount_rolling_overview as (\n    \n    select\n        *,\n        sum(daily_balance) over (partition by account_id order by date_day, account_id rows unbounded preceding) as rolling_account_balance,\n        sum(daily_invoices) over (partition by account_id order by date_day, account_id rows unbounded preceding) as rolling_invoices,\n        sum(daily_transactions) over (partition by account_id order by date_day, account_id rows unbounded preceding) as rolling_transactions,\n        sum(daily_charges) over (partition by account_id order by date_day, account_id rows unbounded preceding) as rolling_charge_balance,  \n        sum(daily_credits) over (partition by account_id order by date_day, account_id rows unbounded preceding) as rolling_credit_balance,\n        sum(daily_discounts) over (partition by account_id order by date_day, account_id rows unbounded preceding) as rolling_discount_balance,  \n        sum(daily_taxes) over (partition by account_id order by date_day, account_id rows unbounded preceding) as rolling_tax_balance,\n        sum(daily_charge_count) over (partition by account_id order by date_day, account_id rows unbounded preceding) as rolling_charges,  \n        sum(daily_credit_count) over (partition by account_id order by date_day, account_id rows unbounded preceding) as rolling_credits\n    from account_balances\n),\n\nfinal as (\n    \n    select \n        coalesce(account_rolling_overview.account_id, balance_transaction_periods.account_id) as account_id,\n        coalesce(account_rolling_overview.date_day, balance_transaction_periods.date_day) as date_day, \n        coalesce(account_rolling_overview.date_week, balance_transaction_periods.date_week) as date_week,\n        coalesce(account_rolling_overview.date_month, balance_transaction_periods.date_month) as date_month, \n        coalesce(account_rolling_overview.date_year, balance_transaction_periods.date_year) as date_year, \n        account_rolling_overview.daily_transactions,\n        account_rolling_overview.daily_balance,\n        account_rolling_overview.daily_invoices,\n        account_rolling_overview.daily_charges,\n        account_rolling_overview.daily_credits,\n        account_rolling_overview.daily_discounts,\n        account_rolling_overview.daily_taxes,\n        account_rolling_overview.daily_charge_count,\n        account_rolling_overview.daily_credit_count,\n        \n        case when account_rolling_overview.rolling_account_balance is null and date_index = 1\n            then 0\n            else account_rolling_overview.rolling_account_balance\n            end as rolling_account_balance,\n        \n        case when account_rolling_overview.rolling_invoices is null and date_index = 1\n            then 0\n            else account_rolling_overview.rolling_invoices\n            end as rolling_invoices,\n        \n        case when account_rolling_overview.rolling_transactions is null and date_index = 1\n            then 0\n            else account_rolling_overview.rolling_transactions\n            end as rolling_transactions,\n        \n        case when account_rolling_overview.rolling_charge_balance is null and date_index = 1\n            then 0\n            else account_rolling_overview.rolling_charge_balance\n            end as rolling_charge_balance,\n        \n        case when account_rolling_overview.rolling_credit_balance is null and date_index = 1\n            then 0\n            else account_rolling_overview.rolling_credit_balance\n            end as rolling_credit_balance,\n        \n        case when account_rolling_overview.rolling_discount_balance is null and date_index = 1\n            then 0\n            else account_rolling_overview.rolling_discount_balance\n            end as rolling_discount_balance,\n        \n        case when account_rolling_overview.rolling_tax_balance is null and date_index = 1\n            then 0\n            else account_rolling_overview.rolling_tax_balance\n            end as rolling_tax_balance,\n        \n        case when account_rolling_overview.rolling_charges is null and date_index = 1\n            then 0\n            else account_rolling_overview.rolling_charges\n            end as rolling_charges,\n        \n        case when account_rolling_overview.rolling_credits is null and date_index = 1\n            then 0\n            else account_rolling_overview.rolling_credits\n            end as rolling_credits,\n        \n        balance_transaction_periods.date_index\n    from balance_transaction_periods \n    left join account_rolling_overview\n        on account_rolling_overview.account_id = balance_transaction_periods.account_id \n        and account_rolling_overview.date_day = balance_transaction_periods.date_day\n        and account_rolling_overview.date_week = balance_transaction_periods.date_week\n        and account_rolling_overview.date_month = balance_transaction_periods.date_month\n        and account_rolling_overview.date_year = balance_transaction_periods.date_year\n)\n\nselect * \nfrom final", "relation_name": "\"postgres\".\"recurly_integrations_tests_recurly_dev\".\"int_recurly__account_rolling_totals\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-08-05T21:39:07.654721Z", "completed_at": "2024-08-05T21:39:07.657266Z"}, {"name": "execute", "started_at": "2024-08-05T21:39:07.657481Z", "completed_at": "2024-08-05T21:39:07.657486Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.003392934799194336, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.recurly.int_recurly__account_partitions", "compiled": true, "compiled_code": "\n\nwith account_rolling_totals as (\n\n    select * \n    from \"postgres\".\"recurly_integrations_tests_recurly_dev\".\"int_recurly__account_rolling_totals\"\n),\n\n\nfinal as (\n\n    select\n        *,\n        \n        sum(case when rolling_account_balance is null  \n            then 0  \n            else 1  \n                end) over (order by account_id, date_day rows unbounded preceding) as rolling_account_balance_partition,\n        sum(case when rolling_invoices is null  \n            then 0  \n            else 1  \n                end) over (order by account_id, date_day rows unbounded preceding) as rolling_invoices_partition,\n        sum(case when rolling_transactions is null  \n            then 0  \n            else 1  \n                end) over (order by account_id, date_day rows unbounded preceding) as rolling_transactions_partition,\n        sum(case when rolling_charge_balance is null  \n            then 0  \n            else 1  \n                end) over (order by account_id, date_day rows unbounded preceding) as rolling_charge_balance_partition,\n        sum(case when rolling_credit_balance is null  \n            then 0  \n            else 1  \n                end) over (order by account_id, date_day rows unbounded preceding) as rolling_credit_balance_partition,\n        sum(case when rolling_discount_balance is null  \n            then 0  \n            else 1  \n                end) over (order by account_id, date_day rows unbounded preceding) as rolling_discount_balance_partition,\n        sum(case when rolling_tax_balance is null  \n            then 0  \n            else 1  \n                end) over (order by account_id, date_day rows unbounded preceding) as rolling_tax_balance_partition,\n        sum(case when rolling_charges is null  \n            then 0  \n            else 1  \n                end) over (order by account_id, date_day rows unbounded preceding) as rolling_charges_partition,\n        sum(case when rolling_credits is null  \n            then 0  \n            else 1  \n                end) over (order by account_id, date_day rows unbounded preceding) as rolling_credits_partition                  \n    from account_rolling_totals\n)\n\nselect * \nfrom final", "relation_name": "\"postgres\".\"recurly_integrations_tests_recurly_dev\".\"int_recurly__account_partitions\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-08-05T21:39:07.658687Z", "completed_at": "2024-08-05T21:39:07.663516Z"}, {"name": "execute", "started_at": "2024-08-05T21:39:07.663740Z", "completed_at": "2024-08-05T21:39:07.663746Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.005590200424194336, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.recurly.int_recurly__account_running_totals", "compiled": true, "compiled_code": "\n\nwith account_partitions as (\n\n    select * \n    from \"postgres\".\"recurly_integrations_tests_recurly_dev\".\"int_recurly__account_partitions\"\n),\n\naccount_overview as (\n\n    select * \n    from \"postgres\".\"recurly_integrations_tests_recurly_dev\".\"recurly__account_overview\"\n),\n\nfinal as (\n\n    select\n        account_partitions.account_id,\n        account_overview.account_created_at,\n        account_overview.account_city,\n        account_overview.account_company,\n        account_overview.account_country,\n        account_overview.account_code,\n        account_overview.account_email,\n        account_overview.account_first_name,\n        account_overview.account_last_name,\n        account_overview.account_is_tax_exempt,\n        account_overview.account_postal_code,\n        account_overview.account_region,\n        account_overview.account_state,\n        account_overview.account_username\n\n        \n\n\n\n,      \n        md5(cast(coalesce(cast(account_partitions.account_id as TEXT), '_dbt_utils_surrogate_key_null_') || '-' || coalesce(cast(date_day as TEXT), '_dbt_utils_surrogate_key_null_') as TEXT)) as account_daily_id,\n\n        date_day,        \n        date_week, \n        date_month, \n        date_year,  \n        date_index, \n        coalesce(daily_transactions,0) as daily_transaction_count,\n        coalesce(daily_balance,0) as daily_net_change,\n        coalesce(daily_invoices,0) as daily_invoice_count,\n        coalesce(daily_charges,0) as daily_charges,\n        coalesce(daily_credits,0) as daily_credits,\n        coalesce(daily_discounts,0) as daily_discounts,\n        coalesce(daily_taxes,0) as daily_taxes,\n        coalesce(daily_charge_count,0) as daily_charge_count,\n        coalesce(daily_credit_count,0) as daily_credit_count,\n        \n        coalesce(rolling_account_balance,   \n            first_value(rolling_account_balance) over (partition by rolling_account_balance_partition order by date_day rows unbounded preceding)) as rolling_account_balance,\n        coalesce(rolling_invoices,   \n            first_value(rolling_invoices) over (partition by rolling_invoices_partition order by date_day rows unbounded preceding)) as rolling_invoices,\n        coalesce(rolling_transactions,   \n            first_value(rolling_transactions) over (partition by rolling_transactions_partition order by date_day rows unbounded preceding)) as rolling_transactions,\n        coalesce(rolling_charge_balance,   \n            first_value(rolling_charge_balance) over (partition by rolling_charge_balance_partition order by date_day rows unbounded preceding)) as rolling_charge_balance,\n        coalesce(rolling_credit_balance,   \n            first_value(rolling_credit_balance) over (partition by rolling_credit_balance_partition order by date_day rows unbounded preceding)) as rolling_credit_balance,\n        coalesce(rolling_discount_balance,   \n            first_value(rolling_discount_balance) over (partition by rolling_discount_balance_partition order by date_day rows unbounded preceding)) as rolling_discount_balance,\n        coalesce(rolling_tax_balance,   \n            first_value(rolling_tax_balance) over (partition by rolling_tax_balance_partition order by date_day rows unbounded preceding)) as rolling_tax_balance,\n        coalesce(rolling_charges,   \n            first_value(rolling_charges) over (partition by rolling_charges_partition order by date_day rows unbounded preceding)) as rolling_charges,\n        coalesce(rolling_credits,   \n            first_value(rolling_credits) over (partition by rolling_credits_partition order by date_day rows unbounded preceding)) as rolling_credits\n    from account_partitions\n    left join account_overview\n        on account_partitions.account_id = account_overview.account_id\n)    \n\nselect *\nfrom final", "relation_name": "\"postgres\".\"recurly_integrations_tests_recurly_dev\".\"int_recurly__account_running_totals\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-08-05T21:39:07.664933Z", "completed_at": "2024-08-05T21:39:07.667042Z"}, {"name": "execute", "started_at": "2024-08-05T21:39:07.667252Z", "completed_at": "2024-08-05T21:39:07.667256Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.002820253372192383, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.recurly.recurly__account_daily_overview", "compiled": true, "compiled_code": "with final as (\n\n    select * \n    from \"postgres\".\"recurly_integrations_tests_recurly_dev\".\"int_recurly__account_running_totals\"\n) \n\nselect *\nfrom final", "relation_name": "\"postgres\".\"recurly_integrations_tests_recurly_dev\".\"recurly__account_daily_overview\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-08-05T21:39:07.669056Z", "completed_at": "2024-08-05T21:39:07.674138Z"}, {"name": "execute", "started_at": "2024-08-05T21:39:07.674540Z", "completed_at": "2024-08-05T21:39:07.674545Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.0063953399658203125, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.recurly.not_null_recurly__account_daily_overview_account_daily_id.560ba5d6ac", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect account_daily_id\nfrom \"postgres\".\"recurly_integrations_tests_recurly_dev\".\"recurly__account_daily_overview\"\nwhere account_daily_id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-08-05T21:39:07.671564Z", "completed_at": "2024-08-05T21:39:07.674334Z"}, {"name": "execute", "started_at": "2024-08-05T21:39:07.674894Z", "completed_at": "2024-08-05T21:39:07.674898Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.0065460205078125, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.recurly.unique_recurly__account_daily_overview_account_daily_id.3e059c878a", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    account_daily_id as unique_field,\n    count(*) as n_records\n\nfrom \"postgres\".\"recurly_integrations_tests_recurly_dev\".\"recurly__account_daily_overview\"\nwhere account_daily_id is not null\ngroup by account_daily_id\nhaving count(*) > 1\n\n\n", "relation_name": null}], "elapsed_time": 4.35573673248291, "args": {"exclude": [], "target": "postgres", "partial_parse_file_diff": true, "cache_selected_only": false, "compile": true, "log_file_max_bytes": 10485760, "log_format_file": "debug", "which": "generate", "partial_parse": true, "populate_cache": true, "macro_debugging": false, "source_freshness_run_project_hooks": false, "empty_catalog": false, "strict_mode": false, "project_dir": "/Users/joseph.markiewicz/Documents/dbt_packages/standardized_models/billing/dbt_recurly/integration_tests", "log_path": "/Users/joseph.markiewicz/Documents/dbt_packages/standardized_models/billing/dbt_recurly/integration_tests/logs", "use_colors_file": true, "require_explicit_package_overrides_for_builtin_materializations": true, "quiet": false, "use_colors": true, "log_level_file": "debug", "select": [], "log_level": "info", "print": true, "warn_error_options": {"include": [], "exclude": []}, "indirect_selection": "eager", "favor_state": false, "write_json": true, "vars": {}, "printer_width": 80, "require_resource_names_without_spaces": false, "static": false, "enable_legacy_logger": false, "send_anonymous_usage_stats": true, "log_format": "default", "show_resource_report": false, "static_parser": true, "profiles_dir": "/Users/joseph.markiewicz/.dbt", "version_check": true, "defer": false, "invocation_command": "dbt docs generate -t postgres", "introspect": true}}