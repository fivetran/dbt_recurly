{"metadata": {"dbt_schema_version": "https://schemas.getdbt.com/dbt/run-results/v5.json", "dbt_version": "1.7.9", "generated_at": "2024-08-13T20:04:50.493826Z", "invocation_id": "fadbfb08-d55a-48de-b244-6b65eacac084", "env": {}}, "results": [{"status": "success", "timing": [{"name": "compile", "started_at": "2024-08-13T20:04:43.175069Z", "completed_at": "2024-08-13T20:04:43.185799Z"}, {"name": "execute", "started_at": "2024-08-13T20:04:43.186437Z", "completed_at": "2024-08-13T20:04:43.186450Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.013829946517944336, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.recurly_source.stg_recurly__account_balance_history_tmp", "compiled": true, "compiled_code": "select * \nfrom `dbt-package-testing`.`recurly_integrations_tests`.`account_balance_history_data`", "relation_name": "`dbt-package-testing`.`recurly_integrations_tests_recurly_dev`.`stg_recurly__account_balance_history_tmp`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-08-13T20:04:43.181823Z", "completed_at": "2024-08-13T20:04:43.187174Z"}, {"name": "execute", "started_at": "2024-08-13T20:04:43.188868Z", "completed_at": "2024-08-13T20:04:43.188872Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.015469074249267578, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.recurly_source.stg_recurly__account_note_history_tmp", "compiled": true, "compiled_code": "select * \nfrom `dbt-package-testing`.`recurly_integrations_tests`.`account_note_history_data`", "relation_name": "`dbt-package-testing`.`recurly_integrations_tests_recurly_dev`.`stg_recurly__account_note_history_tmp`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-08-13T20:04:43.183718Z", "completed_at": "2024-08-13T20:04:43.187362Z"}, {"name": "execute", "started_at": "2024-08-13T20:04:43.189071Z", "completed_at": "2024-08-13T20:04:43.189076Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.015543937683105469, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.recurly_source.stg_recurly__billing_info_history_tmp", "compiled": true, "compiled_code": "select * \nfrom `dbt-package-testing`.`recurly_integrations_tests`.`billing_info_history_data`", "relation_name": "`dbt-package-testing`.`recurly_integrations_tests_recurly_dev`.`stg_recurly__billing_info_history_tmp`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-08-13T20:04:43.180058Z", "completed_at": "2024-08-13T20:04:43.187576Z"}, {"name": "execute", "started_at": "2024-08-13T20:04:43.189268Z", "completed_at": "2024-08-13T20:04:43.189272Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.01671910285949707, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.recurly_source.stg_recurly__account_history_tmp", "compiled": true, "compiled_code": "select * \nfrom `dbt-package-testing`.`recurly_integrations_tests`.`account_history_data`", "relation_name": "`dbt-package-testing`.`recurly_integrations_tests_recurly_dev`.`stg_recurly__account_history_tmp`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-08-13T20:04:43.190717Z", "completed_at": "2024-08-13T20:04:43.194097Z"}, {"name": "execute", "started_at": "2024-08-13T20:04:43.234460Z", "completed_at": "2024-08-13T20:04:43.234470Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.05072212219238281, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.recurly_source.stg_recurly__coupon_discount_tmp", "compiled": true, "compiled_code": "select * \nfrom `dbt-package-testing`.`recurly_integrations_tests`.`coupon_discount_data`", "relation_name": "`dbt-package-testing`.`recurly_integrations_tests_recurly_dev`.`stg_recurly__coupon_discount_tmp`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-08-13T20:04:43.195169Z", "completed_at": "2024-08-13T20:04:43.239563Z"}, {"name": "execute", "started_at": "2024-08-13T20:04:43.241005Z", "completed_at": "2024-08-13T20:04:43.241008Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.04861307144165039, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.recurly_source.stg_recurly__coupon_redemption_history_tmp", "compiled": true, "compiled_code": "select * \nfrom `dbt-package-testing`.`recurly_integrations_tests`.`coupon_redemption_history_data`", "relation_name": "`dbt-package-testing`.`recurly_integrations_tests_recurly_dev`.`stg_recurly__coupon_redemption_history_tmp`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-08-13T20:04:43.196982Z", "completed_at": "2024-08-13T20:04:43.239777Z"}, {"name": "execute", "started_at": "2024-08-13T20:04:43.241339Z", "completed_at": "2024-08-13T20:04:43.241343Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.04886198043823242, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.recurly_source.stg_recurly__credit_payment_history_tmp", "compiled": true, "compiled_code": "\n\nselect * \nfrom `dbt-package-testing`.`recurly_integrations_tests`.`credit_payment_history_data`", "relation_name": "`dbt-package-testing`.`recurly_integrations_tests_recurly_dev`.`stg_recurly__credit_payment_history_tmp`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-08-13T20:04:43.199323Z", "completed_at": "2024-08-13T20:04:43.240373Z"}, {"name": "execute", "started_at": "2024-08-13T20:04:43.242035Z", "completed_at": "2024-08-13T20:04:43.242038Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.05069684982299805, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.recurly_source.stg_recurly__invoice_coupon_redemption_history_tmp", "compiled": true, "compiled_code": "select * \nfrom `dbt-package-testing`.`recurly_integrations_tests`.`invoice_coupon_redemption_history_data`", "relation_name": "`dbt-package-testing`.`recurly_integrations_tests_recurly_dev`.`stg_recurly__invoice_coupon_redemption_history_tmp`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-08-13T20:04:43.242575Z", "completed_at": "2024-08-13T20:04:43.245724Z"}, {"name": "execute", "started_at": "2024-08-13T20:04:43.250023Z", "completed_at": "2024-08-13T20:04:43.250026Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.01118779182434082, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.recurly_source.stg_recurly__invoice_history_tmp", "compiled": true, "compiled_code": "select * \nfrom `dbt-package-testing`.`recurly_integrations_tests`.`invoice_history_data`", "relation_name": "`dbt-package-testing`.`recurly_integrations_tests_recurly_dev`.`stg_recurly__invoice_history_tmp`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-08-13T20:04:43.246679Z", "completed_at": "2024-08-13T20:04:43.252128Z"}, {"name": "execute", "started_at": "2024-08-13T20:04:43.253504Z", "completed_at": "2024-08-13T20:04:43.253508Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.009321928024291992, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.recurly_source.stg_recurly__invoice_subscription_history_tmp", "compiled": true, "compiled_code": "select * \nfrom `dbt-package-testing`.`recurly_integrations_tests`.`invoice_subscription_history_data`", "relation_name": "`dbt-package-testing`.`recurly_integrations_tests_recurly_dev`.`stg_recurly__invoice_subscription_history_tmp`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-08-13T20:04:43.248425Z", "completed_at": "2024-08-13T20:04:43.252354Z"}, {"name": "execute", "started_at": "2024-08-13T20:04:43.253833Z", "completed_at": "2024-08-13T20:04:43.253836Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.009332895278930664, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.recurly_source.stg_recurly__line_item_history_tmp", "compiled": true, "compiled_code": "select *\nfrom `dbt-package-testing`.`recurly_integrations_tests`.`line_item_history_data`", "relation_name": "`dbt-package-testing`.`recurly_integrations_tests_recurly_dev`.`stg_recurly__line_item_history_tmp`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-08-13T20:04:43.250243Z", "completed_at": "2024-08-13T20:04:43.252898Z"}, {"name": "execute", "started_at": "2024-08-13T20:04:43.254496Z", "completed_at": "2024-08-13T20:04:43.254499Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.010724782943725586, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.recurly_source.stg_recurly__plan_currency_history_tmp", "compiled": true, "compiled_code": "select *\nfrom `dbt-package-testing`.`recurly_integrations_tests`.`plan_currency_history_data`", "relation_name": "`dbt-package-testing`.`recurly_integrations_tests_recurly_dev`.`stg_recurly__plan_currency_history_tmp`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-08-13T20:04:43.255014Z", "completed_at": "2024-08-13T20:04:43.258074Z"}, {"name": "execute", "started_at": "2024-08-13T20:04:43.262520Z", "completed_at": "2024-08-13T20:04:43.262523Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.011225700378417969, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.recurly_source.stg_recurly__plan_history_tmp", "compiled": true, "compiled_code": "select *\nfrom `dbt-package-testing`.`recurly_integrations_tests`.`plan_history_data`", "relation_name": "`dbt-package-testing`.`recurly_integrations_tests_recurly_dev`.`stg_recurly__plan_history_tmp`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-08-13T20:04:43.259005Z", "completed_at": "2024-08-13T20:04:43.264146Z"}, {"name": "execute", "started_at": "2024-08-13T20:04:43.265636Z", "completed_at": "2024-08-13T20:04:43.265639Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.00927424430847168, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.recurly_source.stg_recurly__subscription_add_on_history_tmp", "compiled": true, "compiled_code": "\n\nselect * \nfrom `dbt-package-testing`.`recurly_integrations_tests`.`subscription_add_on_history_data`", "relation_name": "`dbt-package-testing`.`recurly_integrations_tests_recurly_dev`.`stg_recurly__subscription_add_on_history_tmp`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-08-13T20:04:43.260974Z", "completed_at": "2024-08-13T20:04:43.264711Z"}, {"name": "execute", "started_at": "2024-08-13T20:04:43.266244Z", "completed_at": "2024-08-13T20:04:43.266248Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.00946807861328125, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.recurly_source.stg_recurly__subscription_change_history_tmp", "compiled": true, "compiled_code": "\n\nselect * \nfrom `dbt-package-testing`.`recurly_integrations_tests`.`subscription_change_history_data`", "relation_name": "`dbt-package-testing`.`recurly_integrations_tests_recurly_dev`.`stg_recurly__subscription_change_history_tmp`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-08-13T20:04:43.262732Z", "completed_at": "2024-08-13T20:04:43.265280Z"}, {"name": "execute", "started_at": "2024-08-13T20:04:43.266935Z", "completed_at": "2024-08-13T20:04:43.266939Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.011691093444824219, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.recurly_source.stg_recurly__subscription_history_tmp", "compiled": true, "compiled_code": "select * \nfrom `dbt-package-testing`.`recurly_integrations_tests`.`subscription_history_data`", "relation_name": "`dbt-package-testing`.`recurly_integrations_tests_recurly_dev`.`stg_recurly__subscription_history_tmp`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-08-13T20:04:43.267684Z", "completed_at": "2024-08-13T20:04:43.271305Z"}, {"name": "execute", "started_at": "2024-08-13T20:04:43.274602Z", "completed_at": "2024-08-13T20:04:43.274605Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.010255098342895508, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.recurly_source.stg_recurly__transaction_subscription_tmp", "compiled": true, "compiled_code": "select * \nfrom `dbt-package-testing`.`recurly_integrations_tests`.`transaction_subscription_data`", "relation_name": "`dbt-package-testing`.`recurly_integrations_tests_recurly_dev`.`stg_recurly__transaction_subscription_tmp`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-08-13T20:04:43.273770Z", "completed_at": "2024-08-13T20:04:43.274398Z"}, {"name": "execute", "started_at": "2024-08-13T20:04:43.276451Z", "completed_at": "2024-08-13T20:04:43.276454Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.0062639713287353516, "adapter_response": {}, "message": null, "failures": null, "unique_id": "seed.recurly_integration_tests.account_balance_history_data", "compiled": null, "compiled_code": null, "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-08-13T20:04:43.274828Z", "completed_at": "2024-08-13T20:04:43.275401Z"}, {"name": "execute", "started_at": "2024-08-13T20:04:43.276994Z", "completed_at": "2024-08-13T20:04:43.276997Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.0065021514892578125, "adapter_response": {}, "message": null, "failures": null, "unique_id": "seed.recurly_integration_tests.account_history_data", "compiled": null, "compiled_code": null, "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-08-13T20:04:43.272216Z", "completed_at": "2024-08-13T20:04:43.275751Z"}, {"name": "execute", "started_at": "2024-08-13T20:04:43.277517Z", "completed_at": "2024-08-13T20:04:43.277519Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.008135318756103516, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.recurly_source.stg_recurly__transaction_tmp", "compiled": true, "compiled_code": "select * \nfrom `dbt-package-testing`.`recurly_integrations_tests`.`transaction_data`", "relation_name": "`dbt-package-testing`.`recurly_integrations_tests_recurly_dev`.`stg_recurly__transaction_tmp`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-08-13T20:04:43.279659Z", "completed_at": "2024-08-13T20:04:43.280261Z"}, {"name": "execute", "started_at": "2024-08-13T20:04:43.282276Z", "completed_at": "2024-08-13T20:04:43.282279Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.006460905075073242, "adapter_response": {}, "message": null, "failures": null, "unique_id": "seed.recurly_integration_tests.account_note_history_data", "compiled": null, "compiled_code": null, "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-08-13T20:04:43.281386Z", "completed_at": "2024-08-13T20:04:43.281952Z"}, {"name": "execute", "started_at": "2024-08-13T20:04:43.284595Z", "completed_at": "2024-08-13T20:04:43.284597Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.006231069564819336, "adapter_response": {}, "message": null, "failures": null, "unique_id": "seed.recurly_integration_tests.billing_info_history_data", "compiled": null, "compiled_code": null, "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-08-13T20:04:43.282456Z", "completed_at": "2024-08-13T20:04:43.283001Z"}, {"name": "execute", "started_at": "2024-08-13T20:04:43.285123Z", "completed_at": "2024-08-13T20:04:43.285127Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.005841255187988281, "adapter_response": {}, "message": null, "failures": null, "unique_id": "seed.recurly_integration_tests.coupon_discount_data", "compiled": null, "compiled_code": null, "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-08-13T20:04:43.283360Z", "completed_at": "2024-08-13T20:04:43.283909Z"}, {"name": "execute", "started_at": "2024-08-13T20:04:43.285656Z", "completed_at": "2024-08-13T20:04:43.285659Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.005972385406494141, "adapter_response": {}, "message": null, "failures": null, "unique_id": "seed.recurly_integration_tests.coupon_redemption_history_data", "compiled": null, "compiled_code": null, "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-08-13T20:04:43.287812Z", "completed_at": "2024-08-13T20:04:43.288371Z"}, {"name": "execute", "started_at": "2024-08-13T20:04:43.291256Z", "completed_at": "2024-08-13T20:04:43.291259Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.00729823112487793, "adapter_response": {}, "message": null, "failures": null, "unique_id": "seed.recurly_integration_tests.credit_payment_history_data", "compiled": null, "compiled_code": null, "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-08-13T20:04:43.289505Z", "completed_at": "2024-08-13T20:04:43.290920Z"}, {"name": "execute", "started_at": "2024-08-13T20:04:43.293485Z", "completed_at": "2024-08-13T20:04:43.293487Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.006905078887939453, "adapter_response": {}, "message": null, "failures": null, "unique_id": "seed.recurly_integration_tests.invoice_coupon_redemption_history_data", "compiled": null, "compiled_code": null, "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-08-13T20:04:43.291428Z", "completed_at": "2024-08-13T20:04:43.291982Z"}, {"name": "execute", "started_at": "2024-08-13T20:04:43.293976Z", "completed_at": "2024-08-13T20:04:43.293980Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.006554126739501953, "adapter_response": {}, "message": null, "failures": null, "unique_id": "seed.recurly_integration_tests.invoice_history_data", "compiled": null, "compiled_code": null, "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-08-13T20:04:43.292308Z", "completed_at": "2024-08-13T20:04:43.292838Z"}, {"name": "execute", "started_at": "2024-08-13T20:04:43.294497Z", "completed_at": "2024-08-13T20:04:43.294500Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.006660938262939453, "adapter_response": {}, "message": null, "failures": null, "unique_id": "seed.recurly_integration_tests.invoice_subscription_history_data", "compiled": null, "compiled_code": null, "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-08-13T20:04:43.296629Z", "completed_at": "2024-08-13T20:04:43.297182Z"}, {"name": "execute", "started_at": "2024-08-13T20:04:43.299232Z", "completed_at": "2024-08-13T20:04:43.299235Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.006412982940673828, "adapter_response": {}, "message": null, "failures": null, "unique_id": "seed.recurly_integration_tests.line_item_history_data", "compiled": null, "compiled_code": null, "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-08-13T20:04:43.298346Z", "completed_at": "2024-08-13T20:04:43.298905Z"}, {"name": "execute", "started_at": "2024-08-13T20:04:43.301433Z", "completed_at": "2024-08-13T20:04:43.301435Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.006043910980224609, "adapter_response": {}, "message": null, "failures": null, "unique_id": "seed.recurly_integration_tests.plan_currency_history_data", "compiled": null, "compiled_code": null, "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-08-13T20:04:43.299406Z", "completed_at": "2024-08-13T20:04:43.299942Z"}, {"name": "execute", "started_at": "2024-08-13T20:04:43.301919Z", "completed_at": "2024-08-13T20:04:43.301923Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.005657196044921875, "adapter_response": {}, "message": null, "failures": null, "unique_id": "seed.recurly_integration_tests.plan_history_data", "compiled": null, "compiled_code": null, "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-08-13T20:04:43.300260Z", "completed_at": "2024-08-13T20:04:43.300787Z"}, {"name": "execute", "started_at": "2024-08-13T20:04:43.302432Z", "completed_at": "2024-08-13T20:04:43.302434Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.005729198455810547, "adapter_response": {}, "message": null, "failures": null, "unique_id": "seed.recurly_integration_tests.subscription_add_on_history_data", "compiled": null, "compiled_code": null, "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-08-13T20:04:43.304471Z", "completed_at": "2024-08-13T20:04:43.305042Z"}, {"name": "execute", "started_at": "2024-08-13T20:04:43.307037Z", "completed_at": "2024-08-13T20:04:43.307040Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.007184743881225586, "adapter_response": {}, "message": null, "failures": null, "unique_id": "seed.recurly_integration_tests.subscription_change_history_data", "compiled": null, "compiled_code": null, "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-08-13T20:04:43.306143Z", "completed_at": "2024-08-13T20:04:43.306718Z"}, {"name": "execute", "started_at": "2024-08-13T20:04:43.310127Z", "completed_at": "2024-08-13T20:04:43.310129Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.006876230239868164, "adapter_response": {}, "message": null, "failures": null, "unique_id": "seed.recurly_integration_tests.subscription_history_data", "compiled": null, "compiled_code": null, "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-08-13T20:04:43.307206Z", "completed_at": "2024-08-13T20:04:43.307763Z"}, {"name": "execute", "started_at": "2024-08-13T20:04:43.310612Z", "completed_at": "2024-08-13T20:04:43.310615Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.006430149078369141, "adapter_response": {}, "message": null, "failures": null, "unique_id": "seed.recurly_integration_tests.transaction_data", "compiled": null, "compiled_code": null, "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-08-13T20:04:43.308080Z", "completed_at": "2024-08-13T20:04:43.309480Z"}, {"name": "execute", "started_at": "2024-08-13T20:04:43.311123Z", "completed_at": "2024-08-13T20:04:43.311126Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.006541013717651367, "adapter_response": {}, "message": null, "failures": null, "unique_id": "seed.recurly_integration_tests.transaction_subscription_data", "compiled": null, "compiled_code": null, "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-08-13T20:04:43.316068Z", "completed_at": "2024-08-13T20:04:43.727249Z"}, {"name": "execute", "started_at": "2024-08-13T20:04:43.727690Z", "completed_at": "2024-08-13T20:04:43.727695Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.4153709411621094, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.recurly_source.stg_recurly__account_note_history", "compiled": true, "compiled_code": "with base as (\n\n    select * \n    from `dbt-package-testing`.`recurly_integrations_tests_recurly_dev`.`stg_recurly__account_note_history_tmp`\n),\n\nfields as (\n\n    select\n        \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    \n    \n    account_id\n    \n as \n    \n    account_id\n    \n, \n    \n    \n    account_updated_at\n    \n as \n    \n    account_updated_at\n    \n, \n    \n    \n    created_at\n    \n as \n    \n    created_at\n    \n, \n    \n    \n    id\n    \n as \n    \n    id\n    \n, \n    \n    \n    message\n    \n as \n    \n    message\n    \n, \n    \n    \n    object\n    \n as \n    \n    object\n    \n, \n    \n    \n    user_email\n    \n as \n    \n    user_email\n    \n, \n    \n    \n    user_id\n    \n as \n    \n    user_id\n    \n\n\n\n    from base\n),\n\nfinal as (\n    \n    select \n        id as account_note_id, \n        account_id,\n        cast(account_updated_at as timestamp) as account_updated_at,\n        cast(created_at as timestamp) as created_at,\n        message,\n        object,\n        user_email,\n        user_id,\n        row_number() over (partition by id order by account_updated_at desc) = 1 as is_most_recent_record\n    from fields\n)\n\nselect *\nfrom final", "relation_name": "`dbt-package-testing`.`recurly_integrations_tests_recurly_dev`.`stg_recurly__account_note_history`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-08-13T20:04:43.318109Z", "completed_at": "2024-08-13T20:04:43.755924Z"}, {"name": "execute", "started_at": "2024-08-13T20:04:43.756308Z", "completed_at": "2024-08-13T20:04:43.756313Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.44173407554626465, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.recurly_source.stg_recurly__billing_info_history", "compiled": true, "compiled_code": "with base as (\n\n    select *\n    from `dbt-package-testing`.`recurly_integrations_tests_recurly_dev`.`stg_recurly__billing_info_history_tmp`\n),\n\nfields as (\n    select\n        \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    \n    \n    id\n    \n as \n    \n    id\n    \n, \n    \n    \n    updated_at\n    \n as \n    \n    updated_at\n    \n, \n    \n    \n    account_id\n    \n as \n    \n    account_id\n    \n, \n    \n    \n    first_name\n    \n as \n    \n    first_name\n    \n, \n    \n    \n    last_name\n    \n as \n    \n    last_name\n    \n, \n    cast(null as string) as \n    \n    company\n    \n , \n    \n    \n    billing_phone\n    \n as \n    \n    billing_phone\n    \n, \n    \n    \n    billing_street_1\n    \n as \n    \n    billing_street_1\n    \n, \n    \n    \n    billing_street_2\n    \n as \n    \n    billing_street_2\n    \n, \n    \n    \n    billing_city\n    \n as \n    \n    billing_city\n    \n, \n    \n    \n    billing_region\n    \n as \n    \n    billing_region\n    \n, \n    \n    \n    billing_postal_code\n    \n as \n    \n    billing_postal_code\n    \n, \n    \n    \n    billing_country\n    \n as \n    \n    billing_country\n    \n, \n    \n    \n    vat_number\n    \n as \n    \n    vat_number\n    \n, \n    \n    \n    valid\n    \n as \n    \n    valid\n    \n, \n    \n    \n    payment_method_object\n    \n as \n    \n    payment_method_object\n    \n, \n    cast(null as string) as \n    \n    payment_method_card_type\n    \n , \n    \n    \n    payment_method_first_six\n    \n as \n    \n    payment_method_first_six\n    \n, \n    \n    \n    payment_method_last_four\n    \n as \n    \n    payment_method_last_four\n    \n, \n    \n    \n    payment_method_exp_month\n    \n as \n    \n    payment_method_exp_month\n    \n, \n    \n    \n    payment_method_exp_year\n    \n as \n    \n    payment_method_exp_year\n    \n, \n    \n    \n    fraud_score\n    \n as \n    \n    fraud_score\n    \n, \n    \n    \n    fraud_decision\n    \n as \n    \n    fraud_decision\n    \n, \n    \n    \n    fraud_risk_rules_triggered\n    \n as \n    \n    fraud_risk_rules_triggered\n    \n, \n    \n    \n    created_at\n    \n as \n    \n    created_at\n    \n, \n    \n    \n    updated_by_ip\n    \n as \n    \n    updated_by_ip\n    \n, \n    \n    \n    updated_by_country\n    \n as \n    \n    updated_by_country\n    \n\n\n\n    from base\n),\n\nfinal as (\n\n    select\n        id as billing_id, \n        cast(updated_at as timestamp) as updated_at,\n        account_id,\n        billing_city,\n        billing_country,\n        billing_phone,\n        billing_postal_code,\n        billing_region,\n        billing_street_1,\n        billing_street_2,\n        company,\n        cast(created_at as timestamp) as created_at, \n        first_name,\n        valid as is_valid,\n        last_name,\n        payment_method_card_type,\n        payment_method_object,\n        updated_by_country,\n        updated_by_ip,\n        vat_number,\n        row_number() over (partition by id order by updated_at desc) = 1 as is_most_recent_record\n    from fields\n)\n\nselect *\nfrom final", "relation_name": "`dbt-package-testing`.`recurly_integrations_tests_recurly_dev`.`stg_recurly__billing_info_history`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-08-13T20:04:43.320104Z", "completed_at": "2024-08-13T20:04:43.774963Z"}, {"name": "execute", "started_at": "2024-08-13T20:04:43.775723Z", "completed_at": "2024-08-13T20:04:43.775728Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.4609508514404297, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.recurly_source.stg_recurly__account_history", "compiled": true, "compiled_code": "with base as (\n\n    select *\n    from `dbt-package-testing`.`recurly_integrations_tests_recurly_dev`.`stg_recurly__account_history_tmp`\n),\n\nfields as (\n\n    select \n        \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    \n    \n    id\n    \n as \n    \n    id\n    \n, \n    \n    \n    created_at\n    \n as \n    \n    created_at\n    \n, \n    \n    \n    updated_at\n    \n as \n    \n    updated_at\n    \n, \n    \n    \n    deleted_at\n    \n as \n    \n    deleted_at\n    \n, \n    \n    \n    code\n    \n as \n    \n    code\n    \n, \n    \n    \n    bill_to\n    \n as \n    \n    bill_to\n    \n, \n    \n    \n    state\n    \n as \n    \n    state\n    \n, \n    \n    \n    username\n    \n as \n    \n    username\n    \n, \n    cast(null as string) as \n    \n    first_name\n    \n , \n    cast(null as string) as \n    \n    last_name\n    \n , \n    \n    \n    email\n    \n as \n    \n    email\n    \n, \n    \n    \n    cc_emails\n    \n as \n    \n    cc_emails\n    \n, \n    \n    \n    company\n    \n as \n    \n    company\n    \n, \n    \n    \n    vat_number\n    \n as \n    \n    vat_number\n    \n, \n    \n    \n    tax_exempt\n    \n as \n    \n    tax_exempt\n    \n, \n    cast(null as string) as \n    \n    account_city\n    \n , \n    \n    \n    account_country\n    \n as \n    \n    account_country\n    \n, \n    cast(null as string) as \n    \n    account_postal_code\n    \n , \n    cast(null as string) as \n    \n    account_region\n    \n \n\n\n    from base\n),\n\nfinal as (\n\n    select\n        id as account_id, \n        cast(updated_at as timestamp) as updated_at, \n        account_city,\n        account_country, \n        account_postal_code,\n        account_region,\n        bill_to, \n        cc_emails, \n        code, \n        company, \n        cast(created_at as timestamp) as created_at,\n        cast(deleted_at as timestamp) as deleted_at,\n        email,  \n        first_name,\n        row_number() over (partition by id order by updated_at desc) = 1 as is_most_recent_record,\n        tax_exempt as is_tax_exempt, \n        last_name,\n        state, \n        username, \n        vat_number\n\n        --The below macro adds the fields defined within your accounts_pass_through_columns variable into the staging model\n        \n\n\n\n\n\n   from fields\n)\n\nselect *\nfrom final", "relation_name": "`dbt-package-testing`.`recurly_integrations_tests_recurly_dev`.`stg_recurly__account_history`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-08-13T20:04:43.313132Z", "completed_at": "2024-08-13T20:04:43.775162Z"}, {"name": "execute", "started_at": "2024-08-13T20:04:43.775914Z", "completed_at": "2024-08-13T20:04:43.775917Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.46533799171447754, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.recurly_source.stg_recurly__account_balance_history", "compiled": true, "compiled_code": "with base as (\n\n    select * \n    from `dbt-package-testing`.`recurly_integrations_tests_recurly_dev`.`stg_recurly__account_balance_history_tmp`\n),\n\nfields as (\n\n    select\n        \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    \n    \n    account_id\n    \n as \n    \n    account_id\n    \n, \n    \n    \n    account_updated_at\n    \n as \n    \n    account_updated_at\n    \n, \n    \n    \n    amount\n    \n as \n    \n    amount\n    \n, \n    \n    \n    currency\n    \n as \n    \n    currency\n    \n, \n    \n    \n    past_due\n    \n as \n    \n    past_due\n    \n\n\n\n    from base\n),\n\nfinal as (\n    \n    select \n        account_id, \n        cast(account_updated_at as timestamp) as account_updated_at,\n        cast(amount as FLOAT64) as amount,\n        currency,\n        past_due,\n        row_number() over (partition by account_id order by account_updated_at desc) = 1 as is_most_recent_record\n    from fields\n)\n\nselect *\nfrom final", "relation_name": "`dbt-package-testing`.`recurly_integrations_tests_recurly_dev`.`stg_recurly__account_balance_history`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-08-13T20:04:43.728951Z", "completed_at": "2024-08-13T20:04:44.081088Z"}, {"name": "execute", "started_at": "2024-08-13T20:04:44.081475Z", "completed_at": "2024-08-13T20:04:44.081480Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.35327982902526855, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.recurly_source.stg_recurly__coupon_discount", "compiled": true, "compiled_code": "with base as (\n\n    select * \n    from `dbt-package-testing`.`recurly_integrations_tests_recurly_dev`.`stg_recurly__coupon_discount_tmp`\n),\n\nfields as (\n\n    select\n        \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    \n    \n    amount\n    \n as \n    \n    amount\n    \n, \n    \n    \n    coupon_id\n    \n as \n    \n    coupon_id\n    \n, \n    \n    \n    currency\n    \n as \n    \n    currency\n    \n, \n    \n    \n    fivetran_id\n    \n as \n    \n    fivetran_id\n    \n, \n    \n    \n    percentage\n    \n as \n    \n    percentage\n    \n, \n    \n    \n    trial_length\n    \n as \n    \n    trial_length\n    \n, \n    \n    \n    trial_unit\n    \n as \n    \n    trial_unit\n    \n, \n    \n    \n    type\n    \n as \n    \n    type\n    \n\n\n\n    from base\n),\n\nfinal as (\n    \n    select \n        coupon_id,\n        cast(amount as FLOAT64) as amount,\n        currency,\n        fivetran_id,\n        percentage,\n        trial_length,\n        trial_unit,\n        type\n    from fields\n)\n\nselect *\nfrom final", "relation_name": "`dbt-package-testing`.`recurly_integrations_tests_recurly_dev`.`stg_recurly__coupon_discount`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-08-13T20:04:43.780335Z", "completed_at": "2024-08-13T20:04:44.136127Z"}, {"name": "execute", "started_at": "2024-08-13T20:04:44.136572Z", "completed_at": "2024-08-13T20:04:44.136576Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.359234094619751, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.recurly_source.stg_recurly__invoice_coupon_redemption_history", "compiled": true, "compiled_code": "with base as (\n\n    select * \n    from `dbt-package-testing`.`recurly_integrations_tests_recurly_dev`.`stg_recurly__invoice_coupon_redemption_history_tmp`\n),\n\nfields as (\n\n    select\n        \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    \n    \n    coupon_redemption_id\n    \n as \n    \n    coupon_redemption_id\n    \n, \n    \n    \n    invoice_id\n    \n as \n    \n    invoice_id\n    \n, \n    \n    \n    invoice_updated_at\n    \n as \n    \n    invoice_updated_at\n    \n\n\n\n    from base\n),\n\nfinal as (\n    \n    select \n        coupon_redemption_id,\n        invoice_id,\n        cast(invoice_updated_at as timestamp) as invoice_updated_at,\n        row_number() over (partition by coupon_redemption_id order by invoice_updated_at desc) = 1 as is_most_recent_record\n    from fields\n)\n\nselect *\nfrom final", "relation_name": "`dbt-package-testing`.`recurly_integrations_tests_recurly_dev`.`stg_recurly__invoice_coupon_redemption_history`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-08-13T20:04:43.757582Z", "completed_at": "2024-08-13T20:04:44.157237Z"}, {"name": "execute", "started_at": "2024-08-13T20:04:44.157576Z", "completed_at": "2024-08-13T20:04:44.157580Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.4008488655090332, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.recurly_source.stg_recurly__coupon_redemption_history", "compiled": true, "compiled_code": "with base as (\n\n    select * \n    from `dbt-package-testing`.`recurly_integrations_tests_recurly_dev`.`stg_recurly__coupon_redemption_history_tmp`\n),\n\nfields as (\n\n    select\n        \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    \n    \n    account_id\n    \n as \n    \n    account_id\n    \n, \n    \n    \n    coupon_id\n    \n as \n    \n    coupon_id\n    \n, \n    \n    \n    created_at\n    \n as \n    \n    created_at\n    \n, \n    \n    \n    currency\n    \n as \n    \n    currency\n    \n, \n    \n    \n    discounted\n    \n as \n    \n    discounted\n    \n, \n    \n    \n    id\n    \n as \n    \n    id\n    \n, \n    \n    \n    removed_at\n    \n as \n    \n    removed_at\n    \n, \n    \n    \n    state\n    \n as \n    \n    state\n    \n, \n    \n    \n    updated_at\n    \n as \n    \n    updated_at\n    \n\n\n\n    from base\n),\n\nfinal as (\n    \n    select \n        id as coupon_redemption_id,\n        cast(updated_at as timestamp) as updated_at,\n        account_id,\n        coupon_id,\n        cast(created_at as timestamp) as created_at,\n        currency, \n        discounted, \n        cast(removed_at as timestamp) as removed_at,\n        state\n    from fields\n)\n\nselect *\nfrom final", "relation_name": "`dbt-package-testing`.`recurly_integrations_tests_recurly_dev`.`stg_recurly__coupon_redemption_history`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-08-13T20:04:43.778276Z", "completed_at": "2024-08-13T20:04:44.187460Z"}, {"name": "execute", "started_at": "2024-08-13T20:04:44.187793Z", "completed_at": "2024-08-13T20:04:44.187797Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.4107232093811035, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.recurly_source.stg_recurly__credit_payment_history", "compiled": true, "compiled_code": "\n\nwith base as (\n\n    select * \n    from `dbt-package-testing`.`recurly_integrations_tests_recurly_dev`.`stg_recurly__credit_payment_history_tmp`\n),\n\nfields as (\n\n    select\n        \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    \n    \n    id\n    \n as \n    \n    id\n    \n, \n    \n    \n    updated_at\n    \n as \n    \n    updated_at\n    \n, \n    \n    \n    account_id\n    \n as \n    \n    account_id\n    \n, \n    \n    \n    applied_to_invoice_id\n    \n as \n    \n    applied_to_invoice_id\n    \n, \n    \n    \n    original_invoice_id\n    \n as \n    \n    original_invoice_id\n    \n, \n    \n    \n    refund_transaction_id\n    \n as \n    \n    refund_transaction_id\n    \n, \n    \n    \n    original_credit_payment_id\n    \n as \n    \n    original_credit_payment_id\n    \n, \n    \n    \n    uuid\n    \n as \n    \n    uuid\n    \n, \n    \n    \n    action\n    \n as \n    \n    action\n    \n, \n    \n    \n    currency\n    \n as \n    \n    currency\n    \n, \n    \n    \n    amount\n    \n as \n    \n    amount\n    \n, \n    \n    \n    created_at\n    \n as \n    \n    created_at\n    \n, \n    \n    \n    voided_at\n    \n as \n    \n    voided_at\n    \n\n\n\n    from base\n),\n\nfinal as (\n    \n    select \n        id as credit_payment_id,\n        cast(updated_at as timestamp) as updated_at,\n        account_id,\n        action,        \n        cast(amount as FLOAT64) as amount,\n        applied_to_invoice_id,\n        cast(created_at as timestamp) as created_at,\n        currency,\n        refund_transaction_id,\n        original_credit_payment_id,\n        original_invoice_id,\n        uuid,\n        cast(voided_at as timestamp) as voided_at,\n        row_number() over (partition by id order by updated_at desc) = 1 as is_most_recent_record\n    from fields\n) \n\nselect *\nfrom final", "relation_name": "`dbt-package-testing`.`recurly_integrations_tests_recurly_dev`.`stg_recurly__credit_payment_history`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-08-13T20:04:44.082749Z", "completed_at": "2024-08-13T20:04:44.441697Z"}, {"name": "execute", "started_at": "2024-08-13T20:04:44.442069Z", "completed_at": "2024-08-13T20:04:44.442074Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.3601698875427246, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.recurly_source.stg_recurly__invoice_history", "compiled": true, "compiled_code": "with base as (\n\n    select *\n    from `dbt-package-testing`.`recurly_integrations_tests_recurly_dev`.`stg_recurly__invoice_history_tmp`\n),\n\nfields as (\n\n    select\n        \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    \n    \n    id\n    \n as \n    \n    id\n    \n, \n    \n    \n    created_at\n    \n as \n    \n    created_at\n    \n, \n    \n    \n    updated_at\n    \n as \n    \n    updated_at\n    \n, \n    \n    \n    due_at\n    \n as \n    \n    due_at\n    \n, \n    \n    \n    closed_at\n    \n as \n    \n    closed_at\n    \n, \n    \n    \n    account_id\n    \n as \n    \n    account_id\n    \n, \n    \n    \n    previous_invoice_id\n    \n as \n    \n    previous_invoice_id\n    \n, \n    \n    \n    type\n    \n as \n    \n    type\n    \n, \n    \n    \n    origin\n    \n as \n    \n    origin\n    \n, \n    \n    \n    state\n    \n as \n    \n    state\n    \n, \n    \n    \n    number\n    \n as \n    \n    number\n    \n, \n    \n    \n    collection_method\n    \n as \n    \n    collection_method\n    \n, \n    \n    \n    po_number\n    \n as \n    \n    po_number\n    \n, \n    \n    \n    net_terms\n    \n as \n    \n    net_terms\n    \n, \n    \n    \n    currency\n    \n as \n    \n    currency\n    \n, \n    \n    \n    balance\n    \n as \n    \n    balance\n    \n, \n    \n    \n    paid\n    \n as \n    \n    paid\n    \n, \n    \n    \n    total\n    \n as \n    \n    total\n    \n, \n    \n    \n    subtotal\n    \n as \n    \n    subtotal\n    \n, \n    \n    \n    refundable_amount\n    \n as \n    \n    refundable_amount\n    \n, \n    \n    \n    discount\n    \n as \n    \n    discount\n    \n, \n    \n    \n    tax\n    \n as \n    \n    tax\n    \n, \n    \n    \n    tax_type\n    \n as \n    \n    tax_type\n    \n, \n    \n    \n    tax_region\n    \n as \n    \n    tax_region\n    \n, \n    \n    \n    tax_rate\n    \n as \n    \n    tax_rate\n    \n\n\n\n    from base\n),\n\nfinal as (\n\n    select\n        id as invoice_id, \n        cast(updated_at as timestamp) as updated_at,\n        account_id,\n        cast(balance as FLOAT64) as balance,\n        cast(closed_at as timestamp) as closed_at,\n        collection_method,\n        cast(created_at as timestamp) as created_at,\n        currency,\n        discount,\n        cast(due_at as timestamp) as due_at,\n        row_number() over (partition by id order by updated_at desc) = 1 as is_most_recent_record,\n        net_terms,\n        number,\n        origin,\n        paid,\n        po_number,        \n        previous_invoice_id,\n        refundable_amount,\n        state,\n        subtotal,\n        tax,\n        tax_rate,\n        tax_region,\n        tax_type,\n        total,\n        type\n    from fields\n)\n\nselect *\nfrom final", "relation_name": "`dbt-package-testing`.`recurly_integrations_tests_recurly_dev`.`stg_recurly__invoice_history`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-08-13T20:04:44.137882Z", "completed_at": "2024-08-13T20:04:44.541042Z"}, {"name": "execute", "started_at": "2024-08-13T20:04:44.541698Z", "completed_at": "2024-08-13T20:04:44.541705Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.4049088954925537, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.recurly_source.stg_recurly__invoice_subscription_history", "compiled": true, "compiled_code": "with base as (\n\n    select *\n    from `dbt-package-testing`.`recurly_integrations_tests_recurly_dev`.`stg_recurly__invoice_subscription_history_tmp`\n),\n\nfields as (\n\n    select \n        \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    \n    \n    invoice_id\n    \n as \n    \n    invoice_id\n    \n, \n    \n    \n    invoice_updated_at\n    \n as \n    \n    invoice_updated_at\n    \n, \n    \n    \n    subscription_id\n    \n as \n    \n    subscription_id\n    \n\n\n\n    from base\n),\n\nfinal as (\n\n    select\n        invoice_id,\n        cast(invoice_updated_at as timestamp) as invoice_updated_at,\n        subscription_id,\n        row_number() over (partition by invoice_id order by invoice_updated_at desc) = 1 as is_most_recent_record\n    from fields\n)\nselect *\nfrom final", "relation_name": "`dbt-package-testing`.`recurly_integrations_tests_recurly_dev`.`stg_recurly__invoice_subscription_history`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-08-13T20:04:44.158756Z", "completed_at": "2024-08-13T20:04:44.541444Z"}, {"name": "execute", "started_at": "2024-08-13T20:04:44.542558Z", "completed_at": "2024-08-13T20:04:44.542561Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.38483095169067383, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.recurly_source.stg_recurly__line_item_history", "compiled": true, "compiled_code": "with base as (\n\n    select *\n    from `dbt-package-testing`.`recurly_integrations_tests_recurly_dev`.`stg_recurly__line_item_history_tmp`\n),\n\nfields as (\n\n    select \n        \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    \n    \n    id\n    \n as \n    \n    id\n    \n, \n    \n    \n    created_at\n    \n as \n    \n    created_at\n    \n, \n    \n    \n    updated_at\n    \n as \n    \n    updated_at\n    \n, \n    \n    \n    account_id\n    \n as \n    \n    account_id\n    \n, \n    \n    \n    plan_id\n    \n as \n    \n    plan_id\n    \n, \n    \n    \n    add_on_id\n    \n as \n    \n    add_on_id\n    \n, \n    \n    \n    invoice_id\n    \n as \n    \n    invoice_id\n    \n, \n    \n    \n    previous_line_item_id\n    \n as \n    \n    previous_line_item_id\n    \n, \n    \n    \n    original_line_item_invoice_id\n    \n as \n    \n    original_line_item_invoice_id\n    \n, \n    \n    \n    subscription_id\n    \n as \n    \n    subscription_id\n    \n, \n    \n    \n    uuid\n    \n as \n    \n    uuid\n    \n, \n    \n    \n    type\n    \n as \n    \n    type\n    \n, \n    \n    \n    state\n    \n as \n    \n    state\n    \n, \n    \n    \n    plan_code\n    \n as \n    \n    plan_code\n    \n, \n    \n    \n    add_on_code\n    \n as \n    \n    add_on_code\n    \n, \n    \n    \n    invoice_number\n    \n as \n    \n    invoice_number\n    \n, \n    \n    \n    origin\n    \n as \n    \n    origin\n    \n, \n    \n    \n    product_code\n    \n as \n    \n    product_code\n    \n, \n    \n    \n    currency\n    \n as \n    \n    currency\n    \n, \n    \n    \n    amount\n    \n as \n    \n    amount\n    \n, \n    \n    \n    description\n    \n as \n    \n    description\n    \n, \n    \n    \n    quantity\n    \n as \n    \n    quantity\n    \n, \n    \n    \n    unit_amount\n    \n as \n    \n    unit_amount\n    \n, \n    \n    \n    subtotal\n    \n as \n    \n    subtotal\n    \n, \n    \n    \n    discount\n    \n as \n    \n    discount\n    \n, \n    \n    \n    tax\n    \n as \n    \n    tax\n    \n, \n    \n    \n    taxable\n    \n as \n    \n    taxable\n    \n, \n    \n    \n    tax_exempt\n    \n as \n    \n    tax_exempt\n    \n, \n    \n    \n    tax_code\n    \n as \n    \n    tax_code\n    \n, \n    \n    \n    tax_type\n    \n as \n    \n    tax_type\n    \n, \n    \n    \n    tax_region\n    \n as \n    \n    tax_region\n    \n, \n    \n    \n    tax_rate\n    \n as \n    \n    tax_rate\n    \n, \n    \n    \n    proration_rate\n    \n as \n    \n    proration_rate\n    \n, \n    \n    \n    refund\n    \n as \n    \n    refund\n    \n, \n    \n    \n    refunded_quantity\n    \n as \n    \n    refunded_quantity\n    \n, \n    \n    \n    credit_applied\n    \n as \n    \n    credit_applied\n    \n, \n    \n    \n    start_date\n    \n as \n    \n    start_date\n    \n, \n    \n    \n    end_date\n    \n as \n    \n    end_date\n    \n\n\n\n    from base\n),\n\nfinal as (\n\n    select\n        id as line_item_id, \n        cast(updated_at as timestamp) as updated_at,\n        account_id,\n        add_on_code,\n        add_on_id,\n        cast(amount as FLOAT64) as amount,\n        cast(created_at as timestamp) as created_at,\n        credit_applied,\n        currency,\n        description,\n        discount,\n        cast(end_date as timestamp) as ended_at,\n        refund as has_refund,\n        invoice_id,\n        invoice_number,\n        row_number() over (partition by id order by updated_at desc) = 1 as is_most_recent_record,\n        taxable as is_taxable,\n        original_line_item_invoice_id,\n        origin,\n        plan_code,\n        plan_id,\n        previous_line_item_id,\n        product_code,\n        proration_rate,\n        quantity,\n        refunded_quantity,\n        cast(start_date as timestamp) as started_at,\n        state,\n        subscription_id,\n        subtotal,\n        tax,\n        tax_code,\n        tax_exempt,\n        tax_region,\n        tax_rate,\n        tax_type,\n        type,\n        cast(unit_amount as FLOAT64) as unit_amount,\n        uuid\n    from fields\n)\n\nselect *\nfrom final", "relation_name": "`dbt-package-testing`.`recurly_integrations_tests_recurly_dev`.`stg_recurly__line_item_history`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-08-13T20:04:44.189111Z", "completed_at": "2024-08-13T20:04:44.619257Z"}, {"name": "execute", "started_at": "2024-08-13T20:04:44.619621Z", "completed_at": "2024-08-13T20:04:44.619625Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.43143510818481445, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.recurly_source.stg_recurly__plan_currency_history", "compiled": true, "compiled_code": "with base as (\n\n    select *\n    from `dbt-package-testing`.`recurly_integrations_tests_recurly_dev`.`stg_recurly__plan_currency_history_tmp`\n),\n\nfields as (\n\n    select \n        \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    \n    \n    plan_id\n    \n as \n    \n    plan_id\n    \n, \n    \n    \n    plan_updated_at\n    \n as \n    \n    plan_updated_at\n    \n, \n    \n    \n    currency\n    \n as \n    \n    currency\n    \n, \n    \n    \n    setup_fees\n    \n as \n    \n    setup_fees\n    \n, \n    \n    \n    unit_amount\n    \n as \n    \n    unit_amount\n    \n\n\n\n    from base\n),\n\nfinal as (\n\n    select\n        plan_id,\n        cast(plan_updated_at as timestamp) as plan_updated_at,\n        currency,\n        setup_fees,\n        cast(unit_amount as FLOAT64) as unit_amount,\n        row_number() over (partition by plan_id order by plan_updated_at desc) = 1 as is_most_recent_record\n    from fields\n)\n\nselect *\nfrom final", "relation_name": "`dbt-package-testing`.`recurly_integrations_tests_recurly_dev`.`stg_recurly__plan_currency_history`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-08-13T20:04:44.443375Z", "completed_at": "2024-08-13T20:04:44.814901Z"}, {"name": "execute", "started_at": "2024-08-13T20:04:44.815529Z", "completed_at": "2024-08-13T20:04:44.815535Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.3733639717102051, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.recurly_source.stg_recurly__plan_history", "compiled": true, "compiled_code": "with base as (\n\n    select *\n    from `dbt-package-testing`.`recurly_integrations_tests_recurly_dev`.`stg_recurly__plan_history_tmp`\n),\n\nfields as (\n\n    select \n        \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    \n    \n    id\n    \n as \n    \n    id\n    \n, \n    \n    \n    created_at\n    \n as \n    \n    created_at\n    \n, \n    \n    \n    updated_at\n    \n as \n    \n    updated_at\n    \n, \n    \n    \n    deleted_at\n    \n as \n    \n    deleted_at\n    \n, \n    \n    \n    code\n    \n as \n    \n    code\n    \n, \n    \n    \n    state\n    \n as \n    \n    state\n    \n, \n    \n    \n    name\n    \n as \n    \n    name\n    \n, \n    \n    \n    description\n    \n as \n    \n    description\n    \n, \n    \n    \n    interval_unit\n    \n as \n    \n    interval_unit\n    \n, \n    \n    \n    interval_length\n    \n as \n    \n    interval_length\n    \n, \n    \n    \n    trial_unit\n    \n as \n    \n    trial_unit\n    \n, \n    \n    \n    trial_length\n    \n as \n    \n    trial_length\n    \n, \n    \n    \n    total_billing_cycles\n    \n as \n    \n    total_billing_cycles\n    \n, \n    \n    \n    auto_renew\n    \n as \n    \n    auto_renew\n    \n, \n    \n    \n    accounting_code\n    \n as \n    \n    accounting_code\n    \n, \n    \n    \n    setup_fee_accounting_code\n    \n as \n    \n    setup_fee_accounting_code\n    \n, \n    \n    \n    tax_code\n    \n as \n    \n    tax_code\n    \n, \n    \n    \n    tax_exempt\n    \n as \n    \n    tax_exempt\n    \n\n\n\n    from base\n),\n\nfinal as (\n\n    select\n        id as plan_id, \n        cast(updated_at as timestamp) as updated_at,\n        accounting_code,\n        code,\n        cast(created_at as timestamp) as created_at,\n        cast(deleted_at as timestamp) as deleted_at,\n        description,\n        auto_renew as has_auto_renew,\n        interval_length,\n        interval_unit,\n        row_number() over (partition by id order by updated_at desc) = 1 as is_most_recent_record,\n        tax_exempt as is_tax_exempt,\n        name,\n        setup_fee_accounting_code,\n        state,\n        tax_code,\n        total_billing_cycles,\n        trial_length,\n        trial_unit\n    from fields\n)\n\nselect *\nfrom final", "relation_name": "`dbt-package-testing`.`recurly_integrations_tests_recurly_dev`.`stg_recurly__plan_history`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-08-13T20:04:44.544406Z", "completed_at": "2024-08-13T20:04:44.917742Z"}, {"name": "execute", "started_at": "2024-08-13T20:04:44.918227Z", "completed_at": "2024-08-13T20:04:44.918233Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.375216007232666, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.recurly_source.stg_recurly__subscription_add_on_history", "compiled": true, "compiled_code": "\n\nwith base as (\n\n    select * \n    from `dbt-package-testing`.`recurly_integrations_tests_recurly_dev`.`stg_recurly__subscription_add_on_history_tmp`\n),\n\nfields as (\n\n    select\n        \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    \n    \n    created_at\n    \n as \n    \n    created_at\n    \n, \n    \n    \n    expired_at\n    \n as \n    \n    expired_at\n    \n, \n    \n    \n    id\n    \n as \n    \n    id\n    \n, \n    \n    \n    object\n    \n as \n    \n    object\n    \n, \n    \n    \n    plan_add_on_id\n    \n as \n    \n    plan_add_on_id\n    \n, \n    \n    \n    quantity\n    \n as \n    \n    quantity\n    \n, \n    \n    \n    subscription_id\n    \n as \n    \n    subscription_id\n    \n, \n    \n    \n    unit_amount\n    \n as \n    \n    unit_amount\n    \n, \n    \n    \n    updated_at\n    \n as \n    \n    updated_at\n    \n\n\n\n    from base\n),\n\nfinal as (\n    \n    select \n        id as subscription_add_on_id,\n        cast(updated_at as timestamp) as updated_at, \n        cast(created_at as timestamp) as created_at, \n        cast(expired_at as timestamp) as expired_at,\n        object,         \n        plan_add_on_id,\n        quantity, \n        subscription_id, \n        cast(unit_amount as FLOAT64) as unit_amount,\n        row_number() over (partition by id order by updated_at desc) = 1 as is_most_recent_record\n    from fields\n)\n\nselect *\nfrom final", "relation_name": "`dbt-package-testing`.`recurly_integrations_tests_recurly_dev`.`stg_recurly__subscription_add_on_history`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-08-13T20:04:44.547034Z", "completed_at": "2024-08-13T20:04:44.960749Z"}, {"name": "execute", "started_at": "2024-08-13T20:04:44.961263Z", "completed_at": "2024-08-13T20:04:44.961269Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.41758179664611816, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.recurly_source.stg_recurly__subscription_change_history", "compiled": true, "compiled_code": "\n\nwith base as (\n\n    select * \n    from `dbt-package-testing`.`recurly_integrations_tests_recurly_dev`.`stg_recurly__subscription_change_history_tmp`\n),\n\nfields as (\n\n    select\n        \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    \n    \n    id\n    \n as \n    \n    id\n    \n, \n    \n    \n    updated_at\n    \n as \n    \n    updated_at\n    \n, \n    \n    \n    plan_id\n    \n as \n    \n    plan_id\n    \n, \n    \n    \n    subscription_id\n    \n as \n    \n    subscription_id\n    \n, \n    \n    \n    object\n    \n as \n    \n    object\n    \n, \n    \n    \n    unit_amount\n    \n as \n    \n    unit_amount\n    \n, \n    \n    \n    quantity\n    \n as \n    \n    quantity\n    \n, \n    \n    \n    activate_at\n    \n as \n    \n    activate_at\n    \n, \n    \n    \n    activated\n    \n as \n    \n    activated\n    \n, \n    \n    \n    created_at\n    \n as \n    \n    created_at\n    \n, \n    \n    \n    deleted_at\n    \n as \n    \n    deleted_at\n    \n\n\n\n    from base\n),\n\nfinal as (\n    \n    select \n        id as subscription_change_id, \n        cast(updated_at as timestamp) as updated_at, \n        cast(activate_at as timestamp) as activate_at,\n        activated, \n        cast(created_at as timestamp) as created_at,\n        cast(deleted_at as timestamp) as deleted_at,\n        object,\n        plan_id,\n        quantity,\n        subscription_id,\n        unit_amount,\n        row_number() over (partition by id order by updated_at desc) = 1 as is_most_recent_record\n    from fields\n) \n\nselect *\nfrom final", "relation_name": "`dbt-package-testing`.`recurly_integrations_tests_recurly_dev`.`stg_recurly__subscription_change_history`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-08-13T20:04:44.962800Z", "completed_at": "2024-08-13T20:04:44.973040Z"}, {"name": "execute", "started_at": "2024-08-13T20:04:44.973478Z", "completed_at": "2024-08-13T20:04:44.973483Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.011680126190185547, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.recurly_source.dbt_utils_unique_combination_of_columns_stg_recurly__account_note_history_account_note_id__account_id__account_updated_at.16e69c745d", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        account_note_id, account_id, account_updated_at\n    from `dbt-package-testing`.`recurly_integrations_tests_recurly_dev`.`stg_recurly__account_note_history`\n    group by account_note_id, account_id, account_updated_at\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-08-13T20:04:44.975237Z", "completed_at": "2024-08-13T20:04:44.995700Z"}, {"name": "execute", "started_at": "2024-08-13T20:04:44.997057Z", "completed_at": "2024-08-13T20:04:44.997063Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.02353215217590332, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.recurly_source.not_null_stg_recurly__account_note_history_account_note_id.149e8223d0", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect account_note_id\nfrom `dbt-package-testing`.`recurly_integrations_tests_recurly_dev`.`stg_recurly__account_note_history`\nwhere account_note_id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-08-13T20:04:44.620957Z", "completed_at": "2024-08-13T20:04:44.996055Z"}, {"name": "execute", "started_at": "2024-08-13T20:04:44.997499Z", "completed_at": "2024-08-13T20:04:44.997502Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.37796807289123535, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.recurly_source.stg_recurly__subscription_history", "compiled": true, "compiled_code": "with base as (\n\n    select *\n    from `dbt-package-testing`.`recurly_integrations_tests_recurly_dev`.`stg_recurly__subscription_history_tmp`\n),\n\nfields as (\n\n    select \n        \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    \n    \n    id\n    \n as \n    \n    id\n    \n, \n    \n    \n    created_at\n    \n as \n    \n    created_at\n    \n, \n    \n    \n    updated_at\n    \n as \n    \n    updated_at\n    \n, \n    \n    \n    activated_at\n    \n as \n    \n    activated_at\n    \n, \n    \n    \n    canceled_at\n    \n as \n    \n    canceled_at\n    \n, \n    cast(null as timestamp) as \n    \n    converted_at\n    \n , \n    \n    \n    expires_at\n    \n as \n    \n    expires_at\n    \n, \n    \n    \n    account_id\n    \n as \n    \n    account_id\n    \n, \n    \n    \n    plan_id\n    \n as \n    \n    plan_id\n    \n, \n    \n    \n    object\n    \n as \n    \n    object\n    \n, \n    \n    \n    uuid\n    \n as \n    \n    uuid\n    \n, \n    \n    \n    state\n    \n as \n    \n    state\n    \n, \n    \n    \n    current_period_started_at\n    \n as \n    \n    current_period_started_at\n    \n, \n    \n    \n    current_period_ends_at\n    \n as \n    \n    current_period_ends_at\n    \n, \n    \n    \n    current_term_started_at\n    \n as \n    \n    current_term_started_at\n    \n, \n    \n    \n    current_term_ends_at\n    \n as \n    \n    current_term_ends_at\n    \n, \n    \n    \n    trial_started_at\n    \n as \n    \n    trial_started_at\n    \n, \n    \n    \n    trial_ends_at\n    \n as \n    \n    trial_ends_at\n    \n, \n    \n    \n    remaining_billing_cycles\n    \n as \n    \n    remaining_billing_cycles\n    \n, \n    \n    \n    total_billing_cycles\n    \n as \n    \n    total_billing_cycles\n    \n, \n    \n    \n    renewal_billing_cycles\n    \n as \n    \n    renewal_billing_cycles\n    \n, \n    \n    \n    auto_renew\n    \n as \n    \n    auto_renew\n    \n, \n    \n    \n    paused_at\n    \n as \n    \n    paused_at\n    \n, \n    \n    \n    remaining_pause_cycles\n    \n as \n    \n    remaining_pause_cycles\n    \n, \n    \n    \n    currency\n    \n as \n    \n    currency\n    \n, \n    \n    \n    unit_amount\n    \n as \n    \n    unit_amount\n    \n, \n    \n    \n    quantity\n    \n as \n    \n    quantity\n    \n, \n    \n    \n    add_ons_total\n    \n as \n    \n    add_ons_total\n    \n, \n    \n    \n    subtotal\n    \n as \n    \n    subtotal\n    \n, \n    \n    \n    collection_method\n    \n as \n    \n    collection_method\n    \n, \n    \n    \n    expiration_reason\n    \n as \n    \n    expiration_reason\n    \n, \n    \n    \n    started_with_gift\n    \n as \n    \n    started_with_gift\n    \n\n\n\n    from base\n),\n\nfinal as (\n\n    select  \n        id as subscription_id,\n        cast(updated_at as timestamp) as updated_at,\n        account_id,\n        cast(activated_at as timestamp) as activated_at,\n        add_ons_total,\n        cast(canceled_at as timestamp) as canceled_at,\n        collection_method,\n        cast(converted_at as timestamp) as converted_at,\n        cast(created_at as timestamp) as created_at,\n        currency,\n        cast(current_period_ends_at as timestamp) as current_period_ended_at,\n        cast(current_period_started_at as timestamp) as current_period_started_at,\n        cast(current_term_ends_at as timestamp) as current_term_ended_at,\n        cast(current_term_started_at as timestamp) as current_term_started_at,\n        expiration_reason,\n        cast(expires_at as timestamp) as expires_at,\n        auto_renew as has_auto_renew,\n        started_with_gift as has_started_with_gift,\n        row_number() over (partition by id order by current_period_started_at desc) = 1 as is_most_recent_record,\n        object,\n        cast(paused_at as timestamp) as paused_at, \n        plan_id,\n        quantity,\n        remaining_billing_cycles,\n        remaining_pause_cycles,\n        renewal_billing_cycles,\n        state,\n        subtotal,\n        total_billing_cycles,\n        cast(trial_ends_at as timestamp) as trial_ends_at,\n        cast(trial_started_at as timestamp) as trial_started_at,\n        cast(unit_amount as FLOAT64) as unit_amount,\n        uuid\n\n        --The below macro adds the fields defined within your accounts_pass_through_columns variable into the staging model\n        \n\n\n\n\n\n    from fields\n)\n\nselect *\nfrom final", "relation_name": "`dbt-package-testing`.`recurly_integrations_tests_recurly_dev`.`stg_recurly__subscription_history`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-08-13T20:04:45.005381Z", "completed_at": "2024-08-13T20:04:45.008662Z"}, {"name": "execute", "started_at": "2024-08-13T20:04:45.009144Z", "completed_at": "2024-08-13T20:04:45.009149Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.010048151016235352, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.recurly_source.not_null_stg_recurly__billing_info_history_billing_id.0ea7044987", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect billing_id\nfrom `dbt-package-testing`.`recurly_integrations_tests_recurly_dev`.`stg_recurly__billing_info_history`\nwhere billing_id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-08-13T20:04:45.000074Z", "completed_at": "2024-08-13T20:04:45.009741Z"}, {"name": "execute", "started_at": "2024-08-13T20:04:45.010623Z", "completed_at": "2024-08-13T20:04:45.010626Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.01197195053100586, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.recurly_source.dbt_utils_unique_combination_of_columns_stg_recurly__billing_info_history_billing_id__updated_at.e0eac3a8ea", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        billing_id, updated_at\n    from `dbt-package-testing`.`recurly_integrations_tests_recurly_dev`.`stg_recurly__billing_info_history`\n    group by billing_id, updated_at\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-08-13T20:04:45.011315Z", "completed_at": "2024-08-13T20:04:45.016335Z"}, {"name": "execute", "started_at": "2024-08-13T20:04:45.016766Z", "completed_at": "2024-08-13T20:04:45.016771Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.006758928298950195, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.recurly_source.dbt_utils_unique_combination_of_columns_stg_recurly__account_history_account_id__updated_at.8b52517a8d", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        account_id, updated_at\n    from `dbt-package-testing`.`recurly_integrations_tests_recurly_dev`.`stg_recurly__account_history`\n    group by account_id, updated_at\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-08-13T20:04:45.014434Z", "completed_at": "2024-08-13T20:04:45.017328Z"}, {"name": "execute", "started_at": "2024-08-13T20:04:45.018191Z", "completed_at": "2024-08-13T20:04:45.018195Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.0048100948333740234, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.recurly_source.not_null_stg_recurly__account_history_account_id.44786b38b6", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect account_id\nfrom `dbt-package-testing`.`recurly_integrations_tests_recurly_dev`.`stg_recurly__account_history`\nwhere account_id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-08-13T20:04:45.018932Z", "completed_at": "2024-08-13T20:04:45.024170Z"}, {"name": "execute", "started_at": "2024-08-13T20:04:45.024589Z", "completed_at": "2024-08-13T20:04:45.024594Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.00718998908996582, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.recurly_source.dbt_utils_unique_combination_of_columns_stg_recurly__account_balance_history_account_id__account_updated_at__currency.f2a92ef487", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        account_id, account_updated_at, currency\n    from `dbt-package-testing`.`recurly_integrations_tests_recurly_dev`.`stg_recurly__account_balance_history`\n    group by account_id, account_updated_at, currency\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-08-13T20:04:45.022358Z", "completed_at": "2024-08-13T20:04:45.024769Z"}, {"name": "execute", "started_at": "2024-08-13T20:04:45.025935Z", "completed_at": "2024-08-13T20:04:45.025938Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.004675149917602539, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.recurly_source.not_null_stg_recurly__account_balance_history_account_id.3e5f5059aa", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect account_id\nfrom `dbt-package-testing`.`recurly_integrations_tests_recurly_dev`.`stg_recurly__account_balance_history`\nwhere account_id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-08-13T20:04:45.027195Z", "completed_at": "2024-08-13T20:04:45.032692Z"}, {"name": "execute", "started_at": "2024-08-13T20:04:45.033101Z", "completed_at": "2024-08-13T20:04:45.033107Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.007657051086425781, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.recurly_source.dbt_utils_unique_combination_of_columns_stg_recurly__coupon_discount_fivetran_id__coupon_id.3b43f53454", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        fivetran_id, coupon_id\n    from `dbt-package-testing`.`recurly_integrations_tests_recurly_dev`.`stg_recurly__coupon_discount`\n    group by fivetran_id, coupon_id\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-08-13T20:04:45.030750Z", "completed_at": "2024-08-13T20:04:45.033358Z"}, {"name": "execute", "started_at": "2024-08-13T20:04:45.037054Z", "completed_at": "2024-08-13T20:04:45.037064Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.010660171508789062, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.recurly_source.not_null_stg_recurly__coupon_discount_coupon_id.5cadc37042", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect coupon_id\nfrom `dbt-package-testing`.`recurly_integrations_tests_recurly_dev`.`stg_recurly__coupon_discount`\nwhere coupon_id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-08-13T20:04:45.041574Z", "completed_at": "2024-08-13T20:04:45.048912Z"}, {"name": "execute", "started_at": "2024-08-13T20:04:45.049530Z", "completed_at": "2024-08-13T20:04:45.049535Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.011184215545654297, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.recurly_source.not_null_stg_recurly__coupon_discount_fivetran_id.72815f9856", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect fivetran_id\nfrom `dbt-package-testing`.`recurly_integrations_tests_recurly_dev`.`stg_recurly__coupon_discount`\nwhere fivetran_id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-08-13T20:04:45.045235Z", "completed_at": "2024-08-13T20:04:45.053289Z"}, {"name": "execute", "started_at": "2024-08-13T20:04:45.053721Z", "completed_at": "2024-08-13T20:04:45.053725Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.010066032409667969, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.recurly_source.dbt_utils_unique_combination_of_columns_stg_recurly__invoice_coupon_redemption_history_coupon_redemption_id__invoice_id__invoice_updated_at.342096847a", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        coupon_redemption_id, invoice_id, invoice_updated_at\n    from `dbt-package-testing`.`recurly_integrations_tests_recurly_dev`.`stg_recurly__invoice_coupon_redemption_history`\n    group by coupon_redemption_id, invoice_id, invoice_updated_at\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-08-13T20:04:45.050870Z", "completed_at": "2024-08-13T20:04:45.054494Z"}, {"name": "execute", "started_at": "2024-08-13T20:04:45.055336Z", "completed_at": "2024-08-13T20:04:45.055339Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.0075321197509765625, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.recurly_source.not_null_stg_recurly__invoice_coupon_redemption_history_coupon_redemption_id.7231a87702", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect coupon_redemption_id\nfrom `dbt-package-testing`.`recurly_integrations_tests_recurly_dev`.`stg_recurly__invoice_coupon_redemption_history`\nwhere coupon_redemption_id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-08-13T20:04:45.055535Z", "completed_at": "2024-08-13T20:04:45.060955Z"}, {"name": "execute", "started_at": "2024-08-13T20:04:45.061348Z", "completed_at": "2024-08-13T20:04:45.061352Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.00697016716003418, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.recurly_source.dbt_utils_unique_combination_of_columns_stg_recurly__coupon_redemption_history_coupon_redemption_id__updated_at.3231280b1f", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        coupon_redemption_id, updated_at\n    from `dbt-package-testing`.`recurly_integrations_tests_recurly_dev`.`stg_recurly__coupon_redemption_history`\n    group by coupon_redemption_id, updated_at\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-08-13T20:04:45.058966Z", "completed_at": "2024-08-13T20:04:45.062088Z"}, {"name": "execute", "started_at": "2024-08-13T20:04:45.063899Z", "completed_at": "2024-08-13T20:04:45.063903Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.008584022521972656, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.recurly_source.not_null_stg_recurly__coupon_redemption_history_coupon_redemption_id.e23507152c", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect coupon_redemption_id\nfrom `dbt-package-testing`.`recurly_integrations_tests_recurly_dev`.`stg_recurly__coupon_redemption_history`\nwhere coupon_redemption_id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-08-13T20:04:45.064086Z", "completed_at": "2024-08-13T20:04:45.068395Z"}, {"name": "execute", "started_at": "2024-08-13T20:04:45.071481Z", "completed_at": "2024-08-13T20:04:45.071485Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.00869607925415039, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.recurly_source.dbt_utils_unique_combination_of_columns_stg_recurly__credit_payment_history_credit_payment_id__updated_at.4b777b7f53", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        credit_payment_id, updated_at\n    from `dbt-package-testing`.`recurly_integrations_tests_recurly_dev`.`stg_recurly__credit_payment_history`\n    group by credit_payment_id, updated_at\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-08-13T20:04:45.068619Z", "completed_at": "2024-08-13T20:04:45.072546Z"}, {"name": "execute", "started_at": "2024-08-13T20:04:45.073469Z", "completed_at": "2024-08-13T20:04:45.073473Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.008411169052124023, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.recurly_source.not_null_stg_recurly__credit_payment_history_credit_payment_id.242ec5084a", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect credit_payment_id\nfrom `dbt-package-testing`.`recurly_integrations_tests_recurly_dev`.`stg_recurly__credit_payment_history`\nwhere credit_payment_id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-08-13T20:04:45.073714Z", "completed_at": "2024-08-13T20:04:45.079838Z"}, {"name": "execute", "started_at": "2024-08-13T20:04:45.080399Z", "completed_at": "2024-08-13T20:04:45.080403Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.008051156997680664, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.recurly_source.dbt_utils_unique_combination_of_columns_stg_recurly__invoice_history_invoice_id__updated_at.7ab44a4bd3", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        invoice_id, updated_at\n    from `dbt-package-testing`.`recurly_integrations_tests_recurly_dev`.`stg_recurly__invoice_history`\n    group by invoice_id, updated_at\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-08-13T20:04:45.077543Z", "completed_at": "2024-08-13T20:04:45.081294Z"}, {"name": "execute", "started_at": "2024-08-13T20:04:45.082202Z", "completed_at": "2024-08-13T20:04:45.082205Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.0078008174896240234, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.recurly_source.not_null_stg_recurly__invoice_history_invoice_id.8a72a867d9", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect invoice_id\nfrom `dbt-package-testing`.`recurly_integrations_tests_recurly_dev`.`stg_recurly__invoice_history`\nwhere invoice_id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-08-13T20:04:45.082406Z", "completed_at": "2024-08-13T20:04:45.085766Z"}, {"name": "execute", "started_at": "2024-08-13T20:04:45.088445Z", "completed_at": "2024-08-13T20:04:45.088449Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.007248878479003906, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.recurly_source.not_null_stg_recurly__invoice_history_number.2f6fe530ab", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect number\nfrom `dbt-package-testing`.`recurly_integrations_tests_recurly_dev`.`stg_recurly__invoice_history`\nwhere number is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-08-13T20:04:45.085961Z", "completed_at": "2024-08-13T20:04:45.089218Z"}, {"name": "execute", "started_at": "2024-08-13T20:04:45.090003Z", "completed_at": "2024-08-13T20:04:45.090006Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.007089853286743164, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.recurly_source.dbt_utils_unique_combination_of_columns_stg_recurly__invoice_subscription_history_invoice_id__invoice_updated_at__subscription_id.f57f4495ea", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        invoice_id, invoice_updated_at, subscription_id\n    from `dbt-package-testing`.`recurly_integrations_tests_recurly_dev`.`stg_recurly__invoice_subscription_history`\n    group by invoice_id, invoice_updated_at, subscription_id\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-08-13T20:04:45.090192Z", "completed_at": "2024-08-13T20:04:45.093316Z"}, {"name": "execute", "started_at": "2024-08-13T20:04:45.095572Z", "completed_at": "2024-08-13T20:04:45.095576Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.006478786468505859, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.recurly_source.not_null_stg_recurly__invoice_subscription_history_invoice_id.0cf4105c8e", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect invoice_id\nfrom `dbt-package-testing`.`recurly_integrations_tests_recurly_dev`.`stg_recurly__invoice_subscription_history`\nwhere invoice_id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-08-13T20:04:45.093497Z", "completed_at": "2024-08-13T20:04:45.096597Z"}, {"name": "execute", "started_at": "2024-08-13T20:04:45.100044Z", "completed_at": "2024-08-13T20:04:45.100047Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.007537126541137695, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.recurly_source.not_null_stg_recurly__invoice_subscription_history_subscription_id.ded699c67d", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect subscription_id\nfrom `dbt-package-testing`.`recurly_integrations_tests_recurly_dev`.`stg_recurly__invoice_subscription_history`\nwhere subscription_id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-08-13T20:04:45.097083Z", "completed_at": "2024-08-13T20:04:45.101076Z"}, {"name": "execute", "started_at": "2024-08-13T20:04:45.103386Z", "completed_at": "2024-08-13T20:04:45.103389Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.0073909759521484375, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.recurly_source.dbt_utils_unique_combination_of_columns_stg_recurly__line_item_history_line_item_id__updated_at.d4b4d9b36d", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        line_item_id, updated_at\n    from `dbt-package-testing`.`recurly_integrations_tests_recurly_dev`.`stg_recurly__line_item_history`\n    group by line_item_id, updated_at\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-08-13T20:04:45.101566Z", "completed_at": "2024-08-13T20:04:45.104437Z"}, {"name": "execute", "started_at": "2024-08-13T20:04:45.107232Z", "completed_at": "2024-08-13T20:04:45.107235Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.006762981414794922, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.recurly_source.not_null_stg_recurly__line_item_history_line_item_id.a1e1c656cf", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect line_item_id\nfrom `dbt-package-testing`.`recurly_integrations_tests_recurly_dev`.`stg_recurly__line_item_history`\nwhere line_item_id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-08-13T20:04:45.104966Z", "completed_at": "2024-08-13T20:04:45.108273Z"}, {"name": "execute", "started_at": "2024-08-13T20:04:45.110422Z", "completed_at": "2024-08-13T20:04:45.110425Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.006611824035644531, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.recurly_source.dbt_utils_unique_combination_of_columns_stg_recurly__plan_currency_history_plan_id__plan_updated_at__currency.e0bd5adf3b", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        plan_id, plan_updated_at, currency\n    from `dbt-package-testing`.`recurly_integrations_tests_recurly_dev`.`stg_recurly__plan_currency_history`\n    group by plan_id, plan_updated_at, currency\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-08-13T20:04:45.108791Z", "completed_at": "2024-08-13T20:04:45.111463Z"}, {"name": "execute", "started_at": "2024-08-13T20:04:45.113718Z", "completed_at": "2024-08-13T20:04:45.113721Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.00604701042175293, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.recurly_source.not_null_stg_recurly__plan_currency_history_plan_id.9fc7106759", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect plan_id\nfrom `dbt-package-testing`.`recurly_integrations_tests_recurly_dev`.`stg_recurly__plan_currency_history`\nwhere plan_id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-08-13T20:04:45.111971Z", "completed_at": "2024-08-13T20:04:45.114885Z"}, {"name": "execute", "started_at": "2024-08-13T20:04:45.116988Z", "completed_at": "2024-08-13T20:04:45.116991Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.0061151981353759766, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.recurly_source.dbt_utils_unique_combination_of_columns_stg_recurly__plan_history_plan_id__updated_at.266aec2c6a", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        plan_id, updated_at\n    from `dbt-package-testing`.`recurly_integrations_tests_recurly_dev`.`stg_recurly__plan_history`\n    group by plan_id, updated_at\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-08-13T20:04:45.115069Z", "completed_at": "2024-08-13T20:04:45.117689Z"}, {"name": "execute", "started_at": "2024-08-13T20:04:45.118468Z", "completed_at": "2024-08-13T20:04:45.118472Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.006206989288330078, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.recurly_source.not_null_stg_recurly__plan_history_plan_id.78effe7ba4", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect plan_id\nfrom `dbt-package-testing`.`recurly_integrations_tests_recurly_dev`.`stg_recurly__plan_history`\nwhere plan_id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-08-13T20:04:45.118640Z", "completed_at": "2024-08-13T20:04:45.121525Z"}, {"name": "execute", "started_at": "2024-08-13T20:04:45.123781Z", "completed_at": "2024-08-13T20:04:45.123784Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.00621795654296875, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.recurly_source.dbt_utils_unique_combination_of_columns_stg_recurly__subscription_add_on_history_subscription_add_on_id__updated_at.a589f1354f", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        subscription_add_on_id, updated_at\n    from `dbt-package-testing`.`recurly_integrations_tests_recurly_dev`.`stg_recurly__subscription_add_on_history`\n    group by subscription_add_on_id, updated_at\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-08-13T20:04:45.121722Z", "completed_at": "2024-08-13T20:04:45.124507Z"}, {"name": "execute", "started_at": "2024-08-13T20:04:45.125283Z", "completed_at": "2024-08-13T20:04:45.125286Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.007205009460449219, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.recurly_source.not_null_stg_recurly__subscription_add_on_history_subscription_add_on_id.17162cbb6e", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect subscription_add_on_id\nfrom `dbt-package-testing`.`recurly_integrations_tests_recurly_dev`.`stg_recurly__subscription_add_on_history`\nwhere subscription_add_on_id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-08-13T20:04:45.125462Z", "completed_at": "2024-08-13T20:04:45.129195Z"}, {"name": "execute", "started_at": "2024-08-13T20:04:45.131440Z", "completed_at": "2024-08-13T20:04:45.131443Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.007058858871459961, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.recurly_source.dbt_utils_unique_combination_of_columns_stg_recurly__subscription_change_history_subscription_change_id__updated_at.bb2112fd18", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        subscription_change_id, updated_at\n    from `dbt-package-testing`.`recurly_integrations_tests_recurly_dev`.`stg_recurly__subscription_change_history`\n    group by subscription_change_id, updated_at\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-08-13T20:04:45.129374Z", "completed_at": "2024-08-13T20:04:45.132447Z"}, {"name": "execute", "started_at": "2024-08-13T20:04:45.134602Z", "completed_at": "2024-08-13T20:04:45.134605Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.006139993667602539, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.recurly_source.not_null_stg_recurly__subscription_change_history_subscription_change_id.d2bd0b27a6", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect subscription_change_id\nfrom `dbt-package-testing`.`recurly_integrations_tests_recurly_dev`.`stg_recurly__subscription_change_history`\nwhere subscription_change_id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-08-13T20:04:45.132927Z", "completed_at": "2024-08-13T20:04:45.135749Z"}, {"name": "execute", "started_at": "2024-08-13T20:04:45.137840Z", "completed_at": "2024-08-13T20:04:45.137843Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.0059850215911865234, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.recurly_source.dbt_utils_unique_combination_of_columns_stg_recurly__subscription_history_subscription_id__updated_at.bcb59ad4a4", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        subscription_id, updated_at\n    from `dbt-package-testing`.`recurly_integrations_tests_recurly_dev`.`stg_recurly__subscription_history`\n    group by subscription_id, updated_at\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-08-13T20:04:45.135934Z", "completed_at": "2024-08-13T20:04:45.138395Z"}, {"name": "execute", "started_at": "2024-08-13T20:04:45.138730Z", "completed_at": "2024-08-13T20:04:45.138733Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.0036962032318115234, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.recurly_source.not_null_stg_recurly__subscription_history_subscription_id.57c06c08bb", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect subscription_id\nfrom `dbt-package-testing`.`recurly_integrations_tests_recurly_dev`.`stg_recurly__subscription_history`\nwhere subscription_id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-08-13T20:04:44.817898Z", "completed_at": "2024-08-13T20:04:45.160583Z"}, {"name": "execute", "started_at": "2024-08-13T20:04:45.160948Z", "completed_at": "2024-08-13T20:04:45.160951Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.34441232681274414, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.recurly_source.stg_recurly__transaction_subscription", "compiled": true, "compiled_code": "with base as (\n\n    select *\n    from `dbt-package-testing`.`recurly_integrations_tests_recurly_dev`.`stg_recurly__transaction_subscription_tmp`\n),\n\nfields as (\n\n    select \n        \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    \n    \n    transaction_id\n    \n as \n    \n    transaction_id\n    \n, \n    \n    \n    subscription_id\n    \n as \n    \n    subscription_id\n    \n\n\n\n    from base\n\n),\n\nfinal as (\n\n    select\n        transaction_id, \n        subscription_id\n    from fields\n)\n\nselect *\nfrom final", "relation_name": "`dbt-package-testing`.`recurly_integrations_tests_recurly_dev`.`stg_recurly__transaction_subscription`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-08-13T20:04:45.163365Z", "completed_at": "2024-08-13T20:04:45.168766Z"}, {"name": "execute", "started_at": "2024-08-13T20:04:45.169632Z", "completed_at": "2024-08-13T20:04:45.169635Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.008193016052246094, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.recurly_source.dbt_utils_unique_combination_of_columns_stg_recurly__transaction_subscription_transaction_id__subscription_id.f396a8e771", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        transaction_id, subscription_id\n    from `dbt-package-testing`.`recurly_integrations_tests_recurly_dev`.`stg_recurly__transaction_subscription`\n    group by transaction_id, subscription_id\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-08-13T20:04:45.165445Z", "completed_at": "2024-08-13T20:04:45.168957Z"}, {"name": "execute", "started_at": "2024-08-13T20:04:45.169968Z", "completed_at": "2024-08-13T20:04:45.169971Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.008449792861938477, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.recurly_source.not_null_stg_recurly__transaction_subscription_subscription_id.0f7cd7e702", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect subscription_id\nfrom `dbt-package-testing`.`recurly_integrations_tests_recurly_dev`.`stg_recurly__transaction_subscription`\nwhere subscription_id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-08-13T20:04:45.167025Z", "completed_at": "2024-08-13T20:04:45.169299Z"}, {"name": "execute", "started_at": "2024-08-13T20:04:45.170503Z", "completed_at": "2024-08-13T20:04:45.170505Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.008574962615966797, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.recurly_source.not_null_stg_recurly__transaction_subscription_transaction_id.99c6baecfe", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect transaction_id\nfrom `dbt-package-testing`.`recurly_integrations_tests_recurly_dev`.`stg_recurly__transaction_subscription`\nwhere transaction_id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-08-13T20:04:44.919821Z", "completed_at": "2024-08-13T20:04:45.327636Z"}, {"name": "execute", "started_at": "2024-08-13T20:04:45.327976Z", "completed_at": "2024-08-13T20:04:45.327981Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.40900611877441406, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.recurly_source.stg_recurly__transaction", "compiled": true, "compiled_code": "with base as (\n\n    select *\n    from `dbt-package-testing`.`recurly_integrations_tests_recurly_dev`.`stg_recurly__transaction_tmp`\n),\n\nfields as (\n\n    select\n        \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    \n    \n    id\n    \n as \n    \n    id\n    \n, \n    \n    \n    created_at\n    \n as \n    \n    created_at\n    \n, \n    \n    \n    voided_at\n    \n as \n    \n    voided_at\n    \n, \n    \n    \n    collected_at\n    \n as \n    \n    collected_at\n    \n, \n    \n    \n    original_transaction_id\n    \n as \n    \n    original_transaction_id\n    \n, \n    \n    \n    account_id\n    \n as \n    \n    account_id\n    \n, \n    \n    \n    invoice_id\n    \n as \n    \n    invoice_id\n    \n, \n    \n    \n    voided_by_invoice_id\n    \n as \n    \n    voided_by_invoice_id\n    \n, \n    \n    \n    uuid\n    \n as \n    \n    uuid\n    \n, \n    \n    \n    type\n    \n as \n    \n    type\n    \n, \n    \n    \n    origin\n    \n as \n    \n    origin\n    \n, \n    \n    \n    currency\n    \n as \n    \n    currency\n    \n, \n    \n    \n    amount\n    \n as \n    \n    amount\n    \n, \n    \n    \n    status\n    \n as \n    \n    status\n    \n, \n    \n    \n    success\n    \n as \n    \n    success\n    \n, \n    \n    \n    refunded\n    \n as \n    \n    refunded\n    \n, \n    \n    \n    billing_first_name\n    \n as \n    \n    billing_first_name\n    \n, \n    \n    \n    billing_last_name\n    \n as \n    \n    billing_last_name\n    \n, \n    \n    \n    billing_phone\n    \n as \n    \n    billing_phone\n    \n, \n    \n    \n    billing_street_1\n    \n as \n    \n    billing_street_1\n    \n, \n    \n    \n    billing_street_2\n    \n as \n    \n    billing_street_2\n    \n, \n    \n    \n    billing_city\n    \n as \n    \n    billing_city\n    \n, \n    \n    \n    billing_region\n    \n as \n    \n    billing_region\n    \n, \n    \n    \n    billing_postal_code\n    \n as \n    \n    billing_postal_code\n    \n, \n    \n    \n    billing_country\n    \n as \n    \n    billing_country\n    \n, \n    \n    \n    collection_method\n    \n as \n    \n    collection_method\n    \n, \n    \n    \n    payment_method_object\n    \n as \n    \n    payment_method_object\n    \n, \n    \n    \n    status_code\n    \n as \n    \n    status_code\n    \n, \n    \n    \n    status_message\n    \n as \n    \n    status_message\n    \n, \n    \n    \n    customer_message\n    \n as \n    \n    customer_message\n    \n, \n    \n    \n    customer_message_locale\n    \n as \n    \n    customer_message_locale\n    \n, \n    \n    \n    gateway_message\n    \n as \n    \n    gateway_message\n    \n, \n    \n    \n    gateway_reference\n    \n as \n    \n    gateway_reference\n    \n, \n    \n    \n    gateway_approval_code\n    \n as \n    \n    gateway_approval_code\n    \n, \n    \n    \n    gateway_response_code\n    \n as \n    \n    gateway_response_code\n    \n, \n    \n    \n    gateway_response_time\n    \n as \n    \n    gateway_response_time\n    \n, \n    \n    \n    payment_gateway_id\n    \n as \n    \n    payment_gateway_id\n    \n, \n    cast(null as string) as \n    \n    payment_gateway_type\n    \n , \n    \n    \n    payment_gateway_name\n    \n as \n    \n    payment_gateway_name\n    \n, \n    \n    \n    gateway_response_values\n    \n as \n    \n    gateway_response_values\n    \n\n\n\n    from base\n),\n\nfinal as (\n\n    select  \n        id as transaction_id,\n        cast(created_at as timestamp) as created_at,\n        account_id,\n        cast(amount as FLOAT64) as amount,\n        billing_city,\n        billing_country,\n        billing_first_name,\n        billing_last_name,\n        billing_phone,\n        billing_postal_code,\n        billing_region,\n        billing_street_1,\n        billing_street_2,\n        cast(collected_at as timestamp) as collected_at,\n        collection_method,\n        currency,\n        customer_message,\n        customer_message_locale,\n        gateway_approval_code,\n        gateway_message,\n        gateway_reference,\n        gateway_response_code,\n        gateway_response_time,\n        gateway_response_values,\n        invoice_id,\n        refunded as is_refunded,\n        success as is_successful,\n        row_number() over (partition by id order by created_at desc) = 1 as is_most_recent_record,\n        origin,\n        original_transaction_id, \n        payment_gateway_id,\n        payment_gateway_name,\n        payment_gateway_type,\n        payment_method_object,\n        status,\n        status_code,\n        status_message,\n        TYPE as type,\n        uuid,\n        cast(voided_at as timestamp) as voided_at,\n        voided_by_invoice_id\n    from fields\n)\n\nselect *\nfrom final", "relation_name": "`dbt-package-testing`.`recurly_integrations_tests_recurly_dev`.`stg_recurly__transaction`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-08-13T20:04:45.332986Z", "completed_at": "2024-08-13T20:04:45.336764Z"}, {"name": "execute", "started_at": "2024-08-13T20:04:45.337333Z", "completed_at": "2024-08-13T20:04:45.337337Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.008450031280517578, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.recurly_source.dbt_utils_unique_combination_of_columns_stg_recurly__transaction_transaction_id__created_at.769d67c8b8", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        transaction_id, created_at\n    from `dbt-package-testing`.`recurly_integrations_tests_recurly_dev`.`stg_recurly__transaction`\n    group by transaction_id, created_at\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-08-13T20:04:45.334925Z", "completed_at": "2024-08-13T20:04:45.337155Z"}, {"name": "execute", "started_at": "2024-08-13T20:04:45.338338Z", "completed_at": "2024-08-13T20:04:45.338341Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.009106874465942383, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.recurly_source.not_null_stg_recurly__transaction_transaction_id.5f44527c3c", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect transaction_id\nfrom `dbt-package-testing`.`recurly_integrations_tests_recurly_dev`.`stg_recurly__transaction`\nwhere transaction_id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-08-13T20:04:45.330474Z", "completed_at": "2024-08-13T20:04:45.337512Z"}, {"name": "execute", "started_at": "2024-08-13T20:04:45.338566Z", "completed_at": "2024-08-13T20:04:45.338570Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.009985923767089844, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.recurly.recurly__balance_transactions", "compiled": true, "compiled_code": "with line_item_history as (\n\n    select * \n    from `dbt-package-testing`.`recurly_integrations_tests_recurly_dev`.`stg_recurly__line_item_history`\n    where is_most_recent_record\n),\n\ninvoice_history as (\n\n    select *\n    from `dbt-package-testing`.`recurly_integrations_tests_recurly_dev`.`stg_recurly__invoice_history`\n    where is_most_recent_record\n),\n\ntransaction_history as (\n\n    select * \n    from `dbt-package-testing`.`recurly_integrations_tests_recurly_dev`.`stg_recurly__transaction`\n    where is_most_recent_record\n),\n\n\nfinal as (\n\n    select \n        line_item_history.line_item_id as balance_transaction_id,\n        line_item_history.created_at,\n        line_item_history.updated_at,\n        line_item_history.account_id,\n        line_item_history.invoice_id,\n        line_item_history.invoice_number,\n        line_item_history.type,\n        line_item_history.state,\n        line_item_history.origin,\n        line_item_history.product_code,\n        line_item_history.discount,\n        line_item_history.tax,\n        line_item_history.description,\n        line_item_history.plan_code,\n        line_item_history.add_on_code,\n        line_item_history.has_refund,\n        line_item_history.refunded_quantity,\n        line_item_history.currency,\n        line_item_history.amount,\n        line_item_history.credit_applied, \n        line_item_history.quantity,\n        line_item_history.unit_amount,\n        line_item_history.subtotal,\n        line_item_history.started_at,\n        line_item_history.ended_at,    \n        line_item_history.original_line_item_invoice_id,\n        line_item_history.previous_line_item_id,\n        invoice_history.state as invoice_state,\n        invoice_history.origin as invoice_origin,\n        invoice_history.type as invoice_type,\n        invoice_history.created_at as invoice_created_at,\n        invoice_history.due_at as invoice_due_at,\n        invoice_history.closed_at as invoice_closed_at, \n        transaction_history.transaction_id,\n        transaction_history.created_at as transaction_created_at,\n        transaction_history.type as transaction_type,\n        transaction_history.origin as transaction_origin,\n        transaction_history.status as transaction_status, \n        transaction_history.billing_country as transaction_billing_country, \n        transaction_history.status_message as transaction_status_message,\n        transaction_history.payment_method_object as transaction_payment_method_object\n    from line_item_history \n    left join invoice_history\n        on line_item_history.invoice_id = invoice_history.invoice_id\n    left join transaction_history \n        on invoice_history.invoice_id = transaction_history.invoice_id\n)\n\nselect * \nfrom final", "relation_name": "`dbt-package-testing`.`recurly_integrations_tests_recurly_dev`.`recurly__balance_transactions`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-08-13T20:04:45.341825Z", "completed_at": "2024-08-13T20:04:45.357104Z"}, {"name": "execute", "started_at": "2024-08-13T20:04:45.358472Z", "completed_at": "2024-08-13T20:04:45.358476Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.019227981567382812, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.recurly.int_recurly__transactions_grouped", "compiled": true, "compiled_code": "with balance_transaction_joined as (\n\n    select * \n    from `dbt-package-testing`.`recurly_integrations_tests_recurly_dev`.`recurly__balance_transactions`\n),\n\nfinal as (\n    \n    select  \n        account_id,\n        cast(timestamp_trunc(\n        cast(created_at as timestamp),\n        day\n    ) as date) as date_day,             \n        cast(timestamp_trunc(\n        cast(created_at as timestamp),\n        week\n    ) as date) as date_week, \n        cast(timestamp_trunc(\n        cast(created_at as timestamp),\n        month\n    ) as date) as date_month, \n        cast(timestamp_trunc(\n        cast(created_at as timestamp),\n        year\n    ) as date) as date_year,  \n        count(distinct transaction_id) as daily_transactions,\n        count(distinct invoice_id) as daily_invoices,\n        sum(case when lower(type) = 'charge' \n            then amount\n            else 0 \n            end) as daily_charges,\n        sum(case when lower(type) = 'credit' \n            then amount\n            else 0 \n            end) as daily_credits,\n        sum(amount) as daily_balance,\n        sum(discount) as daily_discounts,\n        sum(tax) as daily_taxes,\n        sum(case when lower(type) = 'charge' \n            then 1\n            else 0 \n            end) as daily_charge_count,\n        sum(case when lower(type) = 'credit' \n            then 1\n            else 0 \n            end) as daily_credit_count\n    from balance_transaction_joined\n    group by 1,2,3,4,5\n) \n\nselect * \nfrom final", "relation_name": "`dbt-package-testing`.`recurly_integrations_tests_recurly_dev`.`int_recurly__transactions_grouped`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-08-13T20:04:45.346215Z", "completed_at": "2024-08-13T20:04:45.357302Z"}, {"name": "execute", "started_at": "2024-08-13T20:04:45.358653Z", "completed_at": "2024-08-13T20:04:45.358657Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.019141197204589844, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.recurly.recurly__monthly_recurring_revenue", "compiled": true, "compiled_code": "with account_history as (\n\n    select * \n    from `dbt-package-testing`.`recurly_integrations_tests_recurly_dev`.`stg_recurly__account_history`\n    where is_most_recent_record\n),\n\nrecurly__balance_transactions as (\n\n    select * \n    from `dbt-package-testing`.`recurly_integrations_tests_recurly_dev`.`recurly__balance_transactions`\n),\n\nmrr_balance_transactions as (\n\n    select \n        account_id,\n        amount,\n        timestamp_trunc(\n        cast(created_at as timestamp),\n        month\n    ) as account_month \n    from recurly__balance_transactions\n    where lower(type) = 'charge' \n        and started_at is not null\n        and ended_at is not null\n), \n\nmrr_by_account as (\n\n    select \n        account_id,\n        account_month,\n        to_hex(md5(cast(coalesce(cast(account_id as string), '_dbt_utils_surrogate_key_null_') || '-' || coalesce(cast(account_month as string), '_dbt_utils_surrogate_key_null_') as string))) as account_monthly_id,\n        row_number() over (partition by account_id order by account_month) as account_month_number,\n        sum(amount) as current_month_mrr\n    from mrr_balance_transactions\n    group by 1,2,3\n\n),\n\ncurrent_vs_previous_mrr as (\n    \n    select \n        account_monthly_id,\n        account_id,\n        account_month,\n        account_month_number,\n        current_month_mrr,\n        lag(current_month_mrr) over (partition by account_id order by account_month) as previous_month_mrr\n    from mrr_by_account\n),\n\nmrr_type_enhanced as (\n\n    select \n        *,\n        case when current_month_mrr > previous_month_mrr then 'expansion'\n            when current_month_mrr < previous_month_mrr then 'contraction'\n            when current_month_mrr = previous_month_mrr then 'unchanged'\n            when previous_month_mrr is null then 'new'\n            when (current_month_mrr = 0.0 or current_month_mrr is null)\n                and (previous_month_mrr != 0.0)\n                then 'churned'\n            when (previous_month_mrr = 0.0 and current_month_mrr > 0.0 \n                and account_month_number >= 3) \n                then 'reactivation'\n            end as mrr_type\n    from current_vs_previous_mrr\n),\n\nfinal as (\n\n    select \n        mrr_type_enhanced.*,\n        account_history.code as account_code,\n        account_history.created_at as account_created_at,\n        account_history.email as account_email,\n        account_history.first_name as account_first_name,\n        account_history.last_name as account_last_name,\n        account_history.username as account_username\n    from mrr_type_enhanced\n    left join account_history on mrr_type_enhanced.account_id = account_history.account_id\n)\n\nselect * \nfrom final", "relation_name": "`dbt-package-testing`.`recurly_integrations_tests_recurly_dev`.`recurly__monthly_recurring_revenue`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-08-13T20:04:45.354409Z", "completed_at": "2024-08-13T20:04:45.357482Z"}, {"name": "execute", "started_at": "2024-08-13T20:04:45.358840Z", "completed_at": "2024-08-13T20:04:45.358842Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.018772125244140625, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.recurly.not_null_recurly__balance_transactions_balance_transaction_id.63b1820723", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect balance_transaction_id\nfrom `dbt-package-testing`.`recurly_integrations_tests_recurly_dev`.`recurly__balance_transactions`\nwhere balance_transaction_id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-08-13T20:04:45.352447Z", "completed_at": "2024-08-13T20:04:45.357660Z"}, {"name": "execute", "started_at": "2024-08-13T20:04:45.359024Z", "completed_at": "2024-08-13T20:04:45.359027Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.019542217254638672, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.recurly.dbt_utils_unique_combination_of_columns_recurly__balance_transactions_balance_transaction_id__transaction_id.837e2ce868", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        balance_transaction_id, transaction_id\n    from `dbt-package-testing`.`recurly_integrations_tests_recurly_dev`.`recurly__balance_transactions`\n    group by balance_transaction_id, transaction_id\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-08-13T20:04:45.362452Z", "completed_at": "2024-08-13T20:04:45.373198Z"}, {"name": "execute", "started_at": "2024-08-13T20:04:45.373924Z", "completed_at": "2024-08-13T20:04:45.373927Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.01333928108215332, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.recurly.int_recurly__account_cumulatives", "compiled": true, "compiled_code": "with transactions_grouped as (\n\n    select * \n    from `dbt-package-testing`.`recurly_integrations_tests_recurly_dev`.`int_recurly__transactions_grouped`\n),\n\nbalance_transaction_joined as (\n\n    select * \n    from `dbt-package-testing`.`recurly_integrations_tests_recurly_dev`.`recurly__balance_transactions`\n),\n \naccount_current_month as (\n        \n        select account_id,\n                sum(case when timestamp_trunc(\n        cast(date_day as timestamp),\n        month\n    ) = timestamp_trunc(\n        cast(current_timestamp as timestamp),\n        month\n    )\n                        then daily_transactions\n                        else 0 \n                        end) as transactions_this_month,\n                sum(case when timestamp_trunc(\n        cast(date_day as timestamp),\n        month\n    ) = timestamp_trunc(\n        cast(current_timestamp as timestamp),\n        month\n    )\n                        then daily_invoices\n                        else 0 \n                        end) as invoices_this_month,\n                sum(case when timestamp_trunc(\n        cast(date_day as timestamp),\n        month\n    ) = timestamp_trunc(\n        cast(current_timestamp as timestamp),\n        month\n    )\n                        then daily_balance\n                        else 0 \n                        end) as balance_this_month,\n                sum(case when timestamp_trunc(\n        cast(date_day as timestamp),\n        month\n    ) = timestamp_trunc(\n        cast(current_timestamp as timestamp),\n        month\n    )\n                        then daily_charges\n                        else 0 \n                        end) as charges_this_month,\n                sum(case when timestamp_trunc(\n        cast(date_day as timestamp),\n        month\n    ) = timestamp_trunc(\n        cast(current_timestamp as timestamp),\n        month\n    )\n                        then daily_credits\n                        else 0 \n                        end) as credits_this_month,\n                sum(case when timestamp_trunc(\n        cast(date_day as timestamp),\n        month\n    ) = timestamp_trunc(\n        cast(current_timestamp as timestamp),\n        month\n    )\n                        then daily_discounts\n                        else 0 \n                        end) as discounts_this_month,\n                sum(case when timestamp_trunc(\n        cast(date_day as timestamp),\n        month\n    ) = timestamp_trunc(\n        cast(current_timestamp as timestamp),\n        month\n    )\n                        then daily_credits\n                        else 0 \n                        end) as taxes_this_month\n        from transactions_grouped\n        group by 1  \n),\n\n\naccount_min_max as (\n\n    select \n        account_id,\n        min(case when lower(type) = 'charge' \n            then created_at \n            else null end) as first_charge_date,\n        max(case when lower(type) = 'charge' \n            then created_at\n            else null end) as most_recent_charge_date,\n        min(invoice_created_at) as first_invoice_date,\n        max(invoice_created_at) as most_recent_invoice_date,\n        min(transaction_created_at) as first_transaction_date,\n        max(transaction_created_at) as most_recent_transaction_date\n    from balance_transaction_joined\n    group by 1\n),\n\n\naccount_totals as (\n\n    select \n        account_id,\n        sum(daily_transactions) as total_transactions,\n        sum(daily_invoices) as total_invoices,\n        sum(daily_charges) as total_charges,\n        sum(daily_credits) as total_credits,\n        sum(daily_balance) as total_balance,\n        sum(daily_discounts) as total_discounts,\n        sum(daily_taxes) as total_taxes,\n        sum(daily_charge_count) as total_charge_count,\n        sum(daily_credit_count) as total_credit_count\n    from transactions_grouped\n    group by 1\n),\n\nfinal as (\n\n    select distinct\n        account_totals.*,\n        account_current_month.transactions_this_month,\n        account_current_month.invoices_this_month,\n        account_current_month.balance_this_month,\n        account_current_month.charges_this_month,\n        account_current_month.credits_this_month,\n        account_current_month.discounts_this_month,\n        account_current_month.taxes_this_month,\n        account_min_max.first_charge_date,\n        account_min_max.most_recent_charge_date,\n        account_min_max.first_invoice_date,\n        account_min_max.most_recent_invoice_date,\n        account_min_max.first_transaction_date,\n        account_min_max.most_recent_transaction_date\n    from account_totals\n    left join account_current_month \n        on account_totals.account_id = account_current_month.account_id\n    left join account_min_max\n        on account_totals.account_id = account_min_max.account_id\n)\n\nselect *\nfrom final", "relation_name": "`dbt-package-testing`.`recurly_integrations_tests_recurly_dev`.`int_recurly__account_cumulatives`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-08-13T20:04:45.368708Z", "completed_at": "2024-08-13T20:04:45.373401Z"}, {"name": "execute", "started_at": "2024-08-13T20:04:45.374270Z", "completed_at": "2024-08-13T20:04:45.374273Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.013559103012084961, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.recurly.not_null_recurly__monthly_recurring_revenue_account_monthly_id.3957633afc", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect account_monthly_id\nfrom `dbt-package-testing`.`recurly_integrations_tests_recurly_dev`.`recurly__monthly_recurring_revenue`\nwhere account_monthly_id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-08-13T20:04:45.370407Z", "completed_at": "2024-08-13T20:04:45.374096Z"}, {"name": "execute", "started_at": "2024-08-13T20:04:45.375506Z", "completed_at": "2024-08-13T20:04:45.375509Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.01435995101928711, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.recurly.unique_recurly__monthly_recurring_revenue_account_monthly_id.f687206566", "compiled": true, "compiled_code": "\n    \n    \n\nwith dbt_test__target as (\n\n  select account_monthly_id as unique_field\n  from `dbt-package-testing`.`recurly_integrations_tests_recurly_dev`.`recurly__monthly_recurring_revenue`\n  where account_monthly_id is not null\n\n)\n\nselect\n    unique_field,\n    count(*) as n_records\n\nfrom dbt_test__target\ngroup by unique_field\nhaving count(*) > 1\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-08-13T20:04:45.376515Z", "completed_at": "2024-08-13T20:04:45.380280Z"}, {"name": "execute", "started_at": "2024-08-13T20:04:45.380606Z", "completed_at": "2024-08-13T20:04:45.380609Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.005174875259399414, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.recurly.recurly__account_overview", "compiled": true, "compiled_code": "with account_history as (\n\n    select * \n    from `dbt-package-testing`.`recurly_integrations_tests_recurly_dev`.`stg_recurly__account_history`\n    where is_most_recent_record\n),\n\nbalance_transaction_joined as (\n\n    select * \n    from `dbt-package-testing`.`recurly_integrations_tests_recurly_dev`.`recurly__balance_transactions`\n),\n\naccount_cumulatives as (\n\n    select * \n    from `dbt-package-testing`.`recurly_integrations_tests_recurly_dev`.`int_recurly__account_cumulatives`\n),\n\naccount_next_invoice as (\n\n    select \n        account_id, \n        min(invoice_due_at) as next_invoice_due_at\n    from balance_transaction_joined\n    where invoice_due_at > timestamp_trunc(\n        cast(current_timestamp as timestamp),\n        day\n    )\n    group by 1  \n),\n\nfinal as ( \n\n    select \n        account_history.account_id,\n        account_history.created_at as account_created_at,\n        account_history.account_city,\n        account_history.code as account_code,       \n        account_history.company as account_company,\n        account_history.account_country,\n        account_history.email as account_email,\n        account_history.first_name as account_first_name,\n        account_history.is_tax_exempt as account_is_tax_exempt,\n        account_history.last_name as account_last_name,\n        account_history.account_postal_code,\n        account_history.account_region,\n        account_history.state as account_state,\n        account_history.username as account_username\n\n        \n\n\n\n,\n\n        coalesce(account_cumulatives.total_transactions, 0) as total_transactions,\n        coalesce(account_cumulatives.total_invoices, 0) as total_invoices,\n        coalesce(account_cumulatives.total_charges, 0) as total_charges,\n        coalesce(account_cumulatives.total_credits, 0) as total_credits,\n        coalesce(account_cumulatives.total_balance, 0) as total_balance,\n        coalesce(account_cumulatives.total_discounts, 0) as total_discounts,\n        coalesce(account_cumulatives.total_taxes, 0) as total_taxes,\n        coalesce(account_cumulatives.total_charge_count, 0) as total_charge_count,\n        coalesce(account_cumulatives.total_credit_count, 0) as total_credit_count,\n        coalesce(account_cumulatives.transactions_this_month, 0) as transactions_this_month,\n        coalesce(account_cumulatives.invoices_this_month, 0) as invoices_this_month,\n        coalesce(account_cumulatives.charges_this_month, 0) as charges_this_month,\n        coalesce(account_cumulatives.credits_this_month, 0) as credits_this_month,\n        coalesce(account_cumulatives.balance_this_month, 0) as balance_this_month,\n        coalesce(account_cumulatives.discounts_this_month, 0) as discounts_this_month,\n        coalesce(account_cumulatives.taxes_this_month, 0) as taxes_this_month,\n        account_cumulatives.first_charge_date,\n        account_cumulatives.most_recent_charge_date,\n        account_cumulatives.first_invoice_date,\n        account_cumulatives.most_recent_invoice_date,\n        account_next_invoice.next_invoice_due_at,\n        account_cumulatives.first_transaction_date,\n        account_cumulatives.most_recent_transaction_date\n\n    from account_history\n    left join account_cumulatives \n        on account_history.account_id = account_cumulatives.account_id\n    left join account_next_invoice\n        on account_cumulatives.account_id = account_next_invoice.account_id\n)\n\nselect * \nfrom final", "relation_name": "`dbt-package-testing`.`recurly_integrations_tests_recurly_dev`.`recurly__account_overview`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-08-13T20:04:45.390930Z", "completed_at": "2024-08-13T20:04:45.400205Z"}, {"name": "execute", "started_at": "2024-08-13T20:04:45.400744Z", "completed_at": "2024-08-13T20:04:45.400749Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.019251108169555664, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.recurly.recurly__subscription_overview", "compiled": true, "compiled_code": "with subscription_history as (\n\n    select * \n    from `dbt-package-testing`.`recurly_integrations_tests_recurly_dev`.`stg_recurly__subscription_history`\n    where is_most_recent_record\n),\n\nplan_history as (\n\n    select * \n    from `dbt-package-testing`.`recurly_integrations_tests_recurly_dev`.`stg_recurly__plan_history`\n    where is_most_recent_record\n),\n\nsubscription_enhanced as (\n\n    select \n        *,\n        coalesce(canceled_at, current_period_ended_at) as subscription_end_date,\n        row_number() over (partition by subscription_id order by current_period_started_at) - 1 as subscription_period\n        from subscription_history\n),\n\naccount_overview as (\n\n    select * \n    from `dbt-package-testing`.`recurly_integrations_tests_recurly_dev`.`recurly__account_overview`\n),\n\nplan_enhanced as (\n\n    select \n        *, \n        case when lower(interval_unit) = 'months' then interval_length * 30\n            when lower(interval_unit) = 'weeks' then interval_length * 7\n            else interval_length \n            end as interval_days\n    from plan_history\n),\n\nfinal as (\n\n    select \n        subscription_enhanced.subscription_id,\n        subscription_enhanced.updated_at,\n        to_hex(md5(cast(coalesce(cast(subscription_enhanced.subscription_id as string), '_dbt_utils_surrogate_key_null_') || '-' || coalesce(cast(subscription_enhanced.updated_at as string), '_dbt_utils_surrogate_key_null_') as string))) as subscription_key,\n        subscription_enhanced.activated_at,\n        subscription_enhanced.add_ons_total, \n        subscription_enhanced.canceled_at,\n        subscription_enhanced.current_period_ended_at,\n        subscription_enhanced.current_period_started_at,\n        subscription_enhanced.expiration_reason, \n        subscription_enhanced.expires_at,\n        subscription_enhanced.has_auto_renew,\n        subscription_enhanced.subscription_period,  \n        subscription_enhanced.state as subscription_state,\n        subscription_enhanced.subscription_end_date,\n        \n\n    datetime_diff(\n        cast(subscription_enhanced.subscription_end_date as datetime),\n        cast(subscription_enhanced.current_period_started_at as datetime),\n        day\n    )\n\n   as subscription_interval_days,\n        subscription_enhanced.subtotal, \n        subscription_enhanced.trial_ends_at,\n        subscription_enhanced.trial_started_at,\n        \n\n    datetime_diff(\n        cast(subscription_enhanced.trial_ends_at as datetime),\n        cast(subscription_enhanced.trial_started_at as datetime),\n        day\n    )\n\n   as trial_interval_days,\n        subscription_enhanced.unit_amount\n\n        \n\n\n\n,\n\n        account_overview.account_id as account_id,\n        account_overview.account_created_at,\n        account_overview.account_email,\n        account_overview.account_first_name, \n        account_overview.account_last_name, \n        account_overview.account_state as account_state,\n        plan_enhanced.code as plan_code,\n        plan_enhanced.created_at as plan_created_at,\n        plan_enhanced.deleted_at as plan_deleted_at,\n        plan_enhanced.interval_days as plan_interval_days,\n        plan_enhanced.is_tax_exempt as plan_is_tax_exempt,\n        plan_enhanced.name as plan_name,\n        plan_enhanced.state as plan_state,\n        plan_enhanced.total_billing_cycles as plan_total_billing_cycles\n    from subscription_enhanced\n    left join account_overview\n        on subscription_enhanced.account_id = account_overview.account_id\n    left join plan_enhanced\n        on subscription_enhanced.plan_id = plan_enhanced.plan_id\n)\n\nselect * \nfrom final", "relation_name": "`dbt-package-testing`.`recurly_integrations_tests_recurly_dev`.`recurly__subscription_overview`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-08-13T20:04:45.396257Z", "completed_at": "2024-08-13T20:04:45.401043Z"}, {"name": "execute", "started_at": "2024-08-13T20:04:45.402424Z", "completed_at": "2024-08-13T20:04:45.402427Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.0207979679107666, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.recurly.not_null_recurly__account_overview_account_id.55789d9c23", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect account_id\nfrom `dbt-package-testing`.`recurly_integrations_tests_recurly_dev`.`recurly__account_overview`\nwhere account_id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-08-13T20:04:45.397947Z", "completed_at": "2024-08-13T20:04:45.401612Z"}, {"name": "execute", "started_at": "2024-08-13T20:04:45.402606Z", "completed_at": "2024-08-13T20:04:45.402609Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.020872831344604492, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.recurly.unique_recurly__account_overview_account_id.ab3c32728d", "compiled": true, "compiled_code": "\n    \n    \n\nwith dbt_test__target as (\n\n  select account_id as unique_field\n  from `dbt-package-testing`.`recurly_integrations_tests_recurly_dev`.`recurly__account_overview`\n  where account_id is not null\n\n)\n\nselect\n    unique_field,\n    count(*) as n_records\n\nfrom dbt_test__target\ngroup by unique_field\nhaving count(*) > 1\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-08-13T20:04:45.404113Z", "completed_at": "2024-08-13T20:04:45.407771Z"}, {"name": "execute", "started_at": "2024-08-13T20:04:45.408412Z", "completed_at": "2024-08-13T20:04:45.408415Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.006097316741943359, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.recurly.recurly__churn_analysis", "compiled": true, "compiled_code": "with subscription_overview as (\n\n    select *\n    from `dbt-package-testing`.`recurly_integrations_tests_recurly_dev`.`recurly__subscription_overview`\n),\n\nsubscription_churn_reason as (\n\n    select \n        subscription_id,\n        activated_at,\n        account_id,\n        account_state,\n        canceled_at,\n        current_period_ended_at,\n        current_period_started_at,\n        expires_at,\n        expiration_reason,\n        has_auto_renew,\n        plan_name,\n        plan_state,\n        subscription_end_date, \n        subscription_interval_days,\n        subscription_period,\n        subscription_state,\n        subtotal,\n        unit_amount,\n        case when expires_at is null then null \n            when account_state != 'active' then 'account closed'\n            when lower(expiration_reason) = 'canceled' then 'canceled'\n            when lower(expiration_reason) = 'nonpayment_gift' then 'gift ended'\n            when lower(expiration_reason) = 'nonpayment' then 'non-payment'\n            when lower(expiration_reason) = 'non renewing' then 'non-renewing'\n            when lower(expiration_reason) = 'tax_location_invalid' then 'tax location invalid' \n            when lower(expiration_reason) = 'nonpayment_trial' then 'trial ended'\n            else null \n        end as churn_reason\n    from subscription_overview\n),\n\n\nfinal as\n(\n    select \n        *,\n        case when churn_reason is null then null\n            when churn_reason in ('non-payment', 'tax location invalid') then 'involuntary'\n            else 'voluntary'\n            end as churn_reason_type\n    from subscription_churn_reason\n)\n\nselect * \nfrom final", "relation_name": "`dbt-package-testing`.`recurly_integrations_tests_recurly_dev`.`recurly__churn_analysis`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-08-13T20:04:45.405843Z", "completed_at": "2024-08-13T20:04:45.407942Z"}, {"name": "execute", "started_at": "2024-08-13T20:04:45.408586Z", "completed_at": "2024-08-13T20:04:45.408588Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.003826141357421875, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.recurly.unique_recurly__subscription_overview_subscription_key.f2dc9d95af", "compiled": true, "compiled_code": "\n    \n    \n\nwith dbt_test__target as (\n\n  select subscription_key as unique_field\n  from `dbt-package-testing`.`recurly_integrations_tests_recurly_dev`.`recurly__subscription_overview`\n  where subscription_key is not null\n\n)\n\nselect\n    unique_field,\n    count(*) as n_records\n\nfrom dbt_test__target\ngroup by unique_field\nhaving count(*) > 1\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-08-13T20:04:45.412337Z", "completed_at": "2024-08-13T20:04:45.414153Z"}, {"name": "execute", "started_at": "2024-08-13T20:04:45.414478Z", "completed_at": "2024-08-13T20:04:45.414481Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.004868030548095703, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.recurly.unique_recurly__churn_analysis_subscription_id.701f6b0aaf", "compiled": true, "compiled_code": "\n    \n    \n\nwith dbt_test__target as (\n\n  select subscription_id as unique_field\n  from `dbt-package-testing`.`recurly_integrations_tests_recurly_dev`.`recurly__churn_analysis`\n  where subscription_id is not null\n\n)\n\nselect\n    unique_field,\n    count(*) as n_records\n\nfrom dbt_test__target\ngroup by unique_field\nhaving count(*) > 1\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-08-13T20:04:45.410623Z", "completed_at": "2024-08-13T20:04:45.414642Z"}, {"name": "execute", "started_at": "2024-08-13T20:04:45.415336Z", "completed_at": "2024-08-13T20:04:45.415339Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.0058209896087646484, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.recurly.not_null_recurly__churn_analysis_subscription_id.9f21047592", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect subscription_id\nfrom `dbt-package-testing`.`recurly_integrations_tests_recurly_dev`.`recurly__churn_analysis`\nwhere subscription_id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-08-13T20:04:45.383481Z", "completed_at": "2024-08-13T20:04:50.467593Z"}, {"name": "execute", "started_at": "2024-08-13T20:04:50.467981Z", "completed_at": "2024-08-13T20:04:50.467986Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 5.086460113525391, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.recurly.int_recurly__transactions_date_spine", "compiled": true, "compiled_code": "with spine as (\n\n    \n    \n    \n    \n        \n            \n\n        \n\n    \n\n    \n    \n\n    \n\n     \n    \n        \n    \n        \n\n    \n    \n\n    \n\n\n\n\n\nwith rawdata as (\n\n    \n\n    \n\n    with p as (\n        select 0 as generated_number union all select 1\n    ), unioned as (\n\n    select\n\n    \n    p0.generated_number * power(2, 0)\n     + \n    \n    p1.generated_number * power(2, 1)\n     + \n    \n    p2.generated_number * power(2, 2)\n     + \n    \n    p3.generated_number * power(2, 3)\n     + \n    \n    p4.generated_number * power(2, 4)\n     + \n    \n    p5.generated_number * power(2, 5)\n     + \n    \n    p6.generated_number * power(2, 6)\n     + \n    \n    p7.generated_number * power(2, 7)\n     + \n    \n    p8.generated_number * power(2, 8)\n     + \n    \n    p9.generated_number * power(2, 9)\n     + \n    \n    p10.generated_number * power(2, 10)\n     + \n    \n    p11.generated_number * power(2, 11)\n    \n    \n    + 1\n    as generated_number\n\n    from\n\n    \n    p as p0\n     cross join \n    \n    p as p1\n     cross join \n    \n    p as p2\n     cross join \n    \n    p as p3\n     cross join \n    \n    p as p4\n     cross join \n    \n    p as p5\n     cross join \n    \n    p as p6\n     cross join \n    \n    p as p7\n     cross join \n    \n    p as p8\n     cross join \n    \n    p as p9\n     cross join \n    \n    p as p10\n     cross join \n    \n    p as p11\n    \n    \n\n    )\n\n    select *\n    from unioned\n    where generated_number <= 3472\n    order by generated_number\n\n\n\n),\n\nall_periods as (\n\n    select (\n        \n\n        datetime_add(\n            cast( '2015-02-11' as datetime),\n        interval row_number() over (order by 1) - 1 day\n        )\n\n\n    ) as date_day\n    from rawdata\n\n),\n\nfiltered as (\n\n    select *\n    from all_periods\n    where date_day <= \n\n        datetime_add(\n            cast( '2024-08-13' as datetime),\n        interval 1 day\n        )\n\n\n\n)\n\nselect * from filtered\n\n\n),\n\nbalance_transactions as (\n    \n    select *\n    from `dbt-package-testing`.`recurly_integrations_tests_recurly_dev`.`recurly__balance_transactions`\n),\n\naccount_overview as (\n\n    select *\n    from `dbt-package-testing`.`recurly_integrations_tests_recurly_dev`.`recurly__account_overview`\n),\n\ndate_spine as (\n\n    select\n        cast(timestamp_trunc(\n        cast(date_day as timestamp),\n        day\n    ) as date) as date_day, \n        cast(timestamp_trunc(\n        cast(date_day as timestamp),\n        week\n    ) as date) as date_week, \n        cast(timestamp_trunc(\n        cast(date_day as timestamp),\n        month\n    ) as date) as date_month,\n        cast(timestamp_trunc(\n        cast(date_day as timestamp),\n        year\n    ) as date) as date_year,  \n        row_number() over (order by cast(timestamp_trunc(\n        cast(date_day as timestamp),\n        day\n    ) as date)) as date_index\n    from spine\n),\n\nfinal as (\n\n    select distinct\n        account_overview.account_id,\n        date_spine.date_day,\n        date_spine.date_week,\n        date_spine.date_month,\n        date_spine.date_year,\n        date_spine.date_index\n    from account_overview \n    cross join date_spine\n)\n\nselect * \nfrom final", "relation_name": "`dbt-package-testing`.`recurly_integrations_tests_recurly_dev`.`int_recurly__transactions_date_spine`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-08-13T20:04:50.469370Z", "completed_at": "2024-08-13T20:04:50.472769Z"}, {"name": "execute", "started_at": "2024-08-13T20:04:50.473142Z", "completed_at": "2024-08-13T20:04:50.473146Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.004588127136230469, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.recurly.int_recurly__account_rolling_totals", "compiled": true, "compiled_code": "\n\nwith balance_transaction_periods as (\n\n    select * \n    from `dbt-package-testing`.`recurly_integrations_tests_recurly_dev`.`int_recurly__transactions_date_spine`\n),\n\naccount_balances as (\n\n    select *\n    from `dbt-package-testing`.`recurly_integrations_tests_recurly_dev`.`int_recurly__transactions_grouped`\n), \n\naccount_rolling_overview as (\n    \n    select\n        *,\n        sum(daily_balance) over (partition by account_id order by date_day, account_id rows unbounded preceding) as rolling_account_balance,\n        sum(daily_invoices) over (partition by account_id order by date_day, account_id rows unbounded preceding) as rolling_invoices,\n        sum(daily_transactions) over (partition by account_id order by date_day, account_id rows unbounded preceding) as rolling_transactions,\n        sum(daily_charges) over (partition by account_id order by date_day, account_id rows unbounded preceding) as rolling_charge_balance,  \n        sum(daily_credits) over (partition by account_id order by date_day, account_id rows unbounded preceding) as rolling_credit_balance,\n        sum(daily_discounts) over (partition by account_id order by date_day, account_id rows unbounded preceding) as rolling_discount_balance,  \n        sum(daily_taxes) over (partition by account_id order by date_day, account_id rows unbounded preceding) as rolling_tax_balance,\n        sum(daily_charge_count) over (partition by account_id order by date_day, account_id rows unbounded preceding) as rolling_charges,  \n        sum(daily_credit_count) over (partition by account_id order by date_day, account_id rows unbounded preceding) as rolling_credits\n    from account_balances\n),\n\nfinal as (\n    \n    select \n        coalesce(account_rolling_overview.account_id, balance_transaction_periods.account_id) as account_id,\n        coalesce(account_rolling_overview.date_day, balance_transaction_periods.date_day) as date_day, \n        coalesce(account_rolling_overview.date_week, balance_transaction_periods.date_week) as date_week,\n        coalesce(account_rolling_overview.date_month, balance_transaction_periods.date_month) as date_month, \n        coalesce(account_rolling_overview.date_year, balance_transaction_periods.date_year) as date_year, \n        account_rolling_overview.daily_transactions,\n        account_rolling_overview.daily_balance,\n        account_rolling_overview.daily_invoices,\n        account_rolling_overview.daily_charges,\n        account_rolling_overview.daily_credits,\n        account_rolling_overview.daily_discounts,\n        account_rolling_overview.daily_taxes,\n        account_rolling_overview.daily_charge_count,\n        account_rolling_overview.daily_credit_count,\n        \n        case when account_rolling_overview.rolling_account_balance is null and date_index = 1\n            then 0\n            else account_rolling_overview.rolling_account_balance\n            end as rolling_account_balance,\n        \n        case when account_rolling_overview.rolling_invoices is null and date_index = 1\n            then 0\n            else account_rolling_overview.rolling_invoices\n            end as rolling_invoices,\n        \n        case when account_rolling_overview.rolling_transactions is null and date_index = 1\n            then 0\n            else account_rolling_overview.rolling_transactions\n            end as rolling_transactions,\n        \n        case when account_rolling_overview.rolling_charge_balance is null and date_index = 1\n            then 0\n            else account_rolling_overview.rolling_charge_balance\n            end as rolling_charge_balance,\n        \n        case when account_rolling_overview.rolling_credit_balance is null and date_index = 1\n            then 0\n            else account_rolling_overview.rolling_credit_balance\n            end as rolling_credit_balance,\n        \n        case when account_rolling_overview.rolling_discount_balance is null and date_index = 1\n            then 0\n            else account_rolling_overview.rolling_discount_balance\n            end as rolling_discount_balance,\n        \n        case when account_rolling_overview.rolling_tax_balance is null and date_index = 1\n            then 0\n            else account_rolling_overview.rolling_tax_balance\n            end as rolling_tax_balance,\n        \n        case when account_rolling_overview.rolling_charges is null and date_index = 1\n            then 0\n            else account_rolling_overview.rolling_charges\n            end as rolling_charges,\n        \n        case when account_rolling_overview.rolling_credits is null and date_index = 1\n            then 0\n            else account_rolling_overview.rolling_credits\n            end as rolling_credits,\n        \n        balance_transaction_periods.date_index\n    from balance_transaction_periods \n    left join account_rolling_overview\n        on account_rolling_overview.account_id = balance_transaction_periods.account_id \n        and account_rolling_overview.date_day = balance_transaction_periods.date_day\n        and account_rolling_overview.date_week = balance_transaction_periods.date_week\n        and account_rolling_overview.date_month = balance_transaction_periods.date_month\n        and account_rolling_overview.date_year = balance_transaction_periods.date_year\n)\n\nselect * \nfrom final", "relation_name": "`dbt-package-testing`.`recurly_integrations_tests_recurly_dev`.`int_recurly__account_rolling_totals`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-08-13T20:04:50.474529Z", "completed_at": "2024-08-13T20:04:50.476775Z"}, {"name": "execute", "started_at": "2024-08-13T20:04:50.477109Z", "completed_at": "2024-08-13T20:04:50.477113Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.003340005874633789, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.recurly.int_recurly__account_partitions", "compiled": true, "compiled_code": "\n\nwith account_rolling_totals as (\n\n    select * \n    from `dbt-package-testing`.`recurly_integrations_tests_recurly_dev`.`int_recurly__account_rolling_totals`\n),\n\n\nfinal as (\n\n    select\n        *,\n        \n        sum(case when rolling_account_balance is null  \n            then 0  \n            else 1  \n                end) over (order by account_id, date_day rows unbounded preceding) as rolling_account_balance_partition,\n        sum(case when rolling_invoices is null  \n            then 0  \n            else 1  \n                end) over (order by account_id, date_day rows unbounded preceding) as rolling_invoices_partition,\n        sum(case when rolling_transactions is null  \n            then 0  \n            else 1  \n                end) over (order by account_id, date_day rows unbounded preceding) as rolling_transactions_partition,\n        sum(case when rolling_charge_balance is null  \n            then 0  \n            else 1  \n                end) over (order by account_id, date_day rows unbounded preceding) as rolling_charge_balance_partition,\n        sum(case when rolling_credit_balance is null  \n            then 0  \n            else 1  \n                end) over (order by account_id, date_day rows unbounded preceding) as rolling_credit_balance_partition,\n        sum(case when rolling_discount_balance is null  \n            then 0  \n            else 1  \n                end) over (order by account_id, date_day rows unbounded preceding) as rolling_discount_balance_partition,\n        sum(case when rolling_tax_balance is null  \n            then 0  \n            else 1  \n                end) over (order by account_id, date_day rows unbounded preceding) as rolling_tax_balance_partition,\n        sum(case when rolling_charges is null  \n            then 0  \n            else 1  \n                end) over (order by account_id, date_day rows unbounded preceding) as rolling_charges_partition,\n        sum(case when rolling_credits is null  \n            then 0  \n            else 1  \n                end) over (order by account_id, date_day rows unbounded preceding) as rolling_credits_partition                  \n    from account_rolling_totals\n)\n\nselect * \nfrom final", "relation_name": "`dbt-package-testing`.`recurly_integrations_tests_recurly_dev`.`int_recurly__account_partitions`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-08-13T20:04:50.478322Z", "completed_at": "2024-08-13T20:04:50.481240Z"}, {"name": "execute", "started_at": "2024-08-13T20:04:50.481585Z", "completed_at": "2024-08-13T20:04:50.481588Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.0039980411529541016, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.recurly.int_recurly__account_running_totals", "compiled": true, "compiled_code": "\n\nwith account_partitions as (\n\n    select * \n    from `dbt-package-testing`.`recurly_integrations_tests_recurly_dev`.`int_recurly__account_partitions`\n),\n\naccount_overview as (\n\n    select * \n    from `dbt-package-testing`.`recurly_integrations_tests_recurly_dev`.`recurly__account_overview`\n),\n\nfinal as (\n\n    select\n        account_partitions.account_id,\n        account_overview.account_created_at,\n        account_overview.account_city,\n        account_overview.account_company,\n        account_overview.account_country,\n        account_overview.account_code,\n        account_overview.account_email,\n        account_overview.account_first_name,\n        account_overview.account_last_name,\n        account_overview.account_is_tax_exempt,\n        account_overview.account_postal_code,\n        account_overview.account_region,\n        account_overview.account_state,\n        account_overview.account_username\n\n        \n\n\n\n,      \n        to_hex(md5(cast(coalesce(cast(account_partitions.account_id as string), '_dbt_utils_surrogate_key_null_') || '-' || coalesce(cast(date_day as string), '_dbt_utils_surrogate_key_null_') as string))) as account_daily_id,\n\n        date_day,        \n        date_week, \n        date_month, \n        date_year,  \n        date_index, \n        coalesce(daily_transactions,0) as daily_transaction_count,\n        coalesce(daily_balance,0) as daily_net_change,\n        coalesce(daily_invoices,0) as daily_invoice_count,\n        coalesce(daily_charges,0) as daily_charges,\n        coalesce(daily_credits,0) as daily_credits,\n        coalesce(daily_discounts,0) as daily_discounts,\n        coalesce(daily_taxes,0) as daily_taxes,\n        coalesce(daily_charge_count,0) as daily_charge_count,\n        coalesce(daily_credit_count,0) as daily_credit_count,\n        \n        coalesce(rolling_account_balance,   \n            first_value(rolling_account_balance) over (partition by rolling_account_balance_partition order by date_day rows unbounded preceding)) as rolling_account_balance,\n        coalesce(rolling_invoices,   \n            first_value(rolling_invoices) over (partition by rolling_invoices_partition order by date_day rows unbounded preceding)) as rolling_invoices,\n        coalesce(rolling_transactions,   \n            first_value(rolling_transactions) over (partition by rolling_transactions_partition order by date_day rows unbounded preceding)) as rolling_transactions,\n        coalesce(rolling_charge_balance,   \n            first_value(rolling_charge_balance) over (partition by rolling_charge_balance_partition order by date_day rows unbounded preceding)) as rolling_charge_balance,\n        coalesce(rolling_credit_balance,   \n            first_value(rolling_credit_balance) over (partition by rolling_credit_balance_partition order by date_day rows unbounded preceding)) as rolling_credit_balance,\n        coalesce(rolling_discount_balance,   \n            first_value(rolling_discount_balance) over (partition by rolling_discount_balance_partition order by date_day rows unbounded preceding)) as rolling_discount_balance,\n        coalesce(rolling_tax_balance,   \n            first_value(rolling_tax_balance) over (partition by rolling_tax_balance_partition order by date_day rows unbounded preceding)) as rolling_tax_balance,\n        coalesce(rolling_charges,   \n            first_value(rolling_charges) over (partition by rolling_charges_partition order by date_day rows unbounded preceding)) as rolling_charges,\n        coalesce(rolling_credits,   \n            first_value(rolling_credits) over (partition by rolling_credits_partition order by date_day rows unbounded preceding)) as rolling_credits\n    from account_partitions\n    left join account_overview\n        on account_partitions.account_id = account_overview.account_id\n)    \n\nselect *\nfrom final", "relation_name": "`dbt-package-testing`.`recurly_integrations_tests_recurly_dev`.`int_recurly__account_running_totals`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-08-13T20:04:50.482856Z", "completed_at": "2024-08-13T20:04:50.484486Z"}, {"name": "execute", "started_at": "2024-08-13T20:04:50.484948Z", "completed_at": "2024-08-13T20:04:50.484953Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.002877950668334961, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.recurly.recurly__account_daily_overview", "compiled": true, "compiled_code": "with final as (\n\n    select * \n    from `dbt-package-testing`.`recurly_integrations_tests_recurly_dev`.`int_recurly__account_running_totals`\n) \n\nselect *\nfrom final", "relation_name": "`dbt-package-testing`.`recurly_integrations_tests_recurly_dev`.`recurly__account_daily_overview`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-08-13T20:04:50.486885Z", "completed_at": "2024-08-13T20:04:50.490882Z"}, {"name": "execute", "started_at": "2024-08-13T20:04:50.491581Z", "completed_at": "2024-08-13T20:04:50.491586Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.0060694217681884766, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.recurly.not_null_recurly__account_daily_overview_account_daily_id.560ba5d6ac", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect account_daily_id\nfrom `dbt-package-testing`.`recurly_integrations_tests_recurly_dev`.`recurly__account_daily_overview`\nwhere account_daily_id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-08-13T20:04:50.488934Z", "completed_at": "2024-08-13T20:04:50.491074Z"}, {"name": "execute", "started_at": "2024-08-13T20:04:50.491768Z", "completed_at": "2024-08-13T20:04:50.491772Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.006145954132080078, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.recurly.unique_recurly__account_daily_overview_account_daily_id.3e059c878a", "compiled": true, "compiled_code": "\n    \n    \n\nwith dbt_test__target as (\n\n  select account_daily_id as unique_field\n  from `dbt-package-testing`.`recurly_integrations_tests_recurly_dev`.`recurly__account_daily_overview`\n  where account_daily_id is not null\n\n)\n\nselect\n    unique_field,\n    count(*) as n_records\n\nfrom dbt_test__target\ngroup by unique_field\nhaving count(*) > 1\n\n\n", "relation_name": null}], "elapsed_time": 8.623075723648071, "args": {"warn_error_options": {"include": [], "exclude": []}, "which": "generate", "cache_selected_only": false, "compile": true, "partial_parse": true, "log_file_max_bytes": 10485760, "print": true, "log_path": "/Users/renee/Documents/dbt/recurly/dbt_recurly/integration_tests/logs", "log_level": "info", "profiles_dir": "/Users/renee/.dbt", "vars": {}, "partial_parse_file_diff": true, "strict_mode": false, "printer_width": 80, "static": false, "exclude": [], "macro_debugging": false, "show_resource_report": false, "static_parser": true, "log_format": "default", "send_anonymous_usage_stats": true, "populate_cache": true, "quiet": false, "select": [], "write_json": true, "log_level_file": "debug", "empty_catalog": false, "log_format_file": "debug", "invocation_command": "dbt docs generate", "indirect_selection": "eager", "project_dir": "/Users/renee/Documents/dbt/recurly/dbt_recurly/integration_tests", "enable_legacy_logger": false, "version_check": true, "introspect": true, "use_colors": true, "use_colors_file": true, "defer": false, "favor_state": false}}